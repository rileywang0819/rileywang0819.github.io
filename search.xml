<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>教程：使用Github和Hexo搭建个人博客</title>
    <url>/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>在这篇博客里，我详细记录了自己使用 <code>Github + Hexo</code> 搭建个人博客的全过程，以及自己遇到的问题的解决方案，希望可以帮到正在阅读该博文的你。😀</p>
<p>如果你有任何问题，欢迎在留言板里写下你的问题。</p>
<span id="more"></span>
<h2 id="开始之前">开始之前</h2>
<p>在开始搭建博客之前，请先确认你是否完成了以下的准备工作：</p>
<ul>
<li>拥有<strong>Github</strong>账号；</li>
<li>安装了<strong>node.js、npm</strong>;</li>
<li>安装了<strong>git</strong> (git for macOS/Windows/Linux/Unix);</li>
</ul>
<h3 id="github">1. Github</h3>
<p>进入<a href="https://github.com/">Github官网</a>注册，请记住你注册时使用的账号和邮箱。</p>
<h3 id="node.js-npm">2. node.js &amp; npm</h3>
<p>进入<a href="https://nodejs.org/en/download/">Node官网</a>下载与你正在使用的操作系统相对应的版本，并安装。安装成功后，打开 <code>terminal(macOS/Linux)、CMD/Powershell(Windows)等</code>, 输入以下命令检查是否安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node --version  <span class="comment"># 查看node版本号</span></span><br><span class="line">$ npm --version  <span class="comment"># 查看npm版本号</span></span><br></pre></td></tr></table></figure>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/1.JPG" class="">
<p>❗ 如果是Windows系统，请务必将路径正确添加到 <code>PATH</code> 环境变量中。</p>
<h3 id="git">3. Git</h3>
<p>进入<a href="https://git-scm.com/">Git官网</a>下载、安装最新版本的Git。</p>
<p>如果你对安装Git感到不安，可以参考下面的链接。</p>
<ul>
<li>Linux: <a href="https://sp21.datastructur.es/materials/lab/lab1setup/linux.html">Link</a></li>
<li>maxOS: <a href="https://sp21.datastructur.es/materials/lab/lab1setup/mac.html">Link</a></li>
<li>Windows：<a href="https://sp21.datastructur.es/materials/lab/lab1setup/windows.html#b-install-git">Link</a></li>
</ul>
<hr />
<p>PS: 如果你使用Windows系统，强烈建议你安装 <code>Windows Terminal</code> , 安装方法可以参考上述Windows链接的Part C.</p>
<hr />
<p>在终端输入 <code>git --version</code> 检查是否安装成功。</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/2.JPG" class="">
<ul>
<li>可选操作(非必须)：</li>
</ul>
<p>在终端输入如下命令来设置用户名和邮箱。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;user_name&quot;</span> <span class="comment"># user_name填入GitHub用户名</span></span><br><span class="line"></span><br><span class="line">$ git config --global user.email <span class="string">&quot;user_email&quot;</span> <span class="comment"># user_email填入GitHub注册的邮箱</span></span><br></pre></td></tr></table></figure>
<p>查看已设置的用户名和邮箱：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line"></span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure>
<h2 id="搭建github博客">搭建Github博客</h2>
<h3 id="创建仓库">1. 创建仓库</h3>
<p>登录Github，新创建一个仓库。仓库名为：<code>username.github.io</code> ，其他的为默认选项即可。</p>
<p>❗ 一定是username而不是name。</p>
<h3 id="配置ssh-key">2. 配置SSH key</h3>
<p>打开 terminal/Git Bash等, 输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;user.email&quot;</span> <span class="comment"># user.email为GitHub上注册的邮箱</span></span><br></pre></td></tr></table></figure>
<p>默认不需要设置密码，连续按回车键即可。结束后，打开用户主目录查看是否成功生成了<strong>ssh-key</strong>。</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">用户主目录所在位置：</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> macOS/Linux: ~/.ssh</span><br><span class="line"><span class="bullet">-</span> Windows: C:\Users\<span class="xml"><span class="tag">&lt;<span class="name">XX</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/3.JPG" class="">
<p>进入 <code>.ssh</code> 文件夹，你会看到上述操作为我们生成了一个key，包括一个名为 <code>id_rsa.pub</code> 的公钥，和一个名为 <code>id_rsa</code> 的私钥。(⚠️注意：私钥绝不可以泄露，而公钥可以放心告诉别人。)</p>
<p>打开<a href="https://github.com/settings/keys">SSH and GPG keys</a>，点击 <code>new SSH Key</code> ，你将会看到如下窗口：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/4.jpg" class="">
<p>其中 <code>Title</code> 为标题，可以随意填写。将刚才生成的公钥 <code>id_rsa.pub</code> 中的内容复制到Key窗口中，最后点击 <code>Add SSH key</code>。</p>
<p>在终端输入如下命令以检查Github公钥设置是否成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># 如果你看到类似如下的信息，则说明设置成功。</span></span><br><span class="line"></span><br><span class="line">Hi XXX! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>
<p><strong>补充</strong>：关于配置SSH的用途，可以参考<a href="https://segmentfault.com/a/1190000008509620">这篇文章</a></p>
<h2 id="使用hexo博客框架">使用Hexo博客框架</h2>
<h3 id="什么是hexo">1. 什么是Hexo</h3>
<p><code>Hexo</code> 是一个简单、快速、强大的基于 <code>Github Pages</code> 的博客框架，支持 <code>Markdown</code> 格式，有众多优秀插件和主题。</p>
<p><strong>链接：</strong><a href="https://hexo.io/zh-cn/docs/">官方文档</a></p>
<h3 id="为什么要用hexo">2. 为什么要用Hexo</h3>
<p>由于 <code>Github Pages</code> 存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以 <code>Hexo</code> 所做的就是将这些 <code>.md</code> 文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到 <code>GitHub</code> 。</p>
<h3 id="安装与配置">3. 安装与配置</h3>
<p>说明：我使用的是Windows操作系统，所有的命令我都是在 <code>Windows Terminal</code> 中的 <code>bash shell</code> 中完成的，没有遇到任何问题。</p>
<p>根据网上的经验，如果你使用 <code>git bash</code> , 那么在hexo初始化的过程中你可能会遇到 <code>node_modules</code> 文件夹无法生成的问题，可以配合 <code>cmd</code> 解决该问题(后面会说明)。</p>
<h4 id="安装与初始化">1. 安装与初始化</h4>
<p>输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli <span class="comment"># 该命令完成hexo的安装</span></span><br></pre></td></tr></table></figure>
<p>安装完成后，请根据个人喜好在计算机内创建一个空文件夹（不限制名称），用于存放博客内的所有内容和素材。</p>
<p>使用命令行进入刚才创建的文件夹内，输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init <span class="comment"># 该命令完成hexo在本地博客目录的初始化</span></span><br></pre></td></tr></table></figure>
<p>完成后请检查文件夹内的内容，如下图：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/5.jpg" class="">
<hr />
<p>如果你使用的是 <code>git bash</code> ，并且遇到了 <code>node_modules</code> 文件夹无法生成的问题，可以参考以下解决方案。</p>
<p>❗ 注意：因为我并没有遇到这个问题，所以无法保证该解决方案一定有效。仅供参考。</p>
<p>产生该问题的原因为，在自己的博客文件夹中 <code>.gitignore</code> 文件中添加了 <code>node_modules/</code> ，导致更新的时候，这个文件夹被忽略，没有被更新上去。</p>
<p>解决方案：</p>
<ol type="1">
<li>cmd进入博客当前文件夹路径</li>
<li>执行 npm install</li>
<li>执行 hexo server</li>
</ol>
<hr />
<h4 id="生成静态文件">2. 生成静态文件</h4>
<p>在终端输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g <span class="comment"># 生成静态文件</span></span><br></pre></td></tr></table></figure>
<p>执行以上命令之后，Hexo 就会在 <code>public</code> 文件夹生成相关 <code>HTML</code> 文件，这些文件在之后会被提交到 GitHub 上 <code>username.github.io</code> 的仓库中。</p>
<h4 id="本地预览">3. 本地预览</h4>
<p>输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s <span class="comment"># 开启本地预览</span></span><br></pre></td></tr></table></figure>
<p>本地预览服务开启后，打开浏览器访问 <code>http://localhost:4000</code> 或直接点击终端的链接即可。你应该可以看到如下的页面：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/6.jpg" class="">
<p>通过本地预览，你可以实时查看博客的编辑情况，等博客完成后再部署到 <code>GitHub</code> 上。</p>
<h3 id="上传到github">4. 上传到Github</h3>
<h4 id="配置站点配置文件">1. 配置站点配置文件</h4>
<p>hexo 有2种 <code>_config.yml</code> 文件，一个是根目录下的全局的 <code>_config.yml</code> ,在博客文件夹的根目录下；另一个是各个主题 <code>theme</code> 下的 <code>_config.yml</code> 。前者被称为<strong>站点配置文件</strong>， 后者被称为<strong>主题配置文件</strong>。</p>
<p>打开(推荐用 <code>VS Code</code> )根目录下站点配置文件 <code>_config.yml</code> ，配置有关 <code>deploy</code> 的部分：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/7.JPG" class="">
<h4 id="安装部署插件">2. 安装部署插件</h4>
<p>在终端输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save <span class="comment"># 安装部署插件</span></span><br></pre></td></tr></table></figure>
<p>如果不进行上述操作，直接使用 <code>hexo d</code> 部署到 <code>GitHub</code>，将会报错。</p>
<h4 id="部署到-github">3. 部署到 GitHub</h4>
<p>输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>PS: 对于Windows用户，不要在 <code>cmd</code> 中输入该命令。请使用 <code>git bash</code> or <code>bash shell</code> ，否则会提示 <code>Permission denied (publickey)</code> 。</p>
<p>部署成功后，在浏览器输入 <code>https://&lt;username&gt;.github.io/</code> ，如果出现下图，则表示部署成功。</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/8.jpg" class="">
<p>到此，我们就完成了博客的搭建工作，剩下的就是学习如何写博客，如何增添你想要的功能，以及如何美化博客。你可以自由探索，也可以参考我使用的方案。</p>
<h2 id="hexo博客故障记录及美化方案持续更新">Hexo博客故障记录及美化方案（持续更新）</h2>
<h3 id="hexo常用命令">Hexo常用命令</h3>
<ol type="1">
<li>hexo new “postName” # 新建文章</li>
<li>hexo clean # 清除缓存</li>
<li>hexo generate # 生成静态页面至 public 目录</li>
<li>hexo server # 开启预览访问端口（默认端口 4000，’ctrl + c’关闭 server）</li>
<li>hexo deploy # 部署到 GitHub</li>
<li>hexo help # 查看帮助</li>
<li>hexo version # 查看 Hexo 的版本</li>
<li>hexo s -g # 生成并本地预览</li>
<li>hexo d -g # 生成并上传</li>
</ol>
<p>PS: Hexo支持缩写命令，即： - hexo n == hexo new - hexo g == hexo generate - hexo s == hexo server - hexo d == hexo deploy</p>
<h3 id="更改主题">更改主题</h3>
<p>如果你不想使用默认主题，你可以自由探索其他的Hexo主题。</p>
<blockquote>
<p><a href="https://hexo.io/themes/">官方主题</a> <a href="https://www.zhihu.com/question/24422335">知乎</a> <a href="https://github.com/hexojs/hexo/wiki/Themes">Github</a></p>
</blockquote>
<p>这里以NexT<a href="http://theme-next.iissnan.com/">(Doc)</a> 主题为例，说明一下更改主题的方法。</p>
<ul>
<li>下载主题：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码：</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<ul>
<li>启用主题：</li>
</ul>
<p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件(根目录下的 <code>_config.yml</code>)， 找到 theme 字段，并将其值更改为 next。</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/9.jpg" class="">
<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。首先启动 Hexo 本地站点，并开启调试模式（即加上 --debug），整个命令是 <code>hexo s --debug</code>。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p>
<blockquote>
<p>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</p>
</blockquote>
<p>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse。</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/10.png" class="">
<p><strong>TroubleShooting:</strong> 执行 <code>hexo s</code> 时，<a href="https://github.com/iissnan/hexo-theme-next/issues/2253">location:4000显示不对的故障</a></p>
<p>NexT主题有4中Scheme。如果你想要更换Scheme，打开 主题配置文件(theme 文件夹 -&gt; NexT文件夹 -&gt; <code>_config.yml</code>), 修改Scheme：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/11.JPG" class="">
<h3 id="配置站点信息">配置站点信息</h3>
<p>打开根目录下站点配置文件 <code>_config.yml</code> ，你可以设置站点的一些基本信息：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/12.JPG" class="">
<ul>
<li>title：网站标题</li>
<li>subtitle：网站副标题</li>
<li>description：网站描述</li>
<li>keywords：关键字</li>
<li>author：作者</li>
<li>language：网站使用的语言（注意：一定要设置为主体能够识别的语言，否则会出现乱码）
<ul>
<li>你可以在 &quot;&quot; 中找到主题支持的语言</li>
</ul></li>
<li>timezone：网站时区。Hexo 默认使用您电脑的时区</li>
</ul>
<h3 id="创建博文">创建博文</h3>
<p>🦝 Hexo的博文使用Markdown语言。如果你从来没用过，可以参考教程：<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 菜鸟教程</a> or <a href="https://www.appinn.com/markdown/#%E4%BB%A3%E7%A0%81">Markdown语法说明(中文版)</a></p>
<p>输入如下命令创建博文：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&#x27;name of the blog&#x27;</span></span><br></pre></td></tr></table></figure>
<p>Hexo会在 <code>source\_posts</code> 下生成相关 <code>.md</code> 文件，每一篇博客对应一个 <code>.md</code> 文件，直接编辑博文对应的文件即可。</p>
<p>如果你想要更改博文的模板，打开 <code>scaffolds</code> 文件夹，你可以看到3个默认的模板 <code>draft.md</code> , <code>page.md</code> 和 <code>post.md</code> ，除此之外，你还可以创建自己定制的模板。</p>
<h3 id="杂七杂八">杂七杂八</h3>
<p>Q1：Hexo更改主题后远程网站不更新？</p>
<p>A：更改主题后，先执行 <code>hexo clean</code>，再执行 <code>hexo g</code> 和 <code>hexo d</code>。如果仍然没有变化，可能是浏览器缓存的原因。按 F12 或者鼠标右键打开 <code>检查</code> , 选择 Network 之后选中 <code>Disable cache</code> .</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/13.JPG" class="">
<hr />
<p>Q2: 如何在博文中插入图片、视频？</p>
<p>A：可以参考<a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/">这篇博文</a>。因为我在写博客的时候经常需要插入很多图片和视频，所以我采取为每篇博文建立自己目录的方法。打开站点配置文 <code>_config.yml</code> ，修改 <code>post_asset_folder</code> 为 <code>true</code> 并保存退出。</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/14.JPG" class="">
<p>之后每次创建博文的时候会同时生成同名的文件夹，你可以将各种资源（图片、音频等）放到这个文件夹里。在博文中引用的时候，使用以下的语法即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入图片: &#123;% asset_img &lt;image name&gt; &lt;title&gt; %&#125;</span><br><span class="line"></span><br><span class="line">插入视频：</span><br><span class="line">    &lt;video src=&#x27;vedio source&#x27; </span><br><span class="line">       type=&#x27;video/mp4&#x27; </span><br><span class="line">       controls=&#x27;controls&#x27;  </span><br><span class="line">       preload=&quot;auto&quot;</span><br><span class="line">       width=&#x27;100%&#x27; </span><br><span class="line">       height=&#x27;100%&#x27;&gt;</span><br><span class="line">    &lt;/video&gt;</span><br><span class="line"></span><br><span class="line">部分参数：</span><br><span class="line">- autoplay 则视频在就绪后马上播放。</span><br><span class="line">- controls 用户显示控件，比如播放按钮。</span><br><span class="line">- width 频播放器的宽度。</span><br><span class="line">- height 设置视频播放器的高度</span><br><span class="line">- loop 文件完成播放后再次开始播放。 loop=&quot;loop&quot;</span><br><span class="line">- preload 视频在页面加载时进行加载，并预备播放 preload=&quot;auto&quot;</span><br><span class="line">- src 要播放的视频的 URL。</span><br></pre></td></tr></table></figure>
<hr />
<p>Q3: 博客主页文章为全文显示，好丑，怎么办？</p>
<p>A：你可以参考<a href="https://jiangding1990.github.io/2017/04/25/Hexo%E4%BD%BF%E7%94%A8NexT%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E6%96%B9%E6%B3%95/">这篇博文</a>解决。 我用的是第一种方法，即在博文中使用 <code>&lt;!--more--&gt;</code> 手动截断。</p>
<hr />
<p>Q4. 想给博文设置权限？</p>
<p>A：打开主题配置文件，声明博文权限：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/15.JPG" class="">
<hr />
<p>Q5. 分页显示有问题？</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/16.JPG" class="">
<p>A：参考<a href="https://github.com/hexojs/hexo/issues/3794">该问题下的讨论</a></p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/17.JPG" class="">
<hr />
<p>Q6. NexT主题下，中文博客目录失效。</p>
<p>A：点击中文目录锚点，发现无法正常跳转。同时，打开 <code>控制台</code> 后会发现报错：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/18.JPG" class="">
<p>根据报错信息，打开 <code>themes/next/source/js/src/post-details.js</code> 文件：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/19.JPG" class="">
<p>原因是UTF-8解析有问题，按照如图修改 <code>post-details.js</code> 文件：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/20.JPG" class="">
<hr />
<p>Q7. 点击目录栏里的 <code>Tags</code> or <code>Categories</code> or <code>Archives</code> 404？</p>
<p>请参考<a href="http://theme-next.iissnan.com/theme-settings.html">官方文档:主题配置</a></p>
<p>但注意一点，生成相关的页面后，在主题配置文件 <code>_config.yml</code> 中，menu栏请按照下面进行修改。</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/21.JPG" class="">
<p>一定不能有空格，否则会404！！！</p>
<hr />
<p>Q8. 无法正确显示数学公式</p>
<p>我参考了<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/MATH.md">这篇日志</a>解决了这个问题。</p>
<h2 id="参考链接">参考链接</h2>
<p>🤗 在搭建个人博客的过程，我参考了网上的多种解决方案，在此就不一一列出了。感谢前人总结的经验，让我少走了很多弯路。</p>
<p>下面是我觉得比较有用的几个链接，希望可以帮助到你。</p>
<p>[1] <a href="https://hexo.io/zh-cn/docs/">Hexo Docs</a></p>
<p>[2] <a href="http://theme-next.iissnan.com/theme-settings.html">NexT主题配置</a></p>
<p>[3] <a href="https://github.com/iissnan/hexo-theme-next/issues">Github：NexT主题常见问题汇总</a></p>
<p>[4] <a href="http://yearito.cn/posts/hexo-advanced-settings.html">Hexo 搭建个人博客系列：进阶设置篇</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(1): Computer Science</title>
    <url>/2020/08/24/CS61A-SICP/CS61A-1-Introduction/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 1.</p>
<span id="more"></span>
<h2 id="what-is-computer-science">What is Computer Science?</h2>
<p>Computer Science has many subfields, and each subfield has its own sub-subfield.</p>
<img src="/2020/08/24/CS61A-SICP/CS61A-1-Introduction/lec1-1.png" class="">
<h2 id="what-is-this-course-about">What is this course about?</h2>
<ul>
<li>A course about <strong>managing complexity</strong>, thus you should:
<ul>
<li>master <strong>abstraction</strong>
<ul>
<li>procedural abstractions</li>
<li>data abstractions</li>
</ul></li>
<li>master <strong>programming paradigms</strong></li>
</ul></li>
<li>An introduction to programming:
<ul>
<li>full understanding of Python fundamentals</li>
<li>combine multiple ideas in large projects</li>
<li>learn how computer interpret programming languages</li>
</ul></li>
<li>Different types of languages:
<ul>
<li>Python</li>
<li>Scheme</li>
<li>SQL</li>
</ul></li>
</ul>
<h2 id="demo">Demo</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Numeric expressions</span></span><br><span class="line"><span class="number">2020</span></span><br><span class="line"><span class="number">2000</span> + <span class="number">20</span></span><br><span class="line">-<span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> * ((<span class="number">5</span> // <span class="number">6</span>) + <span class="number">7</span> * <span class="number">8</span> * <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="built_in">abs</span>(-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">abs</span>(<span class="number">2301</span> - <span class="number">4321</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Values</span></span><br><span class="line"><span class="string">&quot;Go Bears&quot;</span></span><br><span class="line"><span class="string">&quot;Gob&quot;</span> + <span class="string">&quot;ears&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Objects</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">shakes = urlopen(<span class="string">&#x27;http://composingprograms.com/shakespeare.txt&#x27;</span>)</span><br><span class="line">text = shakes.read().decode().split()</span><br><span class="line"><span class="built_in">len</span>(text)</span><br><span class="line">text[:<span class="number">25</span>]</span><br><span class="line">text.count(<span class="string">&#x27;the&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;thou&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;you&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;forsooth&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets</span></span><br><span class="line">words = <span class="built_in">set</span>(text)</span><br><span class="line"><span class="built_in">len</span>(words)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Combinations </span></span><br><span class="line"><span class="string">&#x27;draw&#x27;</span></span><br><span class="line"><span class="string">&#x27;draw&#x27;</span>[<span class="number">0</span>]  <span class="comment"># &#x27;d&#x27;</span></span><br><span class="line">&#123;w[<span class="number">0</span>] <span class="keyword">for</span> w <span class="keyword">in</span> words&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Data</span></span><br><span class="line"><span class="string">&#x27;draw&#x27;</span>[::-<span class="number">1</span>]  <span class="comment"># &#x27;ward&#x27;</span></span><br><span class="line">&#123;w <span class="keyword">for</span> w <span class="keyword">in</span> words <span class="keyword">if</span> w == w[::-<span class="number">1</span>] <span class="keyword">and</span> <span class="built_in">len</span>(w)&gt;<span class="number">4</span>&#125;</span><br><span class="line">&#123;w <span class="keyword">for</span> w <span class="keyword">in</span> words <span class="keyword">if</span> w[::-<span class="number">1</span>] <span class="keyword">in</span> words <span class="keyword">and</span> <span class="built_in">len</span>(w) == <span class="number">4</span>&#125;</span><br><span class="line">&#123;w <span class="keyword">for</span> w <span class="keyword">in</span> words <span class="keyword">if</span> w[::-<span class="number">1</span>] <span class="keyword">in</span> words <span class="keyword">and</span> <span class="built_in">len</span>(w) &gt; <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/06/22/Blog/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<span id="more"></span>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(10): Containers</title>
    <url>/2020/09/21/CS61A-SICP/CS61A-10-Containers/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 10.</p>
<span id="more"></span>
<h2 id="lists">Lists</h2>
<p><strong>List</strong> is a built-in data type in Python.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lists</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odds = [<span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">49</span>]</span><br><span class="line">[<span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">49</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(odds)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odds[<span class="number">1</span>]</span><br><span class="line"><span class="number">43</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odds[<span class="number">0</span>] - odds[<span class="number">3</span>] + <span class="built_in">len</span>(odds)</span><br><span class="line">-<span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odds[odds[<span class="number">3</span>]-odds[<span class="number">2</span>]]</span><br><span class="line"><span class="number">47</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> getitem</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getitem(odds, <span class="number">2</span>)</span><br><span class="line"><span class="number">47</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span>, <span class="number">7</span>] + odds * <span class="number">2</span>   <span class="comment"># NOTICE THIS OPERATION</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">7</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">49</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs = [[<span class="number">10</span>, <span class="number">20</span>], <span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs[<span class="number">0</span>]</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pairs[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>Lists are containers which can contain other values, and their values can represent collections of other values.</p>
<p>You can use built-in operators <code>in</code> to test whether an element appears in a compound value.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Containers</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>digits = [<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">in</span> digits</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> <span class="keyword">in</span> digits</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;1&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> digits</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">8</span>] <span class="keyword">in</span> digits</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>] <span class="keyword">in</span> [[<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>]</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>] <span class="keyword">in</span> [[[<span class="number">1</span>, <span class="number">2</span>]], <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h2 id="for-statements">For Statements</h2>
<p>We've written lots of code using <strong>while</strong> loops. Now, it's time to turn to an alternative way of iteration structure —— <strong>for</strong> loops.</p>
<p>The for statement is a way of iterating over sequences.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># while statement</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_while</span>(<span class="params">s, value</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Count the number of occurrences of value in sequence s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; digits = [1, 8, 2, 8]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_while(digits, 8)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, index = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index &lt; <span class="built_in">len</span>(s):</span><br><span class="line">        element = s[index]      <span class="comment"># element at &quot;index&quot; postion</span></span><br><span class="line">        <span class="keyword">if</span> element == value:</span><br><span class="line">            total = total + <span class="number">1</span></span><br><span class="line">        index = index + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for statement</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_for</span>(<span class="params">s, value</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Count the number of occurrences of value in sequence s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; digits = [1, 8, 2, 8]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_for(digits, 8)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> s:   <span class="comment"># s is iterable</span></span><br><span class="line">        <span class="keyword">if</span> element == value:</span><br><span class="line">            total = total + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>
<h3 id="sequence-unpacking">Sequence Unpacking</h3>
<p>There is a cool feature in Python's for statement: <strong>sequence unpacking</strong>.</p>
<p>Here is an example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_same</span>(<span class="params">pairs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return how many pairs have the same element repeated.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pairs = [[1, 2], [2, 2], [2, 3], [4, 4]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_same(pairs)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    same_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> pairs:</span><br><span class="line">        <span class="keyword">if</span> x == y:</span><br><span class="line">            same_count = same_count + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> same_count</span><br></pre></td></tr></table></figure>
<p>⚠️ Attention: This feature only works for a sequence of fixed-length sequences, such as sequence pairs.</p>
<h2 id="ranges">Ranges</h2>
<p><strong>Range</strong> is another sequence type.</p>
<img src="/2020/09/21/CS61A-SICP/CS61A-10-Containers/10-1.JPG" class="">
<p>Let's see two examples of range usage.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_below</span>(<span class="params">n</span>):</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        total += i</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cheer</span>():</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Go Bears!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here, we use _ instead of x or i to hightlight the fact that we don&#x27;t care what is it.</span></span><br></pre></td></tr></table></figure>
<h2 id="list-comprehensions">List Comprehensions</h2>
<p>List comprehension is a powerful form of combination in the Python language.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># List comprehensions</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odds = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x+<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> odds]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> odds <span class="keyword">if</span> <span class="number">25</span> % x == <span class="number">0</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divisors</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the integers that evenly divide n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; divisors(1)</span></span><br><span class="line"><span class="string">    [1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; divisors(4)</span></span><br><span class="line"><span class="string">    [1, 2]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; divisors(12)</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; [n for n in range(1, 1000) if sum(divisors(n)) == n]</span></span><br><span class="line"><span class="string">    [1, 6, 28, 496]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>] + [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n) <span class="keyword">if</span> n % x == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># list comprehension makes our code concisely !!!</span></span><br></pre></td></tr></table></figure>
<h2 id="strings">Strings</h2>
<img src="/2020/09/21/CS61A-SICP/CS61A-10-Containers/10-2.JPG" class="">
<p>For String, you can use either single quotation mark or double quotation mark. The only difference is that double quoted String can have multiple lines, while single quoted String can only have one line.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">&#x27;curry = lambda f: lambda x: lambda y: f(x, y)&#x27;</span></span><br><span class="line"><span class="string">&#x27;curry = lambda f: lambda x: lambda y: f(x, y)&#x27;</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exec</span>(<span class="string">&#x27;curry = lambda f: lambda x: lambda y: f(x, y)&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; curry</span><br><span class="line">&lt;<span class="keyword">function</span> &lt;lambda&gt; at 0x000001FF95D32EA0&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exec</span>(<span class="string">&#x27;print(&quot;Hello World&quot;)&#x27;</span>)</span><br><span class="line">Hello World</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; city = <span class="string">&#x27;Beijing&#x27;</span></span><br><span class="line">&gt;&gt;&gt; len(city)</span><br><span class="line">7</span><br><span class="line">&gt;&gt;&gt; city[2]     <span class="comment"># String can be indexed like List</span></span><br><span class="line"><span class="string">&#x27;i&#x27;</span></span><br><span class="line">&gt;&gt;&gt; <span class="string">&#x27;iji&#x27;</span> <span class="keyword">in</span> city</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; <span class="string">&#x27;B &#x27;</span> not <span class="keyword">in</span> city</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<h2 id="slicing">Slicing</h2>
<p><strong>Slicing</strong> is an operation that you can perform on sequences such as lists and ranges.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># examples of slicing</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odds = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[odds[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>)]</span><br><span class="line">[<span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odds[<span class="number">1</span>: <span class="number">3</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odds[: <span class="number">3</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odds[<span class="number">1</span>:]</span><br><span class="line">[<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure>
<h3 id="examples">Examples</h3>
<ul>
<li>Question 1: Recursive Sum</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span>(<span class="params">L</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of all numbers in list L, using recursion.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_sum([2, 4, 1, 5])</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(L) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> L[<span class="number">0</span>] + my_sum(L[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># drill</span></span><br><span class="line"><span class="comment"># Write a recursive function that takes as input integer &quot;n&quot;, and returns the sum</span></span><br><span class="line"><span class="comment"># of the first &quot;n&quot; integers, such as sum(5) returns 1 + 2 + 3 + 4 + 5 = 15</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n + <span class="built_in">sum</span>(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>Question 2: String Reversal</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Reverse the given string recursively.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse(&quot;ward&quot;)</span></span><br><span class="line"><span class="string">    draw</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> reverse(<span class="built_in">str</span>[<span class="number">1</span>:]) + <span class="built_in">str</span>[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h2 id="processing-container-values">Processing Container Values</h2>
<img src="/2020/09/21/CS61A-SICP/CS61A-10-Containers/11-1.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># examples of sum</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)       <span class="comment"># start=5</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>]], [])  <span class="comment"># [] + [2, 3] + [4] ==&gt; [2, 3, 4]</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>]])</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unsupported operand <span class="built_in">type</span>(s) <span class="keyword">for</span> +: <span class="string">&#x27;int&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;list&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># examples of max</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="built_in">range</span>(<span class="number">10</span>), <span class="keyword">lambda</span> x: <span class="number">7</span>-(x-<span class="number">4</span>)*(x-<span class="number">2</span>))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># examples of all</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x &lt; <span class="number">5</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([x &lt; <span class="number">5</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)])</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(11): Data Abstraction</title>
    <url>/2020/09/23/CS61A-SICP/CS61A-11-Data-Abstraction/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 11.</p>
<span id="more"></span>
<p>We've already learnt function, which is an abstraction of computation process.</p>
<p>In today's lecture, let's learn a new way of abstaction —— <strong>data abstraction</strong>.</p>
<h2 id="data-abstraction">Data Abstraction</h2>
<p>Most value are compound values.</p>
<img src="/2020/09/23/CS61A-SICP/CS61A-11-Data-Abstraction/12-1.JPG" class="">
<p>Let's look at an example.</p>
<img src="/2020/09/23/CS61A-SICP/CS61A-11-Data-Abstraction/12-2.JPG" class="">
<img src="/2020/09/23/CS61A-SICP/CS61A-11-Data-Abstraction/12-3.JPG" class="">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Rational arithmetic</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># How to use data?</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_rational</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The sum of rational numbers X and Y.&quot;&quot;&quot;</span></span><br><span class="line">    nx, dx = numer(x), denom(x)</span><br><span class="line">    ny, dy = numer(y), denom(y)</span><br><span class="line">    <span class="keyword">return</span> rational(nx * dy + ny * dx, dx * dy)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul_rational</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The product of rational numbers X and Y.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> rational(numer(x) * numer(y), denom(x) * denom(y))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">equal_rational</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;True iff rational numbers X and Y are equal.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> numer(x) * denom(y) == numer(y) * denom(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_rational</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print rational X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(numer(x), <span class="string">&quot;/&quot;</span>, denom(x))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">When we implement the arithemtic rules of rational numbers, we don&#x27;t care about how to implement </span></span><br><span class="line"><span class="string">rational numbers, we only care about how to use it.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>rational(n, d)</code>: returns a rational number</li>
<li><code>numer(x)</code>: returns the numerator</li>
<li><code>denom(x)</code>: returns the denominator</li>
</ul>
<p>These three functions implement an abstract data type for rational numbers.</p>
<p>Q: How to implement these three functions?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># How to represent data?</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Constructor and selectors</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A representation of the rational number N/D.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [n, d]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the numerator of rational number X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the denominator of rational number X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">When we implement rational numbers, we care about how to represent them with some data structures.</span></span><br><span class="line"><span class="string">We don&#x27;t care about how to use them.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>The above code need some improvements. Think about the following examples:</p>
<ul>
<li>3/2 * 5/3 = 15/6 = 5/2</li>
<li>2/5 + 1/10 = 25/50 = 1/2</li>
</ul>
<p>The numerator and denominator of a rational number should be <strong>relatively prime</strong>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Improved implementation</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd    <span class="comment"># greatest common divisor</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A representation of the rational number N/D.</span></span><br><span class="line"><span class="string">       gcd: greatest common divisor</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    g = gcd(n, d)</span><br><span class="line">    <span class="keyword">return</span> [n//g, d//g]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the numerator of rational number X in lowest terms and having</span></span><br><span class="line"><span class="string">    the sign of X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the denominator of rational number X in lowest terms and positive.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h2 id="abstraction-barriers">Abstraction Barriers</h2>
<img src="/2020/09/23/CS61A-SICP/CS61A-11-Data-Abstraction/12-4.JPG" class="" title="Layers of Abstraction Barriers">
<img src="/2020/09/23/CS61A-SICP/CS61A-11-Data-Abstraction/12-5.JPG" class="">
<p>The purpose of maintaining abstraction barriers, is so that you can change your data representation without having to rewrite your entire program.</p>
<p>Let's take a look at another example.</p>
<p>Here, we use function instead of built-in list to implement rational data. We only change data representation whereas keeping data manipulations. The outcome is still correct!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Functional implementation</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A representation of the rational number N/D.&quot;&quot;&quot;</span></span><br><span class="line">    g = gcd(n, d)</span><br><span class="line">    n, d = n//g, d//g</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">return</span> select</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the numerator of rational number X in lowest terms and having</span></span><br><span class="line"><span class="string">    the sign of X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the denominator of rational number X in lowest terms and positive.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>x, y = rational(1, 2), rational(3, 8)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>x</span></span><br><span class="line"><span class="string">&lt;function rational.&lt;local&gt;.select&gt;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>print_rational(mul_rational(x, y))</span></span><br><span class="line"><span class="string">3 / 16</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<img src="/2020/09/23/CS61A-SICP/CS61A-11-Data-Abstraction/12-6.JPG" class="" title="Environment Diagram">
<h2 id="dictionaries">Dictionaries</h2>
<p>A dictionary allows you to associate values with keys.</p>
<p>👻 Dictionary doesn't have order inheritantly.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals = &#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals[<span class="string">&#x27;X&#x27;</span>]   <span class="comment"># lookup through keys</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals[<span class="number">10</span>]    <span class="comment"># cannot through values</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals.keys()</span><br><span class="line">dict_keys([<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;X&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals.values()</span><br><span class="line">dict_values([<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = numerals.items()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items</span><br><span class="line">dict_items([(<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(items)</span><br><span class="line">&#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(items)[<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;X&#x27;</span> <span class="keyword">in</span> numerals</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals.get(<span class="string">&#x27;X&#x27;</span>, <span class="number">0</span>)        <span class="comment"># if &#x27;X&#x27; is the key of dictionary, return it&#x27;s value</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals.get(<span class="string">&#x27;X-ray&#x27;</span>, <span class="number">0</span>)    <span class="comment"># otherwise, return 0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<img src="/2020/09/23/CS61A-SICP/CS61A-11-Data-Abstraction/12-7.JPG" class="">
<h3 id="dictionary-comprehension">Dictionary Comprehension</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x: x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x &lt; <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">4</span>, <span class="number">3</span>: <span class="number">9</span>, <span class="number">4</span>: <span class="number">16</span>&#125;</span><br></pre></td></tr></table></figure>
<img src="/2020/09/23/CS61A-SICP/CS61A-11-Data-Abstraction/12-8.JPG" class="">
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(12): Trees</title>
    <url>/2020/09/25/CS61A-SICP/CS61A-12-Trees/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 12.</p>
<span id="more"></span>
<h2 id="processing-container-values">Processing Container Values</h2>
<ul>
<li>sum(iterable[, start=0]) -&gt; value</li>
<li>max(iterable[, key=func]) -&gt; value, min(iterable[, key=func]) -&gt; value</li>
<li>all(iterable) -&gt; bool</li>
<li>any(iterable) -&gt; bool</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Aggregation</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">3</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: <span class="built_in">list</span> index out of <span class="built_in">range</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">3</span>:]</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)       <span class="comment"># ==&gt; 5 + 2 + 3 + 4</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="comment"># Hint: If you sum a list of lists, you get a list containing the elements of those lists.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>]], [])  <span class="comment"># ==&gt; [] + [2, 3] + [4]</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([ [[<span class="number">1</span>]], [<span class="number">2</span>] ], []) <span class="comment"># ==&gt; [] + [[1]] + [2]</span></span><br><span class="line">[[<span class="number">1</span>], <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>]])</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unsupported operand <span class="built_in">type</span>(s) <span class="keyword">for</span> +: <span class="string">&#x27;int&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;list&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(&#123;<span class="number">3</span>:<span class="number">9</span>, <span class="number">5</span>:<span class="number">25</span>&#125;)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="built_in">range</span>(<span class="number">10</span>), key=<span class="keyword">lambda</span> x: <span class="number">7</span> - (x-<span class="number">2</span>)*(x-<span class="number">4</span>))</span><br><span class="line"><span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([x &lt; <span class="number">5</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)])</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>perfect_square = <span class="keyword">lambda</span> x: x == <span class="built_in">round</span>(x ** <span class="number">0.5</span>) ** <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>([perfect_square(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>, <span class="number">60</span>)])     <span class="comment"># Try ,65)</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h2 id="trees">Trees</h2>
<p>Tree is an important data abstraction for representing hierarchical relationship.</p>
<img src="/2020/09/25/CS61A-SICP/CS61A-12-Trees/13-1.JPG" class="" title="Tree Abstraction Definition">
<img src="/2020/09/25/CS61A-SICP/CS61A-12-Trees/13-2.JPG" class="" title="Tree Abstraction Implementation">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Trees: recursive implementation</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tree</span>(<span class="params">label, branches=[]</span>):</span></span><br><span class="line">    <span class="comment"># verifies the tree def</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches: </span><br><span class="line">        <span class="keyword">assert</span> is_tree(branch), <span class="string">&#x27;branches must be trees&#x27;</span></span><br><span class="line">    <span class="comment"># list(branches): create a list from a sequence branches</span></span><br><span class="line">    <span class="keyword">return</span> [label] + <span class="built_in">list</span>(branches)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">label</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">branches</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_tree</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(tree) != <span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">len</span>(tree) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>t = tree(1, [tree(5, [tree(7)]), tree(6)])</span></span><br><span class="line"><span class="string">[1, [5, [7]], [6]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="tree-processing">Tree Processing</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### +++ === ABSTRACTION BARRIER === +++ ###</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># construct fibonacci tree</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_tree</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct a Fibonacci tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib_tree(1)</span></span><br><span class="line"><span class="string">    [1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib_tree(3)</span></span><br><span class="line"><span class="string">    [2, [1], [1, [0], [1]]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib_tree(5)</span></span><br><span class="line"><span class="string">    [5, [2, [1], [1, [0], [1]]], [3, [1, [0], [1]], [2, [1], [1, [0], [1]]]]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left = fib_tree(n-<span class="number">2</span>)</span><br><span class="line">        right = fib_tree(n-<span class="number">1</span>)</span><br><span class="line">        fib_n = label(left) + label(right)</span><br><span class="line">        <span class="keyword">return</span> tree(fib_n, [left, right])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_leaves</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The number of leaves in tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_leaves(fib_tree(5))</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([count_leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaves</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a list containing the leaf labels of tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; leaves(fib_tree(5))</span></span><br><span class="line"><span class="string">    [1, 0, 1, 0, 1, 1, 0, 1]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(tree):</span><br><span class="line">        <span class="keyword">return</span> [label(tree)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(tree)], [])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment_leaves</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree like t but with leaf labels incremented.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(increment_leaves(fib_tree(4)))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> tree(label(t) + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bs = [increment_leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)]</span><br><span class="line">        <span class="keyword">return</span> tree(label(t), bs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree like t but with all labels incremented.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(increment(fib_tree(4)))</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> tree(label(t) + <span class="number">1</span>, [increment(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure>
<p>One more example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_tree</span>(<span class="params">t, indent=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print a representation of this tree in which each label is</span></span><br><span class="line"><span class="string">    indented by two spaces times its depth from the root.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(tree(1))</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(tree(1, [tree(2)]))</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(fib_tree(4))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">        0</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">          0</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span> * indent + <span class="built_in">str</span>(label(t)))</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        print_tree(b, indent + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="example-1-summing-paths">Example 1: Summing Paths</h2>
<p>First, let's see an example of tail recursion.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Order</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return n * n-1 * ... * 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact(4)</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  非尾递归: 此函数还有后续，所以必须保存本身的环境以供处理返回值。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact_tail</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return n * n-1 * ... * 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact_tail(4)</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> fact_times(n, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact_times</span>(<span class="params">n, k</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return k * n * n-1 * ... * 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact_times(4, 3)</span></span><br><span class="line"><span class="string">    72</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> k</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fact_times(n - <span class="number">1</span>, k * n)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 尾递归: 进入下一个函数不再需要上一个函数的环境了，得出结果以后直接返回。</span></span><br><span class="line"><span class="comment"># 尾递归是一种编程技巧。</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ordinary recursion: </span></span><br><span class="line"><span class="string">we need call stack to record; if too many recursive calls, sometimes stack overflow occurs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tail recursion: </span></span><br><span class="line"><span class="string">in tail recursion, the recursive call is the last thing logically, </span></span><br><span class="line"><span class="string">and there is nothing left in the current function. </span></span><br><span class="line"><span class="string">And the compiler will optimize tail recursion. </span></span><br><span class="line"><span class="string">(we don&#x27;t need stack frame anymore, and tail recursion can be optimized as ordinary loop)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>Then use this strategy to solve <code>print_sums</code> question.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tree <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">numbers = tree(<span class="number">3</span>, [tree(<span class="number">4</span>), tree(<span class="number">5</span>, [tree(<span class="number">6</span>)])])</span><br><span class="line">haste = tree(<span class="string">&#x27;h&#x27;</span>, [tree(<span class="string">&#x27;a&#x27;</span>, [tree(<span class="string">&#x27;s&#x27;</span>), tree(<span class="string">&#x27;t&#x27;</span>)]), tree(<span class="string">&#x27;e&#x27;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sums</span>(<span class="params">t, so_far</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the sum of labels along the path from the root to each leaf.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_sums(numbers, 0)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    14</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_sums(haste, &#x27;&#x27;)</span></span><br><span class="line"><span class="string">    has</span></span><br><span class="line"><span class="string">    hat</span></span><br><span class="line"><span class="string">    he</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    so_far = so_far + label(t)</span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="built_in">print</span>(so_far)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> branch <span class="keyword">in</span> branches(t):</span><br><span class="line">            print_sums(branch, so_far)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="example-2-counting-paths">Example 2: Counting Paths</h2>
<img src="/2020/09/25/CS61A-SICP/CS61A-12-Trees/13-3.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Count paths that have a total label sum</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_paths</span>(<span class="params">t, total</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of paths from the root to any node in tree</span></span><br><span class="line"><span class="string">    t for which the labels along the path sum to total.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(3, [tree(-1), tree(1, [tree(2, [tree(1)]), tree(3)]), tree(1, [tree(-1)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_paths(t, 3)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_paths(t, 4)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_paths(t, 5)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_paths(t, 6)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_paths(t, 7)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> label(t) == total:</span><br><span class="line">        found = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        found = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> found + <span class="built_in">sum</span>([count_paths(b, total - label(t)) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(13): Mutable Values</title>
    <url>/2020/10/02/CS61A-SICP/CS61A-13-Mutable-Values/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 13.</p>
<span id="more"></span>
<h2 id="objects">Objects</h2>
<p><strong>Object</strong> is an important concept in software engineering.</p>
<img src="/2020/10/02/CS61A-SICP/CS61A-13-Mutable-Values/lec13-1.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Object Examples</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>date</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">datetime</span>.<span class="title">date</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">today</span> = <span class="title">date</span>(<span class="params"><span class="number">2020</span>, <span class="number">10</span>, <span class="number">2</span></span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">today</span></span></span><br><span class="line"><span class="class"><span class="title">datetime</span>.<span class="title">date</span>(<span class="params"><span class="number">2020</span>, <span class="number">10</span>, <span class="number">2</span></span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">freedom</span> = <span class="title">date</span>(<span class="params"><span class="number">2020</span>, <span class="number">12</span>, <span class="number">17</span></span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">str</span>(<span class="params">freedom - today</span>)</span></span><br><span class="line"><span class="class">&#x27;76 <span class="title">days</span>, 0:</span><span class="number">00</span>:<span class="number">00</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; </span></span><br><span class="line"><span class="string">&gt;&gt;&gt; today.year  # we use dot expression to access objects&#x27;</span> attributes <span class="keyword">or</span> methods</span><br><span class="line"><span class="number">2020</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>today.month</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>today.strftime(<span class="string">&#x27;%A %B %d&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;Friday October 02&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="string">String</h3>
<p>Strings are objects, so they have attributes and methods. Let's see some examples.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.upper()</span><br><span class="line"><span class="string">&#x27;HELLO&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.lower()</span><br><span class="line"><span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.swapcase()</span><br><span class="line"><span class="string">&#x27;hELLO&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">&#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure>
<img src="/2020/10/02/CS61A-SICP/CS61A-13-Mutable-Values/13-2.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(a)</span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="built_in">ord</span>(a))</span><br><span class="line"><span class="string">&#x27;0x41&#x27;</span></span><br></pre></td></tr></table></figure>
<img src="/2020/10/02/CS61A-SICP/CS61A-13-Mutable-Values/13-3.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> unicodedata <span class="keyword">import</span> name, lookup</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;LATIN CAPITAL LETTER A&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name(<span class="string">&#x27;あ&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;HIRAGANA LETTER A&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name(<span class="string">&#x27;啊&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;CJK UNIFIED IDEOGRAPH-554A&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lookup(<span class="string">&#x27;SOCCER BALL&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;⚽&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lookup(<span class="string">&#x27;BABY&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;👶&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lookup(<span class="string">&#x27;BABY&#x27;</span>).encode()</span><br><span class="line"><span class="string">b&#x27;\xf0\x9f\x91\xb6&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="mutation-operations">Mutation Operations</h2>
<p>Only objects of <strong>mutable types</strong> can change their value over time.</p>
<ul>
<li>list</li>
<li>dictionary</li>
<li>set</li>
</ul>
<p>Let's see an example of List.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits = [<span class="string">&#x27;coin&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;myriad&#x27;</span>]  <span class="comment"># A list literal</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>original_suits = suits  <span class="comment"># two names with the same object!!!</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits.pop()   <span class="comment"># Removes and returns the final element</span></span><br><span class="line"><span class="string">&#x27;myriad&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits.remove(<span class="string">&#x27;string&#x27;</span>)  <span class="comment"># Removes the first element that equals the argument</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits</span><br><span class="line">[<span class="string">&#x27;coin&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits.append(<span class="string">&#x27;cup&#x27;</span>)  <span class="comment"># Add an element to the end</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits.extend([<span class="string">&#x27;sword&#x27;</span>, <span class="string">&#x27;club&#x27;</span>])  <span class="comment"># Add all elements of a list to the end</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits</span><br><span class="line">[<span class="string">&#x27;coin&#x27;</span>, <span class="string">&#x27;cup&#x27;</span>, <span class="string">&#x27;sword&#x27;</span>, <span class="string">&#x27;club&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits[<span class="number">2</span>] = <span class="string">&#x27;spade&#x27;</span>  <span class="comment"># Replace an element</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits</span><br><span class="line">[<span class="string">&#x27;coin&#x27;</span>, <span class="string">&#x27;cup&#x27;</span>, <span class="string">&#x27;spade&#x27;</span>, <span class="string">&#x27;club&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits[<span class="number">0</span>:<span class="number">2</span>] = [<span class="string">&#x27;heart&#x27;</span>, <span class="string">&#x27;diamond&#x27;</span>]  <span class="comment"># Replace a slice</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits</span><br><span class="line">[<span class="string">&#x27;heart&#x27;</span>, <span class="string">&#x27;diamond&#x27;</span>, <span class="string">&#x27;spade&#x27;</span>, <span class="string">&#x27;club&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[suit.upper() <span class="keyword">for</span> suit <span class="keyword">in</span> suits]</span><br><span class="line">[<span class="string">&#x27;HEART&#x27;</span>, <span class="string">&#x27;DIAMOND&#x27;</span>, <span class="string">&#x27;SPADE&#x27;</span>, <span class="string">&#x27;CLUB&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>original_suits   </span><br><span class="line">[<span class="string">&#x27;heart&#x27;</span>, <span class="string">&#x27;diamond&#x27;</span>, <span class="string">&#x27;spade&#x27;</span>, <span class="string">&#x27;club&#x27;</span>]  <span class="comment"># All names that refer to the same object are affected by a mutation</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[suit[<span class="number">1</span>:<span class="number">4</span>] <span class="keyword">for</span> suit <span class="keyword">in</span> suits <span class="keyword">if</span> <span class="built_in">len</span>(suit) == <span class="number">5</span>]</span><br><span class="line">[<span class="string">&#x27;ear&#x27;</span>, <span class="string">&#x27;pad&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>Let's see another example of Dictionary.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals = &#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1.0</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals[<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals[<span class="string">&#x27;X&#x27;</span>] = <span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals[<span class="string">&#x27;L&#x27;</span>] = <span class="number">50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals</span><br><span class="line">&#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1.0</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals.pop(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals.get(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals</span><br><span class="line">&#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1.0</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(numerals.values())</span><br><span class="line"><span class="number">56.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>([(<span class="number">3</span>, <span class="number">9</span>), (<span class="number">4</span>, <span class="number">16</span>), (<span class="number">5</span>, <span class="number">25</span>)])</span><br><span class="line">&#123;<span class="number">3</span>: <span class="number">9</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">5</span>: <span class="number">25</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="tuples">Tuples</h2>
<p>Tuples are <strong>immutable sequences</strong>, meaning they are unchangable.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>  <span class="comment"># special syntax</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>()</span><br><span class="line">()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>()</span><br><span class="line">()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>(<span class="number">2</span>)  <span class="comment"># special</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;int&#x27;</span> <span class="built_in">object</span> <span class="keyword">is</span> <span class="keyword">not</span> iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">2</span>,)</span><br><span class="line">(<span class="number">2</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>,</span><br><span class="line">(<span class="number">2</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">3</span>, <span class="number">4</span>) + (<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> <span class="keyword">in</span> (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;[<span class="number">1</span>]: <span class="number">2</span>&#125;        <span class="comment"># mutable value cannot be key</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;(<span class="number">1</span>, <span class="number">2</span>): <span class="number">3</span>&#125;     <span class="comment"># immutable value can be key</span></span><br><span class="line">&#123;(<span class="number">1</span>, <span class="number">2</span>): <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;([<span class="number">1</span>], <span class="number">2</span>): <span class="number">3</span>&#125;   <span class="comment"># contain mutable sequence</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br></pre></td></tr></table></figure>
<p>However, an immutable sequence may still change if it contains a mutable value as an element.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = ([<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line">ERROR</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = ([<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">([<span class="number">4</span>, <span class="number">2</span>], <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h2 id="mutation">Mutation</h2>
<img src="/2020/10/02/CS61A-SICP/CS61A-13-Mutable-Values/lec13-4.JPG" class="" title="IS vs. &#x3D;&#x3D;">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">20</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.append(<span class="number">20</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">10</span>] == [<span class="number">10</span>]</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">10</span>] <span class="keyword">is</span> [<span class="number">10</span>]</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<img src="/2020/10/02/CS61A-SICP/CS61A-13-Mutable-Values/13-5.JPG" class="">
<h2 id="example-lists">Example: Lists</h2>
<p>You should watch <a href="https://www.youtube.com/watch?v=tpfpNR3u4zk&amp;list=PL6BsET-8jgYVDEchBIdQeqrUhlN2MZE6F&amp;index=7">this video</a> to finish some challenge problems.</p>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(14): Mutable Functions</title>
    <url>/2020/10/05/CS61A-SICP/CS61A-14-Mutable-Functions/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 14.</p>
<span id="more"></span>
<h2 id="mutable-functions">Mutable Functions</h2>
<p>Mutable functions' behaviors vary over time. Let's see an example.</p>
<ul>
<li>Let's model a bank account that has a balance of $100</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>withdraw(<span class="number">25</span>)</span><br><span class="line"><span class="number">75</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>withdraw(<span class="number">25</span>)</span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>withdraw(<span class="number">60</span>)</span><br><span class="line"><span class="string">&#x27;Insufficient funds&#x27;</span></span><br></pre></td></tr></table></figure>
<img src="/2020/10/05/CS61A-SICP/CS61A-14-Mutable-Functions/lec14-1.JPG" class="" title="Environment Diagram">
<p>The implementation is as follows:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SOLUTION</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_withdraw</span>(<span class="params">balance</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a withdraw function with a starting balance.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>(<span class="params">amount</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> balance</span><br><span class="line">        <span class="keyword">if</span> amount &gt; balance:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Insufficient funds&#x27;</span></span><br><span class="line">        balance = balance - amount</span><br><span class="line">        <span class="keyword">return</span> balance</span><br><span class="line">    <span class="keyword">return</span> withdraw</span><br></pre></td></tr></table></figure>
<p>Notice the keyword <code>nonlocal</code> in line 6. We will talk about it in the next section.</p>
<h2 id="non-local-assignment">Non-local Assignment</h2>
<img src="/2020/10/05/CS61A-SICP/CS61A-14-Mutable-Functions/lec14-2.JPG" class="">
<img src="/2020/10/05/CS61A-SICP/CS61A-14-Mutable-Functions/lec14-3.JPG" class="">
<img src="/2020/10/05/CS61A-SICP/CS61A-14-Mutable-Functions/lec14-4.JPG" class="">
<p>However, there is a quirk in Python, see the following code.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_withdraw</span>(<span class="params">balance</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a withdraw function with a starting balance.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>(<span class="params">amount</span>):</span></span><br><span class="line">        <span class="comment"># nonlocal balance</span></span><br><span class="line">        <span class="keyword">if</span> amount &gt; balance:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Insufficient funds&#x27;</span></span><br><span class="line">        <span class="comment"># balance = balance - amount</span></span><br><span class="line">        <span class="keyword">return</span> balance</span><br><span class="line">    <span class="keyword">return</span> withdraw</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;   </span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>withdraw = make_withdraw(100)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>withdraw(25)</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>withdraw(25)</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>withdraw(25)</span></span><br><span class="line"><span class="string">100</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>✨ <strong>Summary:</strong> You need <code>nonlocal</code> if you want to change values declared in parent frames. You don't need <code>nonlocal</code> if you just want to look up values in parent frames of the current environment. (I recommend doing this <a href="https://inst.eecs.berkeley.edu/~cs61a/fa20/disc/disc06.pdf">disc</a> to have better understanding of nonlocal.)</p>
<h2 id="mutable-values-persistent-local-state">Mutable Values &amp; Persistent Local State</h2>
<p>However, mutable values can be changed without a nonlocal statement.</p>
<p>Let's see an example.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_withdraw_list</span>(<span class="params">balance</span>):</span></span><br><span class="line">    b = [balance]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>(<span class="params">amount</span>):</span></span><br><span class="line">        <span class="keyword">if</span> amount &gt; b[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Insufficient funds&#x27;</span></span><br><span class="line">        b[<span class="number">0</span>] = b[<span class="number">0</span>] - amount    <span class="comment"># list is mutable ,we don&#x27;t need &#x27;nonlocal&#x27; anymore</span></span><br><span class="line">        <span class="keyword">return</span> b[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> withdraw</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>withdraw = make_withdraw_list(100)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>withdraw(25)</span></span><br><span class="line"><span class="string">75</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>withdraw(25)</span></span><br><span class="line"><span class="string">50</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>withdraw(30)</span></span><br><span class="line"><span class="string">20</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="example">Example</h2>
<p>Let's use an example to finish today's lecture.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    x = <span class="number">4</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">y</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">z</span>):</span></span><br><span class="line">            <span class="keyword">nonlocal</span> x</span><br><span class="line">            x = x + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> x + y + z</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">a = f(<span class="number">1</span>)</span><br><span class="line">b = a(<span class="number">2</span>)</span><br><span class="line">total = b(<span class="number">3</span>) + b(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>Try to work through this program before seeing the answer.</p>
<p>Here is the answer.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = f(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&lt;function f.&lt;<span class="built_in">locals</span>&gt;.g at <span class="number">0x00000202645AE430</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&lt;function f.&lt;<span class="built_in">locals</span>&gt;.g.&lt;<span class="built_in">locals</span>&gt;.h at <span class="number">0x00000202645AE4C0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>total = b(<span class="number">3</span>) + b(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>total</span><br><span class="line"><span class="number">22</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(16): Objects</title>
    <url>/2020/10/09/CS61A-SICP/CS61A-16-Objects/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 16.</p>
<span id="more"></span>
<h2 id="oop-object-oriented-programming">OOP (Object-Oriented Programming)</h2>
<img src="/2020/10/09/CS61A-SICP/CS61A-16-Objects/18-1.JPG" class="" title="OOP Definition">
<p>Objects are organized according to classes.</p>
<ul>
<li>A <strong>class</strong> combines (and abstracts) the storing of information data and functionality on the data (<strong>data + methods</strong>).</li>
<li>An <strong>object</strong> is an instantiation of a class.</li>
</ul>
<img src="/2020/10/09/CS61A-SICP/CS61A-16-Objects/18-2.JPG" class="" title="Class Definition">
<h3 id="class-statements">Class Statements</h3>
<p>Class statements let you create any type of data you want.</p>
<img src="/2020/10/09/CS61A-SICP/CS61A-16-Objects/18-3.JPG" class="" title="How to Create A Class">
<img src="/2020/10/09/CS61A-SICP/CS61A-16-Objects/18-4.JPG" class="" title="How to Initialize An Object">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Account(<span class="string">&#x27;Jim&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = Account(<span class="string">&#x27;Jack&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> <span class="keyword">not</span> b</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p><strong>Constructor</strong>s,</p>
<ul>
<li>allocate memory for an object</li>
<li>initialize an object with values</li>
<li>return address of the object</li>
</ul>
<h3 id="methods">Methods</h3>
<img src="/2020/10/09/CS61A-SICP/CS61A-16-Objects/18-5.JPG" class="">
<img src="/2020/10/09/CS61A-SICP/CS61A-16-Objects/18-6.JPG" class="">
<p>Objects receive messages via <strong>dot notation</strong>. Dot notation accesses attributes of the instance or its class.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&lt;expression&gt;.&lt;attribute_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">expression can be any valid Python expression</span></span><br><span class="line"><span class="string">attribute can be data or methods;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> </span><br></pre></td></tr></table></figure>
<h3 id="attributes">Attributes</h3>
<img src="/2020/10/09/CS61A-SICP/CS61A-16-Objects/18-7.JPG" class="">
<p>Class attributes are &quot;shared&quot; across all instances of a class because they are attributes of the class, not the instance.</p>
<img src="/2020/10/09/CS61A-SICP/CS61A-16-Objects/18-8.JPG" class="">
<h2 id="code">Code</h2>
<p>Code of today's lecture:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;An account has a balance and a holder.</span></span><br><span class="line"><span class="string">    All accounts share a common interest rate.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = Account(&#x27;John&#x27;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a.holder</span></span><br><span class="line"><span class="string">    &#x27;John&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a.deposit(100)</span></span><br><span class="line"><span class="string">    100</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a.withdraw(90)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a.withdraw(90)</span></span><br><span class="line"><span class="string">    &#x27;Insufficient funds&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a.balance</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a.interest</span></span><br><span class="line"><span class="string">    0.02</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; Account.interest = 0.04</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a.interest</span></span><br><span class="line"><span class="string">    0.04</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    interest = <span class="number">0.02</span>  <span class="comment"># A class attribute</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, account_holder</span>):</span></span><br><span class="line">        self.holder = account_holder</span><br><span class="line">        self.balance = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deposit</span>(<span class="params">self, amount</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Add amount to balance.&quot;&quot;&quot;</span></span><br><span class="line">        self.balance = self.balance + amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>(<span class="params">self, amount</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Subtract amount from balance if funds are available.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> amount &gt; self.balance:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Insufficient funds&#x27;</span></span><br><span class="line">        self.balance = self.balance - amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(17): Inheritance</title>
    <url>/2020/10/12/CS61A-SICP/CS61A-17-Inheritance/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 17.</p>
<span id="more"></span>
<h2 id="attribute-assignment">Attribute Assignment</h2>
<ul>
<li>Instance attribute: attribute of an instance</li>
<li>Class attribute: attribute of the class of an instance</li>
</ul>
<p>Attribute assignment statements change the values that are bound with an object or a class through attribute names.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Code Review</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>:</span></span><br><span class="line">    interest = <span class="number">0.02</span>     <span class="comment"># class attribute</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, holder</span>):</span></span><br><span class="line">        self.holder = holder</span><br><span class="line">        self.balance = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deposit</span>(<span class="params">self, amount</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Add amount to balance.&quot;&quot;&quot;</span></span><br><span class="line">        self.balance = self.balance + amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>(<span class="params">self, amount</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Subtract amount from balance if funds are available.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> amount &gt; self.balance:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Insufficient funds&#x27;</span></span><br><span class="line">        self.balance = self.balance - amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br></pre></td></tr></table></figure>
<img src="/2020/10/12/CS61A-SICP/CS61A-17-Inheritance/19-1.JPG" class="">
<h2 id="inheritance">Inheritance</h2>
<img src="/2020/10/12/CS61A-SICP/CS61A-17-Inheritance/19-2.JPG" class="" title="Goodness of Inheritance">
<img src="/2020/10/12/CS61A-SICP/CS61A-17-Inheritance/19-3.JPG" class="">
<p>Base class attributes aren't copy into subclasses! Instead, it is a process of looking up an attribute by name.</p>
<ul>
<li>If it names an attribute in the class, return the attribute value.</li>
<li>Otherwise, look up the name in the base class, if there is one.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ch = CheckingAccount(<span class="string">&#x27;Tom&#x27;</span>) <span class="comment"># Calls Account.__init__</span></span><br><span class="line">ch.interest                 <span class="comment"># Found in CheckingAccount</span></span><br><span class="line">ch.deposit(<span class="number">20</span>)              <span class="comment"># Found in Account</span></span><br><span class="line">ch.withdraw(<span class="number">5</span>)              <span class="comment"># Found in CheckingAccount</span></span><br></pre></td></tr></table></figure>
<h2 id="object-oriented-design">Object-Oriented Design</h2>
<p>Design guidance:</p>
<ul>
<li>Don't repeat yourself, use existing implementations</li>
<li>Attributes that have been overridden are still accessible via class objects</li>
<li>Look up attributes on instances whenever possible</li>
<li>Inheritance is best for representing <strong>is-a relationships</strong>:
<ul>
<li>Eg: a checking account is a specific type of account. So, <code>CheckingAccount</code> inherits from <code>Account</code></li>
</ul></li>
<li>Composition is best for representing <strong>has-a relationships</strong>:
<ul>
<li>composition: one object has another object as an attribute</li>
<li>Eg: a bank has a collection of bank accounts it manages. So, a bank has a list of accounts as an attribute</li>
</ul></li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DEMO</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A bank has accounts and pays interest.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; bank = Bank()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; john = bank.open_account(&#x27;John&#x27;, 10)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; jack = bank.open_account(&#x27;Jack&#x27;, 5, CheckingAccount)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; john.interest</span></span><br><span class="line"><span class="string">    0.02</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; jack.interest</span></span><br><span class="line"><span class="string">    0.01</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; john.interest = 0.06</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; bank.pay_interest()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; john.balance</span></span><br><span class="line"><span class="string">    10.6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; jack.balance</span></span><br><span class="line"><span class="string">    5.05</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; bank.too_big_to_fail()</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.accounts = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_account</span>(<span class="params">self, holder, amount, account_type=Account</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Open an account_type for holder and deposit amount.&quot;&quot;&quot;</span></span><br><span class="line">        account = account_type(holder)</span><br><span class="line">        account.deposit(amount)</span><br><span class="line">        self.accounts.append(account)</span><br><span class="line">        <span class="keyword">return</span> account</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pay_interest</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Pay interest to all accounts.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> account <span class="keyword">in</span> self.accounts:</span><br><span class="line">            account.deposit(account.balance * account.interest)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">too_big_to_fail</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.accounts) &gt; <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="attributes-lookup-practice">Attributes Lookup Practice</h2>
<p>There is a good example to check your understanding of looking up attributes.</p>
<img src="/2020/10/12/CS61A-SICP/CS61A-17-Inheritance/19-4.JPG" class="" title="Attribute Lookup Exercise">
<p>🚀 <a href="https://www.youtube.com/watch?v=qFvC4SwbG4A&amp;list=PL6BsET-8jgYXpV7vl4Pvo25wh0FKRlecx&amp;index=6">LINK: Hint Video</a></p>
<h2 id="multiple-inheritance">Multiple Inheritance</h2>
<p>Multiple inheritance is when a subclass has multiple base classes.</p>
<img src="/2020/10/12/CS61A-SICP/CS61A-17-Inheritance/19-5.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>such_a_deal = AsSeenOnTVAccount(<span class="string">&#x27;John&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>such_a_deal.balance </span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>such_a_deal.deposit(<span class="number">20</span>)  <span class="comment"># SavingsAccount method</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>such_a_deal.withdraw(<span class="number">5</span>)  <span class="comment"># CheckingAccount method</span></span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(15): Iterators</title>
    <url>/2020/10/07/CS61A-SICP/CS61A-15-Iterators/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 15.</p>
<span id="more"></span>
<h2 id="iterators">Iterators</h2>
<p>Iterators are common interface in many programming languages, and they're used in Python as a way to access the elements of lots of different containers. A container can provide an <strong>iterator</strong> which in turn provides access to its elements in order.</p>
<p>Two built-in functions:</p>
<ul>
<li><strong>iter(iterable)</strong>: Return an iterator over the elements of an iterable value</li>
<li><strong>next(iterator)</strong>: Return the next element in an iterator</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [[<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="built_in">iter</span>(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">&lt;list_iterator <span class="built_in">object</span> at <span class="number">0x000002050E878B80</span>&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(t)</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>
<h2 id="dictionary-iteration">Dictionary Iteration</h2>
<img src="/2020/10/07/CS61A-SICP/CS61A-15-Iterators/16-1.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dictionary iteration demo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>k = <span class="built_in">iter</span>(d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(k)</span><br><span class="line"><span class="string">&#x27;one&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;zero&#x27;</span>] = <span class="number">0</span>   <span class="comment"># change the size of dictionary, then the original iterator becomes invalid</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(k)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">RuntimeError: dictionary changed size during iteration</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>k = <span class="built_in">iter</span>(d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(k)</span><br><span class="line"><span class="string">&#x27;one&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(k)</span><br><span class="line"><span class="string">&#x27;two&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;one&#x27;</span>] = <span class="number">8</span>  <span class="comment"># it&#x27;s ok if just change the value instead of changing size</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(k)</span><br><span class="line"><span class="string">&#x27;zero&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="for-statements">For Statements</h2>
<p>For statements iterate over iterable values. They can also iterate over iterators themselves.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> r:         <span class="comment"># iterate over iterable values</span></span><br><span class="line"><span class="meta">... </span>  <span class="built_in">print</span>(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ri = <span class="built_in">iter</span>(r)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ri</span><br><span class="line">&lt;range_iterator <span class="built_in">object</span> at <span class="number">0x0000021880BFD9B0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(ri)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> ri:        <span class="comment"># iterate over iterators</span></span><br><span class="line"><span class="meta">... </span>  <span class="built_in">print</span>(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> ri:        <span class="comment"># cannot use iterator again</span></span><br><span class="line"><span class="meta">... </span>   <span class="built_in">print</span>(i)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="built-in-iterator-functions">Built-in Iterator Functions</h2>
<ul>
<li><strong>lazy computation:</strong> means the result is only computed when it has been requested</li>
</ul>
<img src="/2020/10/07/CS61A-SICP/CS61A-15-Iterators/16-2.JPG" class="">
<h3 id="map-demo">Map Demo</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bcd = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x.upper() <span class="keyword">for</span> x <span class="keyword">in</span> bcd]</span><br><span class="line">[<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bcd</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x.upper(), bcd)   <span class="comment"># return an iterator</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m</span><br><span class="line">&lt;<span class="built_in">map</span> <span class="built_in">object</span> at <span class="number">0x000001C6BE11A630</span>&gt;      <span class="comment"># an iterator object</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(m)</span><br><span class="line"><span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(m)</span><br><span class="line"><span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(m)</span><br><span class="line"><span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(m)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>
<h3 id="filter-demo">Filter Demo</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">double</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="meta">... </span>  <span class="built_in">print</span>(<span class="string">&#x27;**&#x27;</span>, x, <span class="string">&#x27;=&gt;&#x27;</span>, <span class="number">2</span>*x, <span class="string">&#x27;**&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">return</span> <span class="number">2</span> * x</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = <span class="built_in">map</span>(double, <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">7</span>))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> y: y &gt;= <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="built_in">filter</span>(f, m)        <span class="comment"># pass into another sequence processing function</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">&lt;<span class="built_in">filter</span> <span class="built_in">object</span> at <span class="number">0x000001C6BDE8A2B0</span>&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line">** <span class="number">3</span> =&gt; <span class="number">6</span> **</span><br><span class="line">** <span class="number">4</span> =&gt; <span class="number">8</span> **</span><br><span class="line">** <span class="number">5</span> =&gt; <span class="number">10</span> **</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(t)</span><br><span class="line">** <span class="number">6</span> =&gt; <span class="number">12</span> **</span><br><span class="line">[<span class="number">12</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">filter</span>(f, <span class="built_in">map</span>(double, <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">7</span>))))</span><br><span class="line">** <span class="number">3</span> =&gt; <span class="number">6</span> **</span><br><span class="line">** <span class="number">4</span> =&gt; <span class="number">8</span> **</span><br><span class="line">** <span class="number">5</span> =&gt; <span class="number">10</span> **</span><br><span class="line">** <span class="number">6</span> =&gt; <span class="number">12</span> **</span><br><span class="line">[<span class="number">10</span>, <span class="number">12</span>]</span><br></pre></td></tr></table></figure>
<h3 id="zip-demo">Zip Demo</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example: zip</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = <span class="built_in">zip</span>(d.keys(), d.values())  <span class="comment"># return an iterator</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(items) </span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(items)</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(items)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>
<img src="/2020/10/07/CS61A-SICP/CS61A-15-Iterators/16-3.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># demo: palindrome</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">palindrome</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether s is the same sequence backward and forward.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; palindrome([3, 1, 4, 1, 5])</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; palindrome([3, 1, 4, 1, 3])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; palindrome(&#x27;seveneves&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; palindrome(&#x27;seven eves&#x27;)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># return s == reversed(s)  # This version doesn&#x27;t work, since list != iterator</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span>([a == b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(s, <span class="built_in">reversed</span>(s))])</span><br><span class="line">    <span class="comment"># or: return list(s) == list(reversed(s))</span></span><br></pre></td></tr></table></figure>
<h2 id="generators">Generators</h2>
<p>A gernerator is a special kind of iterator. The special thing is that a generator is returned from a generator function.</p>
<p>A generator function is a function that <strong>yield</strong>s values instead of <strong>return</strong>ing values.</p>
<ul>
<li>normal function returns once;</li>
<li>generator function yield multiple times;</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">plus_minus</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">yield</span> x</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">yield</span> -x</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = plus_minus(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">&lt;generator <span class="built_in">object</span> plus_minus at <span class="number">0x000002050E807C10</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line">-<span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>
<p>Generator functions can return generators. But they often process iterators in the course of their execution.</p>
<img src="/2020/10/07/CS61A-SICP/CS61A-15-Iterators/16-5.JPG" class="">
<p>Let's finish today's lecture with the following examples.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prefixes</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; list(prefixes(&quot;both&quot;))</span></span><br><span class="line"><span class="string">    [&#x27;b&#x27;, &#x27;bo&#x27;, &#x27;bot&#x27;, &#x27;both&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> s:</span><br><span class="line">        <span class="comment"># for x in prefixes(s[:-1]):</span></span><br><span class="line">        <span class="comment">#     yield x</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> prefixes(s[:-<span class="number">1</span>])     <span class="comment"># shortcut above the two lines</span></span><br><span class="line">        <span class="keyword">yield</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">substrings</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; list(substrings(&#x27;tops&#x27;))</span></span><br><span class="line"><span class="string">    [&#x27;t&#x27;, &#x27;to&#x27;, &#x27;top&#x27;, &#x27;tops&#x27;, &#x27;o&#x27;, &#x27;op&#x27;, &#x27;ops&#x27;, &#x27;p&#x27;, &#x27;ps&#x27;, &#x27;s&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> s:</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> prefixes(s)</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> substrings(s[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(2): Functions</title>
    <url>/2020/08/27/CS61A-SICP/CS61A-2-Functions/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 2.</p>
<span id="more"></span>
<h2 id="expression">Expression</h2>
<p>An <strong>expression</strong> describes a computation and evaluates to a value.</p>
<p>Function, as a generalization over all notations, can be used by all expressions.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">Types of expressions:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1) primitive expressions</span></span><br><span class="line"><span class="string">2) call expressions</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># primitive expression</span></span><br><span class="line"><span class="number">2000</span> + <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># call expressions</span></span><br><span class="line"><span class="built_in">max</span>(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">min</span>(<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">pow</span>(<span class="number">100</span>, <span class="number">2</span>)  <span class="comment"># 10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul</span><br><span class="line"></span><br><span class="line">mul(add(<span class="number">4</span>, mul(<span class="number">4</span>, <span class="number">6</span>)), add(<span class="number">3</span>, <span class="number">5</span>))  <span class="comment"># 224</span></span><br></pre></td></tr></table></figure>
<h2 id="evaluation-of-call-expression">Evaluation of call expression</h2>
<p>An expression's operators and operands can also be expressions.</p>
<p>An expression tree is as follows:</p>
<img src="/2020/08/27/CS61A-SICP/CS61A-2-Functions/lec2-1.png" class="" title="Evaluate Nested Expressions">
<p>Evaluation procedure for call expressions:</p>
<ul>
<li>Evaluate the operator expression</li>
<li>Evaluate the operand subexpressions from left to right</li>
<li>Apply the operator (a function) to the operands (arguments)</li>
</ul>
<h2 id="names-assignment-and-user-defined-functions">Names, Assignment, and User-defined Functions</h2>
<h3 id="assignment">Assignment</h3>
<p>Assignment is a simple means of abstraction: <strong>binds names to values or functions.</strong></p>
<p>Examples:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> pi, sin</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>radius = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = sin(pi / <span class="number">2</span>) <span class="comment"># 1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">max</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)      <span class="comment"># max(1, 2, 3)</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h3 id="defining-functions">Defining Functions</h3>
<p>A function is a sequence of code that perform a particular task and can be reused easily. Function definition is a more powerful means of abstraction.</p>
<p>We programmers can build our own functions.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Just function definition won&#x27;t make the function be executed.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> &lt;<span class="title">name</span>&gt;(<span class="params">&lt;formal parameters&gt;</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &lt;<span class="keyword">return</span> expression&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># User-defined functions</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square(21)</span></span><br><span class="line"><span class="string">    441</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square(add(2, 5))</span></span><br><span class="line"><span class="string">    49</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square(square(3))</span></span><br><span class="line"><span class="string">    81</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> mul(x, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_squares</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares(3, 4) </span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares(5, 12)</span></span><br><span class="line"><span class="string">    169</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> add(square(x), square(y))</span><br></pre></td></tr></table></figure>
<p>Procedure of calling user-defined functions is as follows:</p>
<img src="/2020/08/27/CS61A-SICP/CS61A-2-Functions/lec2-2.png" class="" title="Environment Diagrams">
<img src="/2020/08/27/CS61A-SICP/CS61A-2-Functions/lec2-3.png" class="">
<h3 id="modules">Modules</h3>
<p>Functions are organized into <strong>modules</strong>, which together comprise the Python <strong>library</strong>. For example, Numpy is a library, it contains many modules, i.e. many <code>.py</code> files.</p>
<p>We programmer can define our own functions modules or libraries.</p>
<p>🦄 External Resource: <a href="https://docs.python.org/3/library/index.html">Python Standard Library</a></p>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(18): Representation</title>
    <url>/2020/10/14/CS61A-SICP/CS61A-18-Representation/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 18.</p>
<span id="more"></span>
<h2 id="string-representations">String Representations</h2>
<p>An object value should behave like the kind of data it is meant to represent.</p>
<p>In Python, all objects produce two string representations:</p>
<ul>
<li>The <strong>str</strong> is legible to humans</li>
<li>The <strong>repr</strong> is legible to the Python interpreter</li>
</ul>
<p>🌋 The <code>print()</code> function calls the built-in <code>__str__</code> method of the object, while simply calling the object in interactive mode calls the built-in <code>__repr__</code> method.</p>
<p>The str and repr strings are often the same, but not always.</p>
<img src="/2020/10/14/CS61A-SICP/CS61A-18-Representation/20-1.JPG" class="" title="repr String">
<img src="/2020/10/14/CS61A-SICP/CS61A-18-Representation/20-2.JPG" class="" title="str String">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Demo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>half = Fraction(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>half            <span class="comment"># repr string</span></span><br><span class="line">Fraction(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(half)     <span class="comment"># str string</span></span><br><span class="line"><span class="number">1</span>/<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">repr</span>(half)</span><br><span class="line"><span class="string">&#x27;Fraction(1, 2)&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(half)</span><br><span class="line"><span class="string">&#x27;1/2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="built_in">repr</span>(half))</span><br><span class="line">Fraction(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="built_in">str</span>(half))</span><br><span class="line"><span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&quot;Hello, World&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">&#x27;Hello, World&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">repr</span>(s))</span><br><span class="line"><span class="string">&#x27;Hello, World&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(s)</span><br><span class="line">Hello, World</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">str</span>(s))</span><br><span class="line">Hello, World</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">repr</span>(s)</span><br><span class="line"><span class="string">&quot;&#x27;Hello, World&#x27;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">repr</span>(<span class="built_in">repr</span>(<span class="built_in">repr</span>(s)))</span><br><span class="line"><span class="string">&#x27;\&#x27;&quot;\\\&#x27;Hello, World\\\&#x27;&quot;\&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(s)</span><br><span class="line"><span class="string">&#x27;Hello, World&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="built_in">repr</span>(s))</span><br><span class="line"><span class="string">&#x27;Hello, World&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="built_in">str</span>(s))    <span class="comment"># not a valid expression</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;Hello&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(s)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;Hello&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>
<h2 id="string-interpolation">String Interpolation</h2>
<img src="/2020/10/14/CS61A-SICP/CS61A-18-Representation/20-3.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Demo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;2 + 2 = <span class="subst">&#123;<span class="number">2</span> + <span class="number">2</span>&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;2 + 2 = 4&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;2 + 2 = <span class="subst">&#123;(<span class="keyword">lambda</span> x: <span class="number">2</span> * x)(<span class="number">2</span>)&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;2 + 2 = 4&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>half = Fraction(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;half of a half is <span class="subst">&#123;half * half&#125;</span>&#x27;</span>  <span class="comment"># str string</span></span><br><span class="line"><span class="string">&#x27;half of a half is 1/4&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;half of a half is <span class="subst">&#123;<span class="built_in">repr</span>(half * half)&#125;</span>&#x27;</span>    <span class="comment"># repr string</span></span><br><span class="line"><span class="string">&#x27;half of a half is Fraction(1, 4)&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="polymorphic-functions">Polymorphic Functions</h2>
<img src="/2020/10/14/CS61A-SICP/CS61A-18-Representation/20-4.JPG" class="">
<img src="/2020/10/14/CS61A-SICP/CS61A-18-Representation/20-5.JPG" class="">
<p>Let's see some examples.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bear</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A bear.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Bear()&#x27;</span></span><br><span class="line"></span><br><span class="line">oski = Bear()</span><br><span class="line"><span class="built_in">print</span>(oski)             <span class="comment"># Bear()    &quot;same as print(str(oski))&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(oski))        <span class="comment"># Bear()    &quot;no class attribute __str__, so use class attribute __repr__&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(oksi))       <span class="comment"># Bear()    &quot;use class attribute __repr__&quot;</span></span><br><span class="line"><span class="built_in">print</span>(oski.__str__())   <span class="comment"># Bear()    &quot;no instance attribute __str__, so use class attribute __str__&quot;</span></span><br><span class="line"><span class="built_in">print</span>(oski.__repr__())  <span class="comment"># Bear()    &quot;no instance attribute __repr__, so use class attribute __repr__&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Since there is no __str__() method, so the __repr__() will be used.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bear</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A bear.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Bear()&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;a bear&#x27;</span></span><br><span class="line"></span><br><span class="line">oski = Bear()</span><br><span class="line"><span class="built_in">print</span>(oski)             <span class="comment"># a bear    &quot;same as print(str(oski))&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(oski))        <span class="comment"># a bear    &quot;so use class attribute __str__&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(oksi))       <span class="comment"># Bear()    &quot;use class attribute __repr__&quot;</span></span><br><span class="line"><span class="built_in">print</span>(oski.__str__())   <span class="comment"># a bear    &quot;no instance attribute __str__, so use class attribute __str__&quot;</span></span><br><span class="line"><span class="built_in">print</span>(oski.__repr__())  <span class="comment"># Bear()    &quot;no instance attribute __repr__, so use class attribute __repr__&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bear</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A bear.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__repr__ = <span class="keyword">lambda</span>: <span class="string">&#x27;oski&#x27;</span></span><br><span class="line">        self.__str__ = <span class="keyword">lambda</span>: <span class="string">&#x27;this bear&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Bear()&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;a bear&#x27;</span></span><br><span class="line"></span><br><span class="line">oski = Bear()</span><br><span class="line"><span class="built_in">print</span>(oski)             <span class="comment"># a bear        &quot;same as print(str(oski))&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(oski))        <span class="comment"># a bear        &quot;ignore instance attribute and just use class attribute __str__&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(oski))       <span class="comment"># Bear()        &quot;ignore instance attribute and just use class attribute __repr__&quot;</span></span><br><span class="line"><span class="built_in">print</span>(oski.__str__())   <span class="comment"># this bear     &quot;attribute lookup: use instance attribute __str__&quot;</span></span><br><span class="line"><span class="built_in">print</span>(oski.__repr__())  <span class="comment"># oski          &quot;attribute lookup: use instance attribute __repr__&quot;</span></span><br></pre></td></tr></table></figure>
<p>To check our understanding, let's try to implement our <code>repr</code> and <code>str</code> function.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bear</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A bear.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__repr__ = <span class="keyword">lambda</span>: <span class="string">&#x27;oski&#x27;</span></span><br><span class="line">        self.__str__ = <span class="keyword">lambda</span>: <span class="string">&#x27;this bear&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Bear()&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;a bear&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># replace the built-in functions</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repr</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span>(x).__repr__(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str</span>(<span class="params">x</span>):</span></span><br><span class="line">    t = <span class="built_in">type</span>(x)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(t, <span class="string">&#x27;__str__&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> t.__str__(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">repr</span>(x)</span><br><span class="line"></span><br><span class="line">oski = Bear()</span><br><span class="line"><span class="built_in">print</span>(oski)             <span class="comment"># a bear        &quot;same as print(str(oski))&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(oski))        <span class="comment"># a bear        &quot;call our defined str() function, since class Bear has attribute __str__, so execute code at line 11&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(oski))       <span class="comment"># Bear()        &quot;call our defined repr() function, execute code at 8&quot;</span></span><br><span class="line"><span class="built_in">print</span>(oski.__str__())   <span class="comment"># this bear     &quot;attribute lookup: code at line 6&quot;</span></span><br><span class="line"><span class="built_in">print</span>(oski.__repr__())  <span class="comment"># oski          &quot;attribute lookup: code at line 5&quot;</span></span><br></pre></td></tr></table></figure>
<img src="/2020/10/14/CS61A-SICP/CS61A-18-Representation/20-6.JPG" class="">
<p>Let's see a demo.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ratio</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n, d</span>):</span></span><br><span class="line">        self.numer = n</span><br><span class="line">        self.denom = d</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Ratio(&#123;0&#125;, &#123;1&#125;)&#x27;</span>.<span class="built_in">format</span>(self.numer, self.denom)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;0&#125;/&#123;1&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>half = Ratio(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(half)</span><br><span class="line"><span class="number">1</span>/<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>half</span><br><span class="line"><span class="string">&#x27;Ratio(1, 2)&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="special-method-names">Special Method Names</h2>
<p>Special method names are a topic particularly to the Python.</p>
<img src="/2020/10/14/CS61A-SICP/CS61A-18-Representation/20-7.JPG" class="">
<img src="/2020/10/14/CS61A-SICP/CS61A-18-Representation/20-8.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ratio</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n, d</span>):</span></span><br><span class="line">        self.numer = n</span><br><span class="line">        self.denom = d</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Ratio(&#123;0&#125;, &#123;1&#125;)&#x27;</span>.<span class="built_in">format</span>(self.numer, self.denom)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;0&#125;/&#123;1&#125;&#x27;</span>&#123;% asset_img <span class="number">20</span>-<span class="number">5.J</span>PG %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Generic</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other, <span class="built_in">int</span>):</span><br><span class="line">            n = self.numer + self.denom * other</span><br><span class="line">            d = self.denom</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(other, Ratio):</span><br><span class="line">            n = self.numer * other.denom + self.denom * other.numer</span><br><span class="line">            d = self.denom * other.denom</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(other, <span class="built_in">float</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">float</span>(self) + other</span><br><span class="line">        g = gcd(n, d)</span><br><span class="line">        <span class="keyword">return</span> Radio(n//g, d//g)</span><br><span class="line"></span><br><span class="line">    __radd__ = __add__</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__float__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.numer / self.denom</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="keyword">while</span> n != d:</span><br><span class="line">        n, d = <span class="built_in">min</span>(n, d), <span class="built_in">abs</span>(n-d)</span><br><span class="line">    <span class="keyword">return</span> n</span><br></pre></td></tr></table></figure>
<p>🏝️ <a href="https://stackoverflow.com/questions/1301346/what-is-the-meaning-of-single-and-double-underscore-before-an-object-name">Supplement Link: <strong>What is the meaning of single and double underscore</strong></a></p>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(19): Composition</title>
    <url>/2020/10/16/CS61A-SICP/CS61A-19-Composition/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 19.</p>
<span id="more"></span>
<h2 id="linked-lists">Linked Lists</h2>
<p>A <strong>linked list</strong> is either empty or a first value and the rest of the linked list.</p>
<img src="/2020/10/16/CS61A-SICP/CS61A-19-Composition/19-1.JPG" class="" title="Recursive Defintion: A Linked-List has an Linked-List Attribute">
<p>Let's implement this data structure.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A linked list.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = Link(3, Link(4, Link(5)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s</span></span><br><span class="line"><span class="string">    Link(3, Link(4, Link(5)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s.first</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s.rest</span></span><br><span class="line"><span class="string">    Link(4, Link(5))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s.rest.first</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s.rest.first = 7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s</span></span><br><span class="line"><span class="string">    Link(3, Link(7, Link(5)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s.first = 6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s.rest.rest = Link.empty</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s</span></span><br><span class="line"><span class="string">    Link(6, Link(7))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    empty = ()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, first, rest=empty</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> (rest <span class="keyword">is</span> Link.empty) <span class="keyword">or</span> isstance(rest, Link)</span><br><span class="line">        self.first = first</span><br><span class="line">        self.rest = rest</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.rest:</span><br><span class="line">            rest_repr = <span class="string">&#x27;, &#x27;</span> + <span class="built_in">repr</span>(self.rest)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rest_repr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Link(&#x27;</span> + <span class="built_in">repr</span>(self.first) + rest_repr + <span class="string">&#x27;)&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        string = <span class="string">&#x27;&lt;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> self.rest <span class="keyword">is</span> <span class="keyword">not</span> Link.empty:</span><br><span class="line">            string += <span class="built_in">str</span>(self.first) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">            self = self.rest</span><br><span class="line">        <span class="keyword">return</span> string + <span class="built_in">str</span>(self.first) + <span class="string">&#x27;&gt;&#x27;</span>  </span><br></pre></td></tr></table></figure>
<h3 id="linked-list-processing">Linked List Processing</h3>
<p>Let's see an example.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example: Range, Map, and Filter for Linked Lists</span></span><br><span class="line"></span><br><span class="line">square, odd = <span class="keyword">lambda</span> x: x * x, <span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(square, <span class="built_in">filter</span>(odd, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>))))     <span class="comment"># [1, 9, 25]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Try to implement!!!</span></span><br><span class="line">map_link(square, filter_link(odd, range_link(<span class="number">1</span>, <span class="number">6</span>)))    <span class="comment"># Link(1, Link(0, Link(25)))</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Solution:</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">range_link</span>(<span class="params">start, end</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a Link containing consecutive integers from start to end.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; range_link(3, 6)</span></span><br><span class="line"><span class="string">    Link(3, Link(4, Link(5)))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> start &gt;= end:</span><br><span class="line">        <span class="keyword">return</span> Link.empty</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Link(first=start, rest=range_link(start + <span class="number">1</span>, end))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map_link</span>(<span class="params">f, s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a Link that contains f(x) for each x in Link s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; map_link(square, range_link(3, 6))</span></span><br><span class="line"><span class="string">    Link(9, Link(16, Link(25)))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span> </span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">elif</span>:</span><br><span class="line">        <span class="keyword">return</span> Link(first=f(s.first), rest=map_link(f, s.rest))  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_link</span>(<span class="params">f, s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a Link that contains only the elements x of Link s for which f(x)</span></span><br><span class="line"><span class="string">    is a true value.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; filter_link(odd, range_link(3, 6))</span></span><br><span class="line"><span class="string">    Link(3, Link(5))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">elif</span> f(s.first):</span><br><span class="line">        <span class="keyword">return</span> Link(first=s.first, rest=filter_link(f, s.rest))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> filter_link(f, s.rest)</span><br></pre></td></tr></table></figure>
<h3 id="linked-list-mutation">Linked List Mutation</h3>
<img src="/2020/10/16/CS61A-SICP/CS61A-19-Composition/19-2.JPG" class="">
<p>Let's see an example.</p>
<img src="/2020/10/16/CS61A-SICP/CS61A-19-Composition/19-3.JPG" class="">
<h2 id="tree-class">Tree Class</h2>
<p><strong>Tree</strong> is another recursive computational data structure.</p>
<p>We've already implemented it in Lecture 12 with data abstraction. Now, let's try to implement it again, but with class.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A tree is a label and a list of branches.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = Tree(1, [Tree(3), Tree(4)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(t)</span></span><br><span class="line"><span class="string">    1   </span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">        4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, label, branches=[]</span>):</span></span><br><span class="line">        self.label = label</span><br><span class="line">        <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">isinstance</span>(branch, Tree)</span><br><span class="line">        self.branches = <span class="built_in">list</span>(branches)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.branches:</span><br><span class="line">            branch_str = <span class="string">&#x27;, &#x27;</span> + <span class="built_in">repr</span>(self.branches)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            branch_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Tree(&#123;0&#125;&#123;1&#125;)&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">repr</span>(self.label), branch_str)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;\n&#x27;</span>.join(self.indented())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">indented</span>(<span class="params">self</span>):</span></span><br><span class="line">        lines = []</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> self.branches:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> b.indented():</span><br><span class="line">                lines.append(<span class="string">&#x27;  &#x27;</span> + line)</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">str</span>(self.label)] + lines</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.branches</span><br></pre></td></tr></table></figure>
<p>We can use the Tree class easily.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_tree</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A Fibonacci tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(fib_tree(4))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">        0</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">          0</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> Tree(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left = fib_tree(n-<span class="number">2</span>)</span><br><span class="line">        right = fib_tree(n-<span class="number">1</span>)</span><br><span class="line">        fib_n = left.label + right.label</span><br><span class="line">        <span class="keyword">return</span> Tree(fib_n, [left, right])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaves</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the leaf values of a tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; leaves(fib_tree(4))</span></span><br><span class="line"><span class="string">    [0, 1, 1, 0, 1]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> tree.is_leaf():</span><br><span class="line">        <span class="keyword">return</span> [tree.label]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> tree.branches], [])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">height</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The height of a tree.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> tree.is_leaf():</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>([height(b) <span class="keyword">for</span> b <span class="keyword">in</span> tree.branches])</span><br></pre></td></tr></table></figure>
<img src="/2020/10/16/CS61A-SICP/CS61A-19-Composition/19-4.JPG" class="">
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(20): Efficiency</title>
    <url>/2020/10/19/CS61A-SICP/CS61A-20-Efficiency/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 20.</p>
<span id="more"></span>
<h2 id="measuring-efficiency">Measuring Efficiency</h2>
<p>By measuring efficiency, we can understand how long our programs will take to run.</p>
<p>Let's review our first example of tree recursion.</p>
<img src="/2020/10/19/CS61A-SICP/CS61A-20-Efficiency/22-1.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The nth Fibonacci number.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(20)</span></span><br><span class="line"><span class="string">    6765</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">2</span>) + fib(n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a counted version of f with a call_count attribute.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def fib(n):</span></span><br><span class="line"><span class="string">    ...     if n == 0 or n == 1:</span></span><br><span class="line"><span class="string">    ...         return n</span></span><br><span class="line"><span class="string">    ...     else:</span></span><br><span class="line"><span class="string">    ...         return fib(n-2) + fib(n-1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib = count(fib)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(20)</span></span><br><span class="line"><span class="string">    6765</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib.call_count</span></span><br><span class="line"><span class="string">    21891</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counted</span>(<span class="params">*args</span>):</span></span><br><span class="line">        counted.call_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> f(*args)</span><br><span class="line">    counted.call_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> counted</span><br></pre></td></tr></table></figure>
<h2 id="memoization">Memoization</h2>
<p>Memoization is a useful technique for speeding up the running time of a program.</p>
<img src="/2020/10/19/CS61A-SICP/CS61A-20-Efficiency/22-2.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">memo</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Memoize f.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def fib(n):</span></span><br><span class="line"><span class="string">    ...     if n == 0 or n == 1:</span></span><br><span class="line"><span class="string">    ...         return n</span></span><br><span class="line"><span class="string">    ...     else:</span></span><br><span class="line"><span class="string">    ...         return fib(n-2) + fib(n-1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib = count(fib)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(20)</span></span><br><span class="line"><span class="string">    6765</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib.call_count</span></span><br><span class="line"><span class="string">    21891</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; counted_fib = count(fib)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib  = memo(counted_fib)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(20)</span></span><br><span class="line"><span class="string">    6765</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; counted_fib.call_count</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(35)</span></span><br><span class="line"><span class="string">    9227465</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; counted_fib.call_count</span></span><br><span class="line"><span class="string">    36</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cache = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">memoized</span>(<span class="params">n</span>):</span></span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> cache:</span><br><span class="line">            cache[n] = f(n)</span><br><span class="line">        <span class="keyword">return</span> cache[n]</span><br><span class="line">    <span class="keyword">return</span> memoized  </span><br></pre></td></tr></table></figure>
<img src="/2020/10/19/CS61A-SICP/CS61A-20-Efficiency/22-3.JPG" class="">
<h2 id="exponentiation">Exponentiation</h2>
<p>Let's look at another example.</p>
<ul>
<li>Implement the exponential function in two different ways, one of which is more efficient than the other.</li>
</ul>
<img src="/2020/10/19/CS61A-SICP/CS61A-20-Efficiency/22-4.JPG" class="">
<img src="/2020/10/19/CS61A-SICP/CS61A-20-Efficiency/22-5.JPG" class="">
<h2 id="orders-of-growth">Orders of Growth</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Overlap</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">overlap</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Count the number of items that appear in both a and b.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; overlap([3, 5, 7, 6], [4, 5, 6, 5])</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">for</span> other <span class="keyword">in</span> b:</span><br><span class="line">            <span class="keyword">if</span> item == other:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>
<img src="/2020/10/19/CS61A-SICP/CS61A-20-Efficiency/22-6.JPG" class="">
<h2 id="notation">Notation</h2>
<img src="/2020/10/19/CS61A-SICP/CS61A-20-Efficiency/22-7.JPG" class="">
<p><strong>Big-O</strong> describes the upper bound for the time it takes for a function to run.</p>
<p><strong>Big-Theta</strong> desribes both a lower and a upper bound.</p>
<h2 id="space">Space</h2>
<p>Space, or memory, is another resource that get consumed by programs as they execute. So you need also worry about it.</p>
<p>Consumption of space is taken by values. It also gets taken up by frames, so you need to know how many frames exist because of different function calls in your program at the same time.</p>
<img src="/2020/10/19/CS61A-SICP/CS61A-20-Efficiency/22-8.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_frames</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a counted version of f with a max_count attribute.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def fib(n):</span></span><br><span class="line"><span class="string">    ...     if n == 0 or n == 1:</span></span><br><span class="line"><span class="string">    ...         return n</span></span><br><span class="line"><span class="string">    ...     else:</span></span><br><span class="line"><span class="string">    ...         return fib(n-2) + fib(n-1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib = count_frames(fib)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(20)</span></span><br><span class="line"><span class="string">    6765</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib.open_count</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib.max_count</span></span><br><span class="line"><span class="string">    20</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(25)</span></span><br><span class="line"><span class="string">    75025</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib.max_count</span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counted</span>(<span class="params">n</span>):</span></span><br><span class="line">        counted.open_count += <span class="number">1</span></span><br><span class="line">        counted.max_count = <span class="built_in">max</span>(counted.max_count, counted.open_count)</span><br><span class="line">        result = f(n)</span><br><span class="line">        counted.open_count -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    counted.open_count = <span class="number">0</span></span><br><span class="line">    counted.max_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> counted</span><br></pre></td></tr></table></figure>
<p>🎃 You can learn CS61B and CS170 to get more details about efficiency.</p>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(3): Control</title>
    <url>/2020/08/29/CS61A-SICP/CS61A-3-Control/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 3.</p>
<span id="more"></span>
<h2 id="print-and-none">Print and None</h2>
<p>The speacial value <code>None</code> represents nothing in Python.</p>
<p><strong>A function that does not explicitly return a value will return None.</strong> None is not displayed by the interpreter as the value of an expression.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;Go Bears!&#x27;</span></span><br><span class="line"><span class="string">&#x27;Go Bears!&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;Go Bears!&#x27;</span>)</span><br><span class="line">Go Bears!</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="literal">None</span>)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">print</span>(<span class="number">1</span>), <span class="built_in">print</span>(<span class="number">2</span>))</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="literal">None</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<img src="/2020/08/29/CS61A-SICP/CS61A-3-Control/lec3-1.png" class="">
<p><code>print</code> is a non-pure function, it can generate side effects. The value that print returns is always None.</p>
<p><strong>Pure functions are essential for writing concurrent programs</strong>, in which multiple call expressions may be evaluated simultaneously.</p>
<h2 id="multiple-environments">Multiple Environments</h2>
<p>When Python executes a program, different expressions can be evaluated in different environments.</p>
<img src="/2020/08/29/CS61A-SICP/CS61A-3-Control/lec3-2.png" class="">
<h2 id="miscellaneous-python-features">Miscellaneous Python Features</h2>
<ul>
<li>division</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Division</span></span><br><span class="line"><span class="number">618</span> / <span class="number">10</span>        <span class="comment"># 61.8</span></span><br><span class="line"><span class="number">618</span> // <span class="number">10</span>       <span class="comment"># 61</span></span><br><span class="line"><span class="number">618</span> % <span class="number">10</span>        <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> truediv, floordiv, mod</span><br><span class="line"></span><br><span class="line">truediv(<span class="number">618</span>, <span class="number">10</span>)    <span class="comment"># 61.8</span></span><br><span class="line">floordiv(<span class="number">618</span>, <span class="number">10</span>)   <span class="comment"># 61</span></span><br><span class="line">mod(<span class="number">618</span>, <span class="number">10</span>)        <span class="comment"># 8</span></span><br></pre></td></tr></table></figure>
<ul>
<li>multiple return values</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Multiple return values</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide_exact</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n // d, n % d</span><br></pre></td></tr></table></figure>
<ul>
<li>docstring, doctest &amp; default arguments</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docstrings, doctests, and default arguments</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> floordiv, mod</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide_exact</span>(<span class="params">n, d=<span class="number">10</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the quotient and remainder of dividing N by D.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; quotient, remainder = divide_exact(618)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; quotient</span></span><br><span class="line"><span class="string">    61</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remainder</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> floordiv(n, d), mod(n, d)</span><br></pre></td></tr></table></figure>
<ul>
<li>useful command line:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># interactive with Python file</span></span><br><span class="line">~$ python3 -i filename.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># run doctest in the file</span></span><br><span class="line">~$ python3 -m doctest filename.py</span><br></pre></td></tr></table></figure>
<h2 id="conditional-statements">Conditional Statements</h2>
<p>A <strong>statement</strong> is executed by the interpreter to perform an action.</p>
<p><strong>Conditional statements</strong> let programs execute different lines of code depending on certain conditions.</p>
<ul>
<li>False values in Python: False, 0, ' ', [ ], None, { }</li>
<li>True values in Python: anything else</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Conditional expressions</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">absolute_value</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the absolute value of X.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; absolute_value(-3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; absolute_value(0)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; absolute_value(3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
<p>A conditional expression also has the following form:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&lt;consequent&gt; <span class="keyword">if</span> &lt;predicate&gt; <span class="keyword">else</span> &lt;alternative&gt;</span><br></pre></td></tr></table></figure>
<h2 id="logic-operators">Logic Operators</h2>
<p>To evaluate the expression <code>&lt;left&gt; and &lt;right&gt;</code>:</p>
<ul>
<li>Evaluate the subexpression <code>&lt;left&gt;</code>.</li>
<li>If the result is a false value <strong>v</strong>, then the expression evaluates to <strong>v</strong>.</li>
<li>Otherwise, the expression evaluates to the value of the subexpression <code>&lt;right&gt;</code>.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span> <span class="keyword">and</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> <span class="keyword">and</span> <span class="literal">True</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">12</span> <span class="keyword">and</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p>To evaluate the expression <code>&lt;left&gt; or &lt;right&gt;</code>:</p>
<ul>
<li>Evaluate the subexpression <code>&lt;left&gt;</code>.</li>
<li>If the result is a true value <strong>v</strong>, then the expression evaluates to <strong>v</strong>.</li>
<li>Otherwise, the expression evaluates to the value of the subexpression <code>&lt;right&gt;</code>.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span> <span class="keyword">or</span> <span class="literal">True</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> <span class="keyword">or</span> <span class="number">12</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">False</span> <span class="keyword">or</span> <span class="number">2</span> <span class="keyword">or</span> <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Examples of short- circuiting behavior</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_big_sqrt</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether x has a big square root (&gt; 10).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(1000)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(100)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(0)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(-1000)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># can avoid crash when x is negative</span></span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">0</span> <span class="keyword">and</span> sqrt(x) &gt; <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reasonable</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Is N small enough that 1/N can be represented?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(100)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(0)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(-100)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(10 ** 1000)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">0</span> <span class="keyword">or</span> <span class="number">1</span>/n != <span class="number">0.0</span></span><br></pre></td></tr></table></figure>
<h2 id="iteration">Iteration</h2>
<p><strong>Iteration means repeating things.</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Summation via while iteration</span></span><br><span class="line">i, total = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">3</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    total = total + i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;i = <span class="subst">&#123;i&#125;</span>, total = <span class="subst">&#123;total&#125;</span>&quot;</span>)  <span class="comment"># i = 3, total = 6</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Example: Prime Factorization</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime_factors</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the prime factors of n in non-decreasing order.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; prime_factors(8)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; prime_factors(858)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    13</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">        k = smallest_prime_factor(n)</span><br><span class="line">        n = n // k</span><br><span class="line">        <span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smallest_prime_factor</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Find the smallest prime k &gt; 1 that evenly divided n.&quot;&quot;&quot;</span></span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> n % k != <span class="number">0</span>:</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(4): Higher-Order Functions</title>
    <url>/2020/09/01/CS61A-SICP/CS61A-4-Higher-Order-Functions/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 4.</p>
<span id="more"></span>
<h2 id="iteration-example">Iteration Example</h2>
<p>There are 2 different definitions of <code>fib</code> which can be used to calculate Fibonacci number.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the nth Fibonacci number, for N &gt;= 1.&quot;&quot;&quot;</span></span><br><span class="line">    pred, curr = <span class="number">0</span>, <span class="number">1</span>   <span class="comment"># 0th and 1st Fibonacci numbers</span></span><br><span class="line">    k = <span class="number">1</span>               <span class="comment"># curr is the kth Fibonacci number</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; n:</span><br><span class="line">        pred, curr = curr, pred + curr</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> curr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the nth Fibonacci number&quot;&quot;&quot;</span></span><br><span class="line">    pred, curr = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; n:</span><br><span class="line">        pred, curr = curr, pred + curr</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> curr</span><br></pre></td></tr></table></figure>
<p>The second one is much better since it can computer the 0-th Fibonacci number correctly.</p>
<h2 id="designing-functions">Designing Functions</h2>
<img src="/2020/09/01/CS61A-SICP/CS61A-4-Higher-Order-Functions/lec4-0.png" class="" title="Characteristics of Functions">
<p>There are lots of different functions that can do the same thing, but some are better than others.</p>
<p>So, how to design better function?</p>
<p>🏜️ <strong>A Guide to Designing Function:</strong></p>
<ul>
<li>Give each function exactly one job.</li>
<li>Don’t repeat yourself (DRY). Implement a process just once, but execute it many times.</li>
<li>Define functions generally.</li>
</ul>
<h3 id="example">Example</h3>
<p>The following is an example of generalizing patterns with arguments.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Compute the area of square, circle and hexoagon</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi, sqrt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_square</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a square with side length R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> r * r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_circle</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a circle with radius R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> r * r * pi</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_hexagon</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a regular hexagon with side length R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> r * r * <span class="number">3</span> * sqrt(<span class="number">3</span>) / <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>Noticing there are lots of repeating things among them.</p>
<p>Let's try to do some generalization.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generalization: Generalizing patterns using arguments</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">r, shape_constant</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a shape from length measurement R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> r &gt; <span class="number">0</span>, <span class="string">&#x27;A length must be positive&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> r * r * shape_constant</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_square</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_circle</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, pi)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_hexagon</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, <span class="number">3</span> * sqrt(<span class="number">3</span>) / <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<h2 id="higher-order-function">Higher-Order Function</h2>
<p>The common structure among functions may be a computational process, rather than just a number we saw in the previous example.</p>
<img src="/2020/09/01/CS61A-SICP/CS61A-4-Higher-Order-Functions/lec4-1.png" class="" title="Similar Computation Process">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Without generalization</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_naturals</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N natural numbers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_naturals(5)</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + k, k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_cubes</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N cubes of natural numbers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_cubes(5)</span></span><br><span class="line"><span class="string">    225</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + <span class="built_in">pow</span>(k, <span class="number">3</span>), k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>
<p>We notice the above computational processes are similar. The only difference is how we deal with the value of k-th term.</p>
<p>Let's do generalization again.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Functions as arguments</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(k, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pi_term</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span> / mul(k * <span class="number">4</span> - <span class="number">3</span>, k * <span class="number">4</span> - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summation</span>(<span class="params">n, term</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N terms of a sequence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation(5, cube)</span></span><br><span class="line"><span class="string">    225</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + term(k), k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_naturals</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> summation(n, identity)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_cubes</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> summation(n, cube)</span><br></pre></td></tr></table></figure>
<p>The function <code>summation(n, term)</code> above is called <strong>higher-order function</strong>, since it takes another function <code>term</code> as an argument.</p>
<p>Higher-order functions can also treat functions as return values. For example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_adder</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function that takes one argument K and returns K + N.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = make_adder(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(4)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adder</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> k + n</span><br><span class="line">    <span class="keyword">return</span> adder</span><br><span class="line"></span><br><span class="line">make_adder(<span class="number">2000</span>)(<span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<img src="/2020/09/01/CS61A-SICP/CS61A-4-Higher-Order-Functions/lec4-2.JPG" class="">
<p>Higher-order functions :</p>
<ul>
<li>express general methods of computation;</li>
<li>remove repetition from programs;</li>
<li>separate concerns among functions (each function just do one job)</li>
</ul>
<h2 id="lambda-expression">Lambda Expression</h2>
<p>Lambda expression is an expression that evalutes to a function.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lambda expressions</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">square = x * x</span><br><span class="line"></span><br><span class="line">square = <span class="keyword">lambda</span> x: x * x</span><br><span class="line">square(<span class="number">4</span>)  <span class="comment"># 16</span></span><br></pre></td></tr></table></figure>
<img src="/2020/09/01/CS61A-SICP/CS61A-4-Higher-Order-Functions/lec4-3.png" class="">
<h2 id="return-statements">Return Statements</h2>
<p>A return statement completes the evaluation of a call expression and provides its value.</p>
<p>Let's look at 2 problems.</p>
<p><strong>Question 1: find the smallest non-negative integer x which makes square(x) - 100 is positive</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the smallest non-negative integer x for which f(x) is a true value.&quot;&quot;&quot;</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> f(x):</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_three</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether x is three.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; search(is_three)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x == <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">positive</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A function that is 0 until square(x)-100 is positive.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; search(positive)</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0</span>, square(x) - <span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<p><strong>Question 2: define inverse function</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function g(y) that returns x such that f(x) == y</span></span><br><span class="line"><span class="string">    * g(f(x)) -&gt; x</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sqrt = inverse(square)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sqrt(16)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> y: search(<span class="keyword">lambda</span> x: f(x) == y)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(5): Environments</title>
    <url>/2020/09/04/CS61A-SICP/CS61A-5-Environments/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 5.</p>
<span id="more"></span>
<h2 id="environments-for-higher-order-functions">Environments for Higher-Order Functions</h2>
<p>Review: <strong>Higher-order function</strong> is a function that takes a function as an argument value or returns a function as a return value.</p>
<img src="/2020/09/04/CS61A-SICP/CS61A-5-Environments/lec5-1.png" class="" title="Python Visualizer">
<h2 id="environments-for-nested-definitions">Environments for Nested Definitions</h2>
<img src="/2020/09/04/CS61A-SICP/CS61A-5-Environments/lec5-2.png" class="">
<h2 id="self-reference">Self-reference</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Self Reference</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_all</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print all arguments of repeated calls.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = print_all(1)(2)(3)(4)(5)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line">    <span class="keyword">return</span> print_all</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sums</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print all sums of arguments of repeated calls.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = print_sums(1)(2)(3)(4)(5)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_sum</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> print_sums(n+k)</span><br><span class="line">    <span class="keyword">return</span> next_sum</span><br></pre></td></tr></table></figure>
<h2 id="currying">Currying</h2>
<p><strong>Currying:</strong> Transforming a multi-argument function into a higher-order function with single-argument.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Currying</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">curry2</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Curry a two-argument function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m = curry2(add)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = m(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(4)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m(2)(1)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">y</span>):</span></span><br><span class="line">            <span class="keyword">return</span> f(x, y)</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use lambda expression</span></span><br><span class="line">curry2 = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: <span class="keyword">lambda</span> y: f(x, y)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(6): Design</title>
    <url>/2020/09/09/CS61A-SICP/CS61A-6-Design/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 6.</p>
<span id="more"></span>
<h2 id="abstraction">Abstraction</h2>
<p>Functional abstraction is giving a name to some computational process, and then referring to that process as a whole without worrying about its implementation details.</p>
<img src="/2020/09/09/CS61A-SICP/CS61A-6-Design/lec6-1.JPG" class="">
<h2 id="choosing-names">Choosing Names</h2>
<img src="/2020/09/09/CS61A-SICP/CS61A-6-Design/lec6-2.JPG" class="">
<img src="/2020/09/09/CS61A-SICP/CS61A-6-Design/lec6-3.JPG" class="" title="Practical Guidelines">
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(7): Function Examples</title>
    <url>/2020/09/11/CS61A-SICP/CS61A-7-Function-Examples/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 7.</p>
<span id="more"></span>
<h2 id="exam-preview">Exam Preview</h2>
<img src="/2020/09/11/CS61A-SICP/CS61A-7-Function-Examples/lec7-0.JPG" class="" title="Question 1">
<img src="/2020/09/11/CS61A-SICP/CS61A-7-Function-Examples/lec7-0-1.JPG" class="" title="Question 2">
<img src="/2020/09/11/CS61A-SICP/CS61A-7-Function-Examples/lec7-0-2.JPG" class="" title="Question 3">
<p>Question 4: Implementing Function</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">n, digit</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return all digits of non-negative N</span></span><br><span class="line"><span class="string">       that are not DIGIT, for some</span></span><br><span class="line"><span class="string">       non-negative DIGIT less than 10.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove(231, 3)</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove(243132, 2)</span></span><br><span class="line"><span class="string">    4313</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    kept, digits = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> ____________________:</span><br><span class="line">        n, last = n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> ___________________:</span><br><span class="line">            kept = ___________</span><br><span class="line">            digits = _________</span><br><span class="line">    <span class="keyword">return</span> ___________________</span><br></pre></td></tr></table></figure>
<p>Try it for yourself before looking at the answer.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ANSWER</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">n, digit</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return all digits of non-negative N</span></span><br><span class="line"><span class="string">       that are not DIGIT, for some</span></span><br><span class="line"><span class="string">       non-negative DIGIT less than 10.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove(231, 3)</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove(243132, 2)</span></span><br><span class="line"><span class="string">    4313</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    kept, digits = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n, last = n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> last != digit:</span><br><span class="line">            kept = kept + <span class="number">10</span> ** digits *last</span><br><span class="line">            digits = digits + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> kept</span><br></pre></td></tr></table></figure>
<h2 id="decorators">Decorators</h2>
<p>Let's look at an example.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&gt; &#x27;</span>, fn, <span class="string">&#x27;(&#x27;</span>, x, <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> fn(x)</span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triple</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; trace(triple)(12)</span></span><br><span class="line"><span class="string">    -&gt;  &lt;function triple at 0x7fb70c45f048&gt; ( 12 )</span></span><br><span class="line"><span class="string">    36</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * x</span><br></pre></td></tr></table></figure>
<p><code>trace()</code> is a HOF. We have already learnt HOFs, so it's easy for us to understand the code.</p>
<p>However, if a programmer doesn't know HOFs, he/she won't understand the code. For those programmers who know nothing about HOFs, Python provides special syntax to apply higher-order functions as part of executing a def statement, called a <strong>decorator</strong>.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@trace</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triple</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; triple(12)</span></span><br><span class="line"><span class="string">    -&gt;  &lt;function triple at 0x102a39848&gt; ( 12 )</span></span><br><span class="line"><span class="string">    36</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * x</span><br></pre></td></tr></table></figure>
<p>The annotation <strong><span class="citation" data-cites="trace">@trace</span></strong> affects the execution rule of def.</p>
<p>The function <code>triple</code> will be created as usual. however, the name <code>triple</code> is not bound to this function body. Instead, it is bound to the returned function value of calling <code>trace</code> on the newly defined <code>triple</code> function, i.e. <code>triple = trace(triple)</code>.</p>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(8): Recursion</title>
    <url>/2020/09/16/CS61A-SICP/CS61A-8-Recursion/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 8.</p>
<span id="more"></span>
<h2 id="recursive-function">Recursive Function</h2>
<p>A function is called <code>recursive</code> if the body of that function calls itself, either directly or indirectly.</p>
<p>Let's see an example.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sum digits</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Split a positive integer into all but its last digit and its last digit.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of the digits of positive integer n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(9)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(18117)</span></span><br><span class="line"><span class="string">    18</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(9437184)</span></span><br><span class="line"><span class="string">    36</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(11408855402054064613470328848384)</span></span><br><span class="line"><span class="string">    126</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># base cases</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="comment"># recursive case</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits(all_but_last) + last</span><br></pre></td></tr></table></figure>
<p>Another example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># String reversal</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_string</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Reverse a string s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_string(&#x27;draw&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;ward&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> reverse_string(s[<span class="number">1</span>:]) + s[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h2 id="recursion-in-environment-diagrams">Recursion in Environment Diagrams</h2>
<p>Notice: The recursion environment diagram is shown here to help you understand the recursive function execution process. When dealing with the real problems, you should avoid draw this environment diagrams.</p>
<img src="/2020/09/16/CS61A-SICP/CS61A-8-Recursion/lec8-1.png" class="">
<h2 id="recursion-and-iteration">Recursion and Iteration</h2>
<p>Iteration is a special case of recursion. For the most of functions, you can convert from iteration into recursion, or vice versa.</p>
<img src="/2020/09/16/CS61A-SICP/CS61A-8-Recursion/lec8-0.JPG" class="">
<p>Let's see another example.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Converting iteration to recursion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits_iter</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum digits iteratively.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits_iter(11408855402054064613470328848384)</span></span><br><span class="line"><span class="string">    126</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    digit_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n, last = split(n)</span><br><span class="line">        digit_sum = digit_sum + last</span><br><span class="line">    <span class="keyword">return</span> digit_sum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits_rec</span>(<span class="params">n, digit_sum</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum digits using recursion, based on iterative version.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits_rec(11408855402054064613470328848384, 0)</span></span><br><span class="line"><span class="string">    126</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> digit_sum</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        n, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits_rec(n, digit_sum + last)</span><br></pre></td></tr></table></figure>
<h2 id="mutual-recursion">Mutual Recursion</h2>
<p>Mutual recursion occurs when two different functions call each other.</p>
<p>Let's see an example.</p>
<img src="/2020/09/16/CS61A-SICP/CS61A-8-Recursion/lec8-2.png" class="">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Luhn algorithm: mutual recursion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Split a positive integer into all but its last digit and its last digit.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of the digits of positive integer n.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits(all_but_last) + last</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">luhn_sum</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the digit sum of n computed by the Luhn algorithm.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(2)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(12)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(42)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(138743)</span></span><br><span class="line"><span class="string">    30</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(5105105105105100) # example Mastercard</span></span><br><span class="line"><span class="string">    20</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(4012888888881881) # example Visa</span></span><br><span class="line"><span class="string">    90</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(79927398713) # from Wikipedia</span></span><br><span class="line"><span class="string">    70</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> luhn_sum_double(all_but_last) + last</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">luhn_sum_double</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Luhn sum of n, doubling the last digit.&quot;&quot;&quot;</span></span><br><span class="line">    all_but_last, last = split(n)</span><br><span class="line">    luhn_digit = sum_digits(<span class="number">2</span> * last)</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> luhn_digit</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> luhn_sum(all_but_last) + luhn_digit </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>Collections in Java(1)</title>
    <url>/2021/10/24/Coding/Collections-in-Java-1/</url>
    <content><![CDATA[<p>In this series, we will discuss the <strong>Java Collections Framework</strong>.</p>
<span id="more"></span>
<p>In Java, we have a <strong>Collection</strong> interface extended by other interfaces such as <strong>List</strong>, <strong>Set</strong>, and <strong>Queue</strong>. We also have a <strong>Map</strong> interface. The Map does not extend the Collection interface because it stores key-value pairs, and the classes that come under the Collection interface store only values.</p>

<h2 id="collection-vs.-collections">Collection vs. Collections</h2>
<ul>
<li>A Collection is an interface, whereas Collections is a class.</li>
<li>A Collection interface provides the standard functionality of a data structure to List, Set, and Queue. However, the Collections class provides the utility methods that can be used to search, sort, and synchronize collection elements.</li>
</ul>
<h2 id="list-in-java-arraylist">List in Java: ArrayList</h2>

<p><strong>ArrayList</strong> is an list based on array. Some of the salient features of an ArrayList are:</p>
<ul>
<li>Elements are stored in the order of insertion.</li>
<li>It allows the storage of duplicate elements.</li>
<li>ArrayList also supports null elements.</li>
</ul>
<p>An ArrayList stores data in a <strong>resizable</strong> array. After Java 8, when an ArrayList is created, an array of size zero is created. Only when the first element is inserted does the array size change to ten. This is called <strong>lazy initialization</strong>, and it saves a lot of memory.</p>
<p>In CS61B, we've discussed resizing an array in lecture 7, and also implemented it in project 1. The strategy we used is doubling the length. In real Java, the strategy is changing length from <code>n</code> to <code>(n + n/2 + 1)</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Create an ArrayList */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// no-args construction</span></span><br><span class="line">List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// give initial capacity</span></span><br><span class="line">List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// using existing collection</span></span><br><span class="line">List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;(L2);</span><br></pre></td></tr></table></figure>
<h3 id="time-complexities-for-operations">Time Complexities for Operations</h3>
<ol type="1">
<li><strong>Add an element</strong></li>
</ol>
<p>If an ArrayList is not full, it will take <em>O</em>(1) time.</p>
<p>However, if it is full, it will take extra time to do resizing ... <em>O</em>(N), where N is the number of elements of the ArrayList before adding.</p>
<ol start="2" type="1">
<li><strong>Remove an element</strong></li>
</ol>
<p>You can remove an element by giving its index, or giving itself.</p>
<ul>
<li>Remove by index:
<ul>
<li><em>O</em>(1) in the best case, ... remove the last element.</li>
<li><em>O</em>(n) in the worst case. ... remove the first element, and copy the rest</li>
</ul></li>
<li>Remove by element itself:
<ul>
<li>scan the array to find the element, then remove it if it exists.</li>
</ul></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Remove */</span></span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove an element at a particular index</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">4</span>;</span><br><span class="line">L.remove(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove a particular element</span></span><br><span class="line">L.remove(<span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove all elements within a range</span></span><br><span class="line"><span class="comment">// fromIndex is inclusive and toIndex is exclusive</span></span><br><span class="line"><span class="comment">// this method is not defined in the List class. </span></span><br><span class="line"><span class="comment">// So, it can be used only when the reference type is also ArrayList and not List.</span></span><br><span class="line">removeRange(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove all elements within a given collection</span></span><br><span class="line">L. removeAll(L2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove all elements</span></span><br><span class="line">L.clear();</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li><strong>Fetch an element</strong></li>
</ol>
<p>Fetch an element from an ArrayList using index takes <em>O</em>(1) constant time.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Fetch */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">4</span>;</span><br><span class="line">L.get(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetch the size of an ArrayList</span></span><br><span class="line">L.size();</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li><strong>Insert elements</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Insert */</span></span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// insert the element at the end</span></span><br><span class="line">L.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert the element at a given index</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">4</span>;</span><br><span class="line">L.add(index, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert multiple elements from another collection at the end</span></span><br><span class="line">L.addAll(L1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert multiple elements from another collection at a given index </span></span><br><span class="line">L.addAll(index, L1);</span><br></pre></td></tr></table></figure>
<ol start="5" type="1">
<li><strong>Replace all elements in Java 8</strong></li>
</ol>
<p>A new method, <code>replaceAll(UnaryOperator&lt;E&gt; operator)</code>, was added in Java 8. This method takes a single UnaryOperator type argument. The UnaryOperator interface is a functional interface that has a single abstract method, <code>apply()</code>, that returns a result of the same object type as the operand.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">		list.add(<span class="string">&quot;banana&quot;</span>);</span><br><span class="line"></span><br><span class="line">		list.replaceAll((element) -&gt; element.toUpperCase());</span><br><span class="line"></span><br><span class="line">		System.out.println(list);   <span class="comment">// [APPLE, BANANA]</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6" type="1">
<li><strong>Update an element</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// set the element at index to a new value</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">String newStr = <span class="string">&quot;peach&quot;</span>;</span><br><span class="line">list.set(index, newStr);</span><br></pre></td></tr></table></figure>
<ol start="7" type="1">
<li><strong>Check existence</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line">		list.add(<span class="number">20</span>);</span><br><span class="line">		list.add(<span class="number">30</span>);</span><br><span class="line">		list.add(<span class="number">40</span>);</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">		list.set(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);  <span class="comment">// [10, 100, 30, 40, 10]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// check if an element is present</span></span><br><span class="line">        <span class="keyword">if</span> (list.contains(<span class="number">30</span>)) &#123;    <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">&quot;List contains 30&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the index of the first occurrence</span></span><br><span class="line">        System.out.println(</span><br><span class="line">            <span class="string">&quot;Index of first occurence of 10 is &quot;</span> + list.indexOf(<span class="number">10</span>) <span class="comment">// 0</span></span><br><span class="line">        );</span><br><span class="line">        System.out.println(</span><br><span class="line">            <span class="string">&quot;Index of last occurence of 10 is &quot;</span> + list.lastIndexOf(<span class="number">10</span>)  <span class="comment">// 4</span></span><br><span class="line">        );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="iteration">Iteration</h3>
<h4 id="using-iterator">Using Iterator</h4>
<p>In CS61B lecture 11, we have discussed enhanced for loop.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line">		list.add(<span class="number">20</span>);</span><br><span class="line">		list.add(<span class="number">30</span>);</span><br><span class="line">		list.add(<span class="number">40</span>);</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">		Iterator&lt;Integer&gt; itr = list.iterator();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(itr.hasNext()) &#123;</span><br><span class="line">			System.out.println(itr.next());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Iterating using forEachRemaining() method</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Iterating using forEachRemaining() method&quot;</span>);</span><br><span class="line">		Iterator&lt;Integer&gt; newItr = list.iterator();</span><br><span class="line">		newItr.forEachRemaining(element -&gt; System.out.println(element));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If we try to directly remove an element while iterating an ArrayList using an iterator is created, then <code>ConcurrentModificationException</code> will also be thrown. We should always use the <code>remove()</code> method in the iterator to remove an element from the ArrayList.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** This program will fail because we are trying to delete the element from the list directly. */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListPractice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line">		list.add(<span class="number">20</span>);</span><br><span class="line">		list.add(<span class="number">30</span>);</span><br><span class="line">		list.add(<span class="number">40</span>);</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">		Iterator&lt;Integer&gt; itr = list.iterator();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (itr.hasNext()) &#123;</span><br><span class="line">			<span class="keyword">int</span> next = itr.next();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (next == <span class="number">30</span>) &#123;</span><br><span class="line">				list.remove(<span class="keyword">new</span> Integer(<span class="number">30</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** This program is the correct way to delete an element from the list. */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line">		list.add(<span class="number">20</span>);</span><br><span class="line">		list.add(<span class="number">30</span>);</span><br><span class="line">		list.add(<span class="number">40</span>);</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">		Iterator&lt;Integer&gt; itr = list.iterator();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(itr.hasNext()) &#123;</span><br><span class="line">			<span class="keyword">int</span> next = itr.next();</span><br><span class="line">			<span class="keyword">if</span>(next == <span class="number">30</span>) &#123;</span><br><span class="line">				itr.remove();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(list);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If an element is added to the ArrayList after the iterator is created then also <code>ConcurrentModificationException</code> will be thrown.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="number">34</span>);</span><br><span class="line">		list.add(<span class="number">45</span>);</span><br><span class="line"></span><br><span class="line">		Iterator&lt;Integer&gt; itr = list.iterator();</span><br><span class="line">		list.add(<span class="number">54</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(itr.hasNext()) &#123;</span><br><span class="line">			System.out.println(itr.next());	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="using-listiterator">Using ListIterator</h4>
<p>The <code>Iterator</code> provides very limited capabilities as we can iterate only in the forward direction and we can’t update or insert an element to the list while iterating. To overcome these problems, we can use <code>ListIterator</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line">		list.add(<span class="number">20</span>);</span><br><span class="line">		list.add(<span class="number">30</span>);</span><br><span class="line">		list.add(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Getting ListIterator</span></span><br><span class="line">		ListIterator&lt;Integer&gt; listIterator = list.listIterator();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Traversing elements</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Forward Direction Iteration:&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span> (listIterator.hasNext()) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Next element is &quot;</span> + listIterator.next() + </span><br><span class="line">			<span class="string">&quot; and next index is &quot;</span> + listIterator.nextIndex());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Traversing elements, the iterator is at the end at this point</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Backward Direction Iteration:&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span> (listIterator.hasPrevious()) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Previous element is &quot;</span> + listIterator.previous() + </span><br><span class="line">			<span class="string">&quot; and previous index is &quot;</span> + listIterator.previousIndex());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Forward Direction Iteration:</span></span><br><span class="line"><span class="comment">Next element is 10 and next index is 1</span></span><br><span class="line"><span class="comment">Next element is 20 and next index is 2</span></span><br><span class="line"><span class="comment">Next element is 30 and next index is 3</span></span><br><span class="line"><span class="comment">Next element is 40 and next index is 4</span></span><br><span class="line"><span class="comment">Backward Direction Iteration:</span></span><br><span class="line"><span class="comment">Previous element is 40 and previous index is 2</span></span><br><span class="line"><span class="comment">Previous element is 30 and previous index is 1</span></span><br><span class="line"><span class="comment">Previous element is 20 and previous index is 0</span></span><br><span class="line"><span class="comment">Previous element is 10 and previous index is -1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>Besides, there are other methods such as <code>remove()</code>, <code>set(E e)</code>, <code>add(E e)</code> etc.</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(9): Tree Recursion</title>
    <url>/2020/09/18/CS61A-SICP/CS61A-9-Tree-Recursion/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 7.</p>
<span id="more"></span>
<h2 id="order-of-recursive-calls">Order of Recursive Calls</h2>
<p>When making a function called, you have to wait for <strong>return</strong> before doing anything else.</p>
<p>Let's see an example.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ordering</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cascade</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print a cascade of prefixes of n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cascade(1234)</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        cascade(n//<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># version 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cascade2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print a cascade of prefixes of n.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">if</span> n &gt;= <span class="number">10</span>:</span><br><span class="line">        cascade2(n//<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<ul>
<li>If two implementations are equally clear, then shorter is usually better.</li>
<li>In this case, the longer implementation is more clear (at least to me).</li>
<li>When learning to write recursive functions, put the base cases first.</li>
<li>Both are recursive functions, even though only the first one has typical structure</li>
</ul>
<p>Exercise : Write a function that prints an inverse cascade.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inverse Cascade</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_cascade</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print an inverse cascade of prefixes of n.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; inverse_cascade(1234)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    grow(n)</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    shrink(n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f_then_g</span>(<span class="params">f, g, n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n:</span><br><span class="line">        f(n)</span><br><span class="line">        g(n)</span><br><span class="line"></span><br><span class="line">grow = <span class="keyword">lambda</span> n: f_then_g(grow, <span class="built_in">print</span>, n//<span class="number">10</span>)</span><br><span class="line">shrink = <span class="keyword">lambda</span> n: f_then_g(<span class="built_in">print</span>, shrink, n//<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<h2 id="tree-recursion">Tree Recursion</h2>
<p>Tree-shaped processes arise whenever executing the body of a recursive function makes more than one recursive call.</p>
<p>Let's see an example :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tree recursion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the n-th Fibonacci number.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(8)</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">2</span>) + fib(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<img src="/2020/09/18/CS61A-SICP/CS61A-9-Tree-Recursion/lec9-1.png" class="" title="A Tree-Recursive Process">
<h2 id="hanoi-tower">Hanoi Tower</h2>
<p>The <a href="https://en.wikipedia.org/wiki/Tower_of_Hanoi">Hanoi Tower Problem</a> is a very classical recursion problem.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hanoi Tower</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_move</span>(<span class="params">origin, destination</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print instructions to move a disk.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Move the top disk from rod&quot;</span>, origin, <span class="string">&quot;to rod&quot;</span>, destination)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_stack</span>(<span class="params">n, start, end</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the moves required to move n disks on the start pole to the end</span></span><br><span class="line"><span class="string">    pole without violating the rules of Towers of Hanoi.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    n -- number of disks</span></span><br><span class="line"><span class="string">    start -- a pole position, either 1, 2, or 3</span></span><br><span class="line"><span class="string">    end -- a pole position, either 1, 2, or 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    There are exactly three poles, and start and end must be different. Assume</span></span><br><span class="line"><span class="string">    that the start pole has at least n disks of increasing size, and the end</span></span><br><span class="line"><span class="string">    pole is either empty or has a top disk larger than the top n start disks.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(1, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(2, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(3, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 3 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 1</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> &lt;= start &lt;= <span class="number">3</span> <span class="keyword">and</span> <span class="number">1</span> &lt;= end &lt;= <span class="number">3</span> <span class="keyword">and</span> start != end, <span class="string">&quot;Bad start/end&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        print_move(start, end)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        spare_peg = <span class="number">6</span> - start - end         <span class="comment"># find the spare pole</span></span><br><span class="line">        move_stack(n-<span class="number">1</span>, start, spare_peg)   <span class="comment"># move the top (n - 1) disks from start to spare together (move these disks as a whole ... ABSTRACTION!)</span></span><br><span class="line">        print_move(start, end)              <span class="comment"># move the lowermost disk from start to end</span></span><br><span class="line">        move_stack(n-<span class="number">1</span>, spare_peg, end)     <span class="comment"># move the (n - 1) disks from spare to end</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">time complexity: O(2^n) ... more details in CS61B &amp; CS170!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="example-counting-partitions">Example: Counting Partitions</h2>
<p>Let's see an important example of tree recursion —— counting partitions of an integer.</p>
<img src="/2020/09/18/CS61A-SICP/CS61A-9-Tree-Recursion/lec9-2.png" class="">
<img src="/2020/09/18/CS61A-SICP/CS61A-9-Tree-Recursion/lec9-3.png" class="" title="Strategies">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_partitions</span>(<span class="params">n, m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Count the partitions of n using parts up to size m.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_partitions(6, 4)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_partitions(10, 10)</span></span><br><span class="line"><span class="string">    42</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># base case</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> m == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="comment">#recursive case</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        with_m = count_partitions(n-m, m)</span><br><span class="line">        without_m = count_partitions(n, m-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> with_m + without_m</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>SICP</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合详解(Collection接口和Map接口)</title>
    <url>/2021/07/19/Coding/Java-Collection-Interface/</url>
    <content><![CDATA[<p>Java的 <code>util</code> 包中有两个重要的父接口：<code>Collection</code> 和 <code>Map</code> 。这两个接口提供了诸多数据结构的实现，使我们可以专注于程序的逻辑而不必关心底层细节。</p>
<p>在这篇博文中，我们将讨论以下几种接口，以及它们分别的实现类。</p>
<span id="more"></span>
<ul>
<li>java.util package
<ul>
<li>Collection interface
<ul>
<li>List interface
<ul>
<li>ArrayList class</li>
<li>LinkedList class</li>
<li>Vector class
<ul>
<li>Stack</li>
</ul></li>
</ul></li>
<li>Queue interface
<ul>
<li>PriorityQueue class</li>
</ul></li>
<li>Set interface
<ul>
<li>HashSet class</li>
<li>LinkedHashSet class</li>
<li>SortedSet interface
<ul>
<li>TreeSet class</li>
</ul></li>
</ul></li>
</ul></li>
<li>Map interface
<ul>
<li>Hashtable class</li>
<li>HashMap class</li>
<li>LinkedHashMap class</li>
<li>SortedMap interface
<ul>
<li>TreeMap class</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<img src="/2021/07/19/Coding/Java-Collection-Interface/Collection-Interface-in-Java.png" class="">
<h2 id="list接口">List接口</h2>
<p>List接口对应于 List 抽象数据类型。</p>
<h3 id="overview">1. Overview</h3>
<p>List接口有3种具体的实现： - ArrayList类：底层数据结构为 <code>动态数组(array)</code> ， 其中扩展因子为0.5。 - LinkedList类：底层数据结构为 <code>双向链表(doubly linked list)</code> 。 - Vector类：底层数据结构为 <code>动态数组(array)</code>， 其中扩展因子为1。</p>
<p>根据数据结构的知识，如果你需要进行很多的 <code>insertion</code> 或 <code>deletion</code> 操作，那么选用 <code>LinkedList class</code> 会比较好；而如果大量的操作都是 <code>access</code> 操作，那么 <code>ArrayList class</code> 是更好的选择。</p>
<hr />
<p>⛱️ <strong>ArrayList</strong> vs. <strong>Vector</strong></p>
<p>Vector 和 ArrayList 的底层数据结构都是数组。两者唯一的区别在于：ArrayList中的方法不是线程安全的，而Vector中的方法是同步的，意味着线程安全。所以，如果你需要线程安全，那么应该使用Vector。但对于单线程环境，使用使用Vector会花费更多的资源，所以用ArrayList更好。</p>
<p>如果你查看底层代码，你会发现，Vecotr中的重要操作，如add, remove, get等，这些方法都被 <code>synchronized</code> 关键字所修饰，来保证线程的安全性。</p>
<hr />
<p>接下来，让我们来几个List的代码片段。</p>
<h3 id="demos">Demos</h3>
<h4 id="两种实例化方法">两种实例化方法</h4>
<p>首先需要说明的是，在实例化一个List的时候，除了我们很熟悉的 <code>List&lt;Integer&gt; L = new ArrayList&lt;&gt;();</code> 方法之外，Java9增加的静态工厂方法 <code>.of()</code> 也可以创建实例，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; L = List.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">//		L.add(5);    // Exception, because L is immutable.</span></span><br><span class="line">		System.out.println(L);  <span class="comment">// [0, 1, 2, 3, 4]</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不过需要注意的是，使用上述方法创建的List是<strong>不可变的(immutable)</strong>，也就是说一旦创建好一个List，那么它的值，它的大小都是不可变的。后面的 <code>Set/Map/Queue</code> 也是一样的，就不再赘述了。</p>
<h4 id="list的基本用法">List的基本用法</h4>
<p>让我们来看一个 <code>ArrayList</code> 的代码片段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;String&gt; words = List.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Peach&quot;</span>);</span><br><span class="line">		List&lt;String&gt; wordsArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(words);</span><br><span class="line">		System.out.println(<span class="string">&quot;Original list: &quot;</span> + wordsArrayList);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Appends an item at the end of list. */</span></span><br><span class="line">		wordsArrayList.add(<span class="number">0</span>, <span class="string">&quot;Dog&quot;</span>);  <span class="comment">// position is optional</span></span><br><span class="line">		System.out.println(<span class="string">&quot;after adding Dog at index 0: &quot;</span> + wordsArrayList);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Appends all items at the end of list. */</span></span><br><span class="line">		List&lt;String&gt; newList = List.of(<span class="string">&quot;Mouse&quot;</span>, <span class="string">&quot;Cat&quot;</span>, <span class="string">&quot;Zebra&quot;</span>);</span><br><span class="line">		wordsArrayList.addAll(<span class="number">0</span>, newList);  <span class="comment">// position is optional</span></span><br><span class="line">		System.out.println(<span class="string">&quot;after adding a list: &quot;</span> + wordsArrayList);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Removes a specific item. */</span></span><br><span class="line">		wordsArrayList.remove(<span class="number">0</span>);   <span class="comment">//  == wordsArrayList.remove(&quot;Dog&quot;);</span></span><br><span class="line">		System.out.println(<span class="string">&quot;after removing item at index 0: &quot;</span> + wordsArrayList);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Replaces the item at the specified position. */</span></span><br><span class="line">		wordsArrayList.set(<span class="number">3</span>, <span class="string">&quot;Fish&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;after changing element at index 3: &quot;</span> + wordsArrayList);</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Original list: [Apple, Peach]</span><br><span class="line">after adding Dog at index 0: [Dog, Apple, Peach]</span><br><span class="line">after adding a list: [Mouse, Cat, Zebra, Dog, Apple, Peach]</span><br><span class="line">after removing item at index 0: [Cat, Zebra, Dog, Apple, Peach]</span><br><span class="line">after changing element at index 3: [Cat, Zebra, Dog, Fish, Peach]</span><br></pre></td></tr></table></figure>
<p>无论是ArrayList，还是LinkedList，或是Vector都符合上述展示的List的使用方法，在此就不在写 <code>LinkedList</code> 和 <code>Vector</code> 的代码了。</p>
<h4 id="遍历list">遍历List</h4>
<p>接下来让我们来看一下如何遍历列表元素。这里我们展示3种不同遍历方法，注意它们的使用。</p>
<ol type="1">
<li>第1种方法，也是最基本的方法：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; L0 = List.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;(L0);</span><br><span class="line">        System.out.println(<span class="string">&quot;original list: &quot;</span> + L);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* Removes the odd item */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = L.get(i);</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            	L.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;even list: &quot;</span> + L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">original list: [0, 1, 2, 3, 4]</span><br><span class="line">even list: [0, 2, 4]</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>第2种方法，我们使用 <code>foreach</code> 循环：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; L0 = List.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;(L0);</span><br><span class="line">        System.out.println(<span class="string">&quot;original list: &quot;</span> + L);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Integer num: L) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                L.remove(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;even list: &quot;</span> + L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">original list: [0, 1, 2, 3, 4]</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.util.ConcurrentModificationException</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>你可以看到，当使用foreach循环时，如果你在循环体内想要进行 <code>remove/add</code> 操作会报错。在这种情况下，你可以使用第1种方法，也可以使用下面讲的第3种方法。</p>
<ol start="3" type="1">
<li>第3种方法，使用 <code>.iterator()</code> 方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; L0 = List.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">		List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;(L0);</span><br><span class="line">		System.out.println(<span class="string">&quot;original list: &quot;</span> + L);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/** .iterator() method:  // in List interface</span></span><br><span class="line"><span class="comment">		 * Returns an iterator over the elements in this list in proper sequence.</span></span><br><span class="line"><span class="comment">		 *</span></span><br><span class="line"><span class="comment">		 * .hasNext() method:  // in Iterator interface</span></span><br><span class="line"><span class="comment">		 * Returns &#123;<span class="doctag">@code</span> true&#125; if the iteration has more elements.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		Iterator&lt;Integer&gt; iterator = L.iterator();</span><br><span class="line">		<span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">			<span class="keyword">int</span> num = iterator.next();</span><br><span class="line">			<span class="keyword">if</span> (num % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">				iterator.remove();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;even list: &quot;</span> + L);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>// 未完待续</p>
<p>(区别：<code>java.util.Collection</code> 是一个集合接口; <code>java.util.Collections</code> 是一个包装类, 包含有各种有关集合操作的静态多态方法。)</p>
<h2 id="set-interface">Set Interface</h2>
<h2 id="queue-interface">Queue Interface</h2>
<h2 id="map-interface">Map Interface</h2>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java: 更优雅地关闭资源 - try-with-resource及其异常抑制</title>
    <url>/2021/09/11/Coding/Java-%E6%9B%B4%E4%BC%98%E9%9B%85%E5%9C%B0%E5%85%B3%E9%97%AD%E8%B5%84%E6%BA%90-try-with-resource%E5%8F%8A%E5%85%B6%E5%BC%82%E5%B8%B8%E6%8A%91%E5%88%B6/</url>
    <content><![CDATA[<p>本文转自：https://www.cnblogs.com/itZhy/p/7636615.html</p>
<h2 id="背景">背景</h2>
<p>我们知道，在Java编程过程中，如果打开了外部资源（文件、数据库连接、网络连接等），我们必须在这些外部资源使用完毕后，手动关闭它们。因为外部资源不由JVM管理，无法享用JVM的垃圾回收机制，如果我们不在编程时确保在正确的时机关闭外部资源，就会导致外部资源泄露，紧接着就会出现文件被异常占用，数据库连接过多导致连接池溢出等诸多很严重的问题。</p>
<span id="more"></span>
<h2 id="传统的资源关闭方式">传统的资源关闭方式</h2>
<p>为了确保外部资源一定要被关闭，通常关闭代码被写入finally代码块中，当然我们还必须注意到关闭资源时可能抛出的异常，于是便有了下面的经典代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    FileInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">        System.out.println(inputStream.read());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>熟悉其他语言的朋友可能会开始吐槽了，在C++中，我们可以把关闭资源的代码放在析构函数中，在C#中，我们有using代码块。这些语法都有一个共同的特性，让外部资源的关闭行为与外部资源的句柄对象的生命周期关联，当外部资源的句柄对象生命周期终结时（例如句柄对象已出作用域），外部资源的关闭行为将被自动调用。这样不仅更加符合面向对象的编程理念（将关闭外部资源的行为内聚在外部资源的句柄对象中），也让代码更加简洁易懂。怎么到了Java这里，就找不到自动关闭外部资源的语法特性了呢。</p>
<h2 id="jdk7及其之后的资源关闭方式">JDK7及其之后的资源关闭方式</h2>
<p>确实，在JDK7以前，Java没有自动关闭外部资源的语法特性，直到JDK7中新增了 <code>try-with-resource</code> 语法，才实现了这一功能。</p>
<p>那什么是 <code>try-with-resource</code> 呢？简而言之，当一个外部资源的句柄对象（比如FileInputStream对象）实现了 <code>AutoCloseable</code> 接口，那么就可以将上面的代码简化为如下形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;test&quot;</span>))) &#123;</span><br><span class="line">        System.out.println(inputStream.read());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将外部资源的句柄对象的创建放在 try 关键字后面的括号中，当这个 try-catch 代码块执行完毕后，Java会确保外部资源的close方法被调用。代码是不是瞬间简洁许多！</p>
<p><code>try-with-resource</code> 并不是JVM虚拟机的新增功能，只是JDK实现了一个语法糖。当你将上面代码反编译后会发现，其实对JVM虚拟机而言，它看到的依然是之前的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">        Throwable var2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(inputStream.read());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var12) &#123;</span><br><span class="line">            var2 = var12;</span><br><span class="line">            <span class="keyword">throw</span> var12;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (var2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        inputStream.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable var11) &#123;</span><br><span class="line">                        var2.addSuppressed(var11);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var14) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(var14.getMessage(), var14);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过反编译的代码，大家可能注意到代码中有一处对异常的特殊处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">var2.addSuppressed(var11);</span><br></pre></td></tr></table></figure>
<p>这是 try-with-resource 语法涉及的另外一个知识点，叫做异常抑制。当对外部资源进行处理（例如读或写）时，如果遭遇了异常，且在随后的关闭外部资源过程中，又遭遇了异常，那么你catch到的将会是对外部资源进行处理时遭遇的异常，关闭资源时遭遇的异常将被“抑制”但不是丢弃，通过异常的 <code>getSuppressed</code> 方法，可以提取出被抑制的异常。</p>
<h2 id="总结">总结</h2>
<ol type="1">
<li><p>当一个外部资源的句柄对象实现了 <code>AutoCloseable</code> 接口，JDK7便可以利用 try-with-resource 语法更优雅的关闭资源，消除板式代码。</p></li>
<li><p>try-with-resource时，如果对外部资源的处理和对外部资源的关闭均遭遇了异常，“关闭异常”将被抑制，“处理异常”将被抛出，但“关闭异常”并没有丢失，而是存放在“处理异常”的被抑制的异常列表中。</p></li>
</ol>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Python: 关键字global和nonlocal</title>
    <url>/2021/07/10/Coding/Python-%E5%85%B3%E9%94%AE%E5%AD%97global%E5%92%8Cnonlocal/</url>
    <content><![CDATA[<p>学习关键字 <code>global</code> 和 <code>nonlocal</code> 的用法。</p>
<span id="more"></span>
<h2 id="引例">引例</h2>
<p>先来看一个代码片段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">increment = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater</span>(<span class="params">func, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the function that computes the nth application of func.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeater</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            x = func(x)</span><br><span class="line">            n = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> repeater</span><br><span class="line"></span><br><span class="line">add_three = make_repeater(increment, <span class="number">3</span>)</span><br><span class="line">add_three(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>当运行上述代码片段时，会产生如下的错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UnboundLocalError: <span class="built_in">local</span> variable <span class="string">&#x27;n&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure>
<p>要理解这个错误的原因，需要知道全局变量和局部变量的概念。</p>
<h2 id="局部变量和全局变量">局部变量和全局变量</h2>
<h3 id="局部变量">局部变量</h3>
<p>当我们在函数体内、或者在局部范围内定义一个变量时，该变量被称为 <code>局部变量</code> 。局部变量只能在局部范围内被访问，不能在局部范围外被访问。</p>
<p><strong>例1：在范围外访问局部变量</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    y = <span class="string">&quot;local&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure>
<p><strong>输出：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span></span><br><span class="line">NameError: name <span class="string">&#x27;y&#x27;</span> is not defined</span><br></pre></td></tr></table></figure>
<h3 id="全局变量">全局变量</h3>
<p>当我们在函数外、或者在全局范围内定义一个变量时，该变量被称为 <code>全局变量</code> 。全局变量可以在函数内部被访问，也可以在函数外部被访问。</p>
<p>让我们来看一个全局变量的例子：</p>
<p><strong>例3：全局变量</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x inside:&quot;</span>, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x outside:&quot;</span>, x)</span><br></pre></td></tr></table></figure>
<p><strong>输出：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x inside: <span class="keyword">global</span></span><br><span class="line">x outside: <span class="keyword">global</span></span><br></pre></td></tr></table></figure>
<p>在上述代码中，<code>x</code> 是一个全局变量，我们可以在函数 <code>foo</code> 内部访问 <code>x</code> ，也可以在函数外部访问 <code>x</code> 。</p>
<p>值得注意的是，在上面的代码中，我们仅仅只是访问 <code>x</code> 。但如果我们想要做的是修改 <code>x</code> 的值呢？</p>
<p><strong>例4: 在函数内部修改全局变量</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    x = x * <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>
<p><strong>Output</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UnboundLocalError: <span class="built_in">local</span> variable <span class="string">&#x27;x&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure>
<p>运行会出现错误。</p>
<p>这是因为，当我们在函数内部对 <code>x</code> 修改重新赋值时，Python解释器会认为 <code>x</code> 是局部变量而不是全局变量，而这个局部变量也并没有在函数内部定义，所以就产生了这个错误。</p>
<h2 id="关键字global和nonlocal">关键字：global和nonlocal</h2>
<h3 id="global关键字">global关键字</h3>
<p>为了解决例4的问题，我们使用 <strong>global</strong> 关键字。现在函数内部声明变量 <code>x</code> 是全局变量，再对其进行修改。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x = x * <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<p><strong>输出：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">globalglobal</span><br><span class="line">globalglobal</span><br></pre></td></tr></table></figure>
<h3 id="nonlocal关键字">nonlocal关键字</h3>
<p>比较以下两个代码：</p>
<p><strong>例5：不使用nonlocal关键字</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;variable 1&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">        name = <span class="string">&#x27;variable 2&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    </span><br><span class="line">func1()</span><br></pre></td></tr></table></figure>
<p><strong>输出：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">variable 2</span><br><span class="line">variable 1</span><br></pre></td></tr></table></figure>
<p><strong>例6：使用nonlocal关键字</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;variable 1&#x27;</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> name</span><br><span class="line">        name = <span class="string">&#x27;variable 2&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(name) </span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    </span><br><span class="line">func2()</span><br></pre></td></tr></table></figure>
<p><strong>输出：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">variable 2</span><br><span class="line">variable 2</span><br></pre></td></tr></table></figure>
<p>注意到例6的第4行代码，嵌套函数 <code>foo</code> 中的变量 <code>name</code> 使用了关键字 <strong>nonlocal</strong> 。</p>
<p>如果一个变量被 nonlocal 修饰，则标识了该变量是上一级函数中的局部变量，在这里，指的是函数 <code>func2</code> 中的同名的变量 <code>name</code> (line 2) 。因此在嵌套函数 <code>foo</code> 中修改变量 <code>name</code> 的值也就修改了 <code>func2</code> 中变量 <code>name</code> 的值。</p>
<p>而在例5中，嵌套函数 <code>foo</code> 中的变量 <code>name</code> 并没有用 nonlocal 修饰，那么它仅仅是 <code>foo</code> 中的一个局部变量。在函数 <code>foo</code> 的范围外是不能访问这个变量的。所以第7行打印的是第2行定义的局部变量 <code>name</code>, 而不是第4行的局部变量。</p>
<h2 id="尾声">尾声</h2>
<p>最后让我们重新看一下引例中的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">increment = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater</span>(<span class="params">func, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the function that computes the nth application of func.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeater</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            x = func(x)</span><br><span class="line">            n = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> repeater</span><br><span class="line"></span><br><span class="line">add_three = make_repeater(increment, <span class="number">3</span>)</span><br><span class="line">add_three(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>要怎样修改才能使代码工作呢？</p>
<p>答案不唯一，但一个可行的办法是使用 <code>nonlocal</code> 关键字来修饰变量 <code>n</code> ， 如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater</span>(<span class="params">func, n</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeater</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> n</span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            x = func(x)</span><br><span class="line">            n = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> repeater</span><br></pre></td></tr></table></figure>
<p>🌼 完结，撒花 ✿✿ヽ(°▽°)ノ✿</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 1: The Shell</title>
    <url>/2021/12/17/The-Missing-Semester/Lecture-1-The-Shell/</url>
    <content><![CDATA[<p>This is the lecture note of The Missing Semester - <a href="https://missing.csail.mit.edu/2020/course-shell/">Lecture 1</a>.</p>
<p>Today's topic is the shell.</p>
<span id="more"></span>
<h2 id="what-is-the-shell">What is the shell?</h2>
<p>Computers have a variety of interfaces for giving commands:</p>
<ul>
<li>GUIs</li>
<li>Voice Interfaces</li>
<li>AR/VR</li>
<li>Shell: old-school textual interfaces</li>
<li>...</li>
</ul>
<p>The core functionality of the shell: allows you to run programs, give them input, and inspect their semi-structured output.</p>
<h2 id="using-the-shell">Using the shell</h2>
<p>🦁 The shell showed in this blog is <code>BASH</code>, which is one of the most widely used shells, and has similar syntax to many other shells.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># machine: missing</span></span><br><span class="line"><span class="comment"># current working directory: ~(home)</span></span><br><span class="line"><span class="comment"># $: tells that you are not the root user</span></span><br><span class="line">missing:~$ date</span><br><span class="line">Fri Dec 17 16:06:49 JST 2021</span><br><span class="line"></span><br><span class="line"><span class="comment"># shell parses the command by whitespace</span></span><br><span class="line">missing ~$ <span class="built_in">echo</span> hello</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># either use quotes or escape characters</span></span><br><span class="line">missing ~$ <span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span>   <span class="comment"># single quote is also ok</span></span><br><span class="line">Hello World</span><br><span class="line">missing ~$ <span class="built_in">echo</span> Hello\ World</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>
<p>How does the shell know how to find the <code>date</code> and <code>echo</code> program?</p>
<p>Actually, <strong>the shell is a programming environment</strong>, just like Python or Ruby. So it has variables, conditionals, loops, and functions. When you run commands in your shell, you are writing a small bit of code that your shell interprets. If the shell is asked to execute a command that doesn't match one the its programming keywords, it will consult an <code>environment variable</code> called <code>$PATH</code> that lists which directories the shell should search for programs.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the shell searches through the &quot;:&quot;-separated list of directories for a file named echo</span></span><br><span class="line">missing:~$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># find out which file is executed for a program name: using &quot;which&quot; program</span></span><br><span class="line">missing:~$ <span class="built_in">which</span> <span class="built_in">echo</span></span><br><span class="line">/bin/<span class="built_in">echo</span></span><br></pre></td></tr></table></figure>
<h2 id="navigating-in-the-shell">Navigating in the shell</h2>
<p>A path on the shell is a delimited list of directories, separated by:</p>
<ul>
<li>Linux and MacOS: <code>/</code></li>
<li>Windows: <code>\</code></li>
</ul>
<p>On Linux and MacOS, the path <code>/</code> is the <strong>&quot;root&quot;</strong> of the file system, under which all directories and files lie. On Windows, there is one root for each disk partition, such as <code>C:\</code> .</p>
<p>A path can be either:</p>
<ul>
<li>absolute path: start with <code>/</code></li>
<li>relative path</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">missing:missing$ <span class="built_in">pwd</span></span><br><span class="line">/home/missing</span><br><span class="line"></span><br><span class="line">missing:~$ <span class="built_in">cd</span> /home</span><br><span class="line">missing:/home$ <span class="built_in">pwd</span></span><br><span class="line">/home</span><br><span class="line"></span><br><span class="line">missing:/home$ <span class="built_in">cd</span> ..</span><br><span class="line">missing:/$ <span class="built_in">pwd</span></span><br><span class="line">/</span><br><span class="line"></span><br><span class="line">missing:/$ <span class="built_in">cd</span> ./home</span><br><span class="line">missing:/home$ <span class="built_in">pwd</span></span><br><span class="line">/home</span><br><span class="line"></span><br><span class="line">missing:/home$ <span class="built_in">cd</span> missing</span><br><span class="line">missing:missing$ <span class="built_in">pwd</span></span><br><span class="line">/home/missing</span><br><span class="line"></span><br><span class="line"><span class="comment"># cd to the directory you were previously in</span></span><br><span class="line">missing:/home$ <span class="built_in">cd</span> -</span><br><span class="line">/home</span><br><span class="line"></span><br><span class="line">missing:~$ ../../bin/<span class="built_in">echo</span> hello</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>
<h2 id="commands">Commands</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">missing:/$ ls</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># -l: usee a long listing format</span></span><br><span class="line"><span class="comment"># r: for files, it means read contents; for directories, it means see which files are in the directory; </span></span><br><span class="line"><span class="comment"># w: for files, it means write or revise contents of the file; for directories, it means rename/create/remove files within this directory</span></span><br><span class="line"><span class="comment"># x: for files, it means execute the file; for directories, it means search or enter the directory</span></span><br><span class="line">missing:~$ ls -l /home</span><br><span class="line">drwxr-xr-x 1 missing  users  4096 Jun 15  2019 missing</span><br></pre></td></tr></table></figure>
<p>The paramter <code>-l</code> gives us more information about each file or directory.</p>
<ul>
<li>The first <code>d</code> tells that <code>missing</code> is a directory; if it is a file ,then use <code>-</code> parameter;</li>
<li><code>rwx</code> indicates what permissions the owner of the file(<code>missing</code>) have;</li>
<li><code>r-x</code> indicates what permissions the owning groups(<code>users</code>) have, <code>-</code> means the given principal does not have the given permission;</li>
<li><code>r-x</code> indicates what permissions everyone else has;</li>
</ul>
<p>If you ever want more information about a program's arguments, input, outputs, or how it works in general, use <code>man</code> program.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># press &quot;q&quot; to exit</span></span><br><span class="line">missing:~$ man ls</span><br></pre></td></tr></table></figure>
<h2 id="connecting-programs">Connecting programs</h2>
<p>In the shell, programs have 2 primary &quot;streams&quot;, <strong>input stream</strong> and <strong>output stream</strong>.</p>
<p>Normally, a program's input and output are both your terminal —— keyboard as input and screen as output. However, we can rewire streams.</p>
<p>The simplest form of redirection is <code>&lt; file</code> and <code>&gt; file</code> , which will let you rewire the input and output streams of a program to a file respectively.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">missing:~$ <span class="built_in">echo</span> hello &gt; hello.txt</span><br><span class="line"></span><br><span class="line">missing:~$ cat hello.txt</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">missing:~$ cat &lt; hello.txt</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">missing:~$ cat &lt; hello.txt &gt; hello2.txt</span><br><span class="line">missing:~$ cat hello2.txt</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt; operator: append to a file</span></span><br><span class="line">missing:~$ <span class="built_in">echo</span> hello2 &gt;&gt; hello2.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip character |: chain promgrams such that the output of one is the input of another</span></span><br><span class="line">missing:/$ ls</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line"></span><br><span class="line"><span class="comment"># tail: print the last n lines of its input</span></span><br><span class="line">missing:/$ ls | tail -n2</span><br><span class="line"><span class="comment"># etc</span></span><br><span class="line"><span class="comment"># home</span></span><br></pre></td></tr></table></figure>
<h2 id="a-versatile-and-powerful-tool">A versatile and powerful tool</h2>
<p>The &quot;root&quot; user if a special user on most Unix-like systems.</p>
<p>The root user is above (almost) all access restrictions, and can create, read, update, and delete any file in the system. You will not usually log into your system as the root user though, since it’s too easy to accidentally break something. Instead, you will be using the <code>sudo</code> command(program). As its name implies, it lets you “do” something “as su” (short for “super user”, or “root”). When you get permission denied errors, it is usually because you need to do something as root. Though make sure you first double-check that you really wanted to do it that way!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">missing:/$ sudo su</span><br><span class="line">(enter password)</span><br><span class="line"><span class="comment">#change from $ to #: from non-root user to root user</span></span><br><span class="line">missing:/<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>Let's look an example.</p>
<p>If you want to write to the <code>sysfs</code> file system mounted under <code>/sys</code>. <code>sysfs</code> exposes a number of kernel parameters as files, so that you can easily reconfigure the kernel on the fly without specialized tools.</p>
<p><em>Note that <code>sysfs</code> does not exist on Windows or macOS.</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /sys/class/backlight file: expose your laptop&#x27;s screen</span></span><br><span class="line"></span><br><span class="line">$ sudo find -L /sys/class/backlight -maxdepth 2 -name <span class="string">&#x27;*brightness*&#x27;</span></span><br><span class="line">/sys/class/backlight/thinkpad_screen/brightness</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /sys/class/backlight/thinkpad_screen</span><br><span class="line"></span><br><span class="line"><span class="comment"># tee command: take its input and write to a file, but also to the standard output</span></span><br><span class="line">$ <span class="built_in">echo</span> 3 | sudo tee brightness</span><br></pre></td></tr></table></figure>
<h2 id="exercises">Exercises</h2>
<p><a href="https://github.com/rileywang0819/missing-semester/blob/main/lecture1.md">My solution</a> of exercises.</p>
]]></content>
      <categories>
        <category>The-Missing-Semester-Of-Your-CS-Education</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>API Development Summary(1)</title>
    <url>/2022/03/09/Web-Development/API-Development-Summary-1/</url>
    <content><![CDATA[<p>🚀 This blog is just a cheetsheet for myself. You can't visit links because the corresponding repositories are private.</p>
<span id="more"></span>
<h2 id="simple-api">Simple API</h2>
<p>API is the shortname of <strong>Application Program Interface</strong>. An API can be viewed as a program which takes some data, processes it and gives back some data.</p>
<p>We use <strong>JSON</strong> format to store and transmit data over the Internet. The server side cannot return the Python or Java data directly since JavaScript doesn't understand it. 😓 Imagining how JS deals with Python's dictionary or Java's HashTable? Instead, since JSON data is text, a long string, so JS can read it and deals with it.</p>
<ul>
<li>tip: Alway double quote in JSON instead of single quotes.</li>
</ul>
<p>❤️ <a href="https://github.com/rileywang0819/Flask-API/blob/main/01_REST_APIs/Section2/app.py">LINK: <strong>demo of a simple api using flask</strong></a></p>
<p>❤️ <a href="https://kinsta.com/knowledgebase/api-endpoint/#understanding-api-endpoints">LINK: What is an API endpoint?</a></p>
<h2 id="restful-api">RESTful API</h2>
<h3 id="rest-principles">REST Principles</h3>
<p>&quot;REST&quot; is a way of thinking about how a web server responds to your requests. <strong>Resource</strong> is the core component when designing RESTful API. A resouces can be anything, like a document, an image, a service, or a collection of other resources. So it is the resources that transfer between cilent and server. JSON, XML or JPG image are just the format of resources.</p>
<p>(When designing RESTful API, theoretically we only use noun and don't use verb)</p>
<p>Another key feature of REST is to be <strong>stateless</strong>. This means one request cannot depend on other requests. <strong>The server doesn't remember any state.</strong></p>
<p>Let's see an example in the real world.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- A user logs in a web application such as Twitter.</span><br><span class="line">- The web server doesn&#x27;t know the user is logged in since REST api is stateless.</span><br><span class="line">- In each request, the application must send enough data to identify the user, otherwise the server won&#x27;t associate the request with the user.</span><br></pre></td></tr></table></figure>
<h3 id="virtual-environment">Virtual Environment</h3>
<p>We develop our api using Python virtual environment.</p>
<p>❤️ <a href="https://github.com/rileywang0819/Flask-API/blob/main/01_REST_APIs/Section3/README.md">Link: virtualenv README</a></p>
<h3 id="flask-restful">flask-restful</h3>
<ul>
<li><code>flask-restful</code> is an extension of Flask that provides additional support for building RESTful apps.
<ul>
<li>❤️ <a href="">Link: flask-restful source code analysis</a></li>
</ul></li>
</ul>
<h3 id="flask_jwt">flask_jwt</h3>
<ul>
<li><strong>Flask-JWT</strong>: (JWT: JSON Web Token) an extension of Flask that implementing token-based authentication
<ul>
<li>❤️ <a href="https://github.com/rileywang0819/Flask-API/blob/main/01_REST_APIs/Section3/JWT%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B.md">Link: JWT README</a></li>
</ul></li>
</ul>
<p>Using JWT authentication is good for scaling. Since the server doesn't need to store any information of the user, so it is stateless.</p>
<p>When we pass the authentication, the server will generate a JWT token and return to the client. Each time, the cilent sends request containing the JSON token, and the server will use this JSON token to identity the user.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># security.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> werkzeug.security <span class="keyword">import</span> safe_str_cmp</span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="comment"># memory database: store registered users</span></span><br><span class="line">users = [</span><br><span class="line">    User(<span class="number">1</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>),</span><br><span class="line">    User(<span class="number">2</span>, <span class="string">&#x27;emma&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">username_mapping = &#123;u.username: u <span class="keyword">for</span> u <span class="keyword">in</span> users&#125;</span><br><span class="line">userid_mapping = &#123;u.<span class="built_in">id</span>: u <span class="keyword">for</span> u <span class="keyword">in</span> users&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">authenticate</span>(<span class="params">name, pw</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Authenticate a user.&quot;&quot;&quot;</span></span><br><span class="line">    user = username_mapping.get(name, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> user <span class="keyword">and</span> safe_str_cmp(user.password, pw):</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity</span>(<span class="params">payload</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Identify a user.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    payload: the contents of JWT Token</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># &#x27;identity&#x27; is one of JWT fields. Flask-JWT use this filed to populate the user&#x27;s id  </span></span><br><span class="line">    user_id = payload[<span class="string">&#x27;identity&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> userid_mapping.get(user_id, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app.py (snippet)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api, Resource</span><br><span class="line"><span class="keyword">from</span> flask_jwt <span class="keyword">import</span> JWT, jwt_required</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">JWT creates a new endpoint(&#x27;/auth&#x27;).</span></span><br><span class="line"><span class="string">When calling this endpoint and passing username and password, the authenticate function will be called.</span></span><br><span class="line"><span class="string">It will do some authentication(login simulation). If the authentication succeeds, the jwt-extension will return a JWT object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Later, when send request with this generated JWT to the server, JWT will call the identity function.</span></span><br><span class="line"><span class="string">By the information from JWT&#x27;s payload, if it can get the correct user, it means the JWT is valid, and the user is authenticated.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># create the jwt instance</span></span><br><span class="line">jwt = JWT(app, authenticate, identity)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">Resource</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Advanced request parsing&quot;&quot;&quot;</span></span><br><span class="line">    parser = reqparse.RequestParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;price&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&quot;This filed cannot be left blank!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># meaning a valid JWT token is required in the request</span></span><br><span class="line"><span class="meta">    @jwt_required()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        item = <span class="built_in">next</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> item: item[<span class="string">&#x27;name&#x27;</span>] == name, items), <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;item&#x27;</span>: item&#125;, <span class="number">200</span> <span class="keyword">if</span> item <span class="keyword">else</span> <span class="number">404</span></span><br></pre></td></tr></table></figure>
<p>Advanced JWT configurations:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Advanced JWT Configuration&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. change authentication url</span></span><br><span class="line">app.config[<span class="string">&#x27;JWT_AUTH_URL_RULE&#x27;</span>] = <span class="string">&#x27;/login&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. Token expiration time(有效期): each access token must have an expiration time for security purpose</span></span><br><span class="line">app.config[<span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>] = timedelta(seconds=<span class="number">1800</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. authentication key name: config JWT auth key name to be &#x27;email&#x27; instead of default &#x27;username&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;JWT_AUTH_USERNAME_KEY&#x27;</span>] = <span class="string">&#x27;email&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. authentication response handler: customize JWT auth response, include user_id in response body</span></span><br><span class="line"><span class="meta">@jwt.auth_response_handler</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">customized_response_handler</span>(<span class="params">access_token, identity</span>):</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">                        <span class="string">&#x27;access_token&#x27;</span>: access_token.decode(<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">                        <span class="string">&#x27;user_id&#x27;</span>: identity.<span class="built_in">id</span></span><br><span class="line">                   &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. error handler</span></span><br><span class="line"><span class="meta">@jwt.error_handler</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">customized_error_handler</span>(<span class="params">error</span>):</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">                       <span class="string">&#x27;message&#x27;</span>: error.description,</span><br><span class="line">                       <span class="string">&#x27;code&#x27;</span>: error.status_code</span><br><span class="line">                   &#125;), error.status_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jwt = JWT(app, authenticate, identity)</span><br></pre></td></tr></table></figure>
<h2 id="advanced-postman-config">Advanced Postman Config</h2>
<p>❤️ <a href="https://github.com/rileywang0819/Flask-API/tree/main/01_REST_APIs/Section5/Advanced-Postman-environments-and-tests">Link: Advanced Postman —— environment &amp; tests</a></p>
<h2 id="resources-vs.-models">Resources vs. Models</h2>
<p>For any code related to getting data from API users and responding with data, that will go in a <strong>resource</strong>. The resource will then call the <strong>model</strong> for any interactions with our system (e.g. databases, saving things, creating objects,...)</p>
<p>Resources and models are used to encapsulate the logic of user-facing and system-facing respectively, which makes it simpler for you — the developer — in the long term.</p>
<h2 id="persistent-storage-database">Persistent Storage: Database</h2>
<h3 id="sqlite-db">SQLite DB</h3>
<p>❤️ <a href="https://github.com/rileywang0819/Flask-API/blob/main/01_REST_APIs/Section4/test.py">Link: interaction with sqlite demo</a></p>
<h3 id="postgresql-with-sqlalchemy">PostgreSQL with SQLAlchemy</h3>
<p>We can use <strong>SQLAlchemy</strong> to easily replace database from SQLite to PostgreSQL or other databases. SQLAlchemy is a library that provides a nice “Pythonic” way of interacting with databases. So rather than dealing with the differences between specific dialects of traditional SQL such as MySQL or PostgreSQL or Oracle, you can leverage the Pythonic framework of SQLAlchemy to streamline your workflow and more efficiently query your data.</p>
<p>Most of the times, this library is used as an Object Relational Mapper (ORM) tool that translates Python classes to tables on relational databases and automatically converts function calls to SQL statements. Also, it can map objects to rows in a database.</p>
<h3 id="psycopg2">psycopg2</h3>
<p>SQLAlchemy is a ORM. <strong>psycopg2</strong> is a PostgreSQL database adapter for the Python programming language. These are completely different things: SQLAlchemy generates SQL statements and psycopg2 sends SQL statements to the database. SQLAlchemy depends on psycopg2 or other database drivers to communicate with the database!</p>
<h2 id="security">Security</h2>
<p>Security in REST APIs is extremely important, because often applications that use our REST APIs will be sending us all sorts of data about users: passwords, e-mail addresses, names, postal addresses, security questions, bank details, and more.</p>
<p>In order to prevent people from intercepting the data on the internet and being able to read it, we must use <strong>Secure Sockets Layer</strong>. This sits on top of HTTP and encrypts all communication between a server and a client.</p>
<p>❤️ <a href="https://books.tecladocode.com/rest-apis-with-flask-and-python/domains-and-https/what-is-a-domain">Link: Security in REST APIs</a></p>
<h2 id="flask-extension-flask-jwt-extended">Flask Extension: Flask-JWT-Extended</h2>
<ul>
<li>❤️ <a href="https://docs.authing.cn/v2/concepts/">Link: Authing Doc</a></li>
<li>❤️ <a href="https://www.cnblogs.com/blowing00/p/4524132.html">Link: Access Token vs. Refresh Token</a></li>
</ul>
]]></content>
      <categories>
        <category>Web-Development</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC模式开发：Flask中的拆分</title>
    <url>/2021/07/26/Web-Development/MVC%E6%A8%A1%E5%BC%8F%E5%BC%80%E5%8F%91%EF%BC%9AFlask%E4%B8%AD%E7%9A%84%E6%8B%86%E5%88%86/</url>
    <content><![CDATA[<p>这篇博文主要用于记录拆分项目Fyyur中控制层和模型层的过程，以及自己的一些感悟。</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>在学习Web App开发的一开始，我就学习了MVC模式。但是因为写的只是todo-app这样的小demo，所以我对使用MVC模式进行开发的好处感受得并不深。</p>
<p>最近在用Flask写Fyyur项目。与之前的todo-app相比，这个项目会更大一些，也因此，我对MVC模式的优势的感受更深了一些。</p>
<p>在本文的余下部分，我将对自己利用MVC模式重构Fyyur项目代码的过程进行描述。另外说明的是，因为我在写这篇博文的时候还是初学者，如有不对的地方，欢迎指正。</p>
<p>🏜️ 项目代码：<a href="https://github.com/rileywang0819/Fyyur">Github</a></p>
<h2 id="mvc概述">MVC概述</h2>
<img src="/2021/07/26/Web-Development/MVC%E6%A8%A1%E5%BC%8F%E5%BC%80%E5%8F%91%EF%BC%9AFlask%E4%B8%AD%E7%9A%84%E6%8B%86%E5%88%86/MVC.JPG" class="">
<p>MVC说起来很简单。它是一种软件设计模式，通过将软件的各个基本部分进行分离，从而降低复杂度，使程序结构更加直观。</p>
<p>MVC模式将软件系统分为三个基本部分，</p>
<ul>
<li><strong>模型层</strong> <strong>(Model layer)</strong> ：实现程序的功能（如实现算法等）；进行数据库设计和数据的管理</li>
<li><strong>视图层</strong> <strong>(View layer)</strong> ：UI界面，</li>
<li><strong>控制层</strong> <strong>(Controller layer)</strong> ：接收、处理请求</li>
</ul>
<h2 id="重构fyyur代码">重构Fyyur代码</h2>
<p>来看一下初始的项目结构，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── app.py *** the main driver of the app. Includes SQLAlchemy models.</span><br><span class="line">                  <span class="string">&quot;python app.py&quot;</span> to run after installing dependencies</span><br><span class="line">├── config.py *** Database URLs, CSRF generation, etc</span><br><span class="line">├── error.log</span><br><span class="line">├── forms.py *** web forms <span class="built_in">which</span> creats data </span><br><span class="line">├── requirements.txt *** The dependencies we need to install with <span class="string">&quot;pip3 install -r requirements.txt&quot;</span></span><br><span class="line">├── static</span><br><span class="line">│   ├── css </span><br><span class="line">│   ├── font</span><br><span class="line">│   ├── ico</span><br><span class="line">│   ├── img</span><br><span class="line">│   └── js</span><br><span class="line">└── templates *** the web frontend</span><br><span class="line">    ├── errors</span><br><span class="line">    ├── forms</span><br><span class="line">    ├── layouts</span><br><span class="line">    └── pages</span><br></pre></td></tr></table></figure>
<p>可以看出，视图层(View layer)已经被隔离出来了，放在了templates和static中。但是模型层和控制层都被放到了 <code>app.y</code> 这一个文件中，导致一个文件内代码过多。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app.py文件结构，代码已省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"><span class="comment">#                                 Imports                                      #</span></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"><span class="comment">#                               App Config.                                    #</span></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"><span class="comment">#                                   Models.                                    #</span></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"><span class="comment">#                                   Filters.                                   #</span></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"><span class="comment">#                                Controllers.                                  #</span></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"><span class="comment">#                                   Launch.                                    #</span></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>于是我想把Model和Controller部分的代码隔离开，减少 <code>app.py</code> 文件里代码的数量。</p>
<h3 id="第1次尝试">第1次尝试</h3>
<p>建立一个 <code>models.py</code> 文件，将模型部分的代码放到里面。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Venue</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;venues&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Artist</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;artists&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在 <code>app.py</code> 文件中，只需要导入模型即可。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"><span class="comment">#                                 Imports                                      #</span></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="comment"># from models import *</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"><span class="comment">#                               App Config.                                    #</span></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"><span class="comment">#                                   Models.                                    #</span></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"><span class="comment">#                                   Filters.                                   #</span></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"><span class="comment">#                                Controllers.                                  #</span></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"><span class="comment">#                                   Launch.                                    #</span></span><br><span class="line"><span class="comment"># ============================================================================ #</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但这么写其实是不符合规范的，<code>from models import *</code> 应该是被写到文件顶部的（被注释的那个位置）。然而如果我们将 <code>import</code> 写在文件顶部，运行时会报错：<code>ImportError: cannot import name 'db'</code> 。这个很好理解，因为执行 <code>from models import *</code> 时，在 <code>models.py</code> 文件里需要引用 <code>app.py</code> 文件中的 <code>db</code> ， 而此时，<code>db</code> 还没有创建，所以会报错。</p>
<h3 id="第2次尝试">第2次尝试</h3>
<p>问题的关键在 <code>db</code> 这里。一个解决循环导包的方法是，将 <code>db</code> 放到另一个单独的.py文件中，切断 <code>app.py</code> 和 <code>models.py</code> 之间的循环引用。</p>
<p>具体来说，</p>
<h2 id="总结">总结</h2>
<p>虽然完成了视图层、模型层以及控制层的拆分，但整个项目的结构仍然不够好。</p>
<p>我曾尝试将项目结构划分为前端和后端两部分，但是在引用上出了一些问题，导致项目不能正常运行。因此这篇博客就到此为止，希望在未来，可以随着自己水平的不断提升，写出更符合工程规范的代码。</p>
<img src="/2021/07/26/Web-Development/MVC%E6%A8%A1%E5%BC%8F%E5%BC%80%E5%8F%91%EF%BC%9AFlask%E4%B8%AD%E7%9A%84%E6%8B%86%E5%88%86/see-you.gif" class="">
]]></content>
      <categories>
        <category>Web Development</category>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(1): Intro, Hello Java World</title>
    <url>/2021/01/20/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-1-Hello-Java-World/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 1.</p>
<span id="more"></span>
<h2 id="overview">Overview</h2>
<p>Welcome to CS61B!</p>
<p>This course will teach you</p>
<ul>
<li>how to write code that runs efficiently.
<ul>
<li><strong>Good algorithms.</strong></li>
<li><strong>Good data structures.</strong></li>
</ul></li>
<li>how to write code efficiently.
<ul>
<li>Designing, building, testing and debugging large programs.</li>
<li>Use of programming tools.
<ul>
<li>git, IntelliJ, JUnit, and various command line tools.</li>
</ul></li>
<li>Java (not the focus of the course!)</li>
</ul></li>
</ul>
<p>This course assumes solid foundation in programming fundamentals, including OOP, recursion, lists and trees. You can learn <a href="https://cs61a.org/">CS61A</a> if you do not have these concepts.</p>
<h2 id="hello-java-world">Hello Java World</h2>
<p>Python program vs. Java program</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># in Python</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in Java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. All code in Java must be part of a class. *</span></span><br><span class="line"><span class="comment">(This is not completely true, e.g. we can also declare “interfaces”. </span></span><br><span class="line"><span class="comment"> We will talk about them later on.)</span></span><br><span class="line"><span class="comment">2. We delimit the begin and end of segments of code using &#123; and &#125;.</span></span><br><span class="line"><span class="comment">3. All statements in Java must end in a semi-colon.</span></span><br><span class="line"><span class="comment">4. For code to run we need &quot;public static void main(String[] args)&quot;.</span></span><br><span class="line"><span class="comment">   This main method can call other methods/classes in the program.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>Java is an object-oriented language. Every Java file must contain either a class, interface, or enum.</p>
<h2 id="static-typing">Static Typing</h2>
<ul>
<li>Python variables vs. Java variables</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;horse&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(5 + &quot;horse&quot;)  # error when running</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python code can crash due to type errors when its running!</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloNumbers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">            x += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// x = &quot;horse&quot;;  // error when compiling: cannot convert from String to int</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. Before Java variables can be used, they must be declared.</span></span><br><span class="line"><span class="comment">2. Java variables must have a specific type.</span></span><br><span class="line"><span class="comment">3. Java variable types can never change.</span></span><br><span class="line"><span class="comment">4. Types are verified (by compiler) before the code even runs!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="declaring-functions">Declaring Functions</h2>
<ul>
<li>Python functions vs. Java functions</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">larger</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the larger of x and y.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(larger(-<span class="number">5</span>, <span class="number">10</span>))   <span class="comment"># 10</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LargerDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the larger of x and y. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">larger</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(larger(-<span class="number">5</span>, <span class="number">10</span>));     <span class="comment">// 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. Function must be declared as part of a class in Java.</span></span><br><span class="line"><span class="comment">    A function that is part of a class is called a &quot;method&quot;.</span></span><br><span class="line"><span class="comment">    So in Java, all functions are methods.</span></span><br><span class="line"><span class="comment">2. To define a function a Java, we use &quot;public static&quot;.</span></span><br><span class="line"><span class="comment">    We will see alternate ways of defining functions later.</span></span><br><span class="line"><span class="comment">3. All parameters of a function must have a declared type,</span></span><br><span class="line"><span class="comment">    and the return value of the function also must have a declared type.</span></span><br><span class="line"><span class="comment">    Functions in Java return only one value!</span></span><br><span class="line"><span class="comment">    (Python can return multiple values.)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(10): Subtype Polymorphism vs. HoFs</title>
    <url>/2021/02/10/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 10.</p>
<p>⛱️ In this lecture, we will talk about <code>Polymorphism</code> of Java, and continue discussing <code>HoFs</code> deeply.</p>
<span id="more"></span>
<p>But before starting today's lecture, firstly, we will review concepts of the previous lecture with a puzzle.</p>
<img src="/2021/02/10/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-1.JPG" class="">
<img src="/2021/02/10/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-2.JPG" class="">
<h2 id="subtype-polymorphism">Subtype Polymorphism</h2>
<img src="/2021/02/10/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-3.JPG" class="">
<img src="/2021/02/10/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-4.JPG" class="">
<p>In the rest of this lecture, we will think about how to code the second approach in Java.</p>
<h2 id="diy-comparison">DIY Comparison</h2>
<p>Suppose we want to write a function <code>max()</code> that returns the max of any array, regardless of type.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">max</span><span class="params">(Object[] items)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxDex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// the following line is wrong!</span></span><br><span class="line">        <span class="keyword">if</span> (items[i] &gt; items[maxDex]) &#123;    </span><br><span class="line">            maxDex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> items[maxDex];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Dog[] dogs = &#123;<span class="keyword">new</span> Dog(<span class="string">&quot;Elyse&quot;</span>, <span class="number">3</span>), <span class="keyword">new</span> Dog(<span class="string">&quot;Sture&quot;</span>, <span class="number">9</span>),</span><br><span class="line">                    <span class="keyword">new</span> Dog(<span class="string">&quot;Benjamin&quot;</span>, <span class="number">15</span>)&#125;;</span><br><span class="line">    Dog maxDog = (Dog) max(dogs);</span><br><span class="line">    maxDog.bark();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To fix the error above, one approach is to write a max method in Dog class:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title">maxDog</span><span class="params">(Dog[] dogs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dogs == <span class="keyword">null</span> || dogs.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Dog maxDog = dogs[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (Dog d : dogs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d.size &gt; maxDog.size) &#123;</span><br><span class="line">            maxDog = d;        	</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxDog;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>But this is a bad way. What if we want to compare apples instead of dogs? Or cats, horses ...... 🤢</p>
<p>So we need another way !</p>
<p>We have already known that objects cannot be compared to other objects with <code>&gt;</code>, <code>&lt;</code>, <code>==</code> etc. In this case, inheritance/HoFs can help us.</p>
<hr />
<p><strong>Solution:</strong></p>
<img src="/2021/02/10/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-5.JPG" class="">
<p>Create an interface that guarantees a comparison method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OurComparable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Returns </span></span><br><span class="line"><span class="comment">     * 1) negative number if this &lt; o;</span></span><br><span class="line"><span class="comment">     * 2) 0 if this equals o;</span></span><br><span class="line"><span class="comment">     * 3) positive number if this &gt; o</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Our dog class should implement the defined interface：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">OurComparable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String n, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        size = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        Dog uddaDog = (Dog) o;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size - uddaDog.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; says: bark&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Define the function:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Maximizer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OurComparable <span class="title">max</span><span class="params">(OurComparable[] items)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> maxDex = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">		    <span class="keyword">int</span> cmp = items[i].compareTo(items[maxDex]);</span><br><span class="line">                <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    maxDex = i;</span><br><span class="line">                &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> items[maxDex];</span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HoFDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog[] dogs = &#123;</span><br><span class="line">            <span class="keyword">new</span> Dog(<span class="string">&quot;Elyse&quot;</span>, <span class="number">3</span>), </span><br><span class="line">            <span class="keyword">new</span> Dog(<span class="string">&quot;Sture&quot;</span>, <span class="number">9</span>), </span><br><span class="line">            <span class="keyword">new</span> Dog(<span class="string">&quot;Benjamin&quot;</span>,<span class="number">15</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">        Dog maxDog = (Dog) Maximizer.max(dogs);</span><br><span class="line">        maxDog.bark();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<p>Now, try to answer 2 quizzes. Hope you can finish them correctly.</p>
<img src="/2021/02/10/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-6.JPG" class="">

<blockquote>
<p>Answer: quiz 1: B quiz 2: A</p>
</blockquote>
<h2 id="built-in-comparable-interface">built-in Comparable Interface</h2>
<p>Although the built <code>OurComparable</code> works, it has some flaws. In the real world, we use a built-in interface named <code>Comparable</code> .</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@source</span>: https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T obj)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Rewrite the previous problem:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String n, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        size = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Dog o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size - o.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; says: bark&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="comparators">Comparators</h2>
<p>We do not always want to compare objects in the same way every time, that is where <code>Comparator</code> comes in.</p>
<img src="/2021/02/10/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-9.JPG" class="">
<p>Sometimes, maybe you actually want to sort them in a different way, like sorting them alphabetically.</p>
<img src="/2021/02/10/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-8.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String n, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        size = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Dog o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size - o.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; says: bark&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NameComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog a, Dog b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.name.compareTo(b.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Comparator&lt;Dog&gt; <span class="title">getNameComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NameComparator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Dog d1 = <span class="keyword">new</span> Dog(<span class="string">&quot;Elyse&quot;</span>, <span class="number">3</span>);</span><br><span class="line">		Dog d2 = <span class="keyword">new</span> Dog(<span class="string">&quot;Sture&quot;</span>, <span class="number">9</span>);</span><br><span class="line">		Dog d3 = <span class="keyword">new</span> Dog(<span class="string">&quot;Benjamin&quot;</span>, <span class="number">15</span>);</span><br><span class="line">        Dog[] dogs = &#123;d1, d2, d3&#125;;</span><br><span class="line">        Dog maxDog = (Dog) Maximizer.max(dogs);</span><br><span class="line">        maxDog.bark();  <span class="comment">// Benjamin bark</span></span><br><span class="line"></span><br><span class="line">	    Comparator&lt;Dog&gt; nc = Dog.getNameComparator();</span><br><span class="line">        <span class="keyword">if</span> (nc.compare(d1, d2) &gt; <span class="number">0</span>) &#123;  <span class="comment">// id d1 comes later than d2 in the alphabet</span></span><br><span class="line">        	d1.bark();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        	d2.bark();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>The only difference between <strong>Comparable</strong> and <strong>Comparator</strong> is that <code>Comparable</code> says &quot;I wanna compare myself to other object&quot;, while <code>Comparator</code> compares two other objects.</p>
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>Source Code(1): Flask and Flask-RESTful</title>
    <url>/2022/03/20/Web-Development/Source-Code-1-Flask-and-Flask-RESTful/</url>
    <content><![CDATA[<p>It's easy to creat an api or restful api with <strong>Flask</strong> and <strong>Flask-RESTful</strong> extension. But what's happening under the hood when executing the code?</p>
<p>In this blog, we will dive into the source code of Flask framework and its extension Flask-RESTful, and understand the code deeply.</p>
<span id="more"></span>
<h2 id="flask-api">Flask API</h2>
<p>We can create an api with Flask quickly and easily.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, request, render_template</span><br><span class="line"></span><br><span class="line"><span class="comment"># ***************</span></span><br><span class="line"><span class="comment">#  Creat the App</span></span><br><span class="line"><span class="comment"># ***************</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># *********************************</span></span><br><span class="line"><span class="comment">#     Creat various endpoints</span></span><br><span class="line"><span class="comment">#  send request and return response</span></span><br><span class="line"><span class="comment"># *********************************</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">homepage</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/store&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_store</span>():</span></span><br><span class="line">    request_data = request.get_json()</span><br><span class="line">    new_store = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: request_data[<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;items&#x27;</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">    stores.append(new_store)</span><br><span class="line">    <span class="keyword">return</span> jsonify(new_store)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/store/&lt;string:store_name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_store</span>(<span class="params">store_name</span>):</span></span><br><span class="line">    <span class="keyword">for</span> store <span class="keyword">in</span> stores:</span><br><span class="line">        <span class="keyword">if</span> store[<span class="string">&#x27;name&#x27;</span>] == store_name:</span><br><span class="line">            <span class="keyword">return</span> jsonify(store)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;store not found&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># *************</span></span><br><span class="line"><span class="comment">#  Run the App</span></span><br><span class="line"><span class="comment"># *************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>We use decorator <code>app.route()</code> to create endpoints. It's like a magic —— we provide an URL rule and/or some methods to the decorator, then we can call the corresponding function by typing URL in our browser or Postman.</p>
<p>But it's not a magic. There is a function called <code>route</code> in <code>Flask</code> class.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span>(<span class="params">_PackageBoundObject</span>):</span></span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">route</span>(<span class="params">self, rule, **options</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param endpoint: the endpoint for the registered URL rule. Flask</span></span><br><span class="line"><span class="string">                         itself assumes the name of the view function as</span></span><br><span class="line"><span class="string">                         endpoint</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">f</span>):</span></span><br><span class="line">            endpoint = options.pop(<span class="string">&quot;endpoint&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">            self.add_url_rule(rule, endpoint, f, **options)</span><br><span class="line">            <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># endpoint</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure>
<p>The <code>app.route('/')</code> will call this higher-order function <code>route</code>, where parameter <code>self</code> is <code>app</code> and <code>rule</code> is <code>'/'</code>, then the function <code>decorator</code> will be returned.</p>
<p>When applying <code>decorator</code> to our user-defined function, such as <code>index</code>, we can see this function will add the previous given url rule, i.e. <code>'/'</code> , to the app. So when we type the url <code>'/'</code>, the Flask app will help us trigger the corresponding function <code>index</code>, and returns <code>Hello World</code>.</p>
<h2 id="pluggable-views">Pluggable Views</h2>
<h3 id="introduction">Introduction</h3>
<p>A <strong>view function</strong>, or view in short, is just a Python function that takes a web request and returns a web response.</p>
<p>In the last section, we use decorators to register view functions, and use them to deal with requests. However, this way is not generic and not flexible if we want to apply other models or templates.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># view function is not generic and flexible</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/users&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_users</span>(<span class="params">page</span>):</span></span><br><span class="line">    users = User.query.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;users.html&#x27;</span>, users=users)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/stores&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_products</span>(<span class="params">page</span>):</span></span><br><span class="line">    products = Product.query.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;products.html&#x27;</span>, products=products)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>This is where <strong>pluggable view</strong> comes in.</p>
<p>Flask 0.7 introduces pluggable views inspired by the generic view from Django. <strong>The pluggable views are based on classes instead of functions. We can use customized class view to deal with requests.</strong></p>
<p>See an example. With the following code, we can type a specific url to let Flask app trigger the corresponding function.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># Alternative way to use view function.</span></span><br><span class="line"><span class="string">class View:</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def dispatch_request(self) -&gt; ResponseReturnValue:</span></span><br><span class="line"><span class="string">        raise NotImplementedError()</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># customized-view class: inherit from View class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListView</span>(<span class="params">View</span>):</span></span><br><span class="line">    methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_template_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render_template</span>(<span class="params">self, context</span>):</span></span><br><span class="line">        <span class="keyword">return</span> render_template(self.get_template_name(), **context)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the subclass should implement dispatch_request method</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            context = &#123;<span class="string">&#x27;objects&#x27;</span>: self.get_objects()&#125;</span><br><span class="line">            <span class="keyword">return</span> self.render_template(context)</span><br><span class="line">        <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserView</span>(<span class="params">ListView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_template_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;users.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_objects</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> User.query.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductView</span>(<span class="params">ListView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_template_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;products.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_objects</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Product.query.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># add url rule into the app (endpoint is optional)</span></span><br><span class="line">app.add_url_rule(rule=<span class="string">&#x27;/users&#x27;</span>, endpoint=<span class="string">&#x27;show_users&#x27;</span>, view_func=UserView.as_view(<span class="string">&#x27;show_users&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>In this example, we define some pluggable views instead of view functions, then use <code>add_url_rule()</code> method to register a rule for routing. You should notice that, although we also use <code>add_url_rule()</code> here, there is a slight difference between this example and the previous example.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Comparasion</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># view function</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span>(<span class="params">_PackageBoundObject</span>):</span></span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">route</span>(<span class="params">self, rule, **options</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">f</span>):</span></span><br><span class="line">            endpoint = options.pop(<span class="string">&quot;endpoint&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">            self.add_url_rule(rule, endpoint, f, **options)     <span class="comment"># this line!</span></span><br><span class="line">            <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pluggable view</span></span><br><span class="line">app.add_url_rule(rule=<span class="string">&#x27;/users&#x27;</span>, endpoint=<span class="string">&#x27;show_users&#x27;</span>, view_func=UserView.as_view(<span class="string">&#x27;show_users&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>Although we use pluggable view in the latter case, we still need to convert it into view function when register URL rule for app. The <code>as_view</code> class method will <strong>convert that pluggable view class into an actual view function</strong>. The string you passed is the name of the endpoint that view will then have. Whenever a request is dispatched, a new instance of the class is created based on url rule. Then, the instance's dispatch_request() method will be called.</p>
<h3 id="methodview">MethodView</h3>
<p>For RESTful API, it is helpful to execute different function for each HTTP method. This is where <code>flask.views.MethodView</code> comes in.</p>
<p>MethodView is also a class-based pluggable view that dispatches request methods to the corresponding class methods. It has already implemented <code>dispatch_request</code> method, so you don't have to implement it by yourself.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.views <span class="keyword">import</span> MethodView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAPI</span>(<span class="params">MethodView</span>):</span></span><br><span class="line">    <span class="comment"># each http method maps to a method with the same name</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        users = User.query.<span class="built_in">all</span>()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        user = User.from_form_data(request.form)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/users/&#x27;</span>, view_func=UserAPI.as_view(<span class="string">&#x27;users&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h3 id="summary">Summary</h3>
<p>Each URL rule is corresponding to a view. The view is callable and can deal with request and return a response. When a Flask api receives a request, it has two ways to deal with it. One is by using &quot;FUNCTION-BASED VIEW&quot; directly, while another way is using &quot;CLASS-BASED VIEW&quot;.</p>
<ol type="1">
<li>function-based view</li>
</ol>
<ul>
<li>use &quot;route(url_rule, methods)&quot; decorator to register view function.</li>
<li>the route decorator will add url-rule to the app by using &quot;add_url_rule(rule, endpoint, view_func)&quot; function</li>
<li>this way is suitable for simple requests</li>
</ul>
<ol start="2" type="1">
<li>class-based view</li>
</ol>
<ul>
<li>customized-class view must inherit &quot;View&quot; class or &quot;MethodView&quot; class, and must override dispatch_request method (MethodView has already override the dispatch_request method)</li>
<li>use &quot;add_url_ruler(rule, endpoint, view_func)&quot; to add url rule to the app</li>
<li>use class method &quot;as_view()&quot; to convert a class into an actual view function</li>
<li>whenever a request is dispatched, create a new instance based on url rule, then call its dispatch_request method</li>
</ul>
<h2 id="flask-restful-api">Flask-RESTful API</h2>
<p>Now, let's use Flask and its extension <code>flask-restful</code> to build a RESTful API.</p>
<p>Resource is the core when designing a RESTful API. We make resources as the center to design different url rules, and define different HTTP methods for resource to manipulate it.</p>
<p>To do this,</p>
<p>1️⃣ first we should define the resources that our api can work with.</p>
<p>2️⃣ Then, define different methods that the resource should support.</p>
<p>3️⃣ Finally, add the defined resources to our api.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; restful api demo &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Resource, Api</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># each resource should be a class (oop)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">Resource</span>):</span></span><br><span class="line">    <span class="comment"># use http method as the method name; will handle GET requests</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;student&#x27;</span>: name&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># api works with resource: add a resource to the api</span></span><br><span class="line">api.add_resource(Student, <span class="string">&#x27;/student/&lt;string:name&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Let's see the source code.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Api</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, app=<span class="literal">None</span>, ...</span>):</span></span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">if</span> app <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.app = app</span><br><span class="line">            self.init_app(app)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_resource</span>(<span class="params">self, resource, *urls, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.app <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self._register_view(self.app, resource, *urls, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.resources.append((resource, urls, kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_register_view</span>(<span class="params">self, app, resource, *urls, **kwargs</span>):</span></span><br><span class="line">        ...</span><br><span class="line">        resource_func = self.output(resource.as_view(endpoint, *resource_class_args,</span><br><span class="line">            **resource_class_kwargs))</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            ...</span><br><span class="line">            app.add_url_rule(rule, view_func=resource_func, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">output</span>(<span class="params">self, resource</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Wraps a resource as a flask view function. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span>(<span class="params">MethodView</span>):</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodView</span>(<span class="params">View</span>):</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Api</code> is the main entry point for the application. You need to initialize it with a Flask Application.</li>
<li><code>Resource</code> represents an abstract RESTful resource. Concrete resources should extend from this class and expose methods for each supported HTTP method. If a resource is invoked with an unsupported HTTP method, the API will return a response with status 405 Method Not Allowed. Otherwise, the appropriate method is called, and all arguments from the url rule which is used when adding resource to an api instance will be passed to the method.</li>
</ul>
<p>We use a Flask instance <code>app</code> to initialize <code>Api</code> class and get an instance <code>api</code>, so <code>api.app = app</code> . When executing <code>api.add_resource(resource, urls)</code> (Line 19 in restful demo) , since <code>api.app</code> is not None, so a pluggable view will be registered by calling <code>_register_view</code> method. Here, the <code>resource</code> is the <code>Student</code> class. Finally, the url rule will be added to the app.</p>
<p>Until now, I think you should understand every line of our code when building a simple Flask API or Flask RESTful API. If you have question or suggestion, please leave me a message.</p>
<p>Thank you so much, and see you later. 💝</p>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://flask.palletsprojects.com/en/2.0.x/">Flask Doc</a></li>
<li><a href="https://flask-restful.readthedocs.io/en/latest/">Flask-RESTful Doc</a></li>
<li><a href="https://github.com/pallets/flask">Flask source code</a></li>
<li><a href="https://github.com/flask-restful/flask-restful">Flask-RESTful source code</a></li>
</ul>
]]></content>
      <categories>
        <category>Web-Development</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(11): Exceptions, Iterators, Object Methods</title>
    <url>/2021/02/12/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 11.</p>
<span id="more"></span>
<h2 id="lists-and-sets-in-java">Lists and Sets in Java</h2>
<p>In real world, we won't built the data structures such as <code>LinkedList</code>, <code>AList</code>, <code>Deque</code> etc. from scratch. Instead, we will use the Java's built-in data structures directly.</p>
<p>In this part, let's see Java's built-in data structures.</p>
<h3 id="lists">Lists</h3>
<p>Java provides a built-in <strong>List</strong> interface, and several implementations such as <strong>ArrayList</strong>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        L.add(<span class="number">5</span>);</span><br><span class="line">        L.add(<span class="number">10</span>);</span><br><span class="line">        L.add(<span class="number">15</span>);</span><br><span class="line">        System.out.println(L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sets">Sets</h3>
<p>Another handy data structure is <strong>Set</strong>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; S = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        S.add(<span class="string">&quot;Tokyo&quot;</span>);</span><br><span class="line">        S.add(<span class="string">&quot;Beijing&quot;</span>);	</span><br><span class="line">        S.add(<span class="string">&quot;Lagos&quot;</span>);</span><br><span class="line">        S.add(<span class="string">&quot;São Paulo&quot;</span>);</span><br><span class="line">        System.out.println(S.contains(<span class="string">&quot;Tokyo&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>For the rest of the blog, we will talk about how to implement our own Set called ArraySet.</p>
<h2 id="basic-arrayset">Basic ArraySet</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySet</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArraySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = (T[]) <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns true if this map contains a mapping for the specified key.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (items[i].equals(x)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment">       Throws an IllegalArgumentException if the key is null. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ignore resizign now</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contains(x)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        items[size] = x;</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns the number of key-value mappings in this map. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArraySet&lt;Integer&gt; aset = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        <span class="comment">// aset.add(null);  // error: NullPointerException</span></span><br><span class="line">        aset.add(<span class="number">5</span>);</span><br><span class="line">        aset.add(<span class="number">23</span>);</span><br><span class="line">        aset.add(<span class="number">42</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="exceptions">Exceptions</h2>
<p>The above code has a subtle bug. See the comment in <code>main</code> method.</p>
<p>Since the bug, if we uncomment and run the above code, it will crash and break the normal flow of control. And the compiler will throw the exception.</p>
<p>We can throw our own exceptions, too.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ignore resizign now</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot add null!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (contains(x)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    items[size] = x;</span><br><span class="line">    size += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * However, this will still cause crash.</span></span><br><span class="line"><span class="comment"> * So maybe we can fix our code by:</span></span><br><span class="line"><span class="comment"> *  - ingore null;</span></span><br><span class="line"><span class="comment"> *  - fix contains so that it doesn&#x27;t crash if items[i] is null;</span></span><br><span class="line"><span class="comment"> * /</span></span><br></pre></td></tr></table></figure>
<h2 id="iterable">Iterable</h2>
<p>Our ArraySet doesn't support <strong>enhanced for loop</strong>, that means it isn't iterable.</p>
<img src="/2021/02/12/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-1.JPG" class="" title="Iterable Set">
<img src="/2021/02/12/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-2.JPG" class="" title="Our Built Set">
<p>Before trying to make our ArraySet supports enhanced for loop, firstly, let's try to use an alternative way to iterate.</p>
<img src="/2021/02/12/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-3.JPG" class="">
<img src="/2021/02/12/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-4.JPG" class="">
<img src="/2021/02/12/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-5.JPG" class="">
<img src="/2021/02/12/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-6.JPG" class="">
<p>Actually, the enhanced for loop is just shorthand of this ugly while loop. The extra you need to do is declaring that <code>public class ArraySet&lt;T&gt; implements Iterable&lt;T&gt;</code></p>
<img src="/2021/02/12/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-7.JPG" class="">
<img src="/2021/02/12/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-8.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySet</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArraySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = (T[]) <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns true if this map contains a mapping for the specified key.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (items[i].equals(x)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment">       Throws an IllegalArgumentException if the key is null. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ignore resizign now</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot add null!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (contains(x)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        items[size] = x;</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns the number of key-value mappings in this map. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySetIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> wizPos;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">ArraySetIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            wizPos = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> wizPos  &lt; size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            T returnItem = items[wizPos];</span><br><span class="line">            wizPos += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> returnItem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns an iterator (a.k.a seer) into ME. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArraySetIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArraySet&lt;Integer&gt; aset = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        <span class="comment">// aset.add(null);  // error: NullPointerException</span></span><br><span class="line">        aset.add(<span class="number">5</span>);</span><br><span class="line">        aset.add(<span class="number">23</span>);</span><br><span class="line">        aset.add(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Integer&gt; aseer = aset.iterator();</span><br><span class="line">        <span class="keyword">while</span>(aseer.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = aseer.next();</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/02/12/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-9.JPG" class="">
<h2 id="object-methods">Object Methods:</h2>
<img src="/2021/02/12/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-10.JPG" class="">
<h3 id="tostring">#1: toString</h3>
<img src="/2021/02/12/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-11.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySet</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// String is immutable, so we use StringBuilder</span></span><br><span class="line">        StringBuilder returnSB = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">            returnSB.append(items[i].toString());</span><br><span class="line">            returnSB.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        returnSB.append(items[size - <span class="number">1</span>]);</span><br><span class="line">        returnSB.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> returnSB.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArraySet&lt;Integer&gt; aset = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        aset.add(<span class="number">5</span>);</span><br><span class="line">        aset.add(<span class="number">23</span>);</span><br><span class="line">        aset.add(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//iteration</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : aset) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//toString</span></span><br><span class="line">        System.out.println(aset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="equals">#2: equals</h3>
<p>As mentioned before, <code>==</code> and <code>.equals()</code> behave differently.</p>
<ul>
<li><code>==</code> compares the bits. For reference, it means &quot;referencing the same object&quot;</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySet</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == other) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (other == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (other.getClass() != <span class="keyword">this</span>.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ArraySet&lt;T&gt; o = (ArraySet&lt;T&gt;) other;</span><br><span class="line">        <span class="keyword">if</span> (o.size() != <span class="keyword">this</span>.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (T item : <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!o.contains(item)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArraySet&lt;Integer&gt; aset = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        aset.add(<span class="number">5</span>);</span><br><span class="line">        aset.add(<span class="number">23</span>);</span><br><span class="line">        aset.add(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//iteration</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : aset) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//toString</span></span><br><span class="line">        System.out.println(aset);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//equals</span></span><br><span class="line">        ArraySet&lt;Integer&gt; aset2 = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        aset2.add(<span class="number">5</span>);</span><br><span class="line">        aset2.add(<span class="number">23</span>);</span><br><span class="line">        aset2.add(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(aset.equals(aset2));  <span class="comment">// true</span></span><br><span class="line">        System.out.println(aset.equals(<span class="keyword">null</span>));  <span class="comment">// false</span></span><br><span class="line">        System.out.println(aset.equals(<span class="string">&quot;fish&quot;</span>));  <span class="comment">// false</span></span><br><span class="line">        System.out.println(aset.equals(aset));  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//EXTRA VIDEO CODE</span></span><br><span class="line">        <span class="comment">//ArraySet&lt;String&gt; asetOfStrings = ArraySet.of(&quot;hi&quot;, &quot;I&#x27;m&quot;, &quot;here&quot;);</span></span><br><span class="line">        <span class="comment">//System.out.println(asetOfStrings);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="extra-better-tostring-and-arrayset.of">Extra: Better toString and ArraySet.of</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySet</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public String toString() &#123;</span></span><br><span class="line"><span class="comment">        // String is immutable, so we use StringBuilder</span></span><br><span class="line"><span class="comment">        StringBuilder returnSB = new StringBuilder(&quot;&#123;&quot;);</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; size - 1; i += 1) &#123;</span></span><br><span class="line"><span class="comment">            returnSB.append(items[i].toString());</span></span><br><span class="line"><span class="comment">            returnSB.append(&quot;, &quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        returnSB.append(items[size - 1]);</span></span><br><span class="line"><span class="comment">        returnSB.append(&quot;&#125;&quot;);</span></span><br><span class="line"><span class="comment">        return returnSB.toString();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Better `toString` method</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; listOfItems = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (T x: <span class="keyword">this</span>) &#123;</span><br><span class="line">            listOfItems.add(x.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&quot;</span> + String.join(<span class="string">&quot;,&quot;</span>, listOfItems) + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// of method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;Glerp&gt; <span class="function">ArraySet&lt;Glerp&gt; <span class="title">of</span><span class="params">(&lt;Glerp&gt; ..stuff)</span> </span>&#123;  <span class="comment">// var arg</span></span><br><span class="line">        ArraySet&lt;Glerp&gt; returnSet = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Glerp x: stuff) &#123;</span><br><span class="line">            returnSet.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArraySet&lt;Integer&gt; aset = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        aset.add(<span class="number">5</span>);</span><br><span class="line">        aset.add(<span class="number">23</span>);</span><br><span class="line">        aset.add(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//iteration</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : aset) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//toString</span></span><br><span class="line">        System.out.println(aset);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// of method</span></span><br><span class="line">        ArraySet&lt;String&gt; aset2 = ArraySet.of(<span class="string">&quot;hi&quot;</span>, <span class="string">&quot;I&#x27;m&quot;</span>, <span class="string">&quot;here.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(12): Command Line Programming and Git</title>
    <url>/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/</url>
    <content><![CDATA[<p>⛱️ This is the lecture note of CS61B - Lecture 12.</p>
<p>In this lecture, we will do some warm-up theoretically for the <code>Project 2: Gitlet</code>.</p>
<span id="more"></span>
<p><strong>Git</strong> is a sophisticated piece of software. Relies on many ideas we have not yet covered:</p>
<ul>
<li>Maps</li>
<li>Hashing</li>
<li>File I/O</li>
<li>Graphs</li>
</ul>
<h2 id="how-git-works">How Git Works</h2>
<p>Every time you commit changes to a file, it stores a copy of the <strong>entire repository</strong> in a secret folder on your computer called <code>.git</code>.</p>
<p>But maybe, you will wonder that by copying the entire repo, just like we copy the entire folder daily, it seems that there are so much redundancy. So, an important thing is how to <strong>avoid redundancy</strong>.</p>
<p>In the rest of this lecture, we will discuss various tricks employed to avoid redundancy, and find the best one.</p>
<h2 id="avoiding-redundancy">Avoiding Redundancy</h2>
<img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-1.JPG" class="">
<h3 id="approach-1">Approach 1</h3>
<img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-2.JPG" class="">
<p>However, this approach is very inefficient -- there are lots of repetitive, same works.</p>
<h3 id="approach-2">Approach 2</h3>
<img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-3.JPG" class="">
<p>In this revised approach 2, we only store files that change.</p>
<ul>
<li>Much more efficient. Avoids storing redundant files.</li>
<li>However, checkout is now more complicated. If we checkout a commit, we have to copy files from a variety of different folders.</li>
</ul>
<img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-4.JPG" class="">
<h3 id="approach-3">Approach 3</h3>
<img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-5.JPG" class="">
<p>And this approach has another advantage. <img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-6.JPG" class=""> <img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-7.JPG" class=""></p>
<h3 id="approach-4">Approach 4</h3>
<p>Though the previous approach seems fine, it still has some flaw. So, we will still go ahead, to see the approach used in the real world. I mean, the approach used in Git.</p>
<p>It is <code>Hashing</code>.</p>
<p>First, let's see some advantages of approach 3.</p>
<img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-8.JPG" class="">
<p>So, we raise a new approach.</p>
<img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-9.JPG" class="">
<h3 id="approach-5">Approach 5</h3>
<p>Since approach 4 still has flaws, it's time to see the &quot;real&quot; approach used in Git.</p>
<img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-10.JPG" class="">
<p>Every file has its own git-SHA1 hash:</p>
<img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-11.JPG" class="">
<p>Then, how git-SHA1 hash works?</p>
<img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-12.JPG" class="">
<img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-13.JPG" class="">
<h2 id="serializable-and-storing-data-structures">Serializable and Storing Data Structures</h2>
<img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-14.JPG" class="">
<p>The commit ID is the git-SHA1 hash of the commit.</p>
<ul>
<li>You might object: “A commit is an object, not a file”.</li>
<li>Imagine a file containing the author, date, commit message, list of files and their versions, and parent ID, then git-SHA1 hash that.</li>
</ul>
<p>After generating commit IDs, we need to store them so that they can be read later.</p>
<img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-15.JPG" class="">
<h2 id="branching">Branching</h2>
<img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-16.JPG" class="">
<p>We can (attempt to) merge branches, and maybe there are conflicts.</p>
<img src="/2021/02/17/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-17.JPG" class="">
<p>After resolving the conflict. The new commit has two parents!</p>
<p>Note: Commits are no longer a linked list.</p>
<ul>
<li>This is a more general structure called a “graph”.</li>
<li>More on graphs later in our class.</li>
</ul>
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(13): Asymptotics I</title>
    <url>/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 13.</p>
<span id="more"></span>
<p>Efficiency comes in two flavors:</p>
<ul>
<li>Programming cost (course to date. Will also revisit later).
<ul>
<li>How long does it take to develop your programs?</li>
<li>How easy is it to read, modify, and maintain your code?
<ul>
<li>More important than you might think!</li>
<li>Majority of cost is in maintenance, not development!</li>
</ul></li>
</ul></li>
<li>Execution cost (from today until end of course).
<ul>
<li>How much time does your program take to execute?</li>
<li>How much memory does your program require?</li>
</ul></li>
</ul>
<p>From now, we start focusing on execution cost, learning kinds of data structures and algorithms. Hope you will enjoy it.</p>
<h2 id="runtime-characterization">Runtime Characterization</h2>
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-1.JPG" class="">
<h3 id="approach-1">Approach 1</h3>
<p>One technique can be used is to measure execution time in seconds using a client program.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">int</span>[] A = makeArray(N);</span><br><span class="line">    dup1(A);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can use tools like:</p>
<ul>
<li>Physical stopwatch.</li>
<li>Unix has a built in time command that measures execution time.</li>
<li>Princeton Standard library has a Stopwatch class.</li>
</ul>
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-2.JPG" class="">
<p>Measuring runtime in seconds is easy to measure, meaning is obvious. However, it requires large amounts of computation time, and result varies with machine, compiler, input data, etc.</p>
<h3 id="approach-2a">Approach 2A</h3>
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-3.JPG" class="">
<h3 id="approach-2b">Approach 2B</h3>
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-4.JPG" class="">
<h2 id="compare-algos">Compare Algos</h2>
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-5.JPG" class="">
<p>In most cases, we care only about <strong>asymptotic behavior</strong>, i.e. what happens for very large N.</p>
<ul>
<li>Simulation of billions of interacting particles.</li>
<li>Social network with billions of users.</li>
<li>Logging of billions of transactions.</li>
<li>Encoding of billions of bytes of video data.</li>
</ul>
<p>Algorithms which scale well (e.g. look like lines) have better asymptotic runtime behavior than algorithms that scale relatively poorly (e.g. look like parabolas).</p>
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-6.JPG" class="">
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-7.JPG" class="">
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-8.JPG" class="">
<h2 id="simplification">Simplification</h2>
<p>Since we don't need to do rigorous, mathmatically runtime charaterization, maybe we can simplify the above tech to make it much clearer and simpler.</p>
<h3 id="simplification-1">Simplification 1</h3>
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-9.JPG" class="">
<h3 id="simplification-2">Simplification 2</h3>
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-10.JPG" class="">
<h3 id="simplification-3">Simplification 3</h3>
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-11.JPG" class="">
<h3 id="simplification-4">Simplification 4</h3>
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-12.JPG" class="">
<p>So, take a summary,</p>
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-13.JPG" class="">
<h2 id="big-theta">Big-Theta</h2>
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-14.JPG" class="">
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-15.JPG" class="">
<p>Let's see the formal definition of <strong>Big-Theta</strong>:</p>
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-16.JPG" class="">
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-17.JPG" class="">
<h2 id="big-o">Big-O</h2>
<p>We used Big Theta to describe the order of growth of a function. We also used Big Theta to describe the rate of growth of the runtime of a piece of code.</p>
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-18.JPG" class="">
<img src="/2021/02/19/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-13-Asymptotics-I/13-19.JPG" class="">
<p>Big-O is used for upper bounds.</p>
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(14): Disjoint Sets</title>
    <url>/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 14.</p>
<p>In this lecture, we are going to focus on a data structure called <strong>Disjoint Sets</strong> or <strong>Union Find(并查集)</strong>. We will see how to design it by solving the <strong>&quot;Dynamic Connectivity&quot;</strong> problem, and see how our underlying data structures can affect asymptotic runtime (using our formal Big-Theta notation) and code complexity.</p>
<span id="more"></span>
<p>The Disjoint Sets data structure has two operations:</p>
<ul>
<li>connect(x, y): Connects x and y.</li>
<li>isConnected(x, y): Returns true if x and y are connected. Connections can be transitive, i.e. they don’t need to be direct.</li>
</ul>
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-1.JPG" class="">
<p>Our goal is to implement the above specific interface.</p>
<h2 id="naive-approach">Naive Approach</h2>
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-2.JPG" class="">
<h2 id="better-approach">Better Approach</h2>
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-3.JPG" class="">
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-4.JPG" class="">
<h2 id="quick-find">Quick Find</h2>
<p>Our next step is <strong>how to do track set membership</strong> in Java, like:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123; 0, 1, 2, 4 &#125;, &#123;3, 5&#125;, &#123;6&#125;</span><br><span class="line"></span><br><span class="line">==&gt; connect(2, 3)</span><br><span class="line"></span><br><span class="line">&#123; 0, 1, 2, 4, 3, 5&#125;, &#123;6&#125;</span><br></pre></td></tr></table></figure>
<h3 id="approach-1">Approach 1</h3>
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-5.JPG" class="">
<h3 id="approach-2">Approach 2</h3>
<p>A better approach is using array of the underlying data structures.</p>
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-6.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFindDS</span> <span class="keyword">implements</span> <span class="title">DisjointSets</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuickFindDS</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            id[i] = i;</span><br><span class="line">	    &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> id[p] == id[q];</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> pid = id[p];</span><br><span class="line">        <span class="keyword">int</span> qid = id[q];</span><br><span class="line">       	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (id[i] == pid) &#123;</span><br><span class="line">              	id[i] = qid;</span><br><span class="line">            &#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Though <code>connect</code> method will still be costly, this approach has good performance on <code>isConnected</code> method.</p>
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-7.JPG" class="">
<h2 id="quick-union">Quick Union</h2>
<p>In Quick Union, we will still represent everything as connected components, and we will still represent connected components as a list of integers. However, values will be chosen so that connect is fast.</p>
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-8.JPG" class="">
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-9.JPG" class="">
<p>See the following example to know why this approach is good at <code>connect</code>.</p>
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-10.JPG" class="">
<p>By the way, we set root(5)'s value equal to root(2) instead of setting root(5)'s value equal to 2 is because, the latter one will cause a taller tree.</p>
<p>However, this approach still has performance issues, that is compared to QuickFind, we have to climb up a tree. If the tree is too tall, finding root(x) will be expensive.</p>
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-11.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickUnionDS</span> <span class="keyword">implements</span> <span class="title">DisjointSets</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">QuickUnionDS</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    	parent = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;  </span><br><span class="line">            parent[i] = -<span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">   	&#125;</span><br><span class="line"> </span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> r = p;</span><br><span class="line">        <span class="keyword">while</span> (parent[r] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            r = parent[r]; </span><br><span class="line">        &#125;</span><br><span class="line">       	<span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boid <span class="title">connect</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = find(p);</span><br><span class="line">        <span class="keyword">int</span> j = find(q);</span><br><span class="line">        parent[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-12.JPG" class="">
<h2 id="weighted-quick-union">Weighted Quick Union</h2>
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-13.JPG" class="">
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-14.JPG" class="">
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-15.JPG" class="">
<p>Let's see its performance.</p>
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-16.JPG" class="">
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-17.JPG" class="">
<p>We used the number of items in a tree to decide upon the root.</p>
<p>You might wondering why not use the height of the tree? The reason is worst case performance for <strong>HeightedQuickUnionDS</strong> is asymptotically the same! Both are Θ(log(N)). And resulting code is more complicated with no performance gain.</p>
<h2 id="last-improvement-path-compression">Last Improvement: Path Compression</h2>
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-18.JPG" class="">
<p>See an example,</p>
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-19.JPG" class="">
<p>We could set that items like 15, 11, 5, and 1 etc., their parents are 0. This change won't influent the truth which set each item belongs to.</p>
<img src="/2021/02/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-14-Disjoint-Sets/14-20.JPG" class="">
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(15): Asymptotics II</title>
    <url>/2021/02/24/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-15-Asymptotics-II/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 15.</p>
<p>In this lecture, we will try to do some exercises to make us understand asymptotic analysis more deeply.</p>
<span id="more"></span>
<h2 id="example-1-and-2-for-loop">Example 1 and 2: For Loop</h2>
<img src="/2021/02/24/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-15-Asymptotics-II/15-0.JPG" class="">
<img src="/2021/02/24/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-15-Asymptotics-II/15-1.JPG" class="">
<p>The Answer is C.</p>
<img src="/2021/02/24/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-15-Asymptotics-II/15-2.JPG" class="">
<p>Runtime analysis often requires careful thought. <strong>CS70</strong> and especially <strong>CS170</strong> will cover this in much more detail.</p>
<h2 id="example-3-recursion">Example 3: Recursion</h2>
<img src="/2021/02/24/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-15-Asymptotics-II/15-3.JPG" class="">
<p>The answer is <strong>E</strong>. This answer is from intuition. How to get the answer from math?</p>
<img src="/2021/02/24/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-15-Asymptotics-II/15-4.JPG" class="">
<p>The answer is <strong>D</strong>.</p>
<img src="/2021/02/24/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-15-Asymptotics-II/15-5.JPG" class="">
<h2 id="example-4-binary-search">Example 4: Binary Search</h2>
<p>This is also an example of recursion.</p>
<img src="/2021/02/24/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-15-Asymptotics-II/15-6.JPG" class="">
<p>The answer is <strong>B</strong>, since problem size halves over and over until it gets down to 1.</p>
<p>How to do exact counting?</p>
<img src="/2021/02/24/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-15-Asymptotics-II/15-7.JPG" class="">
<img src="/2021/02/24/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-15-Asymptotics-II/15-8.JPG" class="">
<h2 id="example-5-merge-sort">Example 5: Merge Sort</h2>
<p>The last example we will see is <strong>Merge Sort</strong>.</p>
<p>First, what is merging?</p>
<p>Given two sorted arrays, the merge operation combines them into a single sorted array by successively copying the smallest item from the two arrays into a target array.</p>
<img src="/2021/02/24/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-15-Asymptotics-II/15-9.JPG" class="">
<p>The answer is <strong>C</strong>.</p>
<p>We can optimize selection sort by using merge operation. And the idea behind the process is called <strong>&quot;Divide and Conquer&quot;</strong>.</p>
<img src="/2021/02/24/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-15-Asymptotics-II/15-10.JPG" class="">
<img src="/2021/02/24/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-15-Asymptotics-II/15-11.JPG" class="">
<p>There is an interesting question: for an array of size N, what is the worst case runtime of Mergesort?</p>
<img src="/2021/02/24/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-15-Asymptotics-II/15-12.JPG" class="">
<p><strong>Nlog N</strong> is basically as good as <strong>N</strong>, and is vastly better than <strong>N^2</strong></p>
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(16): ADTs, Sets, Maps. BSTs</title>
    <url>/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 16.</p>
<span id="more"></span>
<h2 id="abstrtact-data-types">Abstrtact Data Types</h2>
<p>Before explaining the term, first, let's review the difference between interfaces and their implementations we've learnt so far.</p>
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-1.JPG" class="">
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-2.JPG" class="">
<p>So, we can conclude that interface is abtract, and its implementations are distinct.</p>
<p><em>Define:</em> An <strong>Abstract Data Type (ADT)</strong> is defined only by its operations, not by its implementation.</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Deque ADT:</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> addFirst(Item x);</span><br><span class="line"><span class="bullet">-</span> addLast(Item x);</span><br><span class="line"><span class="bullet">-</span> boolean isEmpty();</span><br><span class="line"><span class="bullet">-</span> int size();</span><br><span class="line"><span class="bullet">-</span> printDeque();</span><br><span class="line"><span class="bullet">-</span> Item removeFirst();</span><br><span class="line"><span class="bullet">-</span> Item removeLast();</span><br><span class="line"><span class="bullet">-</span> Item get(int index);</span><br></pre></td></tr></table></figure>
<p>So, ArrayDeque and LinkedListDeque are implementations of the Deque ADT.</p>
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-3.JPG" class="">
<p>So, think about which implementation result in faster overall performance of stack? Linked List, or Array?</p>
<p>The answer is both of them are the same. Since no resizing for linked lists, so probably a lil faster.</p>
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-4.JPG" class="">
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-5.JPG" class="">
<h2 id="binary-search-trees">Binary Search Trees</h2>
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-6.JPG" class="">
<p>The proble here is that, even though this linked list set is ordered, we can't take advantage of it, searching is still slow.</p>
<p>One solution:</p>
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-7.JPG" class="">
<p>But this lecture's topic is BST, so we won't talk about the above method, we will talk about implementing BST by optimizting this ordered linked list set.</p>
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-8.JPG" class="">
<p>Do even better?</p>
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-9.JPG" class="">
<h3 id="definition">Definition</h3>
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-10.JPG" class="">
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-11.JPG" class="">
<p>One consequence of these rules: <strong>No duplicate keys allowed!</strong></p>
<h3 id="search-operation">Search Operation</h3>
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-12.JPG" class="">
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-13.JPG" class="">
<p>The answer is <strong>A</strong>, and the height of the tree is <code>log(N)</code>.</p>
<h3 id="insert-operation">Insert Operation</h3>
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-14.JPG" class="">
<h3 id="delete-operation">Delete Operation</h3>
<p>Deletion involves 3 Cases:</p>
<ul>
<li>Deletion key has no children.</li>
<li>Deletion key has one child.</li>
<li><p>Deletion key has two children.</p></li>
<li><p><strong>Case 1:</strong></p></li>
</ul>
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-15.JPG" class="">
<ul>
<li><strong>Case 2:</strong></li>
</ul>
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-16.JPG" class="">
<ul>
<li><strong>Case 3:</strong></li>
</ul>
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-17.JPG" class="">
<h2 id="summary">Summary</h2>
<p>Finally, let's talk about how to use the knowledge we've learnt so far to implement <strong>Set</strong> and <strong>Map</strong>.</p>
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-18.JPG" class="">
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-19.JPG" class="">
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-20.JPG" class="">
<h2 id="tips-for-bst-lab">Tips for BST Lab</h2>
<img src="/2021/02/26/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-21.JPG" class="">
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(17): B-Trees(2-3, 2-3-4 Trees)</title>
    <url>/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 17.</p>
<p>In today's lecture, we are gonna be primarily concerned with one thing: tree height.</p>
<span id="more"></span>
<h2 id="bst-again">BST Again</h2>
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-1.JPG" class="">
<p>The answer is B.</p>
<p>WE can see that performance of operations on spindly trees can be just as bad as a linked list!</p>
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-2.JPG" class="">
<hr />
<p>Big O is still a useful idea:</p>
<ul>
<li>Allows us to make simple blanket statements, e.g. can just say “binary search is O(log N)” instead of “binary search is Θ(log N) in the worst case”.</li>
<li>Sometimes don’t know the exact runtime, so use O to give an upper bound.
<ul>
<li>Example: Runtime for finding shortest route that goes to all world cities is O(2N)*. There might be a faster way, but nobody knows one yet.</li>
</ul></li>
<li>Easier to write proofs for Big O than Big Theta, e.g. finding runtime of mergesort, you can round up the number of items to the next power of 2 (see A level study guide problems for Asymptotics2 lecture). A little beyond the scope of our course</li>
</ul>
<hr />
<p>Let’s now turn to understanding the performance of BST operations.</p>
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-3.JPG" class="">
<ul>
<li>The “height” of a tree determines the worst case runtime to find a node.
<ul>
<li>Example: Worst case is contains(s), requires 5 comparisons (height + 1).</li>
</ul></li>
<li>The “average depth” determines the average case runtime to find a node.
<ul>
<li>Example: Average case is 3.35 comparisons (average depth + 1).</li>
</ul></li>
</ul>
<p>So an important question is <strong>What about Real World BSTs</strong>? One way to approximate this is to consider randomized BSTs.</p>
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-5.JPG" class="">
<h2 id="b-tree">B-Tree</h2>
<p>So, to avoid spindly trees, we're going to invent a very close cousin to the BST which is called <strong>B-Tree</strong>.</p>
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-6.JPG" class="">
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-7.JPG" class="">
<p>However, this idea also has a problem that maybe you will meet a leaf with high O(N).</p>
<h3 id="basix-insertion">Basix Insertion</h3>
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-8.JPG" class="">
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-9.JPG" class="">
<p>Before we continue, let's first do a quiz to exam your understanding.</p>
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-10.JPG" class="">
<p>What we've talked is leaves. Then, what about non-leaf nodes? What if a non-leaf node gets too full? Can we split that?</p>
<p>The answer is yes!</p>
<h3 id="split-non-leaf-nodes">Split Non-leaf Nodes</h3>
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-11.JPG" class="">
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-12.JPG" class="">
<p>Observation: <strong>Splitting-trees have perfect balance.</strong></p>
<ul>
<li>If we split the root, every node gets pushed down by exactly one level.</li>
<li>If we split a leaf node or internal node, the height doesn’t change.</li>
</ul>
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-13.JPG" class="">
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-14.JPG" class="">
<h3 id="runtime-analysis">Runtime Analysis</h3>
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-15.JPG" class="">
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-16.JPG" class="">
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-17.JPG" class="">
<p>Now, we've know that B-Tree is bushy, let's do runtime analysis.</p>
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-18.JPG" class="">
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-19.JPG" class="">
<h2 id="summary">Summary</h2>
<img src="/2021/03/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-20.JPG" class="">
<h2 id="extra-deletion">Extra: Deletion</h2>
<p>See <a href="https://docs.google.com/presentation/d/1NgaMi7IWs94sC_fhF7_UWx2O4LyPicvVJ9xkru9m2dU/edit#slide=id.g4fe50d0bd7_4_20">Extra Slides</a></p>
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(2): Define and Use Classes</title>
    <url>/2021/01/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-2-Define-and-Use-Classes/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 2.</p>
<span id="more"></span>
<h2 id="compilation">Compilation</h2>
<p>If you use an <strong>IDE(Integrated Development Environment)</strong>, you can just click <code>run</code> button and the program will be executed directly. But what happened under the hood? let's see a basic process of executing Java code.</p>
<img src="/2021/01/22/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-2-Define-and-Use-Classes/2-1.JPG" class="">
<h2 id="defining-and-instantiating-classes">Defining and Instantiating Classes</h2>
<p>Let's define a Dog class only with a &quot;makeNoise&quot; method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bark!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Since there is no <code>main</code> method, we cannot run the above code directly. To run it, we create another class called <code>DogLauncher</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** The DogLauncher class will test drive the Dog class. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog.makeNoise();    <span class="comment">// Bark!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In the real world, different dogs yell differently. How to deal with it?</p>
<p>To make it more natural to represent the entire universe of dogs, we use the key feature of Java:</p>
<ul>
<li><strong>classes can contain not just functions (a.k.a. methods), but also data.</strong></li>
<li><strong>classes can be instantiated as objects.</strong></li>
</ul>
<p>The Dog class provides a bludeprint that all Dog objects will follow.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> weightInPounds;  <span class="comment">// instance variables</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** constructor: determines how to instantiate the class */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        weightInPounds = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// instance method, a.k.a non-static method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (weightInPounds &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yip!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (weightInPounds &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;bark!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;wooof!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** The DogLauncher class will test drive the Dog class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog(<span class="number">50</span>);    <span class="comment">// create instances of Dog</span></span><br><span class="line">        d.makeNoise();          <span class="comment">// wooof!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Notice the method <code>makeNoise</code> above is <strong>non-static</strong> now, meaning it should be invoked by an instance of the class.</p>
<hr />
<p>Key differences between <strong>static methods</strong> and <strong>non-static (a.k.a. instance) methods</strong>:</p>
<ul>
<li>Static methods are invoked using the class name, e.g. <code>Dog.makeNoise( )</code>;</li>
<li>Instance methods are invoked using an instance name, e.g. <code>maya.makeNoise( )</code>;</li>
<li>Static methods can’t access “my” instance variables, because there is no “me”.
<ul>
<li>for example: <code>d.weightInPounds</code> is ok, <code>Dog.weightInPounds</code> will be wrong.</li>
</ul></li>
</ul>
<hr />
<p>Class can have a mix of static and non-static memebers (methods and variables).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> weightInPounds;                          <span class="comment">// instance variables</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String binomen = <span class="string">&quot;Canis familiaris&quot;</span>;  <span class="comment">// static variable</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** constructor: determines how to instantiate the class */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        weightInPounds = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (weightInPounds &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yip!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (weightInPounds &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;bark!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;wooof!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title">maxDog</span><span class="params">(Dog d1, Dog d2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (d1.weightInPounds &gt; d2.weightInPounds) &#123;</span><br><span class="line">            <span class="keyword">return</span> d1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// non-static method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">maxDog</span><span class="params">(Dog d2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// this: the current object</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.weightInPounds &gt; d2.weightInPounds) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Notice the static variable <code>binomen</code>. Although you can use an instance to call it, it's a bad style.</p>
<p><strong>Remeber, if you declare a static member, use class instead of instance to access it</strong>, i.e. <code>Dog.binomen</code> .</p>
<h2 id="arrays-of-objects">Arrays of Objects</h2>
<p>To create an array of objects, you need 2 steps:</p>
<ul>
<li>First use the <code>new</code> keyword to create the array.</li>
<li>Then use <code>new</code> again for each object that you want to put in the array.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dogs[] dogs = <span class="keyword">new</span> Dog[<span class="number">2</span>];</span><br><span class="line">dogs[<span class="number">0</span>] = <span class="keyword">new</span> Dog(<span class="number">8</span>);</span><br><span class="line">dogs[<span class="number">1</span>] = <span class="keyword">new</span> Dog(<span class="number">20</span>);</span><br><span class="line">dogs[<span class="number">0</span>].makeNoise();</span><br></pre></td></tr></table></figure>
<h2 id="exercise">Exercise</h2>
<p>Finally, let's see an exercise.</p>
<p>Will the following program compile? If so, what will it print?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLoop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog smallDog = <span class="keyword">new</span> Dog(<span class="number">5</span>);</span><br><span class="line">        Dog mediumDog = <span class="keyword">new</span> Dog(<span class="number">25</span>);</span><br><span class="line">        Dog hugeDog = <span class="keyword">new</span> Dog(<span class="number">150</span>);</span><br><span class="line">        </span><br><span class="line">        Dog[] manyDogs = <span class="keyword">new</span> Dog[<span class="number">4</span>];</span><br><span class="line">        manyDogs[<span class="number">0</span>] = smallDog;</span><br><span class="line">        manyDogs[<span class="number">1</span>] = hugeDog;</span><br><span class="line">        manyDogs[<span class="number">2</span>] = <span class="keyword">new</span> Dog(<span class="number">130</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; manyDogs.length) &#123;</span><br><span class="line">            Dog.maxDog(manyDogs[i], mediumDog).makeNoise();</span><br><span class="line">            i = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The answer is:</p>
<ul>
<li>Yes, it can pass the compilation.</li>
<li>It'll print:
<ul>
<li>bark!</li>
<li>wooof!</li>
<li>wooof!</li>
<li><strong>NullPointerException</strong> (since Dog[3] is null)</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(19): Hashing</title>
    <url>/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 19.</p>
<span id="more"></span>
<p>What we have done by far?</p>
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-1.JPG" class="">
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-2.JPG" class="">
<p>Today we’ll see the answer to both of the questions above is yes.</p>
<h2 id="data-indexed-arrays">Data Indexed Arrays</h2>
<p>Let's start from a strange approach.</p>
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-3.JPG" class="">
<p>And what's nice about this idea is that the implementation is very simple.</p>
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-4.JPG" class="">
<p>However, this approach has an issue that it extremely wastes memory. Furthermore, since we want a data indexed set that can store arbitrary types ideally, so we also need some way to generalize beyond integers.</p>
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-5.JPG" class="">
<p>However, this approach has two problems,</p>
<ul>
<li>Collisions: other words start with 'C'.
<ul>
<li>set.contains('church') --&gt; true ❌</li>
</ul></li>
<li>Can't store other string which doesn't start with EN letters, such as &quot;98yawef&quot;.</li>
</ul>
<p>Let's try to tackle these problems.</p>
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-6.JPG" class="">
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-7.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Converts i-th character of string to a letter number. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">letterNum</span><span class="params">(String s, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ithChar = s.charAt(i);</span><br><span class="line">	<span class="keyword">if</span> ((ithChar &lt; <span class="string">&#x27;a&#x27;</span>) || (ithChar &gt; <span class="string">&#x27;z&#x27;</span>)) &#123; </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(); </span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> ithChar - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">englishToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> intRep = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i += <span class="number">1</span>) &#123;       	</span><br><span class="line">        intRep = intRep * <span class="number">27</span>;</span><br><span class="line">        intRep = intRep + letterNum(s, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> intRep;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="data-indexed-string-set">Data Indexed String Set</h2>
<p>The approach above can only use lowercase English characters, which is too restrictive. What if we want to store strings like “2pac” or “eGg!”? To understand what value we need to use for our base, let’s discuss briefly discuss the ASCII standard.</p>
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-8.JPG" class="">
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-9.JPG" class="">
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-10.JPG" class="">
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-11.JPG" class="">
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-12.JPG" class="">
<h2 id="hash-codes">Hash Codes</h2>
<p>In Java, the largest possible integer is 2,147,483,647.</p>
<ul>
<li>If you go over this limit, you overflow, starting back over at the smallest integer, which is -2,147,483,648.</li>
<li>In other words, the next number after 2,147,483,647 is -2,147,483,648.</li>
</ul>
<p>Because Java has a maximum integer, we will run into overflow even for short strings. And overflow can result in collisions, causing incorrect answers.</p>
<p>The official term for the number we’re computing is <strong>hash code</strong>.</p>
<ul>
<li>A hash code “projects a value from a set with many (or even an infinite number of) members to a value from a set with a fixed number of (fewer) members.”</li>
<li>Our target set is the set of Java integers, which is of size 4294967296.</li>
</ul>
<p>However, <em>Pigeonhole principle</em> tells us that if there are more than 4294967296 possible items, multiple items will share the same hash code. So, <strong>Collisions are inevitable!</strong></p>
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-13.JPG" class="">
<h2 id="hash-tables-handling-collisions">Hash Tables: Handling Collisions</h2>
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-14.JPG" class="">
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-15.JPG" class="">
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-16.JPG" class="">
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-17.JPG" class="">
<h2 id="hash-table-performance">Hash Table Performance</h2>
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-18.JPG" class="">
<p>The answer is, do not use a fixed number of buckets. Use an increasing number of buckets.</p>
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-19.JPG" class="">
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-20.JPG" class="">
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-21.JPG" class="">
<p>Even distribution of item is critical for good hash table performance. So we still need to discuss how to ensure even distribution (see lecture slide).</p>
<h2 id="hash-tables-in-java">Hash Tables in Java</h2>
<p><em>Python dictionaries are just hash tables in disguise.</em></p>
<p>In Java, implemented as <strong>java.util.HashMap</strong> and <strong>java.util.HashSet</strong>.</p>
<ul>
<li>compute an object’s hash code: <code>.hashCode()</code>
<ul>
<li>if an object's hash code is negative, use <code>Math.floorMod</code> method.</li>
</ul></li>
</ul>
<img src="/2021/03/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-19-Hashing/19-22.JPG" class="">
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(3): Testing</title>
    <url>/2021/01/25/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-3-Testing/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 3.</p>
<p>In this lecture, we will discuss an important and realistic issue -- <strong>Testing</strong>.</p>
<span id="more"></span>
<p>🐹 Let's think about an important question - how do you know that your code works correctly?</p>
<ul>
<li>Run to see if the code works as your expect.</li>
<li>Pass Autograder (in this course).</li>
<li><strong>Pass tests written by ourselves.</strong></li>
</ul>
<p>The last one is the most important one. In the real world, programmers believe their code works correctly because of <strong>tests they write themselves.</strong></p>
<h2 id="ad-hoc-testing-vs.-junit">Ad Hoc Testing vs. JUnit</h2>
<p>Let's try to write a method that sorts arrays of Strings and promise its correctness.</p>
<img src="/2021/01/25/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-3-Testing/3-1.JPG" class="">
<p>With the old way, we will write the <code>sort</code> method, and use Autograder to verify its correctness. But with the new way which will be taught in this lecture, <strong>we will write sort method, as well as our own test for sort method.</strong></p>
<h3 id="ad-hoc-testing">Ad Hoc Testing</h3>
<p>We will start by writing <code>testSort</code> first, i.e. writing tests takes precedence over implementing function!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Tests the Sort class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Tests the Sort.sort method */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;;</span><br><span class="line">        Sort.sort(input);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!input[i].equals(expected[i])) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Mismatch in position &quot;</span> + i +</span><br><span class="line">                    <span class="string">&quot;, expected: &quot;</span> + expected[i] + <span class="string">&quot;, but got: &quot;</span> + input[i]);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testSort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>While the single test above isn't a ton of work, writing a suite of such <code>Ad Hoc tests</code> would be very tedious, as it would entail writing a bunch of different loops and print statements. In the next section, we'll see how the <code>JUnit</code> library saves us a lot of work.</p>
<h3 id="junit">JUnit</h3>
<img src="/2021/01/25/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-3-Testing/3-2.JPG" class="">
<p>Next, we will do testing with <code>JUnit</code> , and write tests and the sort method simultaneously.</p>
<p>We will implement <strong>Selection Sort</strong> in sort method. The idea of selection sort is as follows:</p>
<img src="/2021/01/25/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-3-Testing/3-3.JPG" class="" title="Selection Sort">
<p>The following code is the final code. If you are curious about the process, please watch <a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD4ZxWDcuItnUElH2Pnneamc">lecture videos</a>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Tests the Sort class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSort</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** If you want to have your tests timeout after a certain amount of time </span></span><br><span class="line"><span class="comment">     * (to prevent infinite loops), you can declare your test like the following: */</span></span><br><span class="line">    <span class="meta">@Test(timeout = 1000)</span></span><br><span class="line">    <span class="comment">/** Tests the .findSmallest method. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindSmallest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> expected = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> actual = Sort.findSmallest(input, <span class="number">0</span>);</span><br><span class="line">        assertEquals(expected, actual);</span><br><span class="line"></span><br><span class="line">        String[] input2 = &#123;<span class="string">&quot;there&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;many&quot;</span>, <span class="string">&quot;pigs&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> expected2 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> actual2 = Sort.findSmallest(input2, <span class="number">2</span>);</span><br><span class="line">        assertEquals(expected2, actual2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">/** Tests the .swap method. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSwap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        Sort.swap(input, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        org.junit.Assert.assertArrayEquals(expected, input);</span><br><span class="line"></span><br><span class="line">        String[] input2 = &#123;<span class="string">&quot;there&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;many&quot;</span>, <span class="string">&quot;pigs&quot;</span>&#125;;</span><br><span class="line">        String[] expected2 = &#123;<span class="string">&quot;there&quot;</span>, <span class="string">&quot;pigs&quot;</span>, <span class="string">&quot;many&quot;</span>, <span class="string">&quot;are&quot;</span>&#125;;</span><br><span class="line">        Sort.swap(input2, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        assertArrayEquals(expected2, input2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">/** Tests the .sort method */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;;</span><br><span class="line">        Sort.sort(input);</span><br><span class="line"></span><br><span class="line">        assertArrayEquals(expected, input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Sorts strings destructively. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] x)</span> </span>&#123;</span><br><span class="line">        sort(x, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// OVERLOAD</span></span><br><span class="line">    <span class="comment">/** Sorts x starting at position start. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] x, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == x.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find the smallest item</span></span><br><span class="line">        <span class="keyword">int</span> smallestId = findSmallest(x, start);</span><br><span class="line">        <span class="comment">// Swap</span></span><br><span class="line">        swap(x, start, smallestId);</span><br><span class="line">        <span class="comment">// Selection sort the rest ... using recursion!</span></span><br><span class="line">        sort(x, start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the index of the smallest String in x, starting at start. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findSmallest</span><span class="params">(String[] x, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> smallestId = start;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; x.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = x[i].compareTo(x[smallestId]);</span><br><span class="line">            <span class="comment">// from the internet, if x[i] &lt; x[smallestId], cmp will be -1</span></span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                smallestId = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> smallestId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Swaps item at position a with item at position b. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(String[] x, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        String temp = x[a];</span><br><span class="line">        x[a] = x[b];</span><br><span class="line">        x[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="unit-testing">Unit Testing</h2>
<p>Unit Testing is a great way to rigorously test each method of your code, and ultimately to ensure that you have a working project.</p>
<p>The “Unit” part of Unit Testing comes from the idea that you can break your program down into units, or the smallest testable part of an application. Therefore, Unit Testing enforces good code structure <strong>(each method should only do “One Thing”)</strong>, and allows you to consider all of the edge cases for each method and test for them individually.</p>
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(4): References, Recursion, and Lists</title>
    <url>/2021/01/27/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 4.</p>
<span id="more"></span>
<p>In this lecture, we will learn about <strong>primitive types</strong> and <strong>reference types</strong> in Java, and use these concepts to construct our first data strucure - <strong>Linked Data Structures.</strong></p>
<p>Q1: What's your answer of the following question? Will the change to <code>b</code> affects <code>a</code>?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">class Walrus &#123;</span></span><br><span class="line"><span class="comment">    int weight;</span></span><br><span class="line"><span class="comment">    double tuskSize;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Walrus(int w, double t) &#123;</span></span><br><span class="line"><span class="comment">        weight = w;</span></span><br><span class="line"><span class="comment">        tuskSize = t;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">Walrus a = <span class="keyword">new</span> Walrus(<span class="number">1000</span>, <span class="number">8.3</span>);</span><br><span class="line">Walrus b;</span><br><span class="line">b = a;</span><br><span class="line">b.weight = <span class="number">5</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>
<p>The answer is yes! And the output is as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">weight: 5, tusk size: 8.30</span><br><span class="line">weight: 5, tusk size: 8.30</span><br></pre></td></tr></table></figure>
<p>Q2: Think about another question, will the change to <code>x</code> affect <code>y</code>?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">y = x;</span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;x is: &quot;</span> + x);</span><br><span class="line">System.out.println(<span class="string">&quot;y is: &quot;</span> + y);</span><br></pre></td></tr></table></figure>
<p>The answer is no, and x is 2 and y is 5.</p>
<p>You may wonder why. To clear up your confusion, let's explore data types in Java world.</p>
<h2 id="primitive-types">Primitive Types</h2>
<p>Your computer stores information in <strong>memory</strong>. And whatever the information you want to store, ultimately it will be encoded as a sequence of ones and zeros.</p>
<p>Actually, sometimes, two different things will be stored as the same bits sequence. For example, number <code>72</code> stored as 01001000, and letter <code>H</code> stored as 01001000, too.</p>
<p>So how computer interprets them correctly? The answer is <strong>the data type tells Java interpreter how to interpret it.</strong></p>
<p>There are 8 <strong>primitive types</strong> in Java: <strong>byte, short, int, long, float, double, boolean, char.</strong></p>
<img src="/2021/01/27/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/4-1.JPG" class="">
<h2 id="reference-types">Reference Types</h2>
<p>We already know that there are 8 primitive types in Java. Everything else, including array and string, is a <strong>reference type.</strong></p>
<img src="/2021/01/27/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/4-2.JPG" class="">
<img src="/2021/01/27/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/4-3.png" class="">
<img src="/2021/01/27/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/4-4.png" class="">
<h2 id="the-golden-rule-of-equals">The Golden Rule of Equals</h2>
<p>This is a very important rule and can help us answer the above puzzles.</p>
<ul>
<li>Given variables x and y, then <code>y = x</code> means <strong>copies all bits from x into y</strong>.</li>
</ul>
<p>And reference types also obey this rule. If x and y are reference types, after <code>y = x</code>, x and y will refer to the same object.</p>
<img src="/2021/01/27/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/4-5.JPG" class="">
<img src="/2021/01/27/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/4-6.JPG" class="">
<h2 id="exercise">Exercise</h2>
<p>Try to do the following exercise and make sure you understand everyting so far.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Does the call to doStuff(walrus, x) have an affect on walrus and/or main’s x?</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Walrus walrus = <span class="keyword">new</span> Walrus(<span class="number">3500</span>, <span class="number">10.5</span>);</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">9</span>;</span><br><span class="line">    doStuff(walrus, x);</span><br><span class="line">    System.out.println(walrus);</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doStuff</span><span class="params">(Walrus W, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    W.weight = W.weight - <span class="number">100</span>;</span><br><span class="line">    x = x - <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The answer is &quot;walrus will lose 100 lbs, but main’s x will not change&quot;.</p>
<h2 id="linked-data-structures">Linked Data Structures</h2>
<p>If you have used Python before, you must be familiar with <strong>list</strong>. Java has list too.</p>
<p>A <strong>list</strong> is going to be able to grow arbitrarily large, which is different from array. But you may wonder why list can have arbitrary size. To answer this question, you need to know its data structure under the hood, i.e. <strong>Linked List</strong>.</p>
<p>We will learn it by building it from scratch. Our goal is to build a linked list as follows,</p>
<img src="/2021/01/27/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/4-7.JPG" class="">
<h3 id="create-linked-list">Create Linked List</h3>
<p>You can build it intuitively, even though it is awkward.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntList L = <span class="keyword">new</span> IntList();</span><br><span class="line">        L.first = <span class="number">5</span>;</span><br><span class="line">        L.rest = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        L.rest = <span class="keyword">new</span> IntList();</span><br><span class="line">        L.rest.first = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">        L.rest.rest = <span class="keyword">new</span> IntList();</span><br><span class="line">        L.rest.rest.first = <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can make things slightly better by using constructor.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntList</span><span class="params">(<span class="keyword">int</span> f, IntList r)</span> </span>&#123;</span><br><span class="line">        first = f;</span><br><span class="line">        rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntList L = <span class="keyword">new</span> IntList(<span class="number">15</span>, <span class="keyword">null</span>);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">10</span>, L);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">5</span>, L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="define-size-method">Define size( ) Method</h3>
<p>In Python, we use <code>len(list)</code> to get the size of list. In Java, we use <code>L.size()</code>. How can we implement it?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Return the size of the list using ... recursion! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rest == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="keyword">this</span>.rest.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Return the size of the list using ... iteration! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IntList p = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">int</span> totalSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.rest;</span><br><span class="line">        totalSize++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> totalSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="define-get-method">Define get( ) Method</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Return the i-th item of the list using ... recursion! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rest.get(i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Return the i-th item of the list using ... iteration! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeGet</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    IntList p = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">        p = p.rest;</span><br><span class="line">        i -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p.first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="final-code">Final code</h2>
<p>The following is the overall code we built in this lecture. It reveals the structure of linked list although it is hard to use. In the next lecture, we will improve our implementation of linked list. See you next time 🤠</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntList</span><span class="params">(<span class="keyword">int</span> f, IntList r)</span> </span>&#123;</span><br><span class="line">        first = f;</span><br><span class="line">        rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the size of the list using ... recursion! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rest == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="keyword">this</span>.rest.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the size of the list using ... iteration! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IntList p = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">int</span> totalSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.rest;</span><br><span class="line">            totalSize++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> totalSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the i-th item of the IntList. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rest.get(i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the i-th item of the list using ... iteration! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeGet</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        IntList p = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">            p = p.rest;</span><br><span class="line">            i -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> p.first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntList L = <span class="keyword">new</span> IntList(<span class="number">15</span>, <span class="keyword">null</span>);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">10</span>, L);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">5</span>, L);</span><br><span class="line"></span><br><span class="line">        System.out.println(L.size());</span><br><span class="line">        System.out.println(L.iterativeSize());</span><br><span class="line"></span><br><span class="line">        System.out.println(L.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(L.iterativeGet(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(5): SLLists, Nested Classes, Sentinel Nodes</title>
    <url>/2021/01/29/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 5.</p>
<span id="more"></span>
<p>Review the <code>IntList</code> we implemented in lecture 4. We call it &quot;naked linked list&quot;.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntList</span><span class="params">(<span class="keyword">int</span> f, IntList r)</span> </span>&#123;</span><br><span class="line">        first = f;</span><br><span class="line">        rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>While it works, the above “naked” linked lists are hard to use.</p>
<p>Inspired by our experience with the IntList, we'll now build a new class called <code>SLList</code>, which much more closely resembles the list implementations that programmers use in modern languages. We'll do so by iteratively adding a sequence of improvements.</p>
<h2 id="improvement-1-rebranding-and-culling">Improvement 1: Rebranding and culling</h2>
<p>Firstly, rename the <code>IntList</code> class as <code>IntNode</code> and remove all methods except the constructor.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">public</span> IntNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">        item = i;</span><br><span class="line">        next = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then, create a class called <code>SLList</code>. Let IntNode be its instance variable, and add &quot;addFirst&quot; and &quot;getFirst&quot; methods to it.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** An SLList is a list of integers, which hides the terrible</span></span><br><span class="line"><span class="comment"> * truth of the nakedness within.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> IntNode first;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SLList L = <span class="keyword">new</span> SLList(<span class="number">15</span>);  <span class="comment">// creates a list of one integer, namely 15</span></span><br><span class="line">        L.addFirst(<span class="number">10</span>);</span><br><span class="line">        L.addFirst(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(L.getFirst());  <span class="comment">// 5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Until now, I bet you have already realized what's the strength of SLList - it is easier to instantiate and use.</p>
<p>Actually, it is the data structure that makes it easier to use.</p>
<img src="/2021/01/29/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/5-1.JPG" class="">
<h2 id="improvement-2-the-private-keyword">Improvement 2: The private Keyword</h2>
<p>However, the above implementation has some flaws. One of them is the abuse of <strong>public</strong>. For example, users of this class might to do some unexpected operations, like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SLList L = <span class="keyword">new</span> SLList(<span class="number">15</span>);</span><br><span class="line">L.addFirst(<span class="number">10</span>);</span><br><span class="line">L.first.next.next = L.first.next;</span><br></pre></td></tr></table></figure>
<img src="/2021/01/29/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/5-2.JPG" class="" title="Result of Bad Operations">
<p>We can prevent programmers from making such mistakes with the <strong>private</strong> keyword. The private keyword restricts access. It prevents code in other classes from using members (or constructors) of a class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntNode first;  <span class="comment">// public --&gt; private</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="improvement-3-nested-classes">Improvement 3: Nested Classes</h2>
<p>The IntNode class doesn't stand on its own, and is obviously subordinate to SLList. We can make it as a nested class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="comment">// nested class</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> IntNode first; </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">      first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">   &#125; </span><br><span class="line">   </span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here, we use <code>private</code> and <code>static</code> modifier.</p>
<ul>
<li><strong>private:</strong> if other external classes never use the nested class, declare it private</li>
<li><strong>static:</strong> if the nested class never uses any instance variables or methods of the outer class, declare it static (results in a minor savings of memory)</li>
</ul>
<h2 id="improvement-4-recursive-private-helper-methods">Improvement 4: Recursive private helper Methods</h2>
<p>To motivate our remaining improvements, and to give more functionality to our SLList class, let's add <code>.addLast</code> and <code>.size</code> methods.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    IntNode p = first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns the size of list using ... recursion! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    the following code will cause error, since IntNode doesn&#x27;t has the size method.</span></span><br><span class="line"><span class="comment">    So we need a helper method.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    IntNode p = first;</span></span><br><span class="line"><span class="comment">    if (p == null) &#123;</span></span><br><span class="line"><span class="comment">        return 0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 1 + p.next.size();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> size(first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// helper method</span></span><br><span class="line"><span class="comment">/** Returns the size of the list starting at IntNode p. */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(IntNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + size(p.next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns the size of list using ... iteration! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> totalSize = <span class="number">0</span>;</span><br><span class="line">    IntNode p = first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        totalSize += <span class="number">1</span>;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> totalSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You may notice we have two <code>.size</code> methods. They have the same function name, but one has parmaters while another does not have. We call it <strong>Overload</strong>.</p>
<h2 id="improvement-5-caching">Improvement 5: Caching</h2>
<p>There are some issues of <code>addLast</code> and <code>size</code> methods - <strong>both of them are pretty slow.</strong></p>
<p>Can you figure out why?</p>
<blockquote>
<p>This is becauses we need to traverse the whole linked-list.</p>
</blockquote>
<p>In this lecture, we will focus on modifying size method so that the execution time of it is always fast. In the next lecture, we will get inspiration for quick addLast method.</p>
<p>Our solution is maintaining a special <code>size</code> variable that <strong>caches</strong> the size of the list. With this improvement, the execution time of size() method is independent of the size of the list.</p>
<blockquote>
<p>Caching: putting aside data to speed up retrieval.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> IntNode first;</span><br><span class="line">    <span class="comment">// cache</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, first);</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        IntNode p = first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the size of list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/01/29/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/5-3.JPG" class="" title="Naked Linked List vs. SLList">
<h2 id="improvement-6-sentinel-nodes">Improvement 6: Sentinel Nodes</h2>
<img src="/2021/01/29/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/5-4.JPG" class="">
<p>Let's add a new constructor so that we can represent empty SLList.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add a new constructor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Creates an empty SLList. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    first = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>It Seems pretty good, right?</p>
<p>Well, actually there is a subtle bug, can you find it?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// If you create an empty SLList, then using addLast method, the code will crash.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    IntNode p = first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;  <span class="comment">// Error: first is null and doesn&#x27;t have .next</span></span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">    SLList8 L = new SLList8();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    L.addLast(20);</span></span><br><span class="line"><span class="comment">    L.addLastIteration(25);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    System.out.println(L.size());</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>Let's do our last improvement of SLList to fix this bug.</p>
<h3 id="naive-solution">Naive Solution</h3>
<p>One possible solution is adding a special case for the empty list.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  size += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (first == <span class="keyword">null</span>) &#123;</span><br><span class="line">    first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  IntNode p = first;</span><br><span class="line">  <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">    p = p.next;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this case, it's ok. But in some other complex cases, such as tree data structure, it will cause vast amount of complexity, and make the code ugly. 🤮</p>
<p>There is a better way!</p>
<h3 id="sentinel-solution">Sentinel Solution</h3>
<p>We avoid special cases by <strong>making all SLLists (even empty) the same!</strong></p>
<img src="/2021/01/29/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/5-5.JPG" class="" title="Representing the Empty List Using a Sentinel">
<p>The following is our final implementation of <code>SLList</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** An SLList is a list of integers, which hides the terrible</span></span><br><span class="line"><span class="comment"> * truth of the nakedness within.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="comment">// nested class</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="comment">// attention: inner class should have private members</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">private</span> IntNode next;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* The first item (if it exits) is always at sentinel.next ... invariants */</span></span><br><span class="line">    <span class="keyword">private</span> IntNode sentinel;  <span class="comment">// rename first to be sentinel</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates an empty SLList. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sentinel node’s item needs to be an integer, </span></span><br><span class="line">        <span class="comment">// but doesn’t matter what value we pick.</span></span><br><span class="line">        sentinel = <span class="keyword">new</span> IntNode(-<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> IntNode(-<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> IntNode(x, sentinel.next);</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sentinel.next.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        IntNode p = sentinel;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the size of list using ... recursion! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/01/29/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/5-6.JPG" class="" title="Empty SLList">
<img src="/2021/01/29/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/5-7.JPG" class="" title="Non-empty SLList">
<h2 id="invariants">Invariants</h2>
<img src="/2021/01/29/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/5-8.png" class="" title="Invariants">
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(6): DLLists, Arrays</title>
    <url>/2021/02/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-6-DLLists-Arrays/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 6.</p>
<span id="more"></span>
<p>Two lectures ago, we built a naked recursive linked data structure —— <code>IntList</code>. It works, but is hard to use.</p>
<p>So, in the previous lecture, we add an extra layer on the naked data structure and built a better linked list —— <code>SLLit</code>. However, SLList has some limitations, one of them is inserting at the back of an SLList is much slower than adding at the front. This is because under the hood, to add an item at the end of the SLList, it needs to iterate through all of the items.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    size += <span class="number">1</span>;</span><br><span class="line">    sentinel.next = <span class="keyword">new</span> IntNode(x, sentinel.next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    size += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    IntNode p = sentinel;</span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>How could we modify our list data structure so that addLast is also fast?</p>
<h2 id="dllist-doubly-linked-list">DLList: Doubly Linked List</h2>
<img src="/2021/02/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-6-DLLists-Arrays/6-1.JPG" class="" title="From Singly Linked List to Doubly Linked List">
<p>However, adding <code>.last</code> and <code>.prev</code> introduces a special case:</p>
<img src="/2021/02/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-6-DLLists-Arrays/6-2.JPG" class="">
<p>To avoid these, either:</p>
<ul>
<li>Add an additional <code>sentBack</code> sentinel at the end of the list.</li>
<li><strong>Make your linked list circular (highly recommened for project 1)</strong>, with a single sentinel in the middle.</li>
</ul>
<img src="/2021/02/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-6-DLLists-Arrays/6-3.JPG" class="" title="Method 1: Add Additional Sentinel">
<img src="/2021/02/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-6-DLLists-Arrays/6-4.JPG" class="" title="Method 2: Make Linked List Circular">
<p>You will implement your version of DLList in <a href="https://sp21.datastructur.es/materials/proj/proj1/proj1">Project 1</a>.</p>
<h2 id="generic-lists">Generic Lists</h2>
<p>Until now, our <code>SLList</code> and <code>DLList</code> only support Integers. To make our list more practical, one important task it to make it generic.</p>
<p>Java allows us to defer type selection until declaration.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Generic SLList */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span>&lt;<span class="title">Type</span>&gt; </span>&#123;	</span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">StuffNode</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> Type item;</span><br><span class="line">		<span class="keyword">private</span> StuffNode next;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">StuffNode</span><span class="params">(Type i, StuffNode n)</span> </span>&#123;</span><br><span class="line">			item = i;</span><br><span class="line">			next = n;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> StuffNode first;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line">		first = <span class="keyword">new</span> StuffNode(x, <span class="keyword">null</span>);</span><br><span class="line">		size = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line"> 		first = <span class="keyword">new</span> StuffNode(x, first);</span><br><span class="line"> 		size += <span class="number">1</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> Type <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> 		<span class="keyword">return</span> first.item; 		</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line"> 		size += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"> 		StuffNode p = first;</span><br><span class="line"></span><br><span class="line"> 		<span class="comment">/* Move p until it reaches the end of the list. */</span></span><br><span class="line"> 		<span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line"> 			p = p.next;</span><br><span class="line"> 		&#125;</span><br><span class="line"></span><br><span class="line"> 		p.next = <span class="keyword">new</span> StuffNode(x, <span class="keyword">null</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> 		<span class="keyword">return</span> size;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLListLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SLList&lt;String&gt; L = <span class="keyword">new</span> SLList&lt;&gt;(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        L.addFirst(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SLList&lt;Integer&gt; L2 = <span class="keyword">new</span> SLList&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        L.addFirst(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/02/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-6-DLLists-Arrays/6-4-2.JPG" class="" title="Java Generics">
<h2 id="arrays">Arrays</h2>
<p>Try to understand the following code. I think it is easy for you to except the last line.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] z = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] x, y;</span><br><span class="line"> </span><br><span class="line">x = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">y = x;</span><br><span class="line">x = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">99</span>&#125;;</span><br><span class="line">y = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">z = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> xL = x.length;</span><br><span class="line"> </span><br><span class="line">String[] s = <span class="keyword">new</span> String[<span class="number">6</span>];</span><br><span class="line">s[<span class="number">4</span>] = <span class="string">&quot;ketchup&quot;</span>;</span><br><span class="line">s[x[<span class="number">3</span>] - x[<span class="number">1</span>]] = <span class="string">&quot;muffins&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[] b = &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;;  <span class="comment">// can omit the new if you are also declaring a variable</span></span><br><span class="line">System.arraycopy(b, <span class="number">0</span>, x, <span class="number">3</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<img src="/2021/02/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-6-DLLists-Arrays/6-5.JPG" class="">
<p>To understand array deeper, let’s take a look at 2-dimensional arrays in Java. Try to understand the following code.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] pascalsTriangle;</span><br><span class="line">pascalsTriangle = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line"><span class="keyword">int</span>[] rowZero = pascalsTriangle[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">pascalsTriangle[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;;</span><br><span class="line">pascalsTriangle[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">pascalsTriangle[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">pascalsTriangle[<span class="number">3</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] rowTwo = pascalsTriangle[<span class="number">2</span>];</span><br><span class="line">rowTwo[<span class="number">1</span>] = -<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] matrix;</span><br><span class="line">matrix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line">matrix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] pascalAgain = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                              	&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>This is the result:</p>
<img src="/2021/02/01/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-6-DLLists-Arrays/6-6.JPG" class="">
<h2 id="exercise-2d-arrays">Exercise: 2D Arrays</h2>
<p>What will be the value of x[0][0] and w[0][0] when the code shown completes?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] x = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] z = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">z[<span class="number">0</span>] = x[<span class="number">0</span>];</span><br><span class="line">z[<span class="number">0</span>][<span class="number">0</span>] = -z[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] w = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">System.arraycopy(x[<span class="number">0</span>], <span class="number">0</span>, w[<span class="number">0</span>], <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">w[<span class="number">0</span>][<span class="number">0</span>] = -w[<span class="number">0</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<p>🐹 Solution:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x[<span class="number">0</span>][<span class="number">0</span>]: -<span class="number">1</span></span><br><span class="line">w[<span class="number">0</span>][<span class="number">0</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>Until now, we've seen how to harness a recursive class definition to build an expandable list, ie. the <code>IntList</code>, the <code>SLList</code> and the <code>DLList</code>. In the next two lectures, we will transfer from linked data structure to arrays, and see how to harness arrays to build such a list, namely <code>AList</code>.</p>
<p>See you next time. 🦄</p>
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(7): ALists, Resizing, vs. SLists</title>
    <url>/2021/02/03/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 7.</p>
<p>We have already seen how we can harness recursive class definition to build an expandable list, ie. the <code>IntList</code>, the <code>SLList</code>, and the <code>DLList</code>.</p>
<p>Now let us stop continuing it and try to use another basic data structure, array, to build list, which is called <code>AList</code>. You will find these two kinds of lists have differnet pros and cons.</p>
<span id="more"></span>
<h2 id="alist-array-based-list">AList: Array-based List</h2>
<p>The data structure of <code>DLList</code> we have talked in the previous lecture is pretty beautiful. And it also has fast operations like <code>addFirst</code>, <code>addLast</code> etc. So why should we try to build AList?</p>
<p>Let's see a limitation of DLList.</p>
<img src="/2021/02/03/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-1.JPG" class="" title="Limitation of DLList">
<h3 id="naive-alist">1. Naive AList</h3>
<p>🐹 <strong>Retrieval from any postion of an array is very fast.</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// We only do back operations in the lecture. Project 1 will give you </span></span><br><span class="line"><span class="comment">// a chance to implement front operations like addFirst, getFirst.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Invariants:</span></span><br><span class="line"><span class="comment"> addLast: The next item we want to add, will go into position &quot;size&quot;</span></span><br><span class="line"><span class="comment"> getLast: The item we want to return is in position &quot;size - 1&quot;</span></span><br><span class="line"><span class="comment"> size: The number of items in the list should be &quot;size&quot;.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates an empty list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Inserts X into the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        items[size] = x;</span><br><span class="line">        size = size + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the item from the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Gets the ith item in the list (0 is the front). */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the number of items in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="removelast-method">2. removeLast( ) method</h3>
<img src="/2021/02/03/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-2.JPG" class="">
<p>The answer is we only need to change size.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Deletes item from back of the list and returns deleted item. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = getLast();</span><br><span class="line">    <span class="comment">// items[size - 1] = null;   yeah but unnecessary</span></span><br><span class="line">    size = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="resizing-arrays">3. Resizing Arrays</h3>
<img src="/2021/02/03/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-3.JPG" class="">
<p><strong>When the array gets too full, just make a new array!</strong></p>
<p>🦉 <strong>Resizing process:</strong></p>
<ul>
<li>int[ ] a = new int[newSize]</li>
<li>System.arraycopy( )</li>
<li>a[size] = targetNum</li>
<li>items = a</li>
<li>size += 1</li>
</ul>
<p>Let's implement this process.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];</span><br><span class="line">    System.arraycopy(items, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">    items = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">        resize(size + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    items[size] = x;</span><br><span class="line">    size = size + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="performance-problem-1">Performance Problem 1</h4>
<p>The big issue here is that how to set a proper capacity as the parameter of resize method?</p>
<p>Let's do an experiment to test the speed of resizing when using two different strategies.</p>
<ul>
<li>one is <strong>resize(size + 10)</strong></li>
<li>another is <strong>resize(2 * size)</strong></li>
</ul>
<img src="/2021/02/03/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-5.JPG" class="" title="Speed Test of Different Strategies">
<img src="/2021/02/03/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-4.JPG" class="" title="Geometric Resizing Strategy Is Much Better">
<h4 id="performance-problem-2">Performance Problem 2</h4>
<p>There is another performance problem. Suppose we have a very rare situation:</p>
<ul>
<li>Insert 1,000,000,000 items.</li>
<li>Then remove 990,000,000 items.</li>
</ul>
<p>Our data structure will handle this spike of events as well as it could, but afterwards there is a problem - <strong>a waste of space!</strong></p>
<img src="/2021/02/03/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-6.JPG" class="" title="Time Efficiency vs. Space Efficiency">
<p>You will implement this during project 1.</p>
<h2 id="final-code">Final Code</h2>
<p>Finally, let's make AList generic, and we will get the following code.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Item[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates an empty list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = (Item[]) <span class="keyword">new</span> Object[<span class="number">100</span>];   <span class="comment">// Java Syntax: casting</span></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Resizes the underlying array to the target capacity. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        Item[] a = (Item[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        System.arraycopy(items, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        items = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Inserts X into the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">            resize(size + <span class="number">10</span>);</span><br><span class="line">            <span class="comment">// resize(size * 2);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        items[size] = x;</span><br><span class="line">        size = size + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the item from the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Gets the ith item in the list (0 is the front). */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the number of items in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Deletes item from back of the list and</span></span><br><span class="line"><span class="comment">      * returns deleted item. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item x = getLast();</span><br><span class="line">        items[size - <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        size = size - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="no-loitering">No Loitering</h2>
<p>The last thing we should notice is loitering. Different from <code>int[]</code>, when using <code>Item[]</code> we should null out the deleted items manually to save memory usage.</p>
<img src="/2021/02/03/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-7.JPG" class="">
<img src="/2021/02/03/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-8.JPG" class="">
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(8): Inheritance, Implements</title>
    <url>/2021/02/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-8-Inheritance-Implements/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 8.</p>
<span id="more"></span>
<h2 id="a-real-problem">A Real Problem</h2>
<p>Recall <code>SLList</code> and <code>AList</code> we have implemented until now. They exactly have many same methods (signatures), although their data structures under the hood are totally different.</p>
<p>Now, suppose we’re writing a library to manipulate lists of words. We might want to write a function that finds the longest word from a list of words.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longest</span><span class="params">(SLList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list.get(maxId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SLList&lt;String&gt; L = <span class="keyword">new</span> SLList&lt;&gt;();</span><br><span class="line">        L.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L));   <span class="comment">// watching</span></span><br><span class="line"></span><br><span class="line">        AList&lt;String&gt; L2 = <span class="keyword">new</span> AList&lt;&gt;();</span><br><span class="line">        L2.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L2));   <span class="comment">// Error: we can&#x27;t pass AList to longest method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">If X is a superclass of Y, then memory boxes for X may contain Y.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>Read the code above, I think you should understand why there is an error when calling <code>longest</code> method on an AList. Now, what should we do if we want the <code>longest</code> method can also handle AList beautifully?</p>
<p>To sovle this problem, you should know the knowledge of <code>interface</code> and <code>inheritance</code>.</p>
<h2 id="hypernyms-hyponyms-and-interface-inheritance">Hypernyms, Hyponyms, and Interface Inheritance</h2>
<ul>
<li>Hypernyms(上位词) represent abstraction.</li>
<li>Hyponyms(下位词) represent details.</li>
</ul>
<img src="/2021/02/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-8-Inheritance-Implements/8-1.JPG" class="" title="Example of Relationship Between Hypernyms and Hyponyms">
<p>Java can help us build this hierarchy.</p>
<img src="/2021/02/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-8-Inheritance-Implements/8-2.JPG" class="">
<img src="/2021/02/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-8-Inheritance-Implements/8-3.JPG" class="">
<img src="/2021/02/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-8-Inheritance-Implements/8-4.JPG" class="">
<p>Now, turn back to the previous problem. We can solve it now.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longest</span><span class="params">(List61B&lt;String&gt; list)</span> </span>&#123;  <span class="comment">// &lt;-- change here</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list.get(maxId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SLList&lt;String&gt; L = <span class="keyword">new</span> SLList&lt;&gt;();</span><br><span class="line">        L.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L));   <span class="comment">// watching</span></span><br><span class="line"></span><br><span class="line">        AList&lt;String&gt; L2 = <span class="keyword">new</span> AList&lt;&gt;();</span><br><span class="line">        L2.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L2));   <span class="comment">// watching</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="overriding-vs.-overloading">Overriding vs. Overloading</h2>
<img src="/2021/02/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-8-Inheritance-Implements/8-5.JPG" class="" title="Overriding vs. Overloading">
<p>##Interface Inheritance</p>
<img src="/2021/02/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-8-Inheritance-Implements/8-6.JPG" class="">
<p>In the last section, we said that subclass must override all methods of interface, otherwise it will fail to compile. In fact, this is not accurate.</p>
<img src="/2021/02/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-8-Inheritance-Implements/8-7.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List61B</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item x)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item y)</span></span>;</span><br><span class="line">   </span><br><span class="line">    <span class="function">Item <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Item <span class="title">getLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Item <span class="title">removeLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Item <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item x, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i += <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(get(i) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If you don’t like the default method, you absolutely can override it. For example, the default <code>print</code> method is inefficient for <code>SLList</code>, so we override it:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">List61B</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * the default print method is inefficient for SLList, so we override it. </span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Node p = sentinel.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">            System.out.print(p.item + <span class="string">&quot; &quot;</span>);     	</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="static-and-dynamic-type-dynamic-method-selection">Static and Dynamic Type, Dynamic Method Selection</h2>
<img src="/2021/02/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-8-Inheritance-Implements/8-8.JPG" class="">
<img src="/2021/02/05/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-8-Inheritance-Implements/8-9.JPG" class="">
<p>To wrap up above materials, let's do a puzzle.</p>
<p>Suppose we have classes defined below. Try to predict the results.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;hello animal&quot;</span>); &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;sniff animal&quot;</span>); &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">praise</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool animal&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;dog sniff animal&quot;</span>); &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">praise</span><span class="params">(Dog a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool dog&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">        a.greet(d);</span><br><span class="line">        a.sniff(d);</span><br><span class="line">        d.praise(d);</span><br><span class="line">        a.praise(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Add annotation to the above code, and also give the answer.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">(Animal a)</span> </span>&#123; </span><br><span class="line">        print(<span class="string">&quot;hello animal&quot;</span>); &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;sniff animal&quot;</span>); &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">praise</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool animal&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;dog sniff animal&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Overload</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">praise</span><span class="params">(Dog a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool dog&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Dog();  <span class="comment">// static type:Animal; dynamic type: Dog</span></span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog();  <span class="comment">// static type &amp; dynamic type: Dog</span></span><br><span class="line">        </span><br><span class="line">        a.greet(d);  <span class="comment">// hello animal</span></span><br><span class="line">        a.sniff(d);  <span class="comment">// dog sniff animal</span></span><br><span class="line">        d.praise(d);  <span class="comment">// u r cool dog</span></span><br><span class="line">        a.praise(d);  <span class="comment">// u r cool animal</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The shocking answer is the last one, i.e. <code>a.flatter(d);</code> . Why?</p>
<p>There are some rules that you should apply when solving such problems.</p>
<ul>
<li>At compile time: we determine the <strong>signature S</strong> of the method to be called.
<ul>
<li>S is decided using <strong>ONLY static types</strong></li>
</ul></li>
<li>At runtime: the dynamic type of the <strong>invoking object</strong> uses its method with this exact signature S.
<ul>
<li>By involing object, we mean the object whose method is invoked.</li>
</ul></li>
</ul>
<p>So,</p>
<ul>
<li>since <code>a</code> has <code>Animal</code> static type, <code>a.greet(d)</code> will call the default interface method <code>greet</code>;</li>
<li>although <code>a</code> has <code>Animal</code> static type, the <code>sniff</code> method has be overriden in <code>Dog</code> class, so <code>a.sniff(d)</code> will call the dynamic type method <code>sniff</code>;</li>
<li>since <code>d</code> has <code>Dog</code> static type, <code>d.praise(d)</code> will call the method <code>praise</code> from <code>Dog</code> class;</li>
<li>notice <code>praise</code> method is not overriden, it's just overload, so since <code>a</code> has <code>Animal</code> static type, <code>a.praise(d)</code> will call the default interface method <code>praise</code>;</li>
</ul>
<p>🦔 Related Slides: link <a href="https://docs.google.com/presentation/d/1EUOpd9NXq28eEUqQMZoo_rRpxw8EekQ2LEp61U9bnDc/edit#slide=id.gb943cfb275_0_158">here</a></p>
<h2 id="real-world">Real World</h2>
<p>Finally, let's go back to the real world.</p>
<p>We will use the Java's built-in <strong>List interface</strong> and several implementations, e.g. <strong>ArrayList</strong>, <strong>LinkedList</strong>, <strong>Stack</strong>, <strong>Vector</strong> etc. in our future works.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Examples</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        L.add(<span class="number">5</span>);</span><br><span class="line">        L.add(<span class="number">10</span>);</span><br><span class="line">        L.add(<span class="number">15</span>);</span><br><span class="line">        System.out.println(L);  <span class="comment">// L.toString()</span></span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; L2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Reference: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html">LINK</a></p>
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(9): Extends, Casting, HoFs</title>
    <url>/2021/02/08/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 9.</p>
<p>🌳 In this lecture, we will talk more about implementation inheritance.</p>
<span id="more"></span>
<h2 id="implementation-inheritance-extends">Implementation Inheritance: Extends</h2>
<p>In the last lecture, we talked about <strong>implements</strong> keyword. When a class is a hyponym of an interface, we use implements.</p>
<p>If you want one class to be a hyponym of another class, you use <strong>extends</strong>.</p>
<img src="/2021/02/08/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-1.JPG" class="" title="Example">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* SLList, but with additional rotateRight operation. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotatingSLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">extends</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Todo: Implement RotatingSLList such that code compiles </span></span><br><span class="line"><span class="comment">     * and outputs correct result.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Rotates list to the right. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item x = removeLast();</span><br><span class="line">        addFirst(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RotatingSLList&lt;Integer&gt; rel = <span class="keyword">new</span> RotatingSLList&lt;&gt;();</span><br><span class="line">        rel.addLast(<span class="number">10</span>);</span><br><span class="line">        rel.addLast(<span class="number">11</span>);</span><br><span class="line">        rel.addLast(<span class="number">12</span>);</span><br><span class="line">        rel.addLast(<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">        rel.rotateRight();</span><br><span class="line">        rel.print();  <span class="comment">// 13, 10, 11, 12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/02/08/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-2.JPG" class="">
<p>We should notice that constructors won't be inherited.</p>
<p>Let's look at another example. Suppose we want to build an SLList called <strong>VengefulSLList</strong> that:</p>
<ul>
<li>Remembers all Items that have been destroyed by <code>removeLast</code>.</li>
<li>Has an additional method <code>printLostItems()</code>, which prints all deleted items.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VengefulSLList</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	VengefulSLList&lt;Integer&gt; vs1 = <span class="keyword">new</span> VengefulSLList&lt;Integer&gt;();</span><br><span class="line">    	vs1.addLast(<span class="number">1</span>);</span><br><span class="line">    	vs1.addLast(<span class="number">5</span>);</span><br><span class="line">    	vs1.addLast(<span class="number">10</span>);</span><br><span class="line">    	vs1.addLast(<span class="number">13</span>);      <span class="comment">/* [1, 5, 10, 13] */</span></span><br><span class="line">    	vs1.removeLast();     <span class="comment">/* 13 gets deleted. */</span></span><br><span class="line">    	vs1.removeLast();     <span class="comment">/* 10 gets deleted. */</span></span><br><span class="line">    	System.out.print(<span class="string">&quot;The fallen are: &quot;</span>);</span><br><span class="line">    	vs1.printLostItems(); <span class="comment">/* Should print 10 and 13. */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>How should we do?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** SList with additional operation printLostItems() which prints all items</span></span><br><span class="line"><span class="comment">  * that have ever been deleted. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VengefulSLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">extends</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    SLList&lt;Item&gt; deletedItems;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// super();</span></span><br><span class="line">        deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(x);</span><br><span class="line">        deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item x = <span class="keyword">super</span>.removeLast();</span><br><span class="line">        deletedItems.addLast(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Prints deleted items. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLostItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        deletedItems.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="constructor-behavior">Constructor Behavior</h2>
<img src="/2021/02/08/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-3.JPG" class="" title="Call the Default Constructor">
<img src="/2021/02/08/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-4.JPG" class="" title="Call the Specified Constructor">
<img src="/2021/02/08/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-5.JPG" class="" title="Every Class inherits Object Class">
<p>❗ <strong>Important Note</strong>: both <code>implements</code> and <code>extends</code> should only be used for <strong>is-a</strong> relationship instead of <strong>has-a</strong> relationship.</p>
<h2 id="encapsulation">Encapsulation</h2>
<img src="/2021/02/08/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-6.JPG" class="">
<p><strong>Module:</strong> A set of methods that work together as a whole to perform some task or set of related tasks.</p>
<p>A module is said to be <strong>encapsulated</strong> if its implementation is completely hidden, and it can be accessed only through a documented interface.</p>
<p>🌴 Reminder: You should use the idea of encapsulation to guide yourself when completing project1b, and other large project.</p>
<h2 id="type-checking-and-casting">Type Checking and Casting</h2>
<img src="/2021/02/08/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-7-1.png" class="">
<img src="/2021/02/08/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-7-2.png" class="">
<img src="/2021/02/08/Data%20Structures%20and%20Algorithms/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-8.png" class="">
<h2 id="higher-order-functions">Higher Order Functions</h2>
<p>Python is good at defining <strong>higher order functions (HOFs)</strong>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example of HoF</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tenX</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> * x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_twice</span>(<span class="params">f, x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f(f(x))</span><br><span class="line"></span><br><span class="line">do_twice(tenX, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>HoFs is powerful and useful. However, before Java7 and earlier, there is a fundamental issue that <strong>memory boxes(variable) cannot contain pointers to functions.</strong> So if you want to define HoFs in Java7 or earlier, you should use interface instead.</p>
<p>Let's see an example.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Represent a function that takes in an integer, and returns an integer. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IntUnaryFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TenX</span> <span class="keyword">implements</span> <span class="title">IntUnaryFunction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/** Returns ten times its argument. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> * x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HoFDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_twice</span><span class="params">(IntUnaryFunction f, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f.apply(f.apply(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntUnaryFunction tenX = <span class="keyword">new</span> TenX();</span><br><span class="line">        System.out.println(do_twice(tenX, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hofs-in-java8-or-later">HoFs in Java8 or Later</h3>
<p>In Java 8, new types were introduced, and you can hold references to methods.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8HoFDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tenX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> * x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">doTwice</span><span class="params">(Function&lt;Integer, Integer&gt; f, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f.apply(f.apply(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = doTwice(Java8HoFDemo::tenX, <span class="number">2</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;T&gt; – the type of the input to the function</span></span><br><span class="line"><span class="comment">&lt;R&gt; – the type of the result of the function</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public interface Function&lt;T, R&gt; &#123;</span></span><br><span class="line"><span class="comment">    // ....</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
        <category>CS61B-Data Structures</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
</search>
