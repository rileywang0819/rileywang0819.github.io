<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CS144(1): Internet and IP</title>
    <url>/2021/09/01/CS144-Network/CS144-1-Internet-and-IP/</url>
    <content><![CDATA[<p>This is the first lecture note of CS144.</p>
<span id="more"></span>
<h2 id="networked-applications">Networked Applications</h2>
<p>It is the networked applications make the network interesting. But how they works?</p>
<img src="/2021/09/01/CS144-Network/CS144-1-Internet-and-IP/1-1.png" class="">
<p>Let's look at the <strong>Byte Stream Model</strong> in detail.</p>
<p>For example, A is a web browser and B is a server. After setting up connection, either side can write data to the connection while another side can read the data. Either side (A or B) can close the connection. The server side can refuse the connection as well.</p>
<img src="/2021/09/01/CS144-Network/CS144-1-Internet-and-IP/1-2.png" class="">
<p>Now, we've seen the basic way networked applications communicate. Let's look at 3 typical examples.</p>
<h3 id="world-wide-web-http">World Wide Web (HTTP)</h3>
<p>The web applications work using something called <strong>HTTP(HyperText Transfer Protocal)</strong>.</p>
<p>The basic model is very simple: the client sends a request by wrting to the connection. The server reads the request, processes it, and writes a reponse to the connection, which the client then reads.</p>
<p>Because HTTP is documented-centric, so client requests will name a file. The HTTP response has a numeric code associated with it, such as 200, 404 etc. HTTP is all in ASCII text, meaning it's human readable.</p>
<img src="/2021/09/01/CS144-Network/CS144-1-Internet-and-IP/1-3.png" class="">
<h3 id="bittorrent">BitTorrent</h3>
<p>BitTorrent is a program that allows people to share and exchange large files.</p>
<p>Unlike the web, where a client requests documents from a server, in BitTorrent, a client requests from other cilents.</p>
<p>BitTorrent will break files into chunks of data called <em>pieces</em>. When a client downloads a complete piece from another client, it then tells other clients that it has that piece so they can download it too.</p>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>Computer Network</tag>
      </tags>
  </entry>
  <entry>
    <title>15213(1): Overview</title>
    <url>/2021/07/07/15213-CSAPP/15213-1-Overview/</url>
    <content><![CDATA[<p>This is the lecture note of 15213 - Lecture 1.</p>
<p>You must have used the idea of abstraction many times, such as abstract data types or asymptotic analysis since CS courses emphasize abstraction.</p>
<p>However, abstractions have limits, especially in the presence of bugs. Most of time, in order to fix bugs, you need to understand details of underlying implementations. To help you understand these underlying implementations, we provide this course - <code>15-213: Intro to Computer Systems</code> .</p>
<p>In this course, you will be taught a lot of useful knowledge, skills and tools, which will make you become a more effective programmer. You will understand how programs run, how machines support programs, and will understand why sometimes programs work while sometimes they don't. These knowledge is the preparation of later systems courses, such as Compilers, OS, Networks etc.</p>
<span id="more"></span>
<h2 id="crazy-reality">Crazy Reality</h2>
<p>In this section, we will look at some interesting examples. You will find that they have different results as you thought.</p>
<h3 id="reality-1-ints-are-not-integers-floats-are-not-reals">Reality #1: Ints are not Integers, Floats are not Reals</h3>
<img src="/2021/07/07/15213-CSAPP/15213-1-Overview/reality-1.JPG" class="">
<h3 id="reality-2-you-have-got-to-know-assembly汇编">Reality #2: You have Got to Know Assembly(汇编)</h3>
<img src="/2021/07/07/15213-CSAPP/15213-1-Overview/reality-2.JPG" class="">
<h3 id="reality-3-random-access-memory-is-an-unphysical-abstraction">Reality #3: Random Access Memory Is an Unphysical Abstraction</h3>
<ul>
<li>Memory is not unbounded
<ul>
<li>It must be allocated and managed</li>
<li>Many applications are memory dominated</li>
</ul></li>
<li>Memory referencing bugs especially pernicious
<ul>
<li>Effects are distant in both time and space</li>
</ul></li>
<li>Memory performance is not uniform
<ul>
<li>Cache and virtual memory effects can greatly affect program performance</li>
<li>Adapting program to characteristics of memory system can lead to major speed improvements</li>
</ul></li>
</ul>
<p>Let's see an example of Memory Referencing Bug.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> a[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">double</span> d;</span><br><span class="line">&#125; <span class="keyword">struct_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">struct_t</span> s;</span><br><span class="line">  s.d = <span class="number">3.14</span>;</span><br><span class="line">  s.a[i] = <span class="number">1073741824</span>; <span class="comment">/* Possibly out of bounds */</span></span><br><span class="line">  <span class="keyword">return</span> s.d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fun(0) =&gt; 	3.14</span></span><br><span class="line"><span class="comment">// fun(1) =&gt; 	3.14</span></span><br><span class="line"><span class="comment">// fun(2) =&gt; 	3.1399998664856</span></span><br><span class="line"><span class="comment">// fun(3) =&gt; 	2.00000061035156</span></span><br><span class="line"><span class="comment">// fun(4) =&gt; 	3.14</span></span><br><span class="line"><span class="comment">// fun(6) =&gt; 	Segmentation fault</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// * Result is system specific</span></span><br></pre></td></tr></table></figure>
<p>Explanation:</p>
<img src="/2021/07/07/15213-CSAPP/15213-1-Overview/reality-3.JPG" class="">
<p>C/C++ do not provide any memory protection, so you can access memory at will. And sometimes, this will lead nasty bugs because of out of bounds array references, invalid pointer values, or abuses of malloc/free etc. Whether or not bug jumps out depends on your system and compiler, sometimes, effect of bug may be first observed long after it is generated.</p>
<p>To deal with this problem, you can 1) choose another programming language; 2) use or develop tools to detect referencing errors (e.g. Valgrind)</p>
<h3 id="reality-4-theres-more-to-performance-than-asymptotic-complexity">Reality #4: There’s more to performance than asymptotic complexity</h3>
<p>In asymptotic analysis, constant factors have been ignored.</p>
<p>However, Constant factors matter too! And even exact operation count does not predict performance. Depending on how code written, performance will vary in a large range. Let's look at an example.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyij</span><span class="params">(<span class="keyword">int</span> src[<span class="number">2048</span>][<span class="number">2048</span>], <span class="keyword">int</span> dst[<span class="number">2048</span>][<span class="number">2048</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2048</span>; j++)</span><br><span class="line">            dst[i][j] = src[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runtime cost: 4.3ms</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyji</span><span class="params">(<span class="keyword">int</span> src[<span class="number">2048</span>][<span class="number">2048</span>], <span class="keyword">int</span> dst[<span class="number">2048</span>][<span class="number">2048</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2048</span>; j++)</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; i++)</span><br><span class="line">            dst[i][j] = src[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runtime cost: 81.8ms</span></span><br></pre></td></tr></table></figure>
<p>Two code snippests do the same thing. However, their performance are very different. This is in connection with hierarchical memory organization.</p>
<img src="/2021/07/07/15213-CSAPP/15213-1-Overview/reality-4.JPG" class="">
<p>In reality, to optimize the code, you must optimize at multiple levels: <code>algorithm</code>, <code>data representations</code>, <code>procedures</code>, and <code>loops</code> .To do this, you must understand system:</p>
<ul>
<li>How programs compiled and executed</li>
<li>How to measure program performance and identify bottlenecks</li>
<li>How to improve performance without destroying code modularity and generality</li>
</ul>
<h3 id="reality-5-computers-do-more-than-execute-programs">Reality #5: Computers do more than execute programs</h3>
<img src="/2021/07/07/15213-CSAPP/15213-1-Overview/reality-5.JPG" class="">
<p>This course will covers these topics as well.</p>
<ul>
<li>Of course, you need to learn a specific course if you want to be topic-centric, but this course can serve as a good prerequiste.</li>
</ul>
<img src="/2021/07/07/15213-CSAPP/15213-1-Overview/role.JPG" class="">
<h2 id="labs">Labs</h2>
<p>Labs are the heart of this course. There are 7 labs.</p>
<hr />
<p><strong>Part I. Programs and Data</strong></p>
<p>🌻 topics:</p>
<ul>
<li>Bits operations, arithmetic, assembly language programs</li>
<li>Representation of C control and data structures</li>
<li>Includes aspects of architecture and compilers</li>
</ul>
<p>👩‍💻 labs:</p>
<ul>
<li>L1 (datalab): Manipulating bits</li>
<li>L2 (bomblab): Defusing a binary bomb</li>
<li>L3 (attacklab): The basics of code injection attacks</li>
</ul>
<hr />
<p><strong>Part II. The Memory Hierarchy</strong></p>
<p>🌻 topics:</p>
<ul>
<li>Memory technology, memory hierarchy, caches, disks, locality</li>
<li>Includes aspects of architecture and OS</li>
</ul>
<p>👩‍💻 labs:</p>
<ul>
<li>L4 (cachelab): Building a cache simulator and optimizing for locality. Learn how to exploit locality in your programs.</li>
</ul>
<hr />
<p><strong>Part III. Exceptional Control Flow</strong></p>
<p>🌻 topics:</p>
<ul>
<li>Hardware exceptions, processes, process control, Unix signals, nonlocal jumps</li>
<li>Includes aspects of compilers, OS, and architecture</li>
</ul>
<p>👩‍💻 labs:</p>
<ul>
<li>L5 (tshlab): Writing your own Unix shell. A first introduction to concurrency</li>
</ul>
<hr />
<p><strong>Part IV. Virtual Memory</strong></p>
<p>🌻 topics:</p>
<ul>
<li>Virtual memory, address translation, dynamic storage allocation</li>
<li>Includes aspects of architecture and OS</li>
</ul>
<p>👩‍💻 labs:</p>
<ul>
<li>L6 (malloclab): Writing your own malloc package.
<ul>
<li>Get a real feel for systems-level programming</li>
</ul></li>
</ul>
<hr />
<p><strong>Part V. Networking, and Concurrency</strong></p>
<p>🌻 topics:</p>
<ul>
<li>High level and low-level I/O, network programming</li>
<li>Internet services, Web servers</li>
<li>concurrency, concurrent server design, threads</li>
<li>I/O multiplexing with select</li>
<li>Includes aspects of networking, OS, and architecture</li>
</ul>
<p>👩‍💻 labs:</p>
<ul>
<li>L7 (proxylab): Writing your own Web proxy.
<ul>
<li>Learn network programming and more about concurrency and synchronization.</li>
</ul></li>
</ul>
<h2 id="reminder">Reminder</h2>
<p>📚 Do not forget to read the textbook! You should read chapter 1.</p>
]]></content>
      <categories>
        <category>15213-Intro to Computer Systems</category>
      </categories>
      <tags>
        <tag>15213</tag>
      </tags>
  </entry>
  <entry>
    <title>解析BitTorrent协议的原理</title>
    <url>/2021/09/01/CS144-Network/%E8%A7%A3%E6%9E%90BitTorrent%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>该博客是对CS144(1): Internet and IP</p>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>Computer Network</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(1): Introduction</title>
    <url>/2020/08/25/CS61A-SICP/CS61A-1-Introduction/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 1.</p>
<span id="more"></span>
<h2 id="what-is-computer-science">What is Computer Science?</h2>
<p>Computer Science has many subfields, and each subfield has its own sub-subfield.</p>
<img src="/2020/08/25/CS61A-SICP/CS61A-1-Introduction/lec1-1.png" class="">
<h2 id="what-is-this-course-about">What is this course about?</h2>
<ul>
<li>A course about managing complexity, thus you should:
<ul>
<li>master abstraction
<ul>
<li>procedural abstractions</li>
<li>data abstractions</li>
</ul></li>
<li>master programming paradigms</li>
</ul></li>
<li>An introduction to programming:
<ul>
<li>full understanding of Python fundamentals</li>
<li>combine multiple ideas in large projects</li>
<li>learn how computer interpret programming languages</li>
</ul></li>
<li>Different types of languages:
<ul>
<li>Python</li>
<li>Scheme</li>
<li>SQL</li>
</ul></li>
</ul>
<h2 id="demo">Demo</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Numeric expressions</span></span><br><span class="line"><span class="number">2020</span></span><br><span class="line"><span class="number">2000</span> + <span class="number">20</span></span><br><span class="line">-<span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> * ((<span class="number">5</span> // <span class="number">6</span>) + <span class="number">7</span> * <span class="number">8</span> * <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="built_in">abs</span>(-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">abs</span>(<span class="number">2301</span> - <span class="number">4321</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Values</span></span><br><span class="line"><span class="string">&quot;Go Bears&quot;</span></span><br><span class="line"><span class="string">&quot;Gob&quot;</span> + <span class="string">&quot;ears&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Objects</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">shakes = urlopen(<span class="string">&#x27;http://composingprograms.com/shakespeare.txt&#x27;</span>)</span><br><span class="line">text = shakes.read().decode().split()</span><br><span class="line"><span class="built_in">len</span>(text)</span><br><span class="line">text[:<span class="number">25</span>]</span><br><span class="line">text.count(<span class="string">&#x27;the&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;thou&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;you&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;forsooth&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets</span></span><br><span class="line">words = <span class="built_in">set</span>(text)</span><br><span class="line"><span class="built_in">len</span>(words)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Combinations </span></span><br><span class="line"><span class="string">&#x27;draw&#x27;</span></span><br><span class="line"><span class="string">&#x27;draw&#x27;</span>[<span class="number">0</span>]  <span class="comment"># &#x27;d&#x27;</span></span><br><span class="line">&#123;w[<span class="number">0</span>] <span class="keyword">for</span> w <span class="keyword">in</span> words&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Data</span></span><br><span class="line"><span class="string">&#x27;draw&#x27;</span>[::-<span class="number">1</span>]  <span class="comment"># &#x27;ward&#x27;</span></span><br><span class="line">&#123;w <span class="keyword">for</span> w <span class="keyword">in</span> words <span class="keyword">if</span> w == w[::-<span class="number">1</span>] <span class="keyword">and</span> <span class="built_in">len</span>(w)&gt;<span class="number">4</span>&#125;</span><br><span class="line">&#123;w <span class="keyword">for</span> w <span class="keyword">in</span> words <span class="keyword">if</span> w[::-<span class="number">1</span>] <span class="keyword">in</span> words <span class="keyword">and</span> <span class="built_in">len</span>(w) == <span class="number">4</span>&#125;</span><br><span class="line">&#123;w <span class="keyword">for</span> w <span class="keyword">in</span> words <span class="keyword">if</span> w[::-<span class="number">1</span>] <span class="keyword">in</span> words <span class="keyword">and</span> <span class="built_in">len</span>(w) &gt; <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(10): Containers</title>
    <url>/2020/09/20/CS61A-SICP/CS61A-10-Containers/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 10.</p>
<span id="more"></span>
<h2 id="lists">Lists</h2>
<p><strong>List</strong> is a built-in data type in Python.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lists</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; odds = [41, 43, 47, 49]</span><br><span class="line">[41, 43, 47, 49]</span><br><span class="line">&gt;&gt;&gt; len(odds)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; odds[1]</span><br><span class="line">43</span><br><span class="line">&gt;&gt;&gt; odds[0] - odds[3] + len(odds)</span><br><span class="line">-4</span><br><span class="line">&gt;&gt;&gt; odds[odds[3]-odds[2]]</span><br><span class="line">47</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from operator import getitem</span><br><span class="line">&gt;&gt;&gt; getitem(odds, 2)</span><br><span class="line">47</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; [2, 7] + odds * 2</span><br><span class="line">[2, 7, 41, 43, 47, 49, 41, 43, 47, 49]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; pairs = [[10, 20], 30]</span><br><span class="line">&gt;&gt;&gt; pairs[0]</span><br><span class="line">[10, 20]</span><br><span class="line">&gt;&gt;&gt; pairs[0][0]</span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<h2 id="containers">Containers</h2>
<p>Lists can contain other values, and their values can represent collections of other values.</p>
<p>You can use built-in operators <code>in</code> to test whether an element appears in a compound value.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Containers</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; digits = [1, 8, 2, 8]</span><br><span class="line">&gt;&gt;&gt; 1 <span class="keyword">in</span> digits</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 5 <span class="keyword">in</span> digits</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; <span class="string">&#x27;1&#x27;</span> not <span class="keyword">in</span> digits</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; [1, 8] <span class="keyword">in</span> digits</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; [1, 2] <span class="keyword">in</span> [[1, 2], 3]</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; [1, 2] <span class="keyword">in</span> [[[1, 2]], 3, 4]</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<h2 id="for-statements">For Statements</h2>
<p>We've written lots of code using <strong>while</strong> loops. Now, it's time to turn to learn an alternative way of iteration structure —— <strong>for</strong> loops. The for statement is a way of iterating over sequences.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># while statement</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_while</span>(<span class="params">s, value</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Count the number of occurrences of value in sequence s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; digits = [1, 8, 2, 8]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_while(digits, 8)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, index = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index &lt; <span class="built_in">len</span>(s):</span><br><span class="line">        element = s[index]</span><br><span class="line">        <span class="keyword">if</span> element == value:</span><br><span class="line">            total = total + <span class="number">1</span></span><br><span class="line">        index = index + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for statement</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_for</span>(<span class="params">s, value</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Count the number of occurrences of value in sequence s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; digits = [1, 8, 2, 8]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_for(digits, 8)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> element == value:</span><br><span class="line">            total = total + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>
<p>There is a cool feature in Python's <code>for</code> statement: <strong>sequence unpacking</strong>.</p>
<p>Here is an example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_same</span>(<span class="params">pairs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return how many pairs have the same element repeated.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pairs = [[1, 2], [2, 2], [2, 3], [4, 4]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_same(pairs)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    same_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> pairs:</span><br><span class="line">        <span class="keyword">if</span> x == y:</span><br><span class="line">            same_count = same_count + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> same_count</span><br></pre></td></tr></table></figure>
<p>❗ Attention: This feature only works for a sequence of fixed length sequences, such as sequence pairs.</p>
<h2 id="ranges">Ranges</h2>
<p><strong>Range</strong> is another sequence type.</p>
<img src="/2020/09/20/CS61A-SICP/CS61A-10-Containers/10-1.JPG" class="">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cheer</span>():</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Go Bears!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Here, we use _ instead of x or i to hightlight the fact that we don&#x27;t care what is it.</span></span><br></pre></td></tr></table></figure>
<h2 id="list-comprehensions">List Comprehensions</h2>
<p>List comprehensions are a powerful form of combination in the Python language.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># List comprehensions</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odds = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x+<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> odds]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> odds <span class="keyword">if</span> <span class="number">25</span> % x == <span class="number">0</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divisors</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the integers that evenly divide n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; divisors(1)</span></span><br><span class="line"><span class="string">    [1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; divisors(4)</span></span><br><span class="line"><span class="string">    [1, 2]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; divisors(12)</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; [n for n in range(1, 1000) if sum(divisors(n)) == n]</span></span><br><span class="line"><span class="string">    [1, 6, 28, 496]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>] + [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n) <span class="keyword">if</span> n % x == <span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h2 id="strings">Strings</h2>
<img src="/2020/09/20/CS61A-SICP/CS61A-10-Containers/10-2.JPG" class="">
<p>For String, you can use either single quotation mark or double quotation mark. The only difference is that double quoted String can have multiple lines, while single quoted String can only have one line.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">&#x27;curry = lambda f: lambda x: lambda y: f(x, y)&#x27;</span></span><br><span class="line"><span class="string">&#x27;curry = lambda f: lambda x: lambda y: f(x, y)&#x27;</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exec</span>(<span class="string">&#x27;curry = lambda f: lambda x: lambda y: f(x, y)&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; curry</span><br><span class="line">&lt;<span class="keyword">function</span> &lt;lambda&gt; at 0x000001FF95D32EA0&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exec</span>(<span class="string">&#x27;print(&quot;Hello World&quot;)&#x27;</span>)</span><br><span class="line">Hello World</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; city = <span class="string">&#x27;Beijing&#x27;</span></span><br><span class="line">&gt;&gt;&gt; len(city)</span><br><span class="line">7</span><br><span class="line">&gt;&gt;&gt; city[2]</span><br><span class="line"><span class="string">&#x27;i&#x27;</span></span><br><span class="line">&gt;&gt;&gt; <span class="string">&#x27;iji&#x27;</span> <span class="keyword">in</span> city</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; <span class="string">&#x27;B &#x27;</span> not <span class="keyword">in</span> city</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(11): Sequences</title>
    <url>/2020/09/22/CS61A-SICP/CS61A-11-Sequences/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 11.</p>
<span id="more"></span>
<h2 id="slicing">Slicing</h2>
<p><strong>Slicing</strong> is an operation that you can perform on sequences such as lists and ranges.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># examples of slicing</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odds = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[odds[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>)]</span><br><span class="line">[<span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odds[<span class="number">1</span>: <span class="number">3</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odds[: <span class="number">3</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odds[<span class="number">1</span>:]</span><br><span class="line">[<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure>
<h3 id="examples">Examples</h3>
<ul>
<li>Question 1: Recursive Sum</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span>(<span class="params">L</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of all numbers in list L, using recursion.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_sum([2, 4, 1, 5])</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(L) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> L[<span class="number">0</span>] + my_sum(L[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># drill</span></span><br><span class="line"><span class="comment"># Write a recursive function that takes as input integer &quot;n&quot;, and returns the sum</span></span><br><span class="line"><span class="comment"># of the first &quot;n&quot; integers, such as sum(5) returns 1 + 2 + 3 + 4 + 5 = 15</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n + <span class="built_in">sum</span>(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>Question 2: String Reversal</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params"><span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Reverse the given string recursively.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse(&quot;ward&quot;)</span></span><br><span class="line"><span class="string">    draw</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> reverse(<span class="built_in">str</span>[<span class="number">1</span>:]) + <span class="built_in">str</span>[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h2 id="processing-container-values">Processing Container Values</h2>
<img src="/2020/09/22/CS61A-SICP/CS61A-11-Sequences/11-1.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># examples of sum</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)       <span class="comment"># start=5</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>]], [])  <span class="comment"># [] + [2, 3] + [4] ==&gt; [2, 3, 4]</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>]])</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unsupported operand <span class="built_in">type</span>(s) <span class="keyword">for</span> +: <span class="string">&#x27;int&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;list&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># examples of max</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="built_in">range</span>(<span class="number">10</span>), <span class="keyword">lambda</span> x: <span class="number">7</span>-(x-<span class="number">4</span>)*(x-<span class="number">2</span>))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># examples of all</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x &lt; <span class="number">5</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([x &lt; <span class="number">5</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)])</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(13): Trees</title>
    <url>/2020/09/27/CS61A-SICP/CS61A-13-Trees/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 13.</p>
<span id="more"></span>
<h2 id="processing-container-values">Processing Container Values</h2>
<ul>
<li>sum(iterable[, start]) -&gt; value</li>
<li>max(iterable[, key=func]) -&gt; value</li>
<li>all(iterable) -&gt; bool</li>
<li>any(iterable) -&gt; bool</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Aggregation</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">3</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: <span class="built_in">list</span> index out of <span class="built_in">range</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst[<span class="number">3</span>:]</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>) </span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="comment"># Hint: If you sum a list of lists, you get a list containing the elements of those lists.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>]], [])  <span class="comment"># ==&gt; [2, 3] + [4]</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([ [[<span class="number">1</span>]], [<span class="number">2</span>] ], [])  <span class="comment"># ==&gt; [[1]] + [2]</span></span><br><span class="line">[[<span class="number">1</span>], <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(&#123;<span class="number">3</span>:<span class="number">9</span>, <span class="number">5</span>:<span class="number">25</span>&#125;)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="built_in">range</span>(<span class="number">10</span>), key=<span class="keyword">lambda</span> x: <span class="number">7</span> - (x-<span class="number">2</span>)*(x-<span class="number">4</span>))</span><br><span class="line"><span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([x &lt; <span class="number">5</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)])</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>perfect_square = <span class="keyword">lambda</span> x: x == <span class="built_in">round</span>(x ** <span class="number">0.5</span>) ** <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>([perfect_square(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>, <span class="number">60</span>)])  <span class="comment"># Try ,65)</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h2 id="trees">Trees</h2>
<p>Trees are an important data abstraction for representing hierarchical relationships.</p>
<img src="/2020/09/27/CS61A-SICP/CS61A-13-Trees/13-1.JPG" class="">
<img src="/2020/09/27/CS61A-SICP/CS61A-13-Trees/13-2.JPG" class="">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Trees: recursive implementation</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tree</span>(<span class="params">label, branches=[]</span>):</span></span><br><span class="line">    <span class="comment"># verifies the tree def</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches: </span><br><span class="line">        <span class="keyword">assert</span> is_tree(branch), <span class="string">&#x27;branches must be trees&#x27;</span></span><br><span class="line">    <span class="comment"># list(branches): create a list from a sequence branches</span></span><br><span class="line">    <span class="keyword">return</span> [label] + <span class="built_in">list</span>(branches)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">label</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">branches</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_tree</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(tree) != <span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">len</span>(tree) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>t = tree(1, [tree(5, [tree(7)]), tree(6)])</span></span><br><span class="line"><span class="string">[1, [5, [7]], [6]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="tree-processing">Tree Processing</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### +++ === ABSTRACTION BARRIER === +++ ###</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># construct fibonacci tree</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_tree</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct a Fibonacci tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib_tree(1)</span></span><br><span class="line"><span class="string">    [1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib_tree(3)</span></span><br><span class="line"><span class="string">    [2, [1], [1, [0], [1]]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib_tree(5)</span></span><br><span class="line"><span class="string">    [5, [2, [1], [1, [0], [1]]], [3, [1, [0], [1]], [2, [1], [1, [0], [1]]]]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left = fib_tree(n-<span class="number">2</span>)</span><br><span class="line">        right = fib_tree(n-<span class="number">1</span>)</span><br><span class="line">        fib_n = label(left) + label(right)</span><br><span class="line">        <span class="keyword">return</span> tree(fib_n, [left, right])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_leaves</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The number of leaves in tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_leaves(fib_tree(5))</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([count_leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaves</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a list containing the leaf labels of tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; leaves(fib_tree(5))</span></span><br><span class="line"><span class="string">    [1, 0, 1, 0, 1, 1, 0, 1]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(tree):</span><br><span class="line">        <span class="keyword">return</span> [label(tree)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(tree)], [])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment_leaves</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree like t but with leaf labels incremented.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(increment_leaves(fib_tree(4)))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> tree(label(t) + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bs = [increment_leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)]</span><br><span class="line">        <span class="keyword">return</span> tree(label(t), bs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree like t but with all labels incremented.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(increment(fib_tree(4)))</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> tree(label(t) + <span class="number">1</span>, [increment(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure>
<p>One more example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_tree</span>(<span class="params">t, indent=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print a representation of this tree in which each label is</span></span><br><span class="line"><span class="string">    indented by two spaces times its depth from the root.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(tree(1))</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(tree(1, [tree(2)]))</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(fib_tree(4))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">        0</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">          0</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;  &#x27;</span> * indent + <span class="built_in">str</span>(label(t)))</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        print_tree(b, indent + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="example-1-summing-paths">Example 1: Summing Paths</h2>
<p>First, let's see an example of tail recursion.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Order</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return n * n-1 * ... * 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact(4)</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  非尾递归: 下一个函数结束以后此函数还有后续，所以必须保存本身的环境以供处理返回值。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact_tail</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return n * n-1 * ... * 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact_tail(4)</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> fact_times(n, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact_times</span>(<span class="params">n, k</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return k * n * n-1 * ... * 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact_times(4, 3)</span></span><br><span class="line"><span class="string">    72</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> k</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fact_times(n - <span class="number">1</span>, k * n)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 尾递归: 进入下一个函数不再需要上一个函数的环境了，得出结果以后直接返回。</span></span><br><span class="line"><span class="comment"># 尾递归是一种编程技巧。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ordinary recursion: we need call stack to record; if too many recursive calls, sometimes stack overflow occurs.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tail recursion: in tail recursion, the recursive call is the last thing logically, and there is nothing left in the current function. </span></span><br><span class="line"><span class="comment"># And the compiler will optimize tail recursion. (we don&#x27;t need stack frame anymore, and tail recursion can be optimized as ordinary loop)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Then use this strategy to do <code>print_sums</code> question.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tree <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">numbers = tree(<span class="number">3</span>, [tree(<span class="number">4</span>), tree(<span class="number">5</span>, [tree(<span class="number">6</span>)])])</span><br><span class="line">haste = tree(<span class="string">&#x27;h&#x27;</span>, [tree(<span class="string">&#x27;a&#x27;</span>, [tree(<span class="string">&#x27;s&#x27;</span>), tree(<span class="string">&#x27;t&#x27;</span>)]), tree(<span class="string">&#x27;e&#x27;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sums</span>(<span class="params">t, so_far</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the sum of labels along the path from the root to each leaf.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_sums(tree(3, [tree(4), tree(5, [tree(6)])]), 0)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    14</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_sums(haste, &#x27;&#x27;)</span></span><br><span class="line"><span class="string">    has</span></span><br><span class="line"><span class="string">    hat</span></span><br><span class="line"><span class="string">    he</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    so_far = so_far + label(t)</span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="built_in">print</span>(so_far)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> branch <span class="keyword">in</span> branches(t):</span><br><span class="line">            print_sums(branch, so_far)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="example-2-counting-paths">Example 2: Counting Paths</h2>
<img src="/2020/09/27/CS61A-SICP/CS61A-13-Trees/13-3.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Count paths that have a total label sum</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_paths</span>(<span class="params">t, total</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of paths from the root to any node in tree</span></span><br><span class="line"><span class="string">    t for which the labels along the path sum to total.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(3, [tree(-1), tree(1, [tree(2, [tree(1)]), tree(3)]), tree(1, [tree(-1)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_paths(t, 3)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_paths(t, 4)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_paths(t, 5)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_paths(t, 6)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_paths(t, 7)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> label(t) == total:</span><br><span class="line">        found = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        found = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> found + <span class="built_in">sum</span>([count_paths(b, total - label(t)) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(12): Data Abstraction</title>
    <url>/2020/09/24/CS61A-SICP/CS61A-12-Data-Abstraction/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 12.</p>
<span id="more"></span>
<h2 id="data-abstraction">Data Abstraction</h2>
<img src="/2020/09/24/CS61A-SICP/CS61A-12-Data-Abstraction/12-1.JPG" class="">
<p>Let's look at an example.</p>
<img src="/2020/09/24/CS61A-SICP/CS61A-12-Data-Abstraction/12-2.JPG" class="">
<img src="/2020/09/24/CS61A-SICP/CS61A-12-Data-Abstraction/12-3.JPG" class="">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Rational arithmetic</span></span><br><span class="line"><span class="comment"># How to use data?</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_rational</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The sum of rational numbers X and Y.&quot;&quot;&quot;</span></span><br><span class="line">    nx, dx = numer(x), denom(x)</span><br><span class="line">    ny, dy = numer(y), denom(y)</span><br><span class="line">    <span class="keyword">return</span> rational(nx * dy + ny * dx, dx * dy)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul_rational</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The product of rational numbers X and Y.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> rational(numer(x) * numer(y), denom(x) * denom(y))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">equal_rational</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;True iff rational numbers X and Y are equal.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> numer(x) * denom(y) == numer(y) * denom(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_rational</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print rational X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(numer(x), <span class="string">&quot;/&quot;</span>, denom(x))</span><br></pre></td></tr></table></figure>
<ul>
<li>rational(n, d): returns a rational number</li>
<li>numer(x): returns the numerator</li>
<li>denom(x):returns the denominator</li>
</ul>
<p>These functions implement an abstract data type for rational numbers.</p>
<p>Q: How to implement these functions?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># How to represent data?</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Constructor and selectors</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A representation of the rational number N/D.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [n, d]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the numerator of rational number X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the denominator of rational number X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>However think about the examples as follows:</p>
<ul>
<li>3/2 * 5/3 = 15/6 = 5/2</li>
<li>2/5 + 1/10 = 25/50 = 1/2</li>
</ul>
<p>The numerator and denominator of a rational number should be relatively prime.</p>
<p>Sp, the above implementation need to be improved.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Improved implementation</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A representation of the rational number N/D.</span></span><br><span class="line"><span class="string">       gcd: greatest common divisor</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    g = gcd(n, d)</span><br><span class="line">    <span class="keyword">return</span> [n//g, d//g]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the numerator of rational number X in lowest terms and having</span></span><br><span class="line"><span class="string">    the sign of X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the denominator of rational number X in lowest terms and positive.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h2 id="abstraction-barriers">Abstraction Barriers</h2>
<img src="/2020/09/24/CS61A-SICP/CS61A-12-Data-Abstraction/12-4.JPG" class="">
<img src="/2020/09/24/CS61A-SICP/CS61A-12-Data-Abstraction/12-5.JPG" class="">
<p>The purpose of maintaining abstraction barriers, is so that you can change your data representation without having to rewrite your entire program.</p>
<p>Let's take a look at another example.</p>
<p>Here, we use function instead of built-in list to implement rational data. We only change data representation whereas keep data manipulations. The outcome is still correct!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Functional implementation</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A representation of the rational number N/D.&quot;&quot;&quot;</span></span><br><span class="line">    g = gcd(n, d)</span><br><span class="line">    n, d = n//g, d//g</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">return</span> select</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the numerator of rational number X in lowest terms and having</span></span><br><span class="line"><span class="string">    the sign of X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the denominator of rational number X in lowest terms and positive.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>x, y = rational(1, 2), rational(3, 8)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>x</span></span><br><span class="line"><span class="string">&lt;function select&gt;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>print_rational(mul_rational(x, y))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<img src="/2020/09/24/CS61A-SICP/CS61A-12-Data-Abstraction/12-6.JPG" class="">
<h2 id="dictionaries">Dictionaries</h2>
<p>A dictionary allows you to associate values with keys.</p>
<p>👻 Dictionary doesn't have order inheritantly.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; numerals = &#123;<span class="string">&#x27;I&#x27;</span>: 1, <span class="string">&#x27;V&#x27;</span>: 5, <span class="string">&#x27;X&#x27;</span>: 10&#125;</span><br><span class="line">&gt;&gt;&gt; numerals[<span class="string">&#x27;X&#x27;</span>]  <span class="comment"># lookup through keys</span></span><br><span class="line">10</span><br><span class="line">&gt;&gt;&gt; numerals[10]  <span class="comment"># cannot through values</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: 10</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; numerals.keys()</span><br><span class="line">dict_keys([<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;X&#x27;</span>])</span><br><span class="line">&gt;&gt;&gt; numerals.values()</span><br><span class="line">dict_values([1, 5, 10])</span><br><span class="line">&gt;&gt;&gt; items = numerals.items()</span><br><span class="line">&gt;&gt;&gt; items</span><br><span class="line">dict_items([(<span class="string">&#x27;I&#x27;</span>, 1), (<span class="string">&#x27;V&#x27;</span>, 5), (<span class="string">&#x27;X&#x27;</span>, 10)])</span><br><span class="line">&gt;&gt;&gt; dict(items)</span><br><span class="line">&#123;<span class="string">&#x27;I&#x27;</span>: 1, <span class="string">&#x27;V&#x27;</span>: 5, <span class="string">&#x27;X&#x27;</span>: 10&#125;</span><br><span class="line">&gt;&gt;&gt; dict(items)[<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="string">&#x27;X&#x27;</span> <span class="keyword">in</span> numerals</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; numerals.get(<span class="string">&#x27;X&#x27;</span>, 0)  <span class="comment"># if &#x27;X&#x27; is the key of dictionary, return it&#x27;s value</span></span><br><span class="line">10</span><br><span class="line">&gt;&gt;&gt; numerals.get(<span class="string">&#x27;X-ray&#x27;</span>, 0)  <span class="comment"># otherwise, return 0</span></span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<img src="/2020/09/24/CS61A-SICP/CS61A-12-Data-Abstraction/12-7.JPG" class="">
<h3 id="dictionary-comprehension">dictionary comprehension</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x: x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x &lt; <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">4</span>, <span class="number">3</span>: <span class="number">9</span>, <span class="number">4</span>: <span class="number">16</span>&#125;</span><br></pre></td></tr></table></figure>
<img src="/2020/09/24/CS61A-SICP/CS61A-12-Data-Abstraction/12-8.JPG" class="">
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(14): Mutability</title>
    <url>/2020/09/29/CS61A-SICP/CS61A-14-Mutability/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 14.</p>
<span id="more"></span>
<h2 id="objects">Objects</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>date</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">datetime</span>.<span class="title">date</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">start</span> = <span class="title">date</span>(<span class="params"><span class="number">2020</span>, <span class="number">8</span>, <span class="number">25</span></span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">start</span></span></span><br><span class="line"><span class="class"><span class="title">datetime</span>.<span class="title">date</span>(<span class="params"><span class="number">2020</span>, <span class="number">8</span>, <span class="number">25</span></span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">freedom</span> = <span class="title">date</span>(<span class="params"><span class="number">2020</span>, <span class="number">12</span>, <span class="number">16</span></span>)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">str</span>(<span class="params">freedom - start</span>)</span></span><br><span class="line"><span class="class">&#x27;113 <span class="title">days</span>, 0:</span><span class="number">00</span>:<span class="number">00</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># attributes</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; start.year</span></span><br><span class="line"><span class="string">2020</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># methods</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; start.strftime(&#x27;</span>%B %d %A<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">&#x27;</span>August <span class="number">25</span> Tuesday<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<img src="/2020/09/29/CS61A-SICP/CS61A-14-Mutability/14-1.JPG" class="">
<h2 id="example-string">Example: String</h2>
<p>Strings are objects.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.upper()</span><br><span class="line"><span class="string">&#x27;HELLO&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.lower()</span><br><span class="line"><span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.swapcase()</span><br><span class="line"><span class="string">&#x27;hELLO&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">&#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure>
<img src="/2020/09/29/CS61A-SICP/CS61A-14-Mutability/14-2.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">ord</span>(a)</span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="built_in">ord</span>(a))</span><br><span class="line"><span class="string">&#x27;0x41&#x27;</span></span><br></pre></td></tr></table></figure>
<img src="/2020/09/29/CS61A-SICP/CS61A-14-Mutability/14-3.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> unicodedata <span class="keyword">import</span> name, lookup</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;LATIN CAPITAL LETTER A&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name(<span class="string">&#x27;あ&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;HIRAGANA LETTER A&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name(<span class="string">&#x27;啊&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;CJK UNIFIED IDEOGRAPH-554A&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lookup(<span class="string">&#x27;SOCCER BALL&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;⚽&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lookup(<span class="string">&#x27;BABY&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;👶&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lookup(<span class="string">&#x27;BABY&#x27;</span>).encode()</span><br><span class="line"><span class="string">b&#x27;\xf0\x9f\x91\xb6&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="mutation-operations">Mutation Operations</h2>
<p>Only objects of mutable types can change their value over time.</p>
<ul>
<li>list</li>
<li>dictionaty</li>
<li>set</li>
</ul>
<p>A function can change the value of any object in its scope.</p>
<h3 id="example-of-list">Example of List</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits = [<span class="string">&#x27;coin&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;myriad&#x27;</span>]  <span class="comment"># A list literal</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>original_suits = suits</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits.pop()   <span class="comment"># Removes and returns the final element</span></span><br><span class="line"><span class="string">&#x27;myriad&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits.remove(<span class="string">&#x27;string&#x27;</span>)  <span class="comment"># Removes the first element that equals the argument</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits</span><br><span class="line">[<span class="string">&#x27;coin&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits.append(<span class="string">&#x27;cup&#x27;</span>)  <span class="comment"># Add an element to the end</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits.extend([<span class="string">&#x27;sword&#x27;</span>, <span class="string">&#x27;club&#x27;</span>])  <span class="comment"># Add all elements of a list to the end</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits</span><br><span class="line">[<span class="string">&#x27;coin&#x27;</span>, <span class="string">&#x27;cup&#x27;</span>, <span class="string">&#x27;sword&#x27;</span>, <span class="string">&#x27;club&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits[<span class="number">2</span>] = <span class="string">&#x27;spade&#x27;</span>  <span class="comment"># Replace an element</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits</span><br><span class="line">[<span class="string">&#x27;coin&#x27;</span>, <span class="string">&#x27;cup&#x27;</span>, <span class="string">&#x27;spade&#x27;</span>, <span class="string">&#x27;club&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits[<span class="number">0</span>:<span class="number">2</span>] = [<span class="string">&#x27;heart&#x27;</span>, <span class="string">&#x27;diamond&#x27;</span>]  <span class="comment"># Replace a slice</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits</span><br><span class="line">[<span class="string">&#x27;heart&#x27;</span>, <span class="string">&#x27;diamond&#x27;</span>, <span class="string">&#x27;spade&#x27;</span>, <span class="string">&#x27;club&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[suit.upper() <span class="keyword">for</span> suit <span class="keyword">in</span> suits]</span><br><span class="line">[<span class="string">&#x27;HEART&#x27;</span>, <span class="string">&#x27;DIAMOND&#x27;</span>, <span class="string">&#x27;SPADE&#x27;</span>, <span class="string">&#x27;CLUB&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>original_suits   </span><br><span class="line">[<span class="string">&#x27;heart&#x27;</span>, <span class="string">&#x27;diamond&#x27;</span>, <span class="string">&#x27;spade&#x27;</span>, <span class="string">&#x27;club&#x27;</span>]  <span class="comment"># All names that refer to the same object are affected by a mutation</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[suit[<span class="number">1</span>:<span class="number">4</span>] <span class="keyword">for</span> suit <span class="keyword">in</span> suits <span class="keyword">if</span> <span class="built_in">len</span>(suit) == <span class="number">5</span>]</span><br><span class="line">[<span class="string">&#x27;ear&#x27;</span>, <span class="string">&#x27;pad&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h3 id="example-of-dictionary">Example of Dictionary</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals = &#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1.0</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals[<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals[<span class="string">&#x27;X&#x27;</span>] = <span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals[<span class="string">&#x27;L&#x27;</span>] = <span class="number">50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals</span><br><span class="line">&#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1.0</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals.pop(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals.get(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numerals</span><br><span class="line">&#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1.0</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(numerals.values())</span><br><span class="line"><span class="number">56.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>([(<span class="number">3</span>, <span class="number">9</span>), (<span class="number">4</span>, <span class="number">16</span>), (<span class="number">5</span>, <span class="number">25</span>)])</span><br><span class="line">&#123;<span class="number">3</span>: <span class="number">9</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">5</span>: <span class="number">25</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="tuples">Tuples</h2>
<p>Tuples are immutable sequences, meaning they are unchangable.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>  <span class="comment"># special syntax</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>()</span><br><span class="line">()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>()</span><br><span class="line">()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>(<span class="number">2</span>)  <span class="comment"># special</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;int&#x27;</span> <span class="built_in">object</span> <span class="keyword">is</span> <span class="keyword">not</span> iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">2</span>,)</span><br><span class="line">(<span class="number">2</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>,</span><br><span class="line">(<span class="number">2</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">3</span>, <span class="number">4</span>) + (<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> <span class="keyword">in</span> (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;[<span class="number">1</span>]: <span class="number">2</span>&#125;  <span class="comment"># mutable value cannot be key</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;(<span class="number">1</span>, <span class="number">2</span>): <span class="number">3</span>&#125;</span><br><span class="line">&#123;(<span class="number">1</span>, <span class="number">2</span>): <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;([<span class="number">1</span>], <span class="number">2</span>): <span class="number">3</span>&#125;  <span class="comment"># contain mutable sequence</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br></pre></td></tr></table></figure>
<p>However, an immutable sequence may still change if it contains a mutable value as an element.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = ([<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line">ERROR</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = ([<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">([<span class="number">4</span>, <span class="number">2</span>], <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h2 id="mutation">Mutation</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">20</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.append(<span class="number">20</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<img src="/2020/09/29/CS61A-SICP/CS61A-14-Mutability/14-4.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">10</span>] == [<span class="number">10</span>]</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">10</span>] <span class="keyword">is</span> [<span class="number">10</span>]</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<img src="/2020/09/29/CS61A-SICP/CS61A-14-Mutability/14-5.JPG" class="">
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(15): Syntax</title>
    <url>/2020/10/01/CS61A-SICP/CS61A-15-Syntax/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 15.</p>
<span id="more"></span>
<p>In this lecture, we will see an example of the usage of tree.</p>
<p>What we are going to do is try to generate new sentences similar to what this child would said by performing a simple operation. We are going to take sentences, pick some of the nodes in the tree, and replace it with a node from another tree that has the same tag.</p>
<img src="/2020/10/01/CS61A-SICP/CS61A-15-Syntax/15-1.JPG" class="">
<h2 id="step-1-data-abstraction">Step 1: Data Abstraction</h2>
<p>The first thing we have to do, is decide how to represent such a parse tree in Python.</p>
<img src="/2020/10/01/CS61A-SICP/CS61A-15-Syntax/15-2.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Setup: First download the corpus from here, unzip it, and put</span></span><br><span class="line"><span class="comment">#        this source file in the same directory as suppes.parsed</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># https://www.socsci.uci.edu/~lpearl/CoLaLab/CHILDESTreebank/CHILDESTreebank-curr.zip</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more info, see:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># https://www.socsci.uci.edu/~lpearl/CoLaLab/CHILDESTreebank/childestreebank.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Trees</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tree</span>(<span class="params">label, branches=[]</span>):</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">        <span class="keyword">assert</span> is_tree(branch), <span class="string">&#x27;branches must be trees&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> [label] + <span class="built_in">list</span>(branches)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">label</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">branches</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_tree</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(tree) != <span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">len</span>(tree) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_tree</span>(<span class="params">t, indent=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print a representation of this tree in which each label is</span></span><br><span class="line"><span class="string">    indented by two spaces times its depth from the root.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;  &#x27;</span> * indent + <span class="built_in">str</span>(label(t)))</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        print_tree(b, indent + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaves</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Yield the leaves of a tree.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> [t]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)], [])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Syntax</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">phrase</span>(<span class="params">tag, branches</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree(tag, branches)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word</span>(<span class="params">tag, text</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree([tag, text])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the tag of a constituent (word or phrase).&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):  <span class="comment"># means it is the word</span></span><br><span class="line">        <span class="keyword">return</span> label(t)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> label(t)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text</span>(<span class="params">w</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> is_leaf(w)</span><br><span class="line">    <span class="keyword">return</span> label(w)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h2 id="step-2-parsing">Step 2: Parsing</h2>
<img src="/2020/10/01/CS61A-SICP/CS61A-15-Syntax/15-3.JPG" class="">
<ul>
<li>Check the file's contents:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># less is a program that shows you the contents of a file</span></span><br><span class="line">$ less <span class="variable">$&#123;file&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">treebank_examples = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(ROOT (SBARQ (WHNP (WP what))</span></span><br><span class="line"><span class="string">     (SQ (VP (AUX is)) (NP (DT the) (NN rabbit)) (VP (VBG doing)))</span></span><br><span class="line"><span class="string">     (. ?)))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(ROOT (SQ (AUX is) (NP (PRP he)) (VP (VBG hopping)) (. ?)))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_sentences</span>(<span class="params"><span class="built_in">input</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Yield parsed sentences as lists of tokens for a list of lines.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; for s in read_sentences(treebank_examples):</span></span><br><span class="line"><span class="string">    ...     print(&#x27; &#x27;.join(s[:20]), &#x27;...&#x27;)</span></span><br><span class="line"><span class="string">    ( ROOT ( SBARQ ( WHNP ( WP what ) ) ( SQ ( VP ( AUX is ) ) ...</span></span><br><span class="line"><span class="string">    ( ROOT ( SQ ( AUX is ) ( NP ( PRP he ) ) ( VP ( VBG hopping ...</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sentences = []</span><br><span class="line">    tokens = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        <span class="keyword">if</span> line.strip():</span><br><span class="line">            tokens.extend(line.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27; ( &#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27; ) &#x27;</span>).split())</span><br><span class="line">            <span class="keyword">if</span> tokens.count(<span class="string">&#x27;(&#x27;</span>) == tokens.count(<span class="string">&#x27;)&#x27;</span>):</span><br><span class="line">                sentences.append(tokens)</span><br><span class="line">                tokens = []</span><br><span class="line">    <span class="keyword">return</span> sentences</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_sentences</span>():</span></span><br><span class="line">    <span class="keyword">return</span> read_sentences(<span class="built_in">open</span>(<span class="string">&#x27;suppes.parsed&#x27;</span>).readlines())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tokens_to_parse_tree</span>(<span class="params">tokens</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree for a list of tokens representing a parsed sentence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(tokens_to_parse_tree(read_sentences(treebank_examples)[0]))</span></span><br><span class="line"><span class="string">    ROOT</span></span><br><span class="line"><span class="string">      SBARQ</span></span><br><span class="line"><span class="string">        WHNP</span></span><br><span class="line"><span class="string">          [&#x27;WP&#x27;, &#x27;what&#x27;]</span></span><br><span class="line"><span class="string">        SQ</span></span><br><span class="line"><span class="string">          VP</span></span><br><span class="line"><span class="string">            [&#x27;AUX&#x27;, &#x27;is&#x27;]</span></span><br><span class="line"><span class="string">          NP</span></span><br><span class="line"><span class="string">            [&#x27;DT&#x27;, &#x27;the&#x27;]</span></span><br><span class="line"><span class="string">            [&#x27;NN&#x27;, &#x27;rabbit&#x27;]</span></span><br><span class="line"><span class="string">          VP</span></span><br><span class="line"><span class="string">            [&#x27;VBG&#x27;, &#x27;doing&#x27;]</span></span><br><span class="line"><span class="string">        [&#x27;.&#x27;, &#x27;?&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> tokens[<span class="number">0</span>] == <span class="string">&#x27;(&#x27;</span>, tokens</span><br><span class="line">    t, end = read_parse_tree(tokens, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid_tree</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="keyword">return</span> t <span class="keyword">and</span> tag(t)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_parse_tree</span>(<span class="params">tokens, i</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree for the next constitutent of a token iterator and the end index.&quot;&quot;&quot;</span></span><br><span class="line">    tag = tokens[i]</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> tokens[i] != <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">        <span class="keyword">assert</span> tokens[i+<span class="number">1</span>] == <span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> word(tag, tokens[i]), i + <span class="number">2</span></span><br><span class="line">    branches = []</span><br><span class="line">    <span class="keyword">while</span> tokens[i] != <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">        <span class="keyword">assert</span> tokens[i] == <span class="string">&#x27;(&#x27;</span></span><br><span class="line">        branch, i = read_parse_tree(tokens, i + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> is_valid_tree(branch):</span><br><span class="line">            branches.append(branch)</span><br><span class="line">    <span class="keyword">if</span> branches:</span><br><span class="line">        <span class="keyword">return</span> phrase(tag, branches), i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_parse_tree</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the parse tree in its original format.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_parse_tree(tokens_to_parse_tree(read_sentences(treebank_examples)[0]))</span></span><br><span class="line"><span class="string">    &#x27;(ROOT (SBARQ (WHNP (WP what)) (SQ (VP (AUX is)) (NP (DT the) (NN rabbit)) (VP (VBG doing))) (. ?)))&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + tag(t) + <span class="string">&#x27; &#x27;</span> + text(t) + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = <span class="string">&#x27;(&#x27;</span> + tag(t)</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            result += <span class="string">&#x27; &#x27;</span> + print_parse_tree(b)</span><br><span class="line">        result += <span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> punctuation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">words</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the words of a tree as a string.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; words(tokens_to_parse_tree(read_sentences(treebank_examples)[0]))</span></span><br><span class="line"><span class="string">    &#x27;what is the rabbit doing?&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> leaf <span class="keyword">in</span> leaves(t):</span><br><span class="line">        w = text(leaf)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">or</span> (w <span class="keyword">in</span> punctuation <span class="keyword">and</span> w <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;$&#x27;</span>) <span class="keyword">or</span> w <span class="keyword">in</span> [<span class="string">&quot;n&#x27;t&quot;</span>, <span class="string">&quot;&#x27;s&quot;</span>, <span class="string">&quot;&#x27;re&quot;</span>, <span class="string">&quot;&#x27;ve&quot;</span>]:</span><br><span class="line">            s = s + w</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s = s + <span class="string">&#x27; &#x27;</span> + w</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>
<h2 id="step-3-generate-language">Step 3: Generate Language</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sentence Generator</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nodes</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;List all (tag, node) pairs of a parse tree.&quot;&quot;&quot;</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse</span>(<span class="params">t</span>):</span></span><br><span class="line">        result.append([tag(t), t])</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            traverse(b)</span><br><span class="line">    traverse(t)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_trees</span>(<span class="params">trees</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a dictionary from tags to lists of trees.&quot;&quot;&quot;</span></span><br><span class="line">    index = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> trees:</span><br><span class="line">        <span class="keyword">for</span> tag, node <span class="keyword">in</span> nodes(t):</span><br><span class="line">            <span class="keyword">if</span> tag <span class="keyword">not</span> <span class="keyword">in</span> index:</span><br><span class="line">                index[tag] = []</span><br><span class="line">            index[tag].append(node)</span><br><span class="line">            <span class="comment"># Also: index.setdefault(tag, list).append(node)</span></span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coin</span>(<span class="params">prob</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flip</span>():</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return True if a coin flip comes up heads.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> random.random() &lt; prob</span><br><span class="line">    <span class="keyword">return</span> flip</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_tree</span>(<span class="params">t, tree_index, flip</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a version of t in which constituents are randomly replaced.&quot;&quot;&quot;</span></span><br><span class="line">    new_branches = []</span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        <span class="keyword">if</span> flip():</span><br><span class="line">            <span class="comment"># original = b</span></span><br><span class="line">            b = random.choice(tree_index[tag(b)])</span><br><span class="line">            <span class="comment"># print(&#x27;Replacing&#x27;, print_parse_tree(original), &#x27;with&#x27;, print_parse_tree(b))</span></span><br><span class="line">        new_branches.append(gen_tree(b, tree_index, flip))</span><br><span class="line">    <span class="keyword">return</span> phrase(tag(t), new_branches)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>(<span class="params">gen=gen_tree</span>):</span></span><br><span class="line">    trees = [tokens_to_parse_tree(s) <span class="keyword">for</span> s <span class="keyword">in</span> all_sentences() <span class="keyword">if</span> <span class="built_in">len</span>(s) &gt; <span class="number">100</span>]</span><br><span class="line">    tree_index = index_trees(trees)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        original = random.choice(trees)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Original: &#x27;</span>, words(original).lower())</span><br><span class="line">        <span class="comment"># print(&#x27;          &#x27;, print_parse_tree(original))</span></span><br><span class="line">        <span class="comment"># input()</span></span><br><span class="line">        edited = gen(original, tree_index, coin(<span class="number">0.3</span>))</span><br><span class="line">        <span class="built_in">input</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Generated:&#x27;</span>, words(edited).lower()) </span><br><span class="line">        <span class="built_in">input</span>()</span><br></pre></td></tr></table></figure>
<h2 id="step-4-change-the-data-representation">Step 4: Change the Data Representation</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">Change of data representation:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">phrase</span>(<span class="params">label, branches</span>):</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;(&#x27;</span>, tag] + <span class="built_in">sum</span>(branches, []) + [<span class="string">&#x27;)&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word</span>(<span class="params">tag, text</span>):</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;(&#x27;</span>, tag, text, <span class="string">&#x27;)&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="keyword">return</span> t[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text</span>(<span class="params">word</span>):</span></span><br><span class="line">    <span class="keyword">return</span> word[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">branches</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(tree):</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    branch = []</span><br><span class="line">    branches = []</span><br><span class="line">    <span class="keyword">assert</span> tree[<span class="number">0</span>] == <span class="string">&#x27;(&#x27;</span> <span class="keyword">and</span> tree[<span class="number">2</span>] == <span class="string">&#x27;(&#x27;</span>, tree</span><br><span class="line">    opened = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> token <span class="keyword">in</span> tree[<span class="number">2</span>:]:</span><br><span class="line">        branch.append(token)</span><br><span class="line">        <span class="keyword">if</span> token == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            opened += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> token == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            opened -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> opened == <span class="number">1</span>:</span><br><span class="line">                branches.append(branch)</span><br><span class="line">                branch = []</span><br><span class="line">    <span class="keyword">assert</span> opened == <span class="number">0</span>, tree</span><br><span class="line">    <span class="keyword">return</span> branches</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(tree) == <span class="number">4</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(16): Iterators</title>
    <url>/2020/10/04/CS61A-SICP/CS61A-16-Iterators/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 16.</p>
<span id="more"></span>
<h2 id="iterators">Iterators</h2>
<p>A container can provide an <strong>iterator</strong> that provides access to its elements in order.</p>
<p>Two built-in functions:</p>
<ul>
<li><strong>iter(iterable)</strong></li>
<li><strong>next(iterator)</strong></li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [[<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="built_in">iter</span>(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(t)</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<h2 id="dictionary-iteration">Dictionary Iteration</h2>
<img src="/2020/10/04/CS61A-SICP/CS61A-16-Iterators/16-1.JPG" class="">
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dictionary iteration demo</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d = &#123;<span class="string">&#x27;one&#x27;</span>: 1, <span class="string">&#x27;two&#x27;</span>: 2&#125;</span><br><span class="line">&gt;&gt;&gt; k = iter(d)</span><br><span class="line">&gt;&gt;&gt; next(k)</span><br><span class="line"><span class="string">&#x27;one&#x27;</span></span><br><span class="line">&gt;&gt;&gt; d[<span class="string">&#x27;zero&#x27;</span>] = 0   <span class="comment"># change the size of dictionary, then the original iterator becomes invalid</span></span><br><span class="line">&gt;&gt;&gt; next(k)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">RuntimeError: dictionary changed size during iteration</span><br><span class="line">&gt;&gt;&gt; k = iter(d)</span><br><span class="line">&gt;&gt;&gt; next(k)</span><br><span class="line"><span class="string">&#x27;one&#x27;</span></span><br><span class="line">&gt;&gt;&gt; next(k)</span><br><span class="line"><span class="string">&#x27;two&#x27;</span></span><br><span class="line">&gt;&gt;&gt; d[<span class="string">&#x27;one&#x27;</span>] = 8  <span class="comment"># it&#x27;s ok if just change the value instead of changing size</span></span><br><span class="line">&gt;&gt;&gt; next(k)</span><br><span class="line"><span class="string">&#x27;zero&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="for-statements">For Statements</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; r = range(3, 6)</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> i <span class="keyword">in</span> r:  <span class="comment"># use iterable sequence in a for statement </span></span><br><span class="line">...   <span class="built_in">print</span>(i)</span><br><span class="line">...</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; ri = iter(r)</span><br><span class="line">&gt;&gt;&gt; ri</span><br><span class="line">&lt;range_iterator object at 0x0000021880BFD9B0&gt;</span><br><span class="line">&gt;&gt;&gt; next(ri)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> i <span class="keyword">in</span> ri:  <span class="comment"># use iterator in a for statement</span></span><br><span class="line">...   <span class="built_in">print</span>(i)</span><br><span class="line">...</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>
<h2 id="built-in-iterator-functions">Built-in Iterator Functions</h2>
<ul>
<li><strong>lazy computation:</strong> means the result is only computed when it has been requested</li>
</ul>
<img src="/2020/10/04/CS61A-SICP/CS61A-16-Iterators/16-2.JPG" class="">
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bcd = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt; [x.upper() <span class="keyword">for</span> x <span class="keyword">in</span> bcd]</span><br><span class="line">[<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt; bcd</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; m = map(lambda x: x.upper(), bcd)</span><br><span class="line">&gt;&gt;&gt; m</span><br><span class="line">&lt;map object at 0x000001C6BE11A630&gt;  <span class="comment"># it is an iterator</span></span><br><span class="line">&gt;&gt;&gt; next(m)</span><br><span class="line"><span class="string">&#x27;B&#x27;</span></span><br><span class="line">&gt;&gt;&gt; next(m)</span><br><span class="line"><span class="string">&#x27;C&#x27;</span></span><br><span class="line">&gt;&gt;&gt; next(m)</span><br><span class="line"><span class="string">&#x27;D&#x27;</span></span><br><span class="line">&gt;&gt;&gt; next(m)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>
<p>Another example to see when the computation happens.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def double(x):</span><br><span class="line">...   <span class="built_in">print</span>(<span class="string">&#x27;**&#x27;</span>, x, <span class="string">&#x27;=&gt;&#x27;</span>, 2*x, <span class="string">&#x27;**&#x27;</span>)</span><br><span class="line">...   <span class="built_in">return</span> 2 * x</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; m = map(double, range(3, 7))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; f = lambda y: y &gt;= 10</span><br><span class="line">&gt;&gt;&gt; t = filter(f, m)</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">&lt;filter object at 0x000001C6BDE8A2B0&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; next(t)</span><br><span class="line">** 3 =&gt; 6 **</span><br><span class="line">** 4 =&gt; 8 **</span><br><span class="line">** 5 =&gt; 10 **</span><br><span class="line">10</span><br><span class="line">&gt;&gt;&gt; list(t)</span><br><span class="line">** 6 =&gt; 12 **</span><br><span class="line">[12]</span><br></pre></td></tr></table></figure>
<h2 id="zip">Zip</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example: zip</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d = &#123;<span class="string">&#x27;a&#x27;</span>: 1, <span class="string">&#x27;b&#x27;</span>: 2&#125;</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: 1, <span class="string">&#x27;b&#x27;</span>: 2&#125;</span><br><span class="line">&gt;&gt;&gt; items = zip(d.keys(), d.values())  <span class="comment"># return an iterator</span></span><br><span class="line">&gt;&gt;&gt; next(items) </span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, 1)</span><br><span class="line">&gt;&gt;&gt; next(items)</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, 2)</span><br><span class="line">&gt;&gt;&gt; next(items)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>
<img src="/2020/10/04/CS61A-SICP/CS61A-16-Iterators/16-3.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># demo: palindrome</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">palindrome</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether s is the same sequence backward and forward.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; palindrome([3, 1, 4, 1, 5])</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; palindrome([3, 1, 4, 1, 3])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; palindrome(&#x27;seveneves&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; palindrome(&#x27;seven eves&#x27;)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># return s == reversed(s)  # This version doesn&#x27;t work </span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span>([a == b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(s, <span class="built_in">reversed</span>(s))])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(s) == <span class="built_in">list</span>(<span class="built_in">reversed</span>(s))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="using-iterators">Using Iterators</h2>
<img src="/2020/10/04/CS61A-SICP/CS61A-16-Iterators/16-4.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Blackjack </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">points = &#123;<span class="string">&#x27;J&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;Q&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;K&#x27;</span>:<span class="number">10</span>, <span class="string">&#x27;A&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hand_score</span>(<span class="params">hand</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Total score for a hand.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; hand_score([&#x27;A&#x27;, 3, 6])</span></span><br><span class="line"><span class="string">    20</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; hand_score([&#x27;A&#x27;, &#x27;J&#x27;, &#x27;A&#x27;])</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total = <span class="built_in">sum</span>([points.get(card, card) <span class="keyword">for</span> card <span class="keyword">in</span> hand])</span><br><span class="line">    <span class="keyword">if</span> total &lt;= <span class="number">11</span> <span class="keyword">and</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">in</span> hand:</span><br><span class="line">        <span class="keyword">return</span> total + <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shuffle_cards</span>():</span></span><br><span class="line">    deck = ([<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;A&#x27;</span>] + <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>, <span class="number">11</span>))) * <span class="number">4</span></span><br><span class="line">    random.shuffle(deck)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(deck)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">basic_strategy</span>(<span class="params">up_card, cards</span>):</span></span><br><span class="line">    <span class="keyword">if</span> hand_score(cards) &lt;= <span class="number">11</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> up_card <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> hand_score(cards) &lt; <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">player_turn</span>(<span class="params">up_card, cards, strategy, deck</span>):</span></span><br><span class="line">    <span class="keyword">while</span> hand_score(cards) &lt;= <span class="number">21</span> <span class="keyword">and</span> strategy(up_card, cards):</span><br><span class="line">        cards.append(<span class="built_in">next</span>(deck))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dealer_turn</span>(<span class="params">cards, deck</span>):</span></span><br><span class="line">    <span class="keyword">while</span> hand_score(cards) &lt; <span class="number">17</span>:</span><br><span class="line">        cards.append(<span class="built_in">next</span>(deck))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blackjack</span>(<span class="params">strategy, announce=<span class="built_in">print</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Play a hand of casino blackjack.&quot;&quot;&quot;</span></span><br><span class="line">    deck = shuffle_cards()</span><br><span class="line"></span><br><span class="line">    player_cards = [<span class="built_in">next</span>(deck)]</span><br><span class="line">    up_card = <span class="built_in">next</span>(deck)</span><br><span class="line">    player_cards.append(<span class="built_in">next</span>(deck))</span><br><span class="line">    hole_card = <span class="built_in">next</span>(deck)</span><br><span class="line"></span><br><span class="line">    player_turn(up_card, player_cards, strategy, deck)</span><br><span class="line">    <span class="keyword">if</span> hand_score(player_cards) &gt; <span class="number">21</span>:</span><br><span class="line">        announce(<span class="string">&#x27;Player goes bust with&#x27;</span>, player_cards, </span><br><span class="line">                 <span class="string">&#x27;against a&#x27;</span>, up_card)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    dealer_cards = [up_card, hole_card]</span><br><span class="line">    dealer_turn(dealer_cards, deck)</span><br><span class="line">    <span class="keyword">if</span> hand_score(dealer_cards) &gt; <span class="number">21</span>:</span><br><span class="line">        announce(<span class="string">&#x27;Dealer busts with&#x27;</span>, dealer_cards)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        announce(<span class="string">&#x27;Player has&#x27;</span>, hand_score(player_cards), </span><br><span class="line">                 <span class="string">&#x27;and dealer has&#x27;</span>, hand_score(dealer_cards))</span><br><span class="line">        diff = hand_score(player_cards) - hand_score(dealer_cards)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(-<span class="number">1</span>, <span class="built_in">min</span>(<span class="number">1</span>, diff))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shhh</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="string">&quot;Don&#x27;t print (or do anything else).&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gamble</span>(<span class="params">strategy, hands=<span class="number">1000</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([blackjack(strategy, shhh) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(hands)])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(17): Generators</title>
    <url>/2020/10/06/CS61A-SICP/CS61A-17-Generators/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 17.</p>
<span id="more"></span>
<h2 id="generator">Generator</h2>
<p>A <strong>generator</strong> is a special kind of iterator which is returned by calling generator function.</p>
<ul>
<li>A <strong>generator function</strong> is a function that <em>yields</em> values instead of <em>returning</em> them</li>
<li>A normal function returns once; a generator function can yield multiple times</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># generator function</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">plus_minus</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">yield</span> x</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">yield</span> -x</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = plus_minus(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">&lt;generator <span class="built_in">object</span> plus_minue at <span class="number">0x0000024AAB4C9CA8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line">-<span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>Let's see another example:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evens</span>(<span class="params">start, end</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns all even numbers in the range of [start, end)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = evens(2, 10)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(t)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(t)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(t)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(t)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(t)</span></span><br><span class="line"><span class="string">    Traceback (most recent call last):</span></span><br><span class="line"><span class="string">    File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    StopIteration</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; list(evens(1, 10))</span></span><br><span class="line"><span class="string">    [2, 4, 6, 8]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    even = start + (start % <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> even &lt; end:</span><br><span class="line">        <span class="keyword">yield</span> even</span><br><span class="line">        even += <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>A <strong>yield from</strong> statement yields all values from an iterator or iterable (Python 3.3)</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example of yield from</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">a_then_b</span>(<span class="params">a, b</span>):</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">yield</span> <span class="keyword">from</span> a   <span class="comment"># also an iterator</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">yield</span> <span class="keyword">from</span> b</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = a_then_b([<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">&lt;generator <span class="built_in">object</span> a_then_b at <span class="number">0x0000024AAB4C9BF8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = a_then_b([<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(t)</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>
<p>Let's see another example:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">countdown</span>(<span class="params">k</span>):</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">if</span> k &gt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> k</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> <span class="keyword">from</span> countdown(k - <span class="number">1</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = countdown(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(t)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>
<p>The final example:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">prefixes</span>(<span class="params">s</span>):</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">if</span> s:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> <span class="keyword">from</span> prefixes(s[:-<span class="number">1</span>])</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> s</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>prefixes(<span class="string">&quot;both&quot;</span>)</span><br><span class="line">&lt;generator <span class="built_in">object</span> prefixes at <span class="number">0x0000024AAB4C9BF8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(prefixes(<span class="string">&quot;both&quot;</span>))</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;bo&#x27;</span>, <span class="string">&#x27;bot&#x27;</span>, <span class="string">&#x27;both&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">substrings</span>(<span class="params">s</span>):</span></span><br><span class="line"><span class="meta">... </span>  <span class="keyword">if</span> s:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> <span class="keyword">from</span> prefixes(s)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> <span class="keyword">from</span> substrings(s[<span class="number">1</span>:])</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(substrings(<span class="string">&quot;tops&quot;</span>))</span><br><span class="line">[<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;to&#x27;</span>, <span class="string">&#x27;top&#x27;</span>, <span class="string">&#x27;tops&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;op&#x27;</span>, <span class="string">&#x27;ops&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;ps&#x27;</span>, <span class="string">&#x27;s&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="generator-functions-with-return-statements">Generator Functions with Return Statements</h2>
<img src="/2020/10/06/CS61A-SICP/CS61A-17-Generators/17-1.JPG" class="">
<h2 id="example-partitions">Example: Partitions</h2>
<img src="/2020/10/06/CS61A-SICP/CS61A-17-Generators/17-2.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_partitions</span>(<span class="params">n, m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Count partitions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_partitions(6, 4)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> m == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        exact_match = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> n == m:</span><br><span class="line">            exact_match = <span class="number">1</span></span><br><span class="line">        with_m = count_partitions(n-m, m) </span><br><span class="line">        without_m = count_partitions(n, m-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> exact_match + with_m + without_m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_partitions</span>(<span class="params">n, m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;List partitions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; for p in list_partitions(6, 4): print(p)</span></span><br><span class="line"><span class="string">    [2, 4]</span></span><br><span class="line"><span class="string">    [1, 1, 4]</span></span><br><span class="line"><span class="string">    [3, 3]</span></span><br><span class="line"><span class="string">    [1, 2, 3]</span></span><br><span class="line"><span class="string">    [1, 1, 1, 3]</span></span><br><span class="line"><span class="string">    [2, 2, 2]</span></span><br><span class="line"><span class="string">    [1, 1, 2, 2]</span></span><br><span class="line"><span class="string">    [1, 1, 1, 1, 2]</span></span><br><span class="line"><span class="string">    [1, 1, 1, 1, 1, 1]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">elif</span> m == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        exact_match = []</span><br><span class="line">        <span class="keyword">if</span> n == m:</span><br><span class="line">            exact_match = [[m]]</span><br><span class="line">        with_m = [p + [m] <span class="keyword">for</span> p <span class="keyword">in</span> list_partitions(n-m, m)]</span><br><span class="line">        without_m = list_partitions(n, m-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> exact_match + with_m + without_m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partitions</span>(<span class="params">n, m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;List partitions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; for p in partitions(6, 4): print(p)</span></span><br><span class="line"><span class="string">    2 + 4</span></span><br><span class="line"><span class="string">    1 + 1 + 4</span></span><br><span class="line"><span class="string">    3 + 3</span></span><br><span class="line"><span class="string">    1 + 2 + 3</span></span><br><span class="line"><span class="string">    1 + 1 + 1 + 3</span></span><br><span class="line"><span class="string">    2 + 2 + 2</span></span><br><span class="line"><span class="string">    1 + 1 + 2 + 2</span></span><br><span class="line"><span class="string">    1 + 1 + 1 + 1 + 2</span></span><br><span class="line"><span class="string">    1 + 1 + 1 + 1 + 1 + 1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">elif</span> m == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        exact_match = []</span><br><span class="line">        <span class="keyword">if</span> n == m:</span><br><span class="line">            exact_match.append(<span class="built_in">str</span>(m))</span><br><span class="line">        with_m = [p + <span class="string">&#x27; + &#x27;</span> + <span class="built_in">str</span>(m) <span class="keyword">for</span> p <span class="keyword">in</span> partitions(n-m, m)]</span><br><span class="line">        without_m = partitions(n, m-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> exact_match + with_m + without_m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">yield_partitions</span>(<span class="params">n, m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;List partitions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; for p in yield_partitions(6, 4): print(p)</span></span><br><span class="line"><span class="string">    2 + 4</span></span><br><span class="line"><span class="string">    1 + 1 + 4</span></span><br><span class="line"><span class="string">    3 + 3</span></span><br><span class="line"><span class="string">    1 + 2 + 3</span></span><br><span class="line"><span class="string">    1 + 1 + 1 + 3</span></span><br><span class="line"><span class="string">    2 + 2 + 2</span></span><br><span class="line"><span class="string">    1 + 1 + 2 + 2</span></span><br><span class="line"><span class="string">    1 + 1 + 1 + 1 + 2</span></span><br><span class="line"><span class="string">    1 + 1 + 1 + 1 + 1 + 1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> m &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n == m:</span><br><span class="line">            <span class="keyword">yield</span> <span class="built_in">str</span>(m)</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> yield_partitions(n-m, m):</span><br><span class="line">            <span class="keyword">yield</span> p + <span class="string">&#x27; + &#x27;</span> + <span class="built_in">str</span>(m)</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> yield_partitions(n, m-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>Finally, you may wondering why we use this generator function.</p>
<p>The answer is <strong>lazy computation</strong>.</p>
<p>Calling <code>list(yield_partitions(60, 50))</code> will take a while since there are 966370 possibilites. However, calling <code>next(yield_partitions(60, 50))</code> will be very fast since we only yield one possibility.</p>
<p>So, if you're writing a program where there are many possiblities but you only want a few of them, this generator function approach will be better.</p>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(18): Objects</title>
    <url>/2020/10/08/CS61A-SICP/CS61A-18-Objects/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 18.</p>
<span id="more"></span>
<h2 id="oop">OOP</h2>
<img src="/2020/10/08/CS61A-SICP/CS61A-18-Objects/18-1.JPG" class="">
<p>Objects are organized according to classes.</p>
<img src="/2020/10/08/CS61A-SICP/CS61A-18-Objects/18-2.JPG" class="">
<h3 id="class-statements">Class Statements</h3>
<p>Class statements let you create any type of data you want.</p>
<img src="/2020/10/08/CS61A-SICP/CS61A-18-Objects/18-3.JPG" class="">
<img src="/2020/10/08/CS61A-SICP/CS61A-18-Objects/18-4.JPG" class="">
<p>Every object that is an instance of a user-defined class has a unique identity</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Account(<span class="string">&#x27;Jim&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = Account(<span class="string">&#x27;Jack&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> <span class="keyword">not</span> b</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="methods">Methods</h3>
<img src="/2020/10/08/CS61A-SICP/CS61A-18-Objects/18-5.JPG" class="">
<img src="/2020/10/08/CS61A-SICP/CS61A-18-Objects/18-6.JPG" class="">
<p>Objects receive messages via <strong>dot notation</strong>. Dot notation accesses attributes of the instance or its class.</p>
<blockquote>
<p><expression> . <name></p>
</blockquote>
<h3 id="attributes">Attributes</h3>
<img src="/2020/10/08/CS61A-SICP/CS61A-18-Objects/18-7.JPG" class="">
<img src="/2020/10/08/CS61A-SICP/CS61A-18-Objects/18-8.JPG" class="">
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(19): Inheritance</title>
    <url>/2020/10/11/CS61A-SICP/CS61A-19-Inheritance/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 19.</p>
<span id="more"></span>
<h2 id="attribute-assignment">Attribute Assignment</h2>
<p>Attribute assignment statements change the values that are bound through attribute names with an object or a class.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>:</span></span><br><span class="line">    interest = <span class="number">0.02</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, holder</span>):</span></span><br><span class="line">        self.holder = holder</span><br><span class="line">        self.balance = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<img src="/2020/10/11/CS61A-SICP/CS61A-19-Inheritance/19-1.JPG" class="">
<h2 id="inheritance">Inheritance</h2>
<img src="/2020/10/11/CS61A-SICP/CS61A-19-Inheritance/19-2.JPG" class="">
<img src="/2020/10/11/CS61A-SICP/CS61A-19-Inheritance/19-3.JPG" class="">
<p>Base class attributes aren't copy into subclasses! Istead, it is a process of looking up an attribute by name.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ch = CheckingAccount(<span class="string">&#x27;Tom&#x27;</span>)  <span class="comment"># Calls Account.__init__</span></span><br><span class="line">ch.interest  <span class="comment"># Found in CheckingAccount</span></span><br><span class="line">ch.deposit(<span class="number">20</span>)  <span class="comment"># Found in Account</span></span><br><span class="line">ch.withdraw(<span class="number">5</span>)  <span class="comment"># Found in CheckingAccount</span></span><br></pre></td></tr></table></figure>
<h2 id="object-oriented-design">Object-Oriented Design</h2>
<ul>
<li>Don't repeat yourself; use existing implementations</li>
<li>Attributes that have been overridden are still accessible via class objects</li>
<li>Look up attributes on instances whenever possible</li>
<li>Inheritance is best for representing is-a relationships
<ul>
<li>E.g., a checking account is a specific type of account. So, CheckingAccount inherits from Account</li>
</ul></li>
<li>Composition is best for representing has-a relationships:
<ul>
<li>composition: one object has another object as an attribute</li>
<li>E.g., a bank has a collection of bank accounts it manages. So, A bank has a list of accounts as an attribute</li>
</ul></li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A bank has accounts and pays interest.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; bank = Bank()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; john = bank.open_account(&#x27;John&#x27;, 10)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; jack = bank.open_account(&#x27;Jack&#x27;, 5, CheckingAccount)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; jack.interest</span></span><br><span class="line"><span class="string">    0.01</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; john.interest = 0.06</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; bank.pay_interest()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; john.balance</span></span><br><span class="line"><span class="string">    10.6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; jack.balance</span></span><br><span class="line"><span class="string">    5.05</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.accounts = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_account</span>(<span class="params">self, holder, amount, account_type=Account</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Open an account_type for holder and deposit amount.&quot;&quot;&quot;</span></span><br><span class="line">        account = account_type(holder)</span><br><span class="line">        account.deposit(amount)</span><br><span class="line">        self.accounts.append(account)</span><br><span class="line">        <span class="keyword">return</span> account</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pay_interest</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Pay interest to all accounts.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> account <span class="keyword">in</span> self.accounts:</span><br><span class="line">            account.deposit(account.balance * account.interest)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="attributes-lookup-practice">Attributes Lookup Practice</h2>
<img src="/2020/10/11/CS61A-SICP/CS61A-19-Inheritance/19-4.JPG" class="">
<h2 id="multiple-inheritance">Multiple Inheritance</h2>
<p>Multiple inheritance is a sbuclass has multiple base classes.</p>
<img src="/2020/10/11/CS61A-SICP/CS61A-19-Inheritance/19-5.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>such_a_deal = AsSeenOnTVAccount(<span class="string">&#x27;John&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>such_a_deal.balance </span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>such_a_deal.deposit(<span class="number">20</span>)  <span class="comment"># SavingsAccount method</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>such_a_deal.withdraw(<span class="number">5</span>)  <span class="comment"># CheckingAccount method</span></span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(2): Functions</title>
    <url>/2020/08/27/CS61A-SICP/CS61A-2-Functions/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 2.</p>
<span id="more"></span>
<h2 id="expression">Expression</h2>
<p>An <strong>expression</strong> describes a computation and evaluates to a value.</p>
<p>All expressions can use function call notation.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># primitive expression</span></span><br><span class="line"><span class="number">2000</span> + <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># call expressions</span></span><br><span class="line"><span class="built_in">max</span>(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">min</span>(<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">pow</span>(<span class="number">100</span>, <span class="number">2</span>)  <span class="comment"># 10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul</span><br><span class="line">mul(add(<span class="number">4</span>, mul(<span class="number">4</span>, <span class="number">6</span>)), add(<span class="number">3</span>, <span class="number">5</span>))  <span class="comment"># 224</span></span><br></pre></td></tr></table></figure>
<h3 id="anatomy-of-a-call-expression">Anatomy of a call expression</h3>
<p>An expression's operators and operands can also be expressions.</p>
<p>An expression tree is as follows:</p>
<img src="/2020/08/27/CS61A-SICP/CS61A-2-Functions/lec2-1.png" class="">
<p>Evaluation procedure for call expressions:</p>
<ul>
<li>Evaluate the operator</li>
<li>Evaluate the operands from left to right</li>
<li>Apply the operator (a function) to the evaluated operands (arguments)</li>
</ul>
<h2 id="names-assignment-and-user-defined-functions">Names, Assignment, and User-defined Functions</h2>
<p>Assignment is a simple means of abstraction: <strong>binds names to values.</strong></p>
<p>Function definition is a more powerful means of abstraction: <strong>binds names to expressions.</strong></p>
<p>Examples:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> pi, sin</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>radius = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = sin(pi / <span class="number">2</span>) <span class="comment"># 1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">max</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)      <span class="comment"># max(1, 2, 3)</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h3 id="defining-functions">Defining Functions</h3>
<p>We programmers can build our own functions.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;<span class="title">name</span>&gt;(<span class="params">&lt;formal parameters&gt;</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &lt;<span class="keyword">return</span> expression&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># User-defined functions</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square(21)</span></span><br><span class="line"><span class="string">    441</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square(add(2, 5))</span></span><br><span class="line"><span class="string">    49</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square(square(3))</span></span><br><span class="line"><span class="string">    81</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> mul(x, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_squares</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares(3, 4) </span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares(5, 12)</span></span><br><span class="line"><span class="string">    169</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> add(square(x), square(y))</span><br></pre></td></tr></table></figure>
<p>Procedure of calling user-defined functions is as follows:</p>
<img src="/2020/08/27/CS61A-SICP/CS61A-2-Functions/lec2-2.png" class="">
<h3 id="modules">Modules</h3>
<p>Functions are organized into <strong>modules</strong>, which together comprise the Python <strong>library</strong>. For example, Numpy is a library, it contains many modules, i.e. many <code>.py</code> files.</p>
<p>We programmer can define our own functions modules or libraries.</p>
<p>🦄 External Resource: <a href="https://docs.python.org/3/library/index.html">Python Standard Library</a></p>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(20): Representation</title>
    <url>/2020/10/13/CS61A-SICP/CS61A-20-Representation/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 20.</p>
<span id="more"></span>
<h2 id="string-representations">String Representations</h2>
<p>An object value should behave like the kind of data it is meant to represent.</p>
<p>In Python, all objects produce two string representations:</p>
<ul>
<li>The <strong>str</strong> is legible to humans</li>
<li>The <strong>repr</strong> is legible to the Python interpreter</li>
</ul>
<p>The <code>print()</code> function calls the <code>__str__</code> method of the object, while simply calling the object in interactive mode calls the <code>__repr__</code> method.</p>
<p>The str and repr strings are often the same, but not always.</p>
<img src="/2020/10/13/CS61A-SICP/CS61A-20-Representation/20-1.JPG" class="">
<img src="/2020/10/13/CS61A-SICP/CS61A-20-Representation/20-2.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Demo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>half = Fraction(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>half            <span class="comment"># repr string</span></span><br><span class="line">Fraction(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(half)     <span class="comment"># str string</span></span><br><span class="line"><span class="number">1</span>/<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">repr</span>(half)</span><br><span class="line"><span class="string">&#x27;Fraction(1, 2)&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(half)</span><br><span class="line"><span class="number">1</span>/<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(half)</span><br><span class="line"><span class="string">&#x27;1/2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="built_in">repr</span>(half))</span><br><span class="line">Fraction(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="built_in">str</span>(half))</span><br><span class="line"><span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&quot;Hello, World&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">&#x27;Hello, World&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">repr</span>(s))</span><br><span class="line"><span class="string">&#x27;Hello, World&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(s)</span><br><span class="line">Hello, World</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">str</span>(s))</span><br><span class="line">Hello, World</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">repr</span>(s)</span><br><span class="line"><span class="string">&quot;&#x27;Hello, World&#x27;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(s)</span><br><span class="line"><span class="string">&#x27;Hello, World&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="built_in">repr</span>(s))</span><br><span class="line"><span class="string">&#x27;Hello, World&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="built_in">str</span>(s))    <span class="comment"># no a valid expression</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;Hello&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(s)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;Hello&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure>
<h2 id="string-interpolation">String Interpolation</h2>
<img src="/2020/10/13/CS61A-SICP/CS61A-20-Representation/20-3.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Demo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;2 + 2 = <span class="subst">&#123;<span class="number">2</span> + <span class="number">2</span>&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;2 + 2 = 4&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;2 + 2 = <span class="subst">&#123;(<span class="keyword">lambda</span> x: <span class="number">2</span> * x)(<span class="number">2</span>)&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;2 + 2 = 4&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;half of a half is <span class="subst">&#123;half * half&#125;</span>&#x27;</span>  <span class="comment"># str string</span></span><br><span class="line"><span class="string">&#x27;half of a half is 1/4&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;half of a half is <span class="subst">&#123;<span class="built_in">repr</span>(half * half)&#125;</span>&#x27;</span>    <span class="comment"># repr string</span></span><br><span class="line"><span class="string">&#x27;half of a half is Fraction(1, 4)&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="polymorphic-functions">Polymorphic Functions</h2>
<img src="/2020/10/13/CS61A-SICP/CS61A-20-Representation/20-4.JPG" class="">
<img src="/2020/10/13/CS61A-SICP/CS61A-20-Representation/20-5.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bear</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A bear.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Bear()&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;a bear&#x27;</span></span><br><span class="line"></span><br><span class="line">oski = Bear()</span><br><span class="line"><span class="built_in">print</span>(oski)             <span class="comment"># a bear</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(oski))        <span class="comment"># a bear</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(oksi))       <span class="comment"># Bear()</span></span><br><span class="line"><span class="built_in">print</span>(oski.__str__())   <span class="comment"># a bear</span></span><br><span class="line"><span class="built_in">print</span>(oski.__repr__())  <span class="comment"># Bear()</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bear</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A bear.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__repr__ = <span class="keyword">lambda</span>: <span class="string">&#x27;oski&#x27;</span></span><br><span class="line">        self.__str__ = <span class="keyword">lambda</span>: <span class="string">&#x27;this bear&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Bear()&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;a bear&#x27;</span></span><br><span class="line"></span><br><span class="line">oski = Bear()</span><br><span class="line"><span class="built_in">print</span>(oski)             <span class="comment"># a bear</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(oski))        <span class="comment"># a bear</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(oksi))       <span class="comment"># Bear()</span></span><br><span class="line"><span class="built_in">print</span>(oski.__str__())   <span class="comment"># this bear</span></span><br><span class="line"><span class="built_in">print</span>(oski.__repr__())  <span class="comment"># oski</span></span><br></pre></td></tr></table></figure>
<p>Let's try to implement our <code>repr</code> and <code>str</code> function.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repr</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span>(x).__repr__(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str</span>(<span class="params">x</span>):</span></span><br><span class="line">    t = <span class="built_in">type</span>(x)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(t, <span class="string">&#x27;__str__&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> t.__str__(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">repr</span>(x)</span><br></pre></td></tr></table></figure>
<img src="/2020/10/13/CS61A-SICP/CS61A-20-Representation/20-6.JPG" class="">
<p>Let's see a demo.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ratio</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n, d</span>):</span></span><br><span class="line">        self.numer = n</span><br><span class="line">        self.denom = d</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Ratio(&#123;0&#125;, &#123;1&#125;)&#x27;</span>.<span class="built_in">format</span>(self.numer, self.denom)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;0&#125;/&#123;1&#125;&#x27;</span>&#123;% asset_img <span class="number">20</span>-<span class="number">5.J</span>PG %&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>half = Ratio(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(half)</span><br><span class="line"><span class="number">1</span>/<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>half</span><br><span class="line"><span class="string">&#x27;Ratio(1, 2)&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="special-method-names">Special Method Names</h2>
<p>Special method names are a topic particularly to the Python.</p>
<img src="/2020/10/13/CS61A-SICP/CS61A-20-Representation/20-7.JPG" class="">
<img src="/2020/10/13/CS61A-SICP/CS61A-20-Representation/20-8.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ratio</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n, d</span>):</span></span><br><span class="line">        self.numer = n</span><br><span class="line">        self.denom = d</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Ratio(&#123;0&#125;, &#123;1&#125;)&#x27;</span>.<span class="built_in">format</span>(self.numer, self.denom)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;0&#125;/&#123;1&#125;&#x27;</span>&#123;% asset_img <span class="number">20</span>-<span class="number">5.J</span>PG %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other, <span class="built_in">int</span>):</span><br><span class="line">            n = self.numer + self.denom * other</span><br><span class="line">            d = self.denom</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(other, Ratio):</span><br><span class="line">            n = self.numer * other.denom + self.denom * other.numer</span><br><span class="line">            d = self.denom * other.denom</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(other, <span class="built_in">float</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">float</span>(self) + other</span><br><span class="line">        g = gcd(n, d)</span><br><span class="line">        <span class="keyword">return</span> Radio(n//g, d//g)</span><br><span class="line"></span><br><span class="line">    __radd__ = __add__</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__float__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.numer / self.denom</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="keyword">while</span> n != d:</span><br><span class="line">        n, d = <span class="built_in">min</span>(n, d), <span class="built_in">abs</span>(n-d)</span><br><span class="line">    <span class="keyword">return</span> n</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(21): Recursive Objects</title>
    <url>/2020/10/15/CS61A-SICP/CS61A-21-Recursive-Objects/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 21.</p>
<span id="more"></span>
<h2 id="linked-list">Linked List</h2>
<img src="/2020/10/15/CS61A-SICP/CS61A-21-Recursive-Objects/21-1.JPG" class="">
<p>Now, let's try to implement <strong>Linked List</strong> in Python.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span>:</span></span><br><span class="line"></span><br><span class="line">    empty = ()  <span class="comment"># zero-length sequence</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, first, rest=empty</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; s = Link(3, Link(4, Link(5)))</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; s.first</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> rest <span class="keyword">is</span> Link.empty <span class="keyword">or</span> <span class="built_in">isinstance</span>(rest, Link)</span><br><span class="line">        self.first = first</span><br><span class="line">        self.rest = rest</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.rest:</span><br><span class="line">            rest_repr = <span class="string">&#x27;, &#x27;</span> + <span class="built_in">repr</span>(self.rest)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rest_repr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Link(&#x27;</span> + <span class="built_in">repr</span>(self.first) + rest_repr + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        string = <span class="string">&#x27;&lt;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> self.rest <span class="keyword">is</span> <span class="keyword">not</span> Link.empty:</span><br><span class="line">            string += <span class="built_in">str</span>(self.first) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">            self = self.rest</span><br><span class="line">        <span class="keyword">return</span> string + <span class="built_in">str</span>(self.first) + <span class="string">&#x27;&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># instance(object, class): return whether an object</span></span><br><span class="line"><span class="comment"># is an instance of a class or of a subclass thereof </span></span><br></pre></td></tr></table></figure>
<h3 id="processing">Processing</h3>
<p>Recursion is a useful method when processing Linked List.</p>

<p>Let's try to implement them.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">range_link</span>(<span class="params">start, end</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a Link containing consecutive integers from start to end.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; range_link(3, 6)</span></span><br><span class="line"><span class="string">    Link(3, Link(4, Link(5)))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> start &gt;= end:</span><br><span class="line">        <span class="keyword">return</span> Link.empty</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Link(start, range_link(start + <span class="number">1</span>, end))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map_link</span>(<span class="params">f, s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a Link that contains f(x) for each x in Link s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; map_link(square, range_link(3, 6))</span></span><br><span class="line"><span class="string">    Link(9, Link(16, Link(25)))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Link(f(s.first), map_link(f, s.rest))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_link</span>(<span class="params">f, s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a Link that contains only the elements x of Link s for which f(x)</span></span><br><span class="line"><span class="string">    is a true value.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; filter_link(odd, range_link(3, 6))</span></span><br><span class="line"><span class="string">    Link(3, Link(5))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    filtered_rest = filter_link(f, s.rest)</span><br><span class="line">    <span class="keyword">if</span> f(s.first):</span><br><span class="line">        <span class="keyword">return</span> Link(s.first, filtered_rest)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> filtered_rest</span><br></pre></td></tr></table></figure>
<h3 id="mutation">Mutation</h3>
<p>Let's see an example of Linked List mutation.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">s, v</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add v to an ordered list s with no repeats, returning modified s.</span></span><br><span class="line"><span class="string">       If v is already in s, then don&#x27;t modify s, just return it.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> s <span class="keyword">is</span> <span class="keyword">not</span> Link.empty</span><br><span class="line">    <span class="keyword">if</span> s.first &gt; v:</span><br><span class="line">        s.first, s.rest = v, Link(s.first, s.rest)</span><br><span class="line">    <span class="keyword">elif</span> s.first &lt; v <span class="keyword">and</span> empty(s.rest):</span><br><span class="line">        s.rest = Link(v)</span><br><span class="line">    <span class="keyword">elif</span> s.first &lt; v:</span><br><span class="line">        add(s.rest, v)</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>
<h2 id="tree">Tree</h2>
<p>Tree is similar to Linked List, the main difference is that, a tree can has a list of trees as its branches, while a linked list can only have a linked list as its rest.</p>
<p>We have implemented Tree using data abstraction coding style previously. Now, we try to implement it using class.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, label, branches=[]</span>):</span></span><br><span class="line">        self.label = label</span><br><span class="line">        <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">isinstance</span>(branch, Tree)</span><br><span class="line">        self.branches = <span class="built_in">list</span>(branches)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.branches:</span><br><span class="line">            branch_str = <span class="string">&#x27;, &#x27;</span> + <span class="built_in">repr</span>(self.branches)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            branch_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Tree(&#123;0&#125;&#123;1&#125;)&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">repr</span>(self.label), branch_str)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;\n&#x27;</span>.join(self.indented())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">indented</span>(<span class="params">self</span>):</span></span><br><span class="line">        lines = []</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> self.branches:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> b.indented():</span><br><span class="line">                lines.append(<span class="string">&#x27;  &#x27;</span> + line)</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">str</span>(self.label)] + lines</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.branches</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_tree</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A Fibonacci tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(fib_tree(4))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">        0</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">          0</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> Tree(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left = fib_tree(n - <span class="number">2</span>)</span><br><span class="line">        right = fib_tree(n - <span class="number">1</span>)</span><br><span class="line">        fib_n = left.label + right.label</span><br><span class="line">        <span class="keyword">return</span> Tree(fib_n, [left, right])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaves</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the leaf values of a tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; leaves(fib_tree(4))</span></span><br><span class="line"><span class="string">    [0, 1, 1, 0, 1]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> tree.is_leaf():</span><br><span class="line">        <span class="keyword">return</span> [tree.label]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> tree.branches], [])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">height</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The height of a tree.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> tree.is_leaf():</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>([height(b) <span class="keyword">for</span> b <span class="keyword">in</span> tree.branches])</span><br></pre></td></tr></table></figure>
<h2 id="mutation-1">Mutation</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prune</span>(<span class="params">t, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Prune sub-trees whose label value is n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = fib_tree(5)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; prune(t, 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(t)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    t.branches = [b <span class="keyword">for</span> b <span class="keyword">in</span> t.branches <span class="keyword">if</span> b.label != n]</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> t.branches:</span><br><span class="line">        prune(b, n)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(22): Efficiency</title>
    <url>/2021/10/18/CS61A-SICP/CS61A-22-Efficiency/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 22.</p>
<span id="more"></span>
<h2 id="measuring-efficiency">Measuring Efficiency</h2>
<p>With measuring efficiency, we can understand how long our programs will take to run.</p>
<p>Review our first example of tree recursion.</p>
<img src="/2021/10/18/CS61A-SICP/CS61A-22-Efficiency/22-1.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">2</span>) + fib(n -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib = count(fib)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(5)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib.call_count</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(5)      # accumulative</span></span><br><span class="line"><span class="string">    30</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(30)</span></span><br><span class="line"><span class="string">    832040</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib.call_count</span></span><br><span class="line"><span class="string">    2692567</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counted</span>(<span class="params">n</span>):</span></span><br><span class="line">        counted.call_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> f(n)</span><br><span class="line">    counted.call_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> counted</span><br></pre></td></tr></table></figure>
<h2 id="memoization">Memoization</h2>
<p>Memoization is a useful technique for speeding up the running time.</p>
<img src="/2021/10/18/CS61A-SICP/CS61A-22-Efficiency/22-2.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">memo</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib = count(fib)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; counted_fib = fib</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib = memo(fib)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib = count(fib)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(30)</span></span><br><span class="line"><span class="string">    832040</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib.call_count</span></span><br><span class="line"><span class="string">    59</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; counted_fib.call_count</span></span><br><span class="line"><span class="string">    31</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cache = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">memoized</span>(<span class="params">n</span>):</span></span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> cache:</span><br><span class="line">            cache[n] = f(n)</span><br><span class="line">        <span class="keyword">return</span> cache[n]</span><br><span class="line">    <span class="keyword">return</span> memoized   </span><br></pre></td></tr></table></figure>
<img src="/2021/10/18/CS61A-SICP/CS61A-22-Efficiency/22-3.JPG" class="">
<h2 id="exponentiation">Exponentiation</h2>
<p>Let's look at an example.</p>
<img src="/2021/10/18/CS61A-SICP/CS61A-22-Efficiency/22-4.JPG" class="">
<img src="/2021/10/18/CS61A-SICP/CS61A-22-Efficiency/22-5.JPG" class="">
<h2 id="orders-of-growth">Orders of Growth</h2>
<img src="/2021/10/18/CS61A-SICP/CS61A-22-Efficiency/22-6.JPG" class="">
<h3 id="notation">Notation</h3>
<img src="/2021/10/18/CS61A-SICP/CS61A-22-Efficiency/22-7.JPG" class="">
<p>Big-O describes the upper bound for the time it takes for a function to run.</p>
<p>Big-Theta desribes both a lower and a upper bound.</p>
<h2 id="space">Space</h2>
<p>Space, or memory, is another resource that get consumed by programs as they execute. So you need also worry about it.</p>
<p>Consumption of space is taken by values. It also gets taken up by frames, so you need to know how many frames exist because of different function calls in your program at the same time.</p>
<img src="/2021/10/18/CS61A-SICP/CS61A-22-Efficiency/22-8.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_frames</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a counted version of f with a max_count attribute.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def fib(n):</span></span><br><span class="line"><span class="string">    ...     if n == 0 or n == 1:</span></span><br><span class="line"><span class="string">    ...         return n</span></span><br><span class="line"><span class="string">    ...     else:</span></span><br><span class="line"><span class="string">    ...         return fib(n-2) + fib(n-1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib = count_frames(fib)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(20)</span></span><br><span class="line"><span class="string">    6765</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib.open_count</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib.max_count</span></span><br><span class="line"><span class="string">    20</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(25)</span></span><br><span class="line"><span class="string">    75025</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib.max_count</span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counted</span>(<span class="params">n</span>):</span></span><br><span class="line">        counted.open_count += <span class="number">1</span>     <span class="comment"># active frames counter</span></span><br><span class="line">        counted.max_count = <span class="built_in">max</span>(counted.max_count, counted.open_count)</span><br><span class="line">        result = f(n)</span><br><span class="line">        counted.open_count -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    counted.open_count = <span class="number">0</span></span><br><span class="line">    counted.max_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> counted</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(23): Decomposition</title>
    <url>/2021/11/23/CS61A-SICP/CS61A-23-Decomposition/</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>CS61A(4): Higher-Order Functions</title>
    <url>/2020/09/01/CS61A-SICP/CS61A-4-Higher-Order-Functions/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 4.</p>
<span id="more"></span>
<h2 id="iteration-example">Iteration Example</h2>
<p>There are 2 different definitions of <code>fib</code> which can be used to calculate the Fibonacci number.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the nth Fibonacci number&quot;&quot;&quot;</span></span><br><span class="line">    pred, curr = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; n:</span><br><span class="line">        pred, curr = curr, pred + curr</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> curr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the nth Fibonacci number&quot;&quot;&quot;</span></span><br><span class="line">    pred, curr = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; n:</span><br><span class="line">        pred, curr = curr, pred + curr</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> curr</span><br></pre></td></tr></table></figure>
<p>The second one is much better since it can computer 0th Fibonacci number correctly.</p>
<h2 id="designing-functions">Designing Functions</h2>
<p>There are lots of different functions that can do the same thing, but some are better than others.</p>
<p>So, how to design better function?</p>
<p>🏜️ <strong>A Guide to Designing Function:</strong></p>
<ul>
<li>Give each function exactly one job.</li>
<li>Don’t repeat yourself (DRY). Implement a process just once, but execute it many times.</li>
<li>Define functions generally.</li>
</ul>
<h3 id="example">Example</h3>
<p>The following is an example of generalizing patterns with arguments.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Compute the area of square, circle and hexoagon</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi, sqrt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_square</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a square with side length R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> r * r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_circle</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a circle with radius R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> r * r * pi</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_hexagon</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a regular hexagon with side length R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> r * r * <span class="number">3</span> * sqrt(<span class="number">3</span>) / <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>Notice there are lots of repeating things among them.</p>
<p>Let's try to do some generalization.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generalization: Generalizing patterns using arguments</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">r, shape_constant</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a shape from length measurement R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> r &gt; <span class="number">0</span>, <span class="string">&#x27;A length must be positive&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> r * r * shape_constant</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_square</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_circle</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, pi)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_hexagon</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, <span class="number">3</span> * sqrt(<span class="number">3</span>) / <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<h2 id="higher-order-function">Higher-Order Function</h2>
<p>The common structure among functions may be a computational process, rather than a number.</p>
<img src="/2020/09/01/CS61A-SICP/CS61A-4-Higher-Order-Functions/lec4-1.png" class="">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_naturals</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N natural numbers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_naturals(5)</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + k, k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_cubes</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N cubes of natural numbers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_cubes(5)</span></span><br><span class="line"><span class="string">    225</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + <span class="built_in">pow</span>(k, <span class="number">3</span>), k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>
<p>We can notice the above computational processes are similar. So let's do generalization.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Functions as arguments</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(k, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pi_term</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span> / mul(k * <span class="number">4</span> - <span class="number">3</span>, k * <span class="number">4</span> - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summation</span>(<span class="params">n, term</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N terms of a sequence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation(5, cube)</span></span><br><span class="line"><span class="string">    225</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + term(k), k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_naturals</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> summation(n, identity)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_cubes</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> summation(n, cube)</span><br></pre></td></tr></table></figure>
<p>The function <code>summation(n, term)</code> above is called <strong>higher-order function</strong> - it takes another function as an argument.</p>
<p>Higher-order functions can also treat functions as return values.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_adder</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function that takes one argument K and returns K + N.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = make_adder(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(4)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adder</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> k + n</span><br><span class="line">    <span class="keyword">return</span> adder</span><br><span class="line"></span><br><span class="line">make_adder(<span class="number">2000</span>)(<span class="number">20</span>)  <span class="comment"># currying</span></span><br></pre></td></tr></table></figure>
<img src="/2020/09/01/CS61A-SICP/CS61A-4-Higher-Order-Functions/lec4-2.JPG" class="">
<p>The transformation from <code>function(f, g)</code> to <code>function(f)(g)</code> is called <strong>currying</strong>.</p>
<p>Higher-order functions :</p>
<ul>
<li>express general methods of computation;</li>
<li>remove repetition from programs;</li>
<li>separate concerns among functions (each function just do one job)</li>
</ul>
<h2 id="lambda-expression">Lambda Expression</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lambda expressions</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">square = x * x</span><br><span class="line"></span><br><span class="line">square = <span class="keyword">lambda</span> x: x * x</span><br><span class="line">square(<span class="number">4</span>)  <span class="comment"># 16</span></span><br></pre></td></tr></table></figure>
<h2 id="function-return">Function Return</h2>
<p>Let's look at 2 problems.</p>
<p><strong>Question 1: find the smallest non-negative integer x which makes square(x) - 100 is positive</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the smallest non-negative integer x for which f(x) is a true value.&quot;&quot;&quot;</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> f(x):</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_three</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether x is three.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; search(is_three)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x == <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">positive</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A function that is 0 until square(x)-100 is positive.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; search(positive)</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0</span>, square(x) - <span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<p><strong>Question 2: define inverse function</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function g(y) that returns x such that f(x) == y.</span></span><br><span class="line"><span class="string">    g(f(x)) -&gt; x</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sqrt = inverse(square)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sqrt(16)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> y: search(<span class="keyword">lambda</span> x: f(x) == y)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(3): Control</title>
    <url>/2020/08/30/CS61A-SICP/CS61A-3-Control/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 3.</p>
<span id="more"></span>
<h2 id="print-and-none">Print and None</h2>
<p>The speacial value <code>None</code> represents nothing in Python.</p>
<p>A function that does not explicitly return a value will return <code>None</code>. None is not displayed by the interpreter as the value of an expression.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;Go Bears!&#x27;</span></span><br><span class="line"><span class="string">&#x27;Go Bears!&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;Go Bears!&#x27;</span>)</span><br><span class="line">Go Bears!</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="literal">None</span>)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">print</span>(<span class="number">1</span>), <span class="built_in">print</span>(<span class="number">2</span>))</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="literal">None</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<img src="/2020/08/30/CS61A-SICP/CS61A-3-Control/lec3-1.png" class="">
<p><code>print</code> is non-pure function, it can generate side effects. The value that <code>print</code> returns is always None.</p>
<p><strong>Pure functions are essential for writing concurrent programs, in which multiple call expressions may be evaluated simultaneously.</strong></p>
<h2 id="multiple-environments">Multiple Environments</h2>
<p>When Python executes a program, different expressions can be evaluated in different environments.</p>
<img src="/2020/08/30/CS61A-SICP/CS61A-3-Control/lec3-2.png" class="">
<h2 id="miscellaneous-python-features">Miscellaneous Python Features</h2>
<ul>
<li>division</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Division</span></span><br><span class="line"><span class="number">618</span> / <span class="number">10</span>        <span class="comment"># 61.8</span></span><br><span class="line"><span class="number">618</span> // <span class="number">10</span>       <span class="comment"># 61</span></span><br><span class="line"><span class="number">618</span> % <span class="number">10</span>        <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> truediv, floordiv, mod</span><br><span class="line"></span><br><span class="line">truediv(<span class="number">618</span>, <span class="number">10</span>)    <span class="comment"># 61.8</span></span><br><span class="line">floordiv(<span class="number">618</span>, <span class="number">10</span>)   <span class="comment"># 61</span></span><br><span class="line">mod(<span class="number">618</span>, <span class="number">10</span>)        <span class="comment"># 8</span></span><br></pre></td></tr></table></figure>
<ul>
<li>multiple return values</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Multiple return values</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide_exact</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n // d, n % d</span><br></pre></td></tr></table></figure>
<ul>
<li>doctest &amp; default arguments</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docstrings, doctests, and default arguments</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> floordiv, mod</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide_exact</span>(<span class="params">n, d=<span class="number">10</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the quotient and remainder of dividing N by D.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; quotient, remainder = divide_exact(618)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; quotient</span></span><br><span class="line"><span class="string">    61</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remainder</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> floordiv(n, d), mod(n, d)</span><br></pre></td></tr></table></figure>
<ul>
<li>useful command line:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># interactive with Python file</span></span><br><span class="line">~$ python3 -i filename.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># run doctest in the file</span></span><br><span class="line">~$ python3 -m doctest filename.py</span><br></pre></td></tr></table></figure>
<h2 id="conditional-statements">Conditional Statements</h2>
<ul>
<li>False values in Python: False, 0, ' ', [ ], None</li>
<li>True values in Python: anything else</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Conditional expressions</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">absolute_value</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the absolute value of X.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; absolute_value(-3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; absolute_value(0)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; absolute_value(3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
<p>A conditional expression also has the following form:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&lt;consequent&gt; <span class="keyword">if</span> &lt;predicate&gt; <span class="keyword">else</span> &lt;alternative&gt;</span><br></pre></td></tr></table></figure>
<h2 id="iteration">Iteration</h2>
<p>Iteration means repeating things.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Summation via while</span></span><br><span class="line">i, total = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">3</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    total = total + i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i: &#123;&#125; total: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i, total))</span><br></pre></td></tr></table></figure>
<ul>
<li>Example: Prime Factorization</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime_factors</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the prime factors of n in non-decreasing order.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; prime_factors(8)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; prime_factors(858)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    13</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">        k = smallest_prime_factor(n)</span><br><span class="line">        n = n // k</span><br><span class="line">        <span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smallest_prime_factor</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Find the smallest k &gt; 1 that evenly divided n.&quot;&quot;&quot;</span></span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> n % k != <span class="number">0</span>:</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure>
<h2 id="control-expressions">Control Expressions</h2>
<p>To evaluate the expression <code>&lt;left&gt; and &lt;right&gt;</code>:</p>
<ul>
<li>Evaluate the subexpression <code>&lt;left&gt;</code>.</li>
<li>If the result is a false value <strong>v</strong>, then the expression evaluates to <strong>v</strong>.</li>
<li>Otherwise, the expression evaluates to the value of the subexpression <code>&lt;right&gt;</code>.</li>
</ul>
<p>To evaluate the expression <code>&lt;left&gt; or &lt;right&gt;</code>:</p>
<ul>
<li>Evaluate the subexpression <code>&lt;left&gt;</code>.</li>
<li>If the result is a true value <strong>v</strong>, then the expression evaluates to <strong>v</strong>.</li>
<li>Otherwise, the expression evaluates to the value of the subexpression <code>&lt;right&gt;</code>.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_big_sqrt</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether x has a big square root.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(1000)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(100)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(0)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(-1000)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># can avoid crash</span></span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">0</span> <span class="keyword">and</span> sqrt(x) &gt; <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reasonable</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Is N small enough that 1/N can be represented?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(100)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(0)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(-100)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(10 ** 1000)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">0</span> <span class="keyword">or</span> <span class="number">1</span>/n != <span class="number">0.0</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(5): Environments</title>
    <url>/2020/09/03/CS61A-SICP/CS61A-5-Environments/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 5.</p>
<span id="more"></span>
<h2 id="environments-for-higher-order-functions">Environments for Higher-Order Functions</h2>
<p>Review: <strong>Higher-order function</strong> is a function that takes a function as an argument value or return a function as a return value.</p>
<img src="/2020/09/03/CS61A-SICP/CS61A-5-Environments/lec5-1.png" class="">
<h2 id="environments-for-nested-definitions">Environments for Nested Definitions</h2>
<img src="/2020/09/03/CS61A-SICP/CS61A-5-Environments/lec5-2.png" class="">
<h2 id="self-reference">Self-reference</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Self Reference</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_all</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print all arguments of repeated calls.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = print_all(1)(2)(3)(4)(5)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line">    <span class="keyword">return</span> print_all</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sums</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print all sums of arguments of repeated calls.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = print_sums(1)(2)(3)(4)(5)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_sum</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> print_sums(n+k)</span><br><span class="line">    <span class="keyword">return</span> next_sum</span><br></pre></td></tr></table></figure>
<h2 id="currying">Currying</h2>
<p><strong>Currying:</strong> Transforming a multi-argument function into a higher-order function with single-argument.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Currying</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">curry2</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Curry a two-argument function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m = curry2(add)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = m(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(4)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m(2)(1)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">y</span>):</span></span><br><span class="line">            <span class="keyword">return</span> f(x, y)</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use lambda expression</span></span><br><span class="line">curry2 = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: <span class="keyword">lambda</span> y: f(x, y)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(6): Design</title>
    <url>/2020/09/08/CS61A-SICP/CS61A-6-Design/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 6.</p>
<span id="more"></span>
<h2 id="abstraction">Abstraction</h2>
<p>Functional abstraction is giving a name to some computational process, and then referring to that process as a whole without worrying about its implementation details.</p>
<img src="/2020/09/08/CS61A-SICP/CS61A-6-Design/lec6-1.JPG" class="">
<h2 id="choosing-names">Choosing Names</h2>
<img src="/2020/09/08/CS61A-SICP/CS61A-6-Design/lec6-2.JPG" class="">
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(7): Function Examples</title>
    <url>/2020/09/10/CS61A-SICP/CS61A-7-Function-Examples/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 7.</p>
<span id="more"></span>
<h2 id="review">Review</h2>
<img src="/2020/09/10/CS61A-SICP/CS61A-7-Function-Examples/lec7-1.JPG" class="">
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pirate</span>(<span class="params">arggg</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;matey&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plunder</span>(<span class="params">arggg</span>):</span></span><br><span class="line">        <span class="keyword">return</span> arggg</span><br><span class="line">    <span class="keyword">return</span> plunder</span><br><span class="line">    </span><br><span class="line">pirate(pirate(pirate))(<span class="number">5</span>)(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># What does the above expression evaluate to, and what&#x27;s the interactive output?</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; It evaluates to Error.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>pirate(pirate(pirate))(5)(7)</span></span><br><span class="line"><span class="string">matey</span></span><br><span class="line"><span class="string">matey</span></span><br><span class="line"><span class="string">TypeError: &#x27;int&#x27; object is not callable</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="function-decorators">Function Decorators</h2>
<p>Python provides special syntax to apply higher-order functions as part of executing a def statement, called a <code>decorator</code>.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&gt; &#x27;</span>, fn, <span class="string">&#x27;(&#x27;</span>, x, <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> fn(x)</span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="meta">@trace</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triple</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; triple(12)</span></span><br><span class="line"><span class="string">    -&gt;  &lt;function triple at 0x102a39848&gt; ( 12 )</span></span><br><span class="line"><span class="string">    36</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * x</span><br></pre></td></tr></table></figure>
<p>The annotation <strong><span class="citation" data-cites="trace">@trace</span></strong> affects the execution rule for def.</p>
<p>The function <code>triple</code> is created as usual, however, the name <code>triple</code> is not bound to this function. Instead, it is bound to the returned function value of calling <code>trace</code> on the newly defined <code>triple</code> function, i.e. <code>triple = trace(triple)</code></p>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>教程：使用Github和Hexo搭建个人博客</title>
    <url>/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>在这篇博客里，我详细记录了自己使用 <code>Github + Hexo</code> 搭建个人博客的全过程，以及自己遇到的问题的解决方案，希望可以帮到正在阅读该博文的你。😀</p>
<p>如果你有任何问题，欢迎在留言板里写下你的问题。</p>
<span id="more"></span>
<h2 id="开始之前">开始之前</h2>
<p>在开始搭建博客之前，请先确认你是否完成了以下的准备工作：</p>
<ul>
<li>拥有<strong>Github</strong>账号；</li>
<li>安装了<strong>node.js、npm</strong>;</li>
<li>安装了<strong>git</strong> (git for macOS/Windows/Linux/Unix);</li>
</ul>
<h3 id="github">1. Github</h3>
<p>进入<a href="https://github.com/">Github官网</a>注册，请记住你注册时使用的账号和邮箱。</p>
<h3 id="node.js-npm">2. node.js &amp; npm</h3>
<p>进入<a href="https://nodejs.org/en/download/">Node官网</a>下载与你正在使用的操作系统相对应的版本，并安装。安装成功后，打开 <code>terminal(macOS/Linux)、CMD/Powershell(Windows)等</code>, 输入以下命令检查是否安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node --version  <span class="comment"># 查看node版本号</span></span><br><span class="line">$ npm --version  <span class="comment"># 查看npm版本号</span></span><br></pre></td></tr></table></figure>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/1.JPG" class="">
<p>❗ 如果是Windows系统，请务必将路径正确添加到 <code>PATH</code> 环境变量中。</p>
<h3 id="git">3. Git</h3>
<p>进入<a href="https://git-scm.com/">Git官网</a>下载、安装最新版本的Git。</p>
<p>如果你对安装Git感到不安，可以参考下面的链接。</p>
<ul>
<li>Linux: <a href="https://sp21.datastructur.es/materials/lab/lab1setup/linux.html">Link</a></li>
<li>maxOS: <a href="https://sp21.datastructur.es/materials/lab/lab1setup/mac.html">Link</a></li>
<li>Windows：<a href="https://sp21.datastructur.es/materials/lab/lab1setup/windows.html#b-install-git">Link</a></li>
</ul>
<hr />
<p>PS: 如果你使用Windows系统，强烈建议你安装 <code>Windows Terminal</code> , 安装方法可以参考上述Windows链接的Part C.</p>
<hr />
<p>在终端输入 <code>git --version</code> 检查是否安装成功。</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/2.JPG" class="">
<ul>
<li>可选操作(非必须)：</li>
</ul>
<p>在终端输入如下命令来设置用户名和邮箱。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;user_name&quot;</span> <span class="comment"># user_name填入GitHub用户名</span></span><br><span class="line"></span><br><span class="line">$ git config --global user.email <span class="string">&quot;user_email&quot;</span> <span class="comment"># user_email填入GitHub注册的邮箱</span></span><br></pre></td></tr></table></figure>
<p>查看已设置的用户名和邮箱：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line"></span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure>
<h2 id="搭建github博客">搭建Github博客</h2>
<h3 id="创建仓库">1. 创建仓库</h3>
<p>登录Github，新创建一个仓库。仓库名为：<code>username.github.io</code> ，其他的为默认选项即可。</p>
<p>❗ 一定是username而不是name。</p>
<h3 id="配置ssh-key">2. 配置SSH key</h3>
<p>打开 terminal/Git Bash等, 输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;user.email&quot;</span> <span class="comment"># user.email为GitHub上注册的邮箱</span></span><br></pre></td></tr></table></figure>
<p>默认不需要设置密码，连续按回车键即可。结束后，打开用户主目录查看是否成功生成了<strong>ssh-key</strong>。</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">用户主目录所在位置：</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> macOS/Linux: ~/.ssh</span><br><span class="line"><span class="bullet">-</span> Windows: C:\Users\<span class="xml"><span class="tag">&lt;<span class="name">XX</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/3.JPG" class="">
<p>进入 <code>.ssh</code> 文件夹，你会看到上述操作为我们生成了一个key，包括一个名为 <code>id_rsa.pub</code> 的公钥，和一个名为 <code>id_rsa</code> 的私钥。(⚠️注意：私钥绝不可以泄露，而公钥可以放心告诉别人。)</p>
<p>打开<a href="https://github.com/settings/keys">SSH and GPG keys</a>，点击 <code>new SSH Key</code> ，你将会看到如下窗口：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/4.jpg" class="">
<p>其中 <code>Title</code> 为标题，可以随意填写。将刚才生成的公钥 <code>id_rsa.pub</code> 中的内容复制到Key窗口中，最后点击 <code>Add SSH key</code>。</p>
<p>在终端输入如下命令以检查Github公钥设置是否成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># 如果你看到类似如下的信息，则说明设置成功。</span></span><br><span class="line"></span><br><span class="line">Hi XXX! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>
<p><strong>补充</strong>：关于配置SSH的用途，可以参考<a href="https://segmentfault.com/a/1190000008509620">这篇文章</a></p>
<h2 id="使用hexo博客框架">使用Hexo博客框架</h2>
<h3 id="什么是hexo">1. 什么是Hexo</h3>
<p><code>Hexo</code> 是一个简单、快速、强大的基于 <code>Github Pages</code> 的博客框架，支持 <code>Markdown</code> 格式，有众多优秀插件和主题。</p>
<p><strong>链接：</strong><a href="https://hexo.io/zh-cn/docs/">官方文档</a></p>
<h3 id="为什么要用hexo">2. 为什么要用Hexo</h3>
<p>由于 <code>Github Pages</code> 存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以 <code>Hexo</code> 所做的就是将这些 <code>.md</code> 文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到 <code>GitHub</code> 。</p>
<h3 id="安装与配置">3. 安装与配置</h3>
<p>说明：我使用的是Windows操作系统，所有的命令我都是在 <code>Windows Terminal</code> 中的 <code>bash shell</code> 中完成的，没有遇到任何问题。</p>
<p>根据网上的经验，如果你使用 <code>git bash</code> , 那么在hexo初始化的过程中你可能会遇到 <code>node_modules</code> 文件夹无法生成的问题，可以配合 <code>cmd</code> 解决该问题(后面会说明)。</p>
<h4 id="安装与初始化">1. 安装与初始化</h4>
<p>输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli <span class="comment"># 该命令完成hexo的安装</span></span><br></pre></td></tr></table></figure>
<p>安装完成后，请根据个人喜好在计算机内创建一个空文件夹（不限制名称），用于存放博客内的所有内容和素材。</p>
<p>使用命令行进入刚才创建的文件夹内，输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init <span class="comment"># 该命令完成hexo在本地博客目录的初始化</span></span><br></pre></td></tr></table></figure>
<p>完成后请检查文件夹内的内容，如下图：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/5.jpg" class="">
<hr />
<p>如果你使用的是 <code>git bash</code> ，并且遇到了 <code>node_modules</code> 文件夹无法生成的问题，可以参考以下解决方案。</p>
<p>❗ 注意：因为我并没有遇到这个问题，所以无法保证该解决方案一定有效。仅供参考。</p>
<p>产生该问题的原因为，在自己的博客文件夹中 <code>.gitignore</code> 文件中添加了 <code>node_modules/</code> ，导致更新的时候，这个文件夹被忽略，没有被更新上去。</p>
<p>解决方案：</p>
<ol type="1">
<li>cmd进入博客当前文件夹路径</li>
<li>执行 npm install</li>
<li>执行 hexo server</li>
</ol>
<hr />
<h4 id="生成静态文件">2. 生成静态文件</h4>
<p>在终端输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g <span class="comment"># 生成静态文件</span></span><br></pre></td></tr></table></figure>
<p>执行以上命令之后，Hexo 就会在 <code>public</code> 文件夹生成相关 <code>HTML</code> 文件，这些文件在之后会被提交到 GitHub 上 <code>username.github.io</code> 的仓库中。</p>
<h4 id="本地预览">3. 本地预览</h4>
<p>输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s <span class="comment"># 开启本地预览</span></span><br></pre></td></tr></table></figure>
<p>本地预览服务开启后，打开浏览器访问 <code>http://localhost:4000</code> 或直接点击终端的链接即可。你应该可以看到如下的页面：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/6.jpg" class="">
<p>通过本地预览，你可以实时查看博客的编辑情况，等博客完成后再部署到 <code>GitHub</code> 上。</p>
<h3 id="上传到github">4. 上传到Github</h3>
<h4 id="配置站点配置文件">1. 配置站点配置文件</h4>
<p>hexo 有2种 <code>_config.yml</code> 文件，一个是根目录下的全局的 <code>_config.yml</code> ,在博客文件夹的根目录下；另一个是各个主题 <code>theme</code> 下的 <code>_config.yml</code> 。前者被称为<strong>站点配置文件</strong>， 后者被称为<strong>主题配置文件</strong>。</p>
<p>打开(推荐用 <code>VS Code</code> )根目录下站点配置文件 <code>_config.yml</code> ，配置有关 <code>deploy</code> 的部分：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/7.JPG" class="">
<h4 id="安装部署插件">2. 安装部署插件</h4>
<p>在终端输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save <span class="comment"># 安装部署插件</span></span><br></pre></td></tr></table></figure>
<p>如果不进行上述操作，直接使用 <code>hexo d</code> 部署到 <code>GitHub</code>，将会报错。</p>
<h4 id="部署到-github">3. 部署到 GitHub</h4>
<p>输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>PS: 对于Windows用户，不要在 <code>cmd</code> 中输入该命令。请使用 <code>git bash</code> or <code>bash shell</code> ，否则会提示 <code>Permission denied (publickey)</code> 。</p>
<p>部署成功后，在浏览器输入 <code>https://&lt;username&gt;.github.io/</code> ，如果出现下图，则表示部署成功。</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/8.jpg" class="">
<p>到此，我们就完成了博客的搭建工作，剩下的就是学习如何写博客，如何增添你想要的功能，以及如何美化博客。你可以自由探索，也可以参考我使用的方案。</p>
<h2 id="hexo博客故障记录及美化方案持续更新">Hexo博客故障记录及美化方案（持续更新）</h2>
<h3 id="hexo常用命令">Hexo常用命令</h3>
<ol type="1">
<li>hexo new “postName” # 新建文章</li>
<li>hexo clean # 清除缓存</li>
<li>hexo generate # 生成静态页面至 public 目录</li>
<li>hexo server # 开启预览访问端口（默认端口 4000，’ctrl + c’关闭 server）</li>
<li>hexo deploy # 部署到 GitHub</li>
<li>hexo help # 查看帮助</li>
<li>hexo version # 查看 Hexo 的版本</li>
<li>hexo s -g # 生成并本地预览</li>
<li>hexo d -g # 生成并上传</li>
</ol>
<p>PS: Hexo支持缩写命令，即： - hexo n == hexo new - hexo g == hexo generate - hexo s == hexo server - hexo d == hexo deploy</p>
<h3 id="更改主题">更改主题</h3>
<p>如果你不想使用默认主题，你可以自由探索其他的Hexo主题。</p>
<blockquote>
<p><a href="https://hexo.io/themes/">官方主题</a> <a href="https://www.zhihu.com/question/24422335">知乎</a> <a href="https://github.com/hexojs/hexo/wiki/Themes">Github</a></p>
</blockquote>
<p>这里以NexT<a href="http://theme-next.iissnan.com/">(Doc)</a> 主题为例，说明一下更改主题的方法。</p>
<ul>
<li>下载主题：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码：</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<ul>
<li>启用主题：</li>
</ul>
<p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件(根目录下的 <code>_config.yml</code>)， 找到 theme 字段，并将其值更改为 next。</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/9.jpg" class="">
<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。首先启动 Hexo 本地站点，并开启调试模式（即加上 --debug），整个命令是 <code>hexo s --debug</code>。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p>
<blockquote>
<p>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</p>
</blockquote>
<p>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse。</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/10.png" class="">
<p><strong>TroubleShooting:</strong> 执行 <code>hexo s</code> 时，<a href="https://github.com/iissnan/hexo-theme-next/issues/2253">location:4000显示不对的故障</a></p>
<p>NexT主题有4中Scheme。如果你想要更换Scheme，打开 主题配置文件(theme 文件夹 -&gt; NexT文件夹 -&gt; <code>_config.yml</code>), 修改Scheme：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/11.JPG" class="">
<h3 id="配置站点信息">配置站点信息</h3>
<p>打开根目录下站点配置文件 <code>_config.yml</code> ，你可以设置站点的一些基本信息：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/12.JPG" class="">
<ul>
<li>title：网站标题</li>
<li>subtitle：网站副标题</li>
<li>description：网站描述</li>
<li>keywords：关键字</li>
<li>author：作者</li>
<li>language：网站使用的语言（注意：一定要设置为主体能够识别的语言，否则会出现乱码）
<ul>
<li>你可以在 &quot;&quot; 中找到主题支持的语言</li>
</ul></li>
<li>timezone：网站时区。Hexo 默认使用您电脑的时区</li>
</ul>
<h3 id="创建博文">创建博文</h3>
<p>🦝 Hexo的博文使用Markdown语言。如果你从来没用过，可以参考教程：<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 菜鸟教程</a> or <a href="https://www.appinn.com/markdown/#%E4%BB%A3%E7%A0%81">Markdown语法说明(中文版)</a></p>
<p>输入如下命令创建博文：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&#x27;name of the blog&#x27;</span></span><br></pre></td></tr></table></figure>
<p>Hexo会在 <code>source\_posts</code> 下生成相关 <code>.md</code> 文件，每一篇博客对应一个 <code>.md</code> 文件，直接编辑博文对应的文件即可。</p>
<p>如果你想要更改博文的模板，打开 <code>scaffolds</code> 文件夹，你可以看到3个默认的模板 <code>draft.md</code> , <code>page.md</code> 和 <code>post.md</code> ，除此之外，你还可以创建自己定制的模板。</p>
<h3 id="杂七杂八">杂七杂八</h3>
<p>Q1：Hexo更改主题后远程网站不更新？</p>
<p>A：更改主题后，先执行 <code>hexo clean</code>，再执行 <code>hexo g</code> 和 <code>hexo d</code>。如果仍然没有变化，可能是浏览器缓存的原因。按 F12 或者鼠标右键打开 <code>检查</code> , 选择 Network 之后选中 <code>Disable cache</code> .</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/13.JPG" class="">
<hr />
<p>Q2: 如何在博文中插入图片、视频？</p>
<p>A：可以参考<a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/">这篇博文</a>。因为我在写博客的时候经常需要插入很多图片和视频，所以我采取为每篇博文建立自己目录的方法。打开站点配置文 <code>_config.yml</code> ，修改 <code>post_asset_folder</code> 为 <code>true</code> 并保存退出。</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/14.JPG" class="">
<p>之后每次创建博文的时候会同时生成同名的文件夹，你可以将各种资源（图片、音频等）放到这个文件夹里。在博文中引用的时候，使用以下的语法即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入图片: &#123;% asset_img &lt;image name&gt; &lt;title&gt; %&#125;</span><br><span class="line"></span><br><span class="line">插入视频：</span><br><span class="line">    &lt;video src=&#x27;vedio source&#x27; </span><br><span class="line">       type=&#x27;video/mp4&#x27; </span><br><span class="line">       controls=&#x27;controls&#x27;  </span><br><span class="line">       preload=&quot;auto&quot;</span><br><span class="line">       width=&#x27;100%&#x27; </span><br><span class="line">       height=&#x27;100%&#x27;&gt;</span><br><span class="line">    &lt;/video&gt;</span><br><span class="line"></span><br><span class="line">部分参数：</span><br><span class="line">- autoplay 则视频在就绪后马上播放。</span><br><span class="line">- controls 用户显示控件，比如播放按钮。</span><br><span class="line">- width 频播放器的宽度。</span><br><span class="line">- height 设置视频播放器的高度</span><br><span class="line">- loop 文件完成播放后再次开始播放。 loop=&quot;loop&quot;</span><br><span class="line">- preload 视频在页面加载时进行加载，并预备播放 preload=&quot;auto&quot;</span><br><span class="line">- src 要播放的视频的 URL。</span><br></pre></td></tr></table></figure>
<hr />
<p>Q3: 博客主页文章为全文显示，好丑，怎么办？</p>
<p>A：你可以参考<a href="https://jiangding1990.github.io/2017/04/25/Hexo%E4%BD%BF%E7%94%A8NexT%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E6%96%B9%E6%B3%95/">这篇博文</a>解决。 我用的是第一种方法，即在博文中使用 <code>&lt;!--more--&gt;</code> 手动截断。</p>
<hr />
<p>Q4. 想给博文设置权限？</p>
<p>A：打开主题配置文件，声明博文权限：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/15.JPG" class="">
<hr />
<p>Q5. 分页显示有问题？</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/16.JPG" class="">
<p>A：参考<a href="https://github.com/hexojs/hexo/issues/3794">该问题下的讨论</a></p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/17.JPG" class="">
<hr />
<p>Q6. NexT主题下，中文博客目录失效。</p>
<p>A：点击中文目录锚点，发现无法正常跳转。同时，打开 <code>控制台</code> 后会发现报错：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/18.JPG" class="">
<p>根据报错信息，打开 <code>themes/next/source/js/src/post-details.js</code> 文件：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/19.JPG" class="">
<p>原因是UTF-8解析有问题，按照如图修改 <code>post-details.js</code> 文件：</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/20.JPG" class="">
<hr />
<p>Q7. 点击目录栏里的 <code>Tags</code> or <code>Categories</code> or <code>Archives</code> 404？</p>
<p>请参考<a href="http://theme-next.iissnan.com/theme-settings.html">官方文档:主题配置</a></p>
<p>但注意一点，生成相关的页面后，在主题配置文件 <code>_config.yml</code> 中，menu栏请按照下面进行修改。</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/21.JPG" class="">
<p>一定不能有空格，否则会404！！！</p>
<hr />
<p>Q8. 无法正确显示数学公式</p>
<p>我参考了<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/MATH.md">这篇日志</a>解决了这个问题。</p>
<h2 id="参考链接">参考链接</h2>
<p>🤗 在搭建个人博客的过程，我参考了网上的多种解决方案，在此就不一一列出了。感谢前人总结的经验，让我少走了很多弯路。</p>
<p>下面是我觉得比较有用的几个链接，希望可以帮助到你。</p>
<p>[1] <a href="https://hexo.io/zh-cn/docs/">Hexo Docs</a></p>
<p>[2] <a href="http://theme-next.iissnan.com/theme-settings.html">NexT主题配置</a></p>
<p>[3] <a href="https://github.com/iissnan/hexo-theme-next/issues">Github：NexT主题常见问题汇总</a></p>
<p>[4] <a href="http://yearito.cn/posts/hexo-advanced-settings.html">Hexo 搭建个人博客系列：进阶设置篇</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(8): Recursion</title>
    <url>/2020/09/15/CS61A-SICP/CS61A-8-Recursion/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 8.</p>
<span id="more"></span>
<h2 id="recursive-function">Recursive Function</h2>
<p>A function is called <code>recursive</code> if the body of that function calls itself, either directly or indirectly.</p>
<p>Let's see an example.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sum digits</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Split a positive integer into all but its last digit and its last digit.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of the digits of positive integer n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(9)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(18117)</span></span><br><span class="line"><span class="string">    18</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(9437184)</span></span><br><span class="line"><span class="string">    36</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(11408855402054064613470328848384)</span></span><br><span class="line"><span class="string">    126</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># base cases</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="comment"># recursive case</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits(all_but_last) + last</span><br></pre></td></tr></table></figure>
<p>Another example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># String reversal</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_string</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Reverse a string s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_string(&#x27;draw&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;ward&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> reverse_string(s[<span class="number">1</span>:]) + s[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h2 id="recursion-in-environment-diagrams">Recursion in Environment Diagrams</h2>
<img src="/2020/09/15/CS61A-SICP/CS61A-8-Recursion/lec8-1.png" class="">
<h2 id="recursion-and-iteration">Recursion and Iteration</h2>
<p>Iteration is a special case of recursion.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Converting iteration to recursion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits_iter</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum digits iteratively.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits_iter(11408855402054064613470328848384)</span></span><br><span class="line"><span class="string">    126</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    digit_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n, last = split(n)</span><br><span class="line">        digit_sum = digit_sum + last</span><br><span class="line">    <span class="keyword">return</span> digit_sum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits_rec</span>(<span class="params">n, digit_sum</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum digits using recursion, based on iterative version.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits_rec(11408855402054064613470328848384, 0)</span></span><br><span class="line"><span class="string">    126</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> digit_sum</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        n, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits_rec(n, digit_sum + last)</span><br></pre></td></tr></table></figure>
<h2 id="mutual-recursion">Mutual Recursion</h2>
<p>Mutual recursion occurs when two different functions call each other.</p>
<img src="/2020/09/15/CS61A-SICP/CS61A-8-Recursion/lec8-2.png" class="">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Luhn algorithm: mutual recursion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Split a positive integer into all but its last digit and its last digit.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of the digits of positive integer n.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits(all_but_last) + last</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">luhn_sum</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the digit sum of n computed by the Luhn algorithm.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(2)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(12)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(42)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(138743)</span></span><br><span class="line"><span class="string">    30</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(5105105105105100) # example Mastercard</span></span><br><span class="line"><span class="string">    20</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(4012888888881881) # example Visa</span></span><br><span class="line"><span class="string">    90</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(79927398713) # from Wikipedia</span></span><br><span class="line"><span class="string">    70</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> luhn_sum_double(all_but_last) + last</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">luhn_sum_double</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Luhn sum of n, doubling the last digit.&quot;&quot;&quot;</span></span><br><span class="line">    all_but_last, last = split(n)</span><br><span class="line">    luhn_digit = sum_digits(<span class="number">2</span> * last)</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> luhn_digit</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> luhn_sum(all_but_last) + luhn_digit </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/06/22/Blog/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<span id="more"></span>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(9): Tree Recursion</title>
    <url>/2020/09/17/CS61A-SICP/CS61A-9-Tree-Recursion/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 7.</p>
<span id="more"></span>
<h2 id="order-of-recursive-calls">Order of Recursive Calls</h2>
<p>When making a function called, you have to wait for <strong>return</strong> before doing anything else.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ordering</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cascade</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print a cascade of prefixes of n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cascade(1234)</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        cascade(n//<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># version 2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cascade2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print a cascade of prefixes of n.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">if</span> n &gt;= <span class="number">10</span>:</span><br><span class="line">        cascade(n//<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<ul>
<li>If two implementations are equally clear, then shorter is usually better.</li>
<li>In this case, the longer implementation is more clear (at least to me).</li>
<li>When learning to write recursive functions, put the base cases first.</li>
<li>Both are recursive functions, even though only the first has typical structure</li>
</ul>
<p>Exercise : Write a function that prints an inverse cascade.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inverse Cascade</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_cascade</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print an inverse cascade of prefixes of n.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; inverse_cascade(1234)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    grow(n)</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    shrink(n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f_then_g</span>(<span class="params">f, g, n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n:</span><br><span class="line">        f(n)</span><br><span class="line">        g(n)</span><br><span class="line"></span><br><span class="line">grow = <span class="keyword">lambda</span> n: f_then_g(grow, <span class="built_in">print</span>, n//<span class="number">10</span>)</span><br><span class="line">shrink = <span class="keyword">lambda</span> n: f_then_g(<span class="built_in">print</span>, shrink, n//<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<h2 id="tree-recursion">Tree Recursion</h2>
<p>Tree-shaped processes arise whenever executing the body of a recursive function makes more than one recursive call.</p>
<ul>
<li>Example :</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tree recursion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the nth Fibonacci number.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(8)</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">2</span>) + fib(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<img src="/2020/09/17/CS61A-SICP/CS61A-9-Tree-Recursion/lec9-1.png" class="">
<h2 id="hanoi-tower">Hanoi Tower</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hanoi Tower</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_move</span>(<span class="params">origin, destination</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print instructions to move a disk.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Move the top disk from rod&quot;</span>, origin, <span class="string">&quot;to rod&quot;</span>, destination)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_stack</span>(<span class="params">n, start, end</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the moves required to move n disks on the start pole to the end</span></span><br><span class="line"><span class="string">    pole without violating the rules of Towers of Hanoi.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    n -- number of disks</span></span><br><span class="line"><span class="string">    start -- a pole position, either 1, 2, or 3</span></span><br><span class="line"><span class="string">    end -- a pole position, either 1, 2, or 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    There are exactly three poles, and start and end must be different. Assume</span></span><br><span class="line"><span class="string">    that the start pole has at least n disks of increasing size, and the end</span></span><br><span class="line"><span class="string">    pole is either empty or has a top disk larger than the top n start disks.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(1, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(2, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(3, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 3 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 1</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> &lt;= start &lt;= <span class="number">3</span> <span class="keyword">and</span> <span class="number">1</span> &lt;= end &lt;= <span class="number">3</span> <span class="keyword">and</span> start != end, <span class="string">&quot;Bad start/end&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        print_move(start, end)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        spare_peg = <span class="number">6</span> - start - end</span><br><span class="line">        move_stack(n-<span class="number">1</span>, start, spare_peg)</span><br><span class="line">        print_move(start, end)</span><br><span class="line">        move_stack(n-<span class="number">1</span>, spare_peg, end)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">time complexity: O(2^n)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="demo-counting-partitions">Demo: Counting Partitions</h2>
<img src="/2020/09/17/CS61A-SICP/CS61A-9-Tree-Recursion/lec9-2.png" class="">
<img src="/2020/09/17/CS61A-SICP/CS61A-9-Tree-Recursion/lec9-3.png" class="">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_partitions</span>(<span class="params">n, m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Count the partitions of n using parts up to size m.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_partitions(6, 4)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_partitions(10, 10)</span></span><br><span class="line"><span class="string">    42</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># base case</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> m == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#recursive case</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        with_m = count_partitions(n-m, m)</span><br><span class="line">        without_m = count_partitions(n, m-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> with_m + without_m</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合详解(Collection接口和Map接口)</title>
    <url>/2021/07/19/Coding/Java-Collection-Interface/</url>
    <content><![CDATA[<p>Java的 <code>util</code> 包中有两个重要的父接口：<code>Collection</code> 和 <code>Map</code> 。这两个接口提供了诸多数据结构的实现，使我们可以专注于程序的逻辑而不必关心底层细节。</p>
<p>在这篇博文中，我们将讨论以下几种接口，以及它们分别的实现类。</p>
<span id="more"></span>
<ul>
<li>java.util package
<ul>
<li>Collection interface
<ul>
<li>List interface
<ul>
<li>ArrayList class</li>
<li>LinkedList class</li>
<li>Vector class
<ul>
<li>Stack</li>
</ul></li>
</ul></li>
<li>Queue interface
<ul>
<li>PriorityQueue class</li>
</ul></li>
<li>Set interface
<ul>
<li>HashSet class</li>
<li>LinkedHashSet class</li>
<li>SortedSet interface
<ul>
<li>TreeSet class</li>
</ul></li>
</ul></li>
</ul></li>
<li>Map interface
<ul>
<li>Hashtable class</li>
<li>HashMap class</li>
<li>LinkedHashMap class</li>
<li>SortedMap interface
<ul>
<li>TreeMap class</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<img src="/2021/07/19/Coding/Java-Collection-Interface/Collection-Interface-in-Java.png" class="">
<h2 id="list接口">List接口</h2>
<p>List接口对应于 List 抽象数据类型。</p>
<h3 id="overview">1. Overview</h3>
<p>List接口有3种具体的实现： - ArrayList类：底层数据结构为 <code>动态数组(array)</code> ， 其中扩展因子为0.5。 - LinkedList类：底层数据结构为 <code>双向链表(doubly linked list)</code> 。 - Vector类：底层数据结构为 <code>动态数组(array)</code>， 其中扩展因子为1。</p>
<p>根据数据结构的知识，如果你需要进行很多的 <code>insertion</code> 或 <code>deletion</code> 操作，那么选用 <code>LinkedList class</code> 会比较好；而如果大量的操作都是 <code>access</code> 操作，那么 <code>ArrayList class</code> 是更好的选择。</p>
<hr />
<p>⛱️ <strong>ArrayList</strong> vs. <strong>Vector</strong></p>
<p>Vector 和 ArrayList 的底层数据结构都是数组。两者唯一的区别在于：ArrayList中的方法不是线程安全的，而Vector中的方法是同步的，意味着线程安全。所以，如果你需要线程安全，那么应该使用Vector。但对于单线程环境，使用使用Vector会花费更多的资源，所以用ArrayList更好。</p>
<p>如果你查看底层代码，你会发现，Vecotr中的重要操作，如add, remove, get等，这些方法都被 <code>synchronized</code> 关键字所修饰，来保证线程的安全性。</p>
<hr />
<p>接下来，让我们来几个List的代码片段。</p>
<h3 id="demos">Demos</h3>
<h4 id="两种实例化方法">两种实例化方法</h4>
<p>首先需要说明的是，在实例化一个List的时候，除了我们很熟悉的 <code>List&lt;Integer&gt; L = new ArrayList&lt;&gt;();</code> 方法之外，Java9增加的静态工厂方法 <code>.of()</code> 也可以创建实例，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; L = List.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">//		L.add(5);    // Exception, because L is immutable.</span></span><br><span class="line">		System.out.println(L);  <span class="comment">// [0, 1, 2, 3, 4]</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不过需要注意的是，使用上述方法创建的List是<strong>不可变的(immutable)</strong>，也就是说一旦创建好一个List，那么它的值，它的大小都是不可变的。后面的 <code>Set/Map/Queue</code> 也是一样的，就不再赘述了。</p>
<h4 id="list的基本用法">List的基本用法</h4>
<p>让我们来看一个 <code>ArrayList</code> 的代码片段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;String&gt; words = List.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Peach&quot;</span>);</span><br><span class="line">		List&lt;String&gt; wordsArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(words);</span><br><span class="line">		System.out.println(<span class="string">&quot;Original list: &quot;</span> + wordsArrayList);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Appends an item at the end of list. */</span></span><br><span class="line">		wordsArrayList.add(<span class="number">0</span>, <span class="string">&quot;Dog&quot;</span>);  <span class="comment">// position is optional</span></span><br><span class="line">		System.out.println(<span class="string">&quot;after adding Dog at index 0: &quot;</span> + wordsArrayList);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Appends all items at the end of list. */</span></span><br><span class="line">		List&lt;String&gt; newList = List.of(<span class="string">&quot;Mouse&quot;</span>, <span class="string">&quot;Cat&quot;</span>, <span class="string">&quot;Zebra&quot;</span>);</span><br><span class="line">		wordsArrayList.addAll(<span class="number">0</span>, newList);  <span class="comment">// position is optional</span></span><br><span class="line">		System.out.println(<span class="string">&quot;after adding a list: &quot;</span> + wordsArrayList);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Removes a specific item. */</span></span><br><span class="line">		wordsArrayList.remove(<span class="number">0</span>);   <span class="comment">//  == wordsArrayList.remove(&quot;Dog&quot;);</span></span><br><span class="line">		System.out.println(<span class="string">&quot;after removing item at index 0: &quot;</span> + wordsArrayList);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Replaces the item at the specified position. */</span></span><br><span class="line">		wordsArrayList.set(<span class="number">3</span>, <span class="string">&quot;Fish&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;after changing element at index 3: &quot;</span> + wordsArrayList);</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Original list: [Apple, Peach]</span><br><span class="line">after adding Dog at index 0: [Dog, Apple, Peach]</span><br><span class="line">after adding a list: [Mouse, Cat, Zebra, Dog, Apple, Peach]</span><br><span class="line">after removing item at index 0: [Cat, Zebra, Dog, Apple, Peach]</span><br><span class="line">after changing element at index 3: [Cat, Zebra, Dog, Fish, Peach]</span><br></pre></td></tr></table></figure>
<p>无论是ArrayList，还是LinkedList，或是Vector都符合上述展示的List的使用方法，在此就不在写 <code>LinkedList</code> 和 <code>Vector</code> 的代码了。</p>
<h4 id="遍历list">遍历List</h4>
<p>接下来让我们来看一下如何遍历列表元素。这里我们展示3种不同遍历方法，注意它们的使用。</p>
<ol type="1">
<li>第1种方法，也是最基本的方法：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; L0 = List.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;(L0);</span><br><span class="line">        System.out.println(<span class="string">&quot;original list: &quot;</span> + L);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* Removes the odd item */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = L.get(i);</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            	L.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;even list: &quot;</span> + L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">original list: [0, 1, 2, 3, 4]</span><br><span class="line">even list: [0, 2, 4]</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>第2种方法，我们使用 <code>foreach</code> 循环：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; L0 = List.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;(L0);</span><br><span class="line">        System.out.println(<span class="string">&quot;original list: &quot;</span> + L);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Integer num: L) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                L.remove(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;even list: &quot;</span> + L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">original list: [0, 1, 2, 3, 4]</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.util.ConcurrentModificationException</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>你可以看到，当使用foreach循环时，如果你在循环体内想要进行 <code>remove/add</code> 操作会报错。在这种情况下，你可以使用第1种方法，也可以使用下面讲的第3种方法。</p>
<ol start="3" type="1">
<li>第3种方法，使用 <code>.iterator()</code> 方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; L0 = List.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">		List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;(L0);</span><br><span class="line">		System.out.println(<span class="string">&quot;original list: &quot;</span> + L);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/** .iterator() method:  // in List interface</span></span><br><span class="line"><span class="comment">		 * Returns an iterator over the elements in this list in proper sequence.</span></span><br><span class="line"><span class="comment">		 *</span></span><br><span class="line"><span class="comment">		 * .hasNext() method:  // in Iterator interface</span></span><br><span class="line"><span class="comment">		 * Returns &#123;<span class="doctag">@code</span> true&#125; if the iteration has more elements.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		Iterator&lt;Integer&gt; iterator = L.iterator();</span><br><span class="line">		<span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">			<span class="keyword">int</span> num = iterator.next();</span><br><span class="line">			<span class="keyword">if</span> (num % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">				iterator.remove();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;even list: &quot;</span> + L);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>// 未完待续</p>
<p>(区别：<code>java.util.Collection</code> 是一个集合接口; <code>java.util.Collections</code> 是一个包装类, 包含有各种有关集合操作的静态多态方法。)</p>
<h2 id="set-interface">Set Interface</h2>
<h2 id="queue-interface">Queue Interface</h2>
<h2 id="map-interface">Map Interface</h2>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Collections in Java(1)</title>
    <url>/2021/10/24/Coding/Collections-in-Java-1/</url>
    <content><![CDATA[<p>In this series, we will discuss the <strong>Java Collections Framework</strong>.</p>
<span id="more"></span>
<p>In Java, we have a <strong>Collection</strong> interface extended by other interfaces such as <strong>List</strong>, <strong>Set</strong>, and <strong>Queue</strong>. We also have a <strong>Map</strong> interface. The Map does not extend the Collection interface because it stores key-value pairs, and the classes that come under the Collection interface store only values.</p>

<h2 id="collection-vs.-collections">Collection vs. Collections</h2>
<ul>
<li>A Collection is an interface, whereas Collections is a class.</li>
<li>A Collection interface provides the standard functionality of a data structure to List, Set, and Queue. However, the Collections class provides the utility methods that can be used to search, sort, and synchronize collection elements.</li>
</ul>
<h2 id="list-in-java-arraylist">List in Java: ArrayList</h2>

<p><strong>ArrayList</strong> is an list based on array. Some of the salient features of an ArrayList are:</p>
<ul>
<li>Elements are stored in the order of insertion.</li>
<li>It allows the storage of duplicate elements.</li>
<li>ArrayList also supports null elements.</li>
</ul>
<p>An ArrayList stores data in a <strong>resizable</strong> array. After Java 8, when an ArrayList is created, an array of size zero is created. Only when the first element is inserted does the array size change to ten. This is called <strong>lazy initialization</strong>, and it saves a lot of memory.</p>
<p>In CS61B, we've discussed resizing an array in lecture 7, and also implemented it in project 1. The strategy we used is doubling the length. In real Java, the strategy is changing length from <code>n</code> to <code>(n + n/2 + 1)</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Create an ArrayList */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// no-args construction</span></span><br><span class="line">List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// give initial capacity</span></span><br><span class="line">List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// using existing collection</span></span><br><span class="line">List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;(L2);</span><br></pre></td></tr></table></figure>
<h3 id="time-complexities-for-operations">Time Complexities for Operations</h3>
<ol type="1">
<li><strong>Add an element</strong></li>
</ol>
<p>If an ArrayList is not full, it will take <em>O</em>(1) time.</p>
<p>However, if it is full, it will take extra time to do resizing ... <em>O</em>(N), where N is the number of elements of the ArrayList before adding.</p>
<ol start="2" type="1">
<li><strong>Remove an element</strong></li>
</ol>
<p>You can remove an element by giving its index, or giving itself.</p>
<ul>
<li>Remove by index:
<ul>
<li><em>O</em>(1) in the best case, ... remove the last element.</li>
<li><em>O</em>(n) in the worst case. ... remove the first element, and copy the rest</li>
</ul></li>
<li>Remove by element itself:
<ul>
<li>scan the array to find the element, then remove it if it exists.</li>
</ul></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Remove */</span></span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove an element at a particular index</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">4</span>;</span><br><span class="line">L.remove(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove a particular element</span></span><br><span class="line">L.remove(<span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove all elements within a range</span></span><br><span class="line"><span class="comment">// fromIndex is inclusive and toIndex is exclusive</span></span><br><span class="line"><span class="comment">// this method is not defined in the List class. </span></span><br><span class="line"><span class="comment">// So, it can be used only when the reference type is also ArrayList and not List.</span></span><br><span class="line">removeRange(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove all elements within a given collection</span></span><br><span class="line">L. removeAll(L2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove all elements</span></span><br><span class="line">L.clear();</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li><strong>Fetch an element</strong></li>
</ol>
<p>Fetch an element from an ArrayList using index takes <em>O</em>(1) constant time.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Fetch */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">4</span>;</span><br><span class="line">L.get(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetch the size of an ArrayList</span></span><br><span class="line">L.size();</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li><strong>Insert elements</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Insert */</span></span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// insert the element at the end</span></span><br><span class="line">L.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert the element at a given index</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">4</span>;</span><br><span class="line">L.add(index, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert multiple elements from another collection at the end</span></span><br><span class="line">L.addAll(L1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert multiple elements from another collection at a given index </span></span><br><span class="line">L.addAll(index, L1);</span><br></pre></td></tr></table></figure>
<ol start="5" type="1">
<li><strong>Replace all elements in Java 8</strong></li>
</ol>
<p>A new method, <code>replaceAll(UnaryOperator&lt;E&gt; operator)</code>, was added in Java 8. This method takes a single UnaryOperator type argument. The UnaryOperator interface is a functional interface that has a single abstract method, <code>apply()</code>, that returns a result of the same object type as the operand.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">		list.add(<span class="string">&quot;banana&quot;</span>);</span><br><span class="line"></span><br><span class="line">		list.replaceAll((element) -&gt; element.toUpperCase());</span><br><span class="line"></span><br><span class="line">		System.out.println(list);   <span class="comment">// [APPLE, BANANA]</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6" type="1">
<li><strong>Update an element</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// set the element at index to a new value</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">String newStr = <span class="string">&quot;peach&quot;</span>;</span><br><span class="line">list.set(index, newStr);</span><br></pre></td></tr></table></figure>
<ol start="7" type="1">
<li><strong>Check existence</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line">		list.add(<span class="number">20</span>);</span><br><span class="line">		list.add(<span class="number">30</span>);</span><br><span class="line">		list.add(<span class="number">40</span>);</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">		list.set(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);  <span class="comment">// [10, 100, 30, 40, 10]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// check if an element is present</span></span><br><span class="line">        <span class="keyword">if</span> (list.contains(<span class="number">30</span>)) &#123;    <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">&quot;List contains 30&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the index of the first occurrence</span></span><br><span class="line">        System.out.println(</span><br><span class="line">            <span class="string">&quot;Index of first occurence of 10 is &quot;</span> + list.indexOf(<span class="number">10</span>) <span class="comment">// 0</span></span><br><span class="line">        );</span><br><span class="line">        System.out.println(</span><br><span class="line">            <span class="string">&quot;Index of last occurence of 10 is &quot;</span> + list.lastIndexOf(<span class="number">10</span>)  <span class="comment">// 4</span></span><br><span class="line">        );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="iteration">Iteration</h3>
<h4 id="using-iterator">Using Iterator</h4>
<p>In CS61B lecture 11, we have discussed enhanced for loop.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line">		list.add(<span class="number">20</span>);</span><br><span class="line">		list.add(<span class="number">30</span>);</span><br><span class="line">		list.add(<span class="number">40</span>);</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">		Iterator&lt;Integer&gt; itr = list.iterator();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(itr.hasNext()) &#123;</span><br><span class="line">			System.out.println(itr.next());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Iterating using forEachRemaining() method</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Iterating using forEachRemaining() method&quot;</span>);</span><br><span class="line">		Iterator&lt;Integer&gt; newItr = list.iterator();</span><br><span class="line">		newItr.forEachRemaining(element -&gt; System.out.println(element));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If we try to directly remove an element while iterating an ArrayList using an iterator is created, then <code>ConcurrentModificationException</code> will also be thrown. We should always use the <code>remove()</code> method in the iterator to remove an element from the ArrayList.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** This program will fail because we are trying to delete the element from the list directly. */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListPractice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line">		list.add(<span class="number">20</span>);</span><br><span class="line">		list.add(<span class="number">30</span>);</span><br><span class="line">		list.add(<span class="number">40</span>);</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">		Iterator&lt;Integer&gt; itr = list.iterator();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (itr.hasNext()) &#123;</span><br><span class="line">			<span class="keyword">int</span> next = itr.next();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (next == <span class="number">30</span>) &#123;</span><br><span class="line">				list.remove(<span class="keyword">new</span> Integer(<span class="number">30</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** This program is the correct way to delete an element from the list. */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line">		list.add(<span class="number">20</span>);</span><br><span class="line">		list.add(<span class="number">30</span>);</span><br><span class="line">		list.add(<span class="number">40</span>);</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">		Iterator&lt;Integer&gt; itr = list.iterator();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(itr.hasNext()) &#123;</span><br><span class="line">			<span class="keyword">int</span> next = itr.next();</span><br><span class="line">			<span class="keyword">if</span>(next == <span class="number">30</span>) &#123;</span><br><span class="line">				itr.remove();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(list);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If an element is added to the ArrayList after the iterator is created then also <code>ConcurrentModificationException</code> will be thrown.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="number">34</span>);</span><br><span class="line">		list.add(<span class="number">45</span>);</span><br><span class="line"></span><br><span class="line">		Iterator&lt;Integer&gt; itr = list.iterator();</span><br><span class="line">		list.add(<span class="number">54</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(itr.hasNext()) &#123;</span><br><span class="line">			System.out.println(itr.next());	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="using-listiterator">Using ListIterator</h4>
<p>The <code>Iterator</code> provides very limited capabilities as we can iterate only in the forward direction and we can’t update or insert an element to the list while iterating. To overcome these problems, we can use <code>ListIterator</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line">		list.add(<span class="number">20</span>);</span><br><span class="line">		list.add(<span class="number">30</span>);</span><br><span class="line">		list.add(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Getting ListIterator</span></span><br><span class="line">		ListIterator&lt;Integer&gt; listIterator = list.listIterator();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Traversing elements</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Forward Direction Iteration:&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span> (listIterator.hasNext()) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Next element is &quot;</span> + listIterator.next() + </span><br><span class="line">			<span class="string">&quot; and next index is &quot;</span> + listIterator.nextIndex());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Traversing elements, the iterator is at the end at this point</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Backward Direction Iteration:&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span> (listIterator.hasPrevious()) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;Previous element is &quot;</span> + listIterator.previous() + </span><br><span class="line">			<span class="string">&quot; and previous index is &quot;</span> + listIterator.previousIndex());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Forward Direction Iteration:</span></span><br><span class="line"><span class="comment">Next element is 10 and next index is 1</span></span><br><span class="line"><span class="comment">Next element is 20 and next index is 2</span></span><br><span class="line"><span class="comment">Next element is 30 and next index is 3</span></span><br><span class="line"><span class="comment">Next element is 40 and next index is 4</span></span><br><span class="line"><span class="comment">Backward Direction Iteration:</span></span><br><span class="line"><span class="comment">Previous element is 40 and previous index is 2</span></span><br><span class="line"><span class="comment">Previous element is 30 and previous index is 1</span></span><br><span class="line"><span class="comment">Previous element is 20 and previous index is 0</span></span><br><span class="line"><span class="comment">Previous element is 10 and previous index is -1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>Besides, there are other methods such as <code>remove()</code>, <code>set(E e)</code>, <code>add(E e)</code> etc.</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java: 更优雅地关闭资源 - try-with-resource及其异常抑制</title>
    <url>/2021/09/11/Coding/Java-%E6%9B%B4%E4%BC%98%E9%9B%85%E5%9C%B0%E5%85%B3%E9%97%AD%E8%B5%84%E6%BA%90-try-with-resource%E5%8F%8A%E5%85%B6%E5%BC%82%E5%B8%B8%E6%8A%91%E5%88%B6/</url>
    <content><![CDATA[<p>本文转自：https://www.cnblogs.com/itZhy/p/7636615.html</p>
<h2 id="背景">背景</h2>
<p>我们知道，在Java编程过程中，如果打开了外部资源（文件、数据库连接、网络连接等），我们必须在这些外部资源使用完毕后，手动关闭它们。因为外部资源不由JVM管理，无法享用JVM的垃圾回收机制，如果我们不在编程时确保在正确的时机关闭外部资源，就会导致外部资源泄露，紧接着就会出现文件被异常占用，数据库连接过多导致连接池溢出等诸多很严重的问题。</p>
<span id="more"></span>
<h2 id="传统的资源关闭方式">传统的资源关闭方式</h2>
<p>为了确保外部资源一定要被关闭，通常关闭代码被写入finally代码块中，当然我们还必须注意到关闭资源时可能抛出的异常，于是便有了下面的经典代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    FileInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">        System.out.println(inputStream.read());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>熟悉其他语言的朋友可能会开始吐槽了，在C++中，我们可以把关闭资源的代码放在析构函数中，在C#中，我们有using代码块。这些语法都有一个共同的特性，让外部资源的关闭行为与外部资源的句柄对象的生命周期关联，当外部资源的句柄对象生命周期终结时（例如句柄对象已出作用域），外部资源的关闭行为将被自动调用。这样不仅更加符合面向对象的编程理念（将关闭外部资源的行为内聚在外部资源的句柄对象中），也让代码更加简洁易懂。怎么到了Java这里，就找不到自动关闭外部资源的语法特性了呢。</p>
<h2 id="jdk7及其之后的资源关闭方式">JDK7及其之后的资源关闭方式</h2>
<p>确实，在JDK7以前，Java没有自动关闭外部资源的语法特性，直到JDK7中新增了 <code>try-with-resource</code> 语法，才实现了这一功能。</p>
<p>那什么是 <code>try-with-resource</code> 呢？简而言之，当一个外部资源的句柄对象（比如FileInputStream对象）实现了 <code>AutoCloseable</code> 接口，那么就可以将上面的代码简化为如下形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;test&quot;</span>))) &#123;</span><br><span class="line">        System.out.println(inputStream.read());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将外部资源的句柄对象的创建放在 try 关键字后面的括号中，当这个 try-catch 代码块执行完毕后，Java会确保外部资源的close方法被调用。代码是不是瞬间简洁许多！</p>
<p><code>try-with-resource</code> 并不是JVM虚拟机的新增功能，只是JDK实现了一个语法糖。当你将上面代码反编译后会发现，其实对JVM虚拟机而言，它看到的依然是之前的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">        Throwable var2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(inputStream.read());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var12) &#123;</span><br><span class="line">            var2 = var12;</span><br><span class="line">            <span class="keyword">throw</span> var12;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (var2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        inputStream.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable var11) &#123;</span><br><span class="line">                        var2.addSuppressed(var11);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var14) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(var14.getMessage(), var14);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过反编译的代码，大家可能注意到代码中有一处对异常的特殊处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">var2.addSuppressed(var11);</span><br></pre></td></tr></table></figure>
<p>这是 try-with-resource 语法涉及的另外一个知识点，叫做异常抑制。当对外部资源进行处理（例如读或写）时，如果遭遇了异常，且在随后的关闭外部资源过程中，又遭遇了异常，那么你catch到的将会是对外部资源进行处理时遭遇的异常，关闭资源时遭遇的异常将被“抑制”但不是丢弃，通过异常的 <code>getSuppressed</code> 方法，可以提取出被抑制的异常。</p>
<h2 id="总结">总结</h2>
<ol type="1">
<li><p>当一个外部资源的句柄对象实现了 <code>AutoCloseable</code> 接口，JDK7便可以利用 try-with-resource 语法更优雅的关闭资源，消除板式代码。</p></li>
<li><p>try-with-resource时，如果对外部资源的处理和对外部资源的关闭均遭遇了异常，“关闭异常”将被抑制，“处理异常”将被抛出，但“关闭异常”并没有丢失，而是存放在“处理异常”的被抑制的异常列表中。</p></li>
</ol>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Python: 关键字global和nonlocal</title>
    <url>/2021/07/10/Coding/Python-%E5%85%B3%E9%94%AE%E5%AD%97global%E5%92%8Cnonlocal/</url>
    <content><![CDATA[<p>学习关键字 <code>global</code> 和 <code>nonlocal</code> 的用法。</p>
<span id="more"></span>
<h2 id="引例">引例</h2>
<p>先来看一个代码片段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">increment = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater</span>(<span class="params">func, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the function that computes the nth application of func.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeater</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            x = func(x)</span><br><span class="line">            n = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> repeater</span><br><span class="line"></span><br><span class="line">add_three = make_repeater(increment, <span class="number">3</span>)</span><br><span class="line">add_three(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>当运行上述代码片段时，会产生如下的错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UnboundLocalError: <span class="built_in">local</span> variable <span class="string">&#x27;n&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure>
<p>要理解这个错误的原因，需要知道全局变量和局部变量的概念。</p>
<h2 id="局部变量和全局变量">局部变量和全局变量</h2>
<h3 id="局部变量">局部变量</h3>
<p>当我们在函数体内、或者在局部范围内定义一个变量时，该变量被称为 <code>局部变量</code> 。局部变量只能在局部范围内被访问，不能在局部范围外被访问。</p>
<p><strong>例1：在范围外访问局部变量</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    y = <span class="string">&quot;local&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure>
<p><strong>输出：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span></span><br><span class="line">NameError: name <span class="string">&#x27;y&#x27;</span> is not defined</span><br></pre></td></tr></table></figure>
<h3 id="全局变量">全局变量</h3>
<p>当我们在函数外、或者在全局范围内定义一个变量时，该变量被称为 <code>全局变量</code> 。全局变量可以在函数内部被访问，也可以在函数外部被访问。</p>
<p>让我们来看一个全局变量的例子：</p>
<p><strong>例3：全局变量</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x inside:&quot;</span>, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x outside:&quot;</span>, x)</span><br></pre></td></tr></table></figure>
<p><strong>输出：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x inside: <span class="keyword">global</span></span><br><span class="line">x outside: <span class="keyword">global</span></span><br></pre></td></tr></table></figure>
<p>在上述代码中，<code>x</code> 是一个全局变量，我们可以在函数 <code>foo</code> 内部访问 <code>x</code> ，也可以在函数外部访问 <code>x</code> 。</p>
<p>值得注意的是，在上面的代码中，我们仅仅只是访问 <code>x</code> 。但如果我们想要做的是修改 <code>x</code> 的值呢？</p>
<p><strong>例4: 在函数内部修改全局变量</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    x = x * <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>
<p><strong>Output</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UnboundLocalError: <span class="built_in">local</span> variable <span class="string">&#x27;x&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure>
<p>运行会出现错误。</p>
<p>这是因为，当我们在函数内部对 <code>x</code> 修改重新赋值时，Python解释器会认为 <code>x</code> 是局部变量而不是全局变量，而这个局部变量也并没有在函数内部定义，所以就产生了这个错误。</p>
<h2 id="关键字global和nonlocal">关键字：global和nonlocal</h2>
<h3 id="global关键字">global关键字</h3>
<p>为了解决例4的问题，我们使用 <strong>global</strong> 关键字。现在函数内部声明变量 <code>x</code> 是全局变量，再对其进行修改。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x = x * <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<p><strong>输出：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">globalglobal</span><br><span class="line">globalglobal</span><br></pre></td></tr></table></figure>
<h3 id="nonlocal关键字">nonlocal关键字</h3>
<p>比较以下两个代码：</p>
<p><strong>例5：不使用nonlocal关键字</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;variable 1&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">        name = <span class="string">&#x27;variable 2&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    </span><br><span class="line">func1()</span><br></pre></td></tr></table></figure>
<p><strong>输出：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">variable 2</span><br><span class="line">variable 1</span><br></pre></td></tr></table></figure>
<p><strong>例6：使用nonlocal关键字</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;variable 1&#x27;</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> name</span><br><span class="line">        name = <span class="string">&#x27;variable 2&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(name) </span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    </span><br><span class="line">func2()</span><br></pre></td></tr></table></figure>
<p><strong>输出：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">variable 2</span><br><span class="line">variable 2</span><br></pre></td></tr></table></figure>
<p>注意到例6的第4行代码，嵌套函数 <code>foo</code> 中的变量 <code>name</code> 使用了关键字 <strong>nonlocal</strong> 。</p>
<p>如果一个变量被 nonlocal 修饰，则标识了该变量是上一级函数中的局部变量，在这里，指的是函数 <code>func2</code> 中的同名的变量 <code>name</code> (line 2) 。因此在嵌套函数 <code>foo</code> 中修改变量 <code>name</code> 的值也就修改了 <code>func2</code> 中变量 <code>name</code> 的值。</p>
<p>而在例5中，嵌套函数 <code>foo</code> 中的变量 <code>name</code> 并没有用 nonlocal 修饰，那么它仅仅是 <code>foo</code> 中的一个局部变量。在函数 <code>foo</code> 的范围外是不能访问这个变量的。所以第7行打印的是第2行定义的局部变量 <code>name</code>, 而不是第4行的局部变量。</p>
<h2 id="尾声">尾声</h2>
<p>最后让我们重新看一下引例中的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">increment = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater</span>(<span class="params">func, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the function that computes the nth application of func.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeater</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            x = func(x)</span><br><span class="line">            n = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> repeater</span><br><span class="line"></span><br><span class="line">add_three = make_repeater(increment, <span class="number">3</span>)</span><br><span class="line">add_three(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>要怎样修改才能使代码工作呢？</p>
<p>答案不唯一，但一个可行的办法是使用 <code>nonlocal</code> 关键字来修饰变量 <code>n</code> ， 如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater</span>(<span class="params">func, n</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeater</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> n</span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            x = func(x)</span><br><span class="line">            n = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> repeater</span><br></pre></td></tr></table></figure>
<p>🌼 完结，撒花 ✿✿ヽ(°▽°)ノ✿</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>有关C/C++的编译和执行</title>
    <url>/2021/12/30/Coding/%E6%9C%89%E5%85%B3C-C-%E7%9A%84%E7%BC%96%E8%AF%91%E5%92%8C%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p>关于编译和执行C/C++程序的若干问题。</p>
<span id="more"></span>
<ol type="1">
<li></li>
</ol>
]]></content>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(1): Intro, Hello Java World</title>
    <url>/2021/01/20/CS61B-DSA/CS61B-1-Hello-Java-World/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 1.</p>
<span id="more"></span>
<h2 id="overview">Overview</h2>
<p>Let's start learning CS61B! Firstly, let's make sure what is this course about:</p>
<ul>
<li>Writing code that runs efficiently.
<ul>
<li>Good algorithms.</li>
<li>Good data structures.</li>
</ul></li>
<li>Writing code efficiently.
<ul>
<li>Designing, building, testing, and debugging large programs.</li>
<li>Use of programming tools.
<ul>
<li>git, IntelliJ, JUnit, and various command line tools.</li>
</ul></li>
<li>Java (not the focus of the course!)</li>
</ul></li>
</ul>
<p>This course assumes you have a solid foundation in programming fundamentals, including OOP, recursion, lists and trees. You can learn <a href="https://cs61a.org/">CS61A</a> if you do not have these concepts.</p>
<h2 id="hello-java-world">Hello Java World</h2>
<p>Take a look at <em>hello world</em> programs implemented in Python and Java separately.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># in Python</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in Java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">1. All code in Java must be part of a class. *</span></span><br><span class="line"><span class="comment">2. We delimit the begin and end of segments of code using &#123; and &#125;.</span></span><br><span class="line"><span class="comment">3. All statements in Java must end in a semi-colon.</span></span><br><span class="line"><span class="comment">4. For code to run we need &quot;public static void main(String[] args)&quot;.</span></span><br><span class="line"><span class="comment">   This main method can call other methods/classes in the program.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// * : This is not completely true, e.g. we can also declare “interfaces” in .java files that may contain code.</span></span><br></pre></td></tr></table></figure>
<p>Java is an object-oriented language. Every Java file must contain either a class, interface, or enum.</p>
<h2 id="static-typing">Static Typing</h2>
<p>Let's compare two pieces of code, you should notice that the usages of variable <code>x</code> between Python and Java are different.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;horse&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(5 + &quot;horse&quot;)  # error when running</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python code can crash due to type errors when its running!</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloNumbers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">            x += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// x = &quot;horse&quot;;  // error when compiling: cannot convert from String to int</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. Before Java variables can be used, they must be declared.</span></span><br><span class="line"><span class="comment">2. Java variables must have a specific type.</span></span><br><span class="line"><span class="comment">3. Java varialbe types can never change.</span></span><br><span class="line"><span class="comment">4. Types are verified (by compiler) before the code even runs!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="declaring-functions">Declaring Functions</h2>
<p>Finally, let's learn how to define and use functions in Java. You should notice the way of adding comment in Java.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">larger</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the larger of x and y.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(larger(-<span class="number">5</span>, <span class="number">10</span>))   <span class="comment"># 10</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LargerDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the larger of x and y. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">larger</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(larger(-<span class="number">5</span>, <span class="number">10</span>)); <span class="comment">// 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. Function must be declared as part of a class in Java.</span></span><br><span class="line"><span class="comment">    A function that is part of a class is called a &quot;method&quot;.</span></span><br><span class="line"><span class="comment">    So in Java, all functions are methods.</span></span><br><span class="line"><span class="comment">2. To define a function a Java, we use &quot;public static&quot;.</span></span><br><span class="line"><span class="comment">    We will see alternate ways of defining functions later.</span></span><br><span class="line"><span class="comment">3. All parameters of a function must have a declared type,</span></span><br><span class="line"><span class="comment">    and the return value of the function must have a declared type.</span></span><br><span class="line"><span class="comment">    Functions in Java return only one value!</span></span><br><span class="line"><span class="comment">    (Python can return multiple values.)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(10): Subtype Polymorphism vs. HoFs</title>
    <url>/2021/02/10/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 10.</p>
<p>⛱️ In this lecture, we will talk about <code>Polymorphism(多态性)</code> of Java, and continue discussing <code>HoFs</code> deeply.</p>
<span id="more"></span>
<p>But before starting today's lecture, firstly, we will review concepts of the previous lecture with a puzzle.</p>
<img src="/2021/02/10/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-1.JPG" class="">
<img src="/2021/02/10/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-2.JPG" class="">
<h2 id="subtype-polymorphism">Subtype Polymorphism</h2>
<img src="/2021/02/10/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-3.JPG" class="">
<img src="/2021/02/10/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-4.JPG" class="">
<p>In the rest of this lecture, we will think about how to code the second approach in Java.</p>
<h2 id="diy-comparison">DIY Comparison</h2>
<p>Suppose we want to write a function <code>max()</code> that returns the max of any array, regardless of type.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">max</span><span class="params">(Object[] items)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxDex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// the following line is wrong!</span></span><br><span class="line">        <span class="keyword">if</span> (items[i] &gt; items[maxDex]) &#123;    </span><br><span class="line">            maxDex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> items[maxDex];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Dog[] dogs = &#123;<span class="keyword">new</span> Dog(<span class="string">&quot;Elyse&quot;</span>, <span class="number">3</span>), <span class="keyword">new</span> Dog(<span class="string">&quot;Sture&quot;</span>, <span class="number">9</span>),</span><br><span class="line">                    <span class="keyword">new</span> Dog(<span class="string">&quot;Benjamin&quot;</span>, <span class="number">15</span>)&#125;;</span><br><span class="line">    Dog maxDog = (Dog) max(dogs);</span><br><span class="line">    maxDog.bark();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To fix the error above, one approach is to write a max method in Dog class:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title">maxDog</span><span class="params">(Dog[] dogs)</span> </span>&#123;</span><br><span class="line">   	<span class="keyword">if</span> (dogs == <span class="keyword">null</span> || dogs.length == <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   	Dog maxDog = dogs[<span class="number">0</span>];</span><br><span class="line">   	<span class="keyword">for</span> (Dog d : dogs) &#123;</span><br><span class="line">       <span class="keyword">if</span> (d.size &gt; maxDog.size) &#123;</span><br><span class="line">        	maxDog = d;        	</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> maxDog;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>But this is a bad approach. What if we want to compare apples instead of dogs? So we need to find another way.</p>
<p>We have already know that objects cannot be compared to other objects with <code>&gt;</code>, <code>&lt;</code>, <code>==</code> etc. In this case, inheritance/HoFs can help us.</p>
<hr />
<p><strong>Solution:</strong></p>
<img src="/2021/02/10/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-5.JPG" class="">
<p>Create an interface that guarantees a comparison method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OurComparable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Returns </span></span><br><span class="line"><span class="comment">     * 1) negative number if this &lt; o;</span></span><br><span class="line"><span class="comment">     * 2) 0 if this equals o;</span></span><br><span class="line"><span class="comment">     * 3) positive number if this &gt; o</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Our dog class should implement the defined interface：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">OurComparable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String n, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        size = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        Dog uddaDog = (Dog) o;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size - uddaDog.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; says: bark&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Define the function:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Maximizer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OurComparable <span class="title">max</span><span class="params">(OurComparable[] items)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> maxDex = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">		    <span class="keyword">int</span> cmp = items[i].compareTo(items[maxDex]);</span><br><span class="line">                <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    maxDex = i;</span><br><span class="line">                &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> items[maxDex];</span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HoFDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog[] dogs = &#123;</span><br><span class="line">            <span class="keyword">new</span> Dog(<span class="string">&quot;Elyse&quot;</span>, <span class="number">3</span>), </span><br><span class="line">            <span class="keyword">new</span> Dog(<span class="string">&quot;Sture&quot;</span>, <span class="number">9</span>), </span><br><span class="line">            <span class="keyword">new</span> Dog(<span class="string">&quot;Benjamin&quot;</span>,<span class="number">15</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">        Dog maxDog = (Dog) Maximizer.max(dogs);</span><br><span class="line">        maxDog.bark();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<p>Now, try to answer 2 quizzes. Hope you can finish them correctly.</p>
<img src="/2021/02/10/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-6.JPG" class="">

<blockquote>
<p>Answer: quiz 1: B quiz 2: A</p>
</blockquote>
<h2 id="built-in-comparable-interface">built-in Comparable Interface</h2>
<p>Although the built <code>OurComparable</code> works, it has some flaws. In the real world, we use a built-in interface named <code>Comparable</code> .</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@source</span>: https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T obj)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Rewrite the previous problem:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String n, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        size = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Dog o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size - o.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; says: bark&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="comparators">Comparators</h2>
<p>We do not always want to compare objects in the same way every time, that is where <code>Comparator</code> comes in.</p>
<img src="/2021/02/10/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-9.JPG" class="">
<p>Sometimes, maybe you actually want to sort them in a different way, like sorting them alphabetically.</p>
<img src="/2021/02/10/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/10-8.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String n, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        size = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Dog o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size - o.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; says: bark&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NameComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog a, Dog b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.name.compareTo(b.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Comparator&lt;Dog&gt; <span class="title">getNameComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NameComparator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Dog d1 = <span class="keyword">new</span> Dog(<span class="string">&quot;Elyse&quot;</span>, <span class="number">3</span>);</span><br><span class="line">		Dog d2 = <span class="keyword">new</span> Dog(<span class="string">&quot;Sture&quot;</span>, <span class="number">9</span>);</span><br><span class="line">		Dog d3 = <span class="keyword">new</span> Dog(<span class="string">&quot;Benjamin&quot;</span>, <span class="number">15</span>);</span><br><span class="line">        Dog[] dogs = &#123;d1, d2, d3&#125;;</span><br><span class="line">        Dog maxDog = (Dog) Maximizer.max(dogs);</span><br><span class="line">        maxDog.bark();  <span class="comment">// Benjamin bark</span></span><br><span class="line"></span><br><span class="line">	    Comparator&lt;Dog&gt; nc = Dog.getNameComparator();</span><br><span class="line">        <span class="keyword">if</span> (nc.compare(d1, d2) &gt; <span class="number">0</span>) &#123;  <span class="comment">// id d1 comes later than d2 in the alphabet</span></span><br><span class="line">        	d1.bark();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        	d2.bark();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>The only difference between <strong>Comparable</strong> and <strong>Comparator</strong> is that <code>Comparable</code> says &quot;I wanna compare myself to other object&quot;, while <code>Comparator</code> compares two other objects.</p>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(11): Exceptions, Iterators, Object Methods</title>
    <url>/2021/02/12/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 11.</p>
<span id="more"></span>
<h2 id="lists-and-sets-in-java">Lists and Sets in Java</h2>
<p>In real world, we won't built the data structures such as <code>LinkedList</code>, <code>AList</code>, <code>Deque</code> etc. from scratch. Instead, we will use the Java's built-in data structures directly.</p>
<p>In this part, let's see Java's built-in data structures.</p>
<h3 id="lists">Lists</h3>
<p>Java provides a built-in <strong>List</strong> interface, and several implementations such as <strong>ArrayList</strong>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        L.add(<span class="number">5</span>);</span><br><span class="line">        L.add(<span class="number">10</span>);</span><br><span class="line">        L.add(<span class="number">15</span>);</span><br><span class="line">        System.out.println(L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sets">Sets</h3>
<p>Another handy data structure is <strong>Set</strong>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; S = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        S.add(<span class="string">&quot;Tokyo&quot;</span>);</span><br><span class="line">        S.add(<span class="string">&quot;Beijing&quot;</span>);	</span><br><span class="line">        S.add(<span class="string">&quot;Lagos&quot;</span>);</span><br><span class="line">        S.add(<span class="string">&quot;São Paulo&quot;</span>);</span><br><span class="line">        System.out.println(S.contains(<span class="string">&quot;Tokyo&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>For the rest of the blog, we will talk about how to implement our own Set called ArraySet.</p>
<h2 id="basic-arrayset">Basic ArraySet</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySet</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArraySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = (T[]) <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns true if this map contains a mapping for the specified key.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (items[i].equals(x)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment">       Throws an IllegalArgumentException if the key is null. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ignore resizign now</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contains(x)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        items[size] = x;</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns the number of key-value mappings in this map. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArraySet&lt;Integer&gt; aset = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        <span class="comment">// aset.add(null);  // error: NullPointerException</span></span><br><span class="line">        aset.add(<span class="number">5</span>);</span><br><span class="line">        aset.add(<span class="number">23</span>);</span><br><span class="line">        aset.add(<span class="number">42</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="exceptions">Exceptions</h2>
<p>The above code has a subtle bug. See the comment in <code>main</code> method.</p>
<p>Since the bug, if we uncomment and run the above code, it will crash and break the normal flow of control. And the compiler will throw the exception.</p>
<p>We can throw our own exceptions, too.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ignore resizign now</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot add null!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (contains(x)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    items[size] = x;</span><br><span class="line">    size += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * However, this will still cause crash.</span></span><br><span class="line"><span class="comment"> * So maybe we can fix our code by:</span></span><br><span class="line"><span class="comment"> *  - ingore null;</span></span><br><span class="line"><span class="comment"> *  - fix contains so that it doesn&#x27;t crash if items[i] is null;</span></span><br><span class="line"><span class="comment"> * /</span></span><br></pre></td></tr></table></figure>
<h2 id="iterable">Iterable</h2>
<p>Our ArraySet doesn't support <strong>enhanced for loop</strong>, that means it isn't iterable.</p>
<img src="/2021/02/12/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-1.JPG" class="" title="Iterable Set">
<img src="/2021/02/12/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-2.JPG" class="" title="Our Built Set">
<p>Before trying to make our ArraySet supports enhanced for loop, firstly, let's try to use an alternative way to iterate.</p>
<img src="/2021/02/12/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-3.JPG" class="">
<img src="/2021/02/12/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-4.JPG" class="">
<img src="/2021/02/12/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-5.JPG" class="">
<img src="/2021/02/12/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-6.JPG" class="">
<p>Actually, the enhanced for loop is just shorthand of this ugly while loop. The extra you need to do is declaring that <code>public class ArraySet&lt;T&gt; implements Iterable&lt;T&gt;</code></p>
<img src="/2021/02/12/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-7.JPG" class="">
<img src="/2021/02/12/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-8.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySet</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArraySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = (T[]) <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns true if this map contains a mapping for the specified key.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (items[i].equals(x)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment">       Throws an IllegalArgumentException if the key is null. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ignore resizign now</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot add null!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (contains(x)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        items[size] = x;</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Returns the number of key-value mappings in this map. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySetIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> wizPos;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">ArraySetIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            wizPos = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> wizPos  &lt; size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            T returnItem = items[wizPos];</span><br><span class="line">            wizPos += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> returnItem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns an iterator (a.k.a seer) into ME. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArraySetIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArraySet&lt;Integer&gt; aset = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        <span class="comment">// aset.add(null);  // error: NullPointerException</span></span><br><span class="line">        aset.add(<span class="number">5</span>);</span><br><span class="line">        aset.add(<span class="number">23</span>);</span><br><span class="line">        aset.add(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Integer&gt; aseer = aset.iterator();</span><br><span class="line">        <span class="keyword">while</span>(aseer.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = aseer.next();</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/02/12/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-9.JPG" class="">
<h2 id="object-methods">Object Methods:</h2>
<img src="/2021/02/12/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-10.JPG" class="">
<h3 id="tostring">#1: toString</h3>
<img src="/2021/02/12/CS61B-DSA/CS61B-11-Exceptions-Iterators-Object-Methods/11-11.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySet</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// String is immutable, so we use StringBuilder</span></span><br><span class="line">        StringBuilder returnSB = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">            returnSB.append(items[i].toString());</span><br><span class="line">            returnSB.append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        returnSB.append(items[size - <span class="number">1</span>]);</span><br><span class="line">        returnSB.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> returnSB.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArraySet&lt;Integer&gt; aset = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        aset.add(<span class="number">5</span>);</span><br><span class="line">        aset.add(<span class="number">23</span>);</span><br><span class="line">        aset.add(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//iteration</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : aset) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//toString</span></span><br><span class="line">        System.out.println(aset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="equals">#2: equals</h3>
<p>As mentioned before, <code>==</code> and <code>.equals()</code> behave differently.</p>
<ul>
<li><code>==</code> compares the bits. For reference, it means &quot;referencing the same object&quot;</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySet</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == other) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (other == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (other.getClass() != <span class="keyword">this</span>.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ArraySet&lt;T&gt; o = (ArraySet&lt;T&gt;) other;</span><br><span class="line">        <span class="keyword">if</span> (o.size() != <span class="keyword">this</span>.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (T item : <span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!o.contains(item)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArraySet&lt;Integer&gt; aset = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        aset.add(<span class="number">5</span>);</span><br><span class="line">        aset.add(<span class="number">23</span>);</span><br><span class="line">        aset.add(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//iteration</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : aset) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//toString</span></span><br><span class="line">        System.out.println(aset);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//equals</span></span><br><span class="line">        ArraySet&lt;Integer&gt; aset2 = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        aset2.add(<span class="number">5</span>);</span><br><span class="line">        aset2.add(<span class="number">23</span>);</span><br><span class="line">        aset2.add(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(aset.equals(aset2));  <span class="comment">// true</span></span><br><span class="line">        System.out.println(aset.equals(<span class="keyword">null</span>));  <span class="comment">// false</span></span><br><span class="line">        System.out.println(aset.equals(<span class="string">&quot;fish&quot;</span>));  <span class="comment">// false</span></span><br><span class="line">        System.out.println(aset.equals(aset));  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//EXTRA VIDEO CODE</span></span><br><span class="line">        <span class="comment">//ArraySet&lt;String&gt; asetOfStrings = ArraySet.of(&quot;hi&quot;, &quot;I&#x27;m&quot;, &quot;here&quot;);</span></span><br><span class="line">        <span class="comment">//System.out.println(asetOfStrings);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="extra-better-tostring-and-arrayset.of">Extra: Better toString and ArraySet.of</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySet</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public String toString() &#123;</span></span><br><span class="line"><span class="comment">        // String is immutable, so we use StringBuilder</span></span><br><span class="line"><span class="comment">        StringBuilder returnSB = new StringBuilder(&quot;&#123;&quot;);</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; size - 1; i += 1) &#123;</span></span><br><span class="line"><span class="comment">            returnSB.append(items[i].toString());</span></span><br><span class="line"><span class="comment">            returnSB.append(&quot;, &quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        returnSB.append(items[size - 1]);</span></span><br><span class="line"><span class="comment">        returnSB.append(&quot;&#125;&quot;);</span></span><br><span class="line"><span class="comment">        return returnSB.toString();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Better `toString` method</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; listOfItems = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (T x: <span class="keyword">this</span>) &#123;</span><br><span class="line">            listOfItems.add(x.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&quot;</span> + String.join(<span class="string">&quot;,&quot;</span>, listOfItems) + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// of method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;Glerp&gt; <span class="function">ArraySet&lt;Glerp&gt; <span class="title">of</span><span class="params">(&lt;Glerp&gt; ..stuff)</span> </span>&#123;  <span class="comment">// var arg</span></span><br><span class="line">        ArraySet&lt;Glerp&gt; returnSet = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Glerp x: stuff) &#123;</span><br><span class="line">            returnSet.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> returnSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArraySet&lt;Integer&gt; aset = <span class="keyword">new</span> ArraySet&lt;&gt;();</span><br><span class="line">        aset.add(<span class="number">5</span>);</span><br><span class="line">        aset.add(<span class="number">23</span>);</span><br><span class="line">        aset.add(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//iteration</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : aset) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//toString</span></span><br><span class="line">        System.out.println(aset);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// of method</span></span><br><span class="line">        ArraySet&lt;String&gt; aset2 = ArraySet.of(<span class="string">&quot;hi&quot;</span>, <span class="string">&quot;I&#x27;m&quot;</span>, <span class="string">&quot;here.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(12): Command Line Programming and Git</title>
    <url>/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/</url>
    <content><![CDATA[<p>⛱️ This is the lecture note of CS61B - Lecture 12.</p>
<p>In this lecture, we will do some warm-up theoretically for the <code>Project 2: Gitlet</code>.</p>
<span id="more"></span>
<p><strong>Git</strong> is a sophisticated piece of software. Relies on many ideas we have not yet covered:</p>
<ul>
<li>Maps</li>
<li>Hashing</li>
<li>File I/O</li>
<li>Graphs</li>
</ul>
<h2 id="how-git-works">How Git Works</h2>
<p>Every time you commit changes to a file, it stores a copy of the <strong>entire repository</strong> in a secret folder on your computer called <code>.git</code>.</p>
<p>But maybe, you will wonder that by copying the entire repo, just like we copy the entire folder daily, it seems that there are so much redundancy. So, an important thing is how to <strong>avoid redundancy</strong>.</p>
<p>In the rest of this lecture, we will discuss various tricks employed to avoid redundancy, and find the best one.</p>
<h2 id="avoiding-redundancy">Avoiding Redundancy</h2>
<img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-1.JPG" class="">
<h3 id="approach-1">Approach 1</h3>
<img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-2.JPG" class="">
<p>However, this approach is very inefficient -- there are lots of repetitive, same works.</p>
<h3 id="approach-2">Approach 2</h3>
<img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-3.JPG" class="">
<p>In this revised approach 2, we only store files that change.</p>
<ul>
<li>Much more efficient. Avoids storing redundant files.</li>
<li>However, checkout is now more complicated. If we checkout a commit, we have to copy files from a variety of different folders.</li>
</ul>
<img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-4.JPG" class="">
<h3 id="approach-3">Approach 3</h3>
<img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-5.JPG" class="">
<p>And this approach has another advantage. <img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-6.JPG" class=""> <img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-7.JPG" class=""></p>
<h3 id="approach-4">Approach 4</h3>
<p>Though the previous approach seems fine, it still has some flaw. So, we will still go ahead, to see the approach used in the real world. I mean, the approach used in Git.</p>
<p>It is <code>Hashing</code>.</p>
<p>First, let's see some advantages of approach 3.</p>
<img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-8.JPG" class="">
<p>So, we raise a new approach.</p>
<img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-9.JPG" class="">
<h3 id="approach-5">Approach 5</h3>
<p>Since approach 4 still has flaws, it's time to see the &quot;real&quot; approach used in Git.</p>
<img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-10.JPG" class="">
<p>Every file has its own git-SHA1 hash:</p>
<img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-11.JPG" class="">
<p>Then, how git-SHA1 hash works?</p>
<img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-12.JPG" class="">
<img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-13.JPG" class="">
<h2 id="serializable-and-storing-data-structures">Serializable and Storing Data Structures</h2>
<img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-14.JPG" class="">
<p>The commit ID is the git-SHA1 hash of the commit.</p>
<ul>
<li>You might object: “A commit is an object, not a file”.</li>
<li>Imagine a file containing the author, date, commit message, list of files and their versions, and parent ID, then git-SHA1 hash that.</li>
</ul>
<p>After generating commit IDs, we need to store them so that they can be read later.</p>
<img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-15.JPG" class="">
<h2 id="branching">Branching</h2>
<img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-16.JPG" class="">
<p>We can (attempt to) merge branches, and maybe there are conflicts.</p>
<img src="/2021/02/17/CS61B-DSA/CS61B-12-Command-Line-Programming-and-Git/12-17.JPG" class="">
<p>After resolving the conflict. The new commit has two parents!</p>
<p>Note: Commits are no longer a linked list.</p>
<ul>
<li>This is a more general structure called a “graph”.</li>
<li>More on graphs later in our class.</li>
</ul>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(13): Asymptotics I</title>
    <url>/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 13.</p>
<span id="more"></span>
<p>Efficiency comes in two flavors:</p>
<ul>
<li>Programming cost (course to date. Will also revisit later).
<ul>
<li>How long does it take to develop your programs?</li>
<li>How easy is it to read, modify, and maintain your code?
<ul>
<li>More important than you might think!</li>
<li>Majority of cost is in maintenance, not development!</li>
</ul></li>
</ul></li>
<li>Execution cost (from today until end of course).
<ul>
<li>How much time does your program take to execute?</li>
<li>How much memory does your program require?</li>
</ul></li>
</ul>
<p>From now, we start focusing on execution cost, learning kinds of data structures and algorithms. Hope you will enjoy it.</p>
<h2 id="runtime-characterization">Runtime Characterization</h2>
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-1.JPG" class="">
<h3 id="approach-1">Approach 1</h3>
<p>One technique can be used is to measure execution time in seconds using a client program.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">int</span>[] A = makeArray(N);</span><br><span class="line">    dup1(A);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can use tools like:</p>
<ul>
<li>Physical stopwatch.</li>
<li>Unix has a built in time command that measures execution time.</li>
<li>Princeton Standard library has a Stopwatch class.</li>
</ul>
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-2.JPG" class="">
<p>Measuring runtime in seconds is easy to measure, meaning is obvious. However, it requires large amounts of computation time, and result varies with machine, compiler, input data, etc.</p>
<h3 id="approach-2a">Approach 2A</h3>
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-3.JPG" class="">
<h3 id="approach-2b">Approach 2B</h3>
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-4.JPG" class="">
<h2 id="compare-algos">Compare Algos</h2>
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-5.JPG" class="">
<p>In most cases, we care only about <strong>asymptotic behavior</strong>, i.e. what happens for very large N.</p>
<ul>
<li>Simulation of billions of interacting particles.</li>
<li>Social network with billions of users.</li>
<li>Logging of billions of transactions.</li>
<li>Encoding of billions of bytes of video data.</li>
</ul>
<p>Algorithms which scale well (e.g. look like lines) have better asymptotic runtime behavior than algorithms that scale relatively poorly (e.g. look like parabolas).</p>
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-6.JPG" class="">
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-7.JPG" class="">
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-8.JPG" class="">
<h2 id="simplification">Simplification</h2>
<p>Since we don't need to do rigorous, mathmatically runtime charaterization, maybe we can simplify the above tech to make it much clearer and simpler.</p>
<h3 id="simplification-1">Simplification 1</h3>
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-9.JPG" class="">
<h3 id="simplification-2">Simplification 2</h3>
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-10.JPG" class="">
<h3 id="simplification-3">Simplification 3</h3>
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-11.JPG" class="">
<h3 id="simplification-4">Simplification 4</h3>
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-12.JPG" class="">
<p>So, take a summary,</p>
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-13.JPG" class="">
<h2 id="big-theta">Big-Theta</h2>
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-14.JPG" class="">
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-15.JPG" class="">
<p>Let's see the formal definition of <strong>Big-Theta</strong>:</p>
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-16.JPG" class="">
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-17.JPG" class="">
<h2 id="big-o">Big-O</h2>
<p>We used Big Theta to describe the order of growth of a function. We also used Big Theta to describe the rate of growth of the runtime of a piece of code.</p>
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-18.JPG" class="">
<img src="/2021/02/19/CS61B-DSA/CS61B-13-Asymptotics-I/13-19.JPG" class="">
<p>Big-O is used for upper bounds.</p>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(14): Disjoint Sets</title>
    <url>/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 14.</p>
<p>In this lecture, we are going to focus on a data structure called <strong>Disjoint Sets</strong> or <strong>Union Find(并查集)</strong>. We will see how to design it by solving the <strong>&quot;Dynamic Connectivity&quot;</strong> problem, and see how our underlying data structures can affect asymptotic runtime (using our formal Big-Theta notation) and code complexity.</p>
<span id="more"></span>
<p>The Disjoint Sets data structure has two operations:</p>
<ul>
<li>connect(x, y): Connects x and y.</li>
<li>isConnected(x, y): Returns true if x and y are connected. Connections can be transitive, i.e. they don’t need to be direct.</li>
</ul>
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-1.JPG" class="">
<p>Our goal is to implement the above specific interface.</p>
<h2 id="naive-approach">Naive Approach</h2>
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-2.JPG" class="">
<h2 id="better-approach">Better Approach</h2>
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-3.JPG" class="">
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-4.JPG" class="">
<h2 id="quick-find">Quick Find</h2>
<p>Our next step is <strong>how to do track set membership</strong> in Java, like:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123; 0, 1, 2, 4 &#125;, &#123;3, 5&#125;, &#123;6&#125;</span><br><span class="line"></span><br><span class="line">==&gt; connect(2, 3)</span><br><span class="line"></span><br><span class="line">&#123; 0, 1, 2, 4, 3, 5&#125;, &#123;6&#125;</span><br></pre></td></tr></table></figure>
<h3 id="approach-1">Approach 1</h3>
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-5.JPG" class="">
<h3 id="approach-2">Approach 2</h3>
<p>A better approach is using array of the underlying data structures.</p>
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-6.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFindDS</span> <span class="keyword">implements</span> <span class="title">DisjointSets</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuickFindDS</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            id[i] = i;</span><br><span class="line">	    &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> id[p] == id[q];</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> pid = id[p];</span><br><span class="line">        <span class="keyword">int</span> qid = id[q];</span><br><span class="line">       	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; id.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (id[i] == pid) &#123;</span><br><span class="line">              	id[i] = qid;</span><br><span class="line">            &#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Though <code>connect</code> method will still be costly, this approach has good performance on <code>isConnected</code> method.</p>
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-7.JPG" class="">
<h2 id="quick-union">Quick Union</h2>
<p>In Quick Union, we will still represent everything as connected components, and we will still represent connected components as a list of integers. However, values will be chosen so that connect is fast.</p>
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-8.JPG" class="">
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-9.JPG" class="">
<p>See the following example to know why this approach is good at <code>connect</code>.</p>
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-10.JPG" class="">
<p>By the way, we set root(5)'s value equal to root(2) instead of setting root(5)'s value equal to 2 is because, the latter one will cause a taller tree.</p>
<p>However, this approach still has performance issues, that is compared to QuickFind, we have to climb up a tree. If the tree is too tall, finding root(x) will be expensive.</p>
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-11.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickUnionDS</span> <span class="keyword">implements</span> <span class="title">DisjointSets</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">QuickUnionDS</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    	parent = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;  </span><br><span class="line">            parent[i] = -<span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">   	&#125;</span><br><span class="line"> </span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> r = p;</span><br><span class="line">        <span class="keyword">while</span> (parent[r] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            r = parent[r]; </span><br><span class="line">        &#125;</span><br><span class="line">       	<span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConnected</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boid <span class="title">connect</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = find(p);</span><br><span class="line">        <span class="keyword">int</span> j = find(q);</span><br><span class="line">        parent[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-12.JPG" class="">
<h2 id="weighted-quick-union">Weighted Quick Union</h2>
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-13.JPG" class="">
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-14.JPG" class="">
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-15.JPG" class="">
<p>Let's see its performance.</p>
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-16.JPG" class="">
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-17.JPG" class="">
<p>We used the number of items in a tree to decide upon the root.</p>
<p>You might wondering why not use the height of the tree? The reason is worst case performance for <strong>HeightedQuickUnionDS</strong> is asymptotically the same! Both are Θ(log(N)). And resulting code is more complicated with no performance gain.</p>
<h2 id="last-improvement-path-compression">Last Improvement: Path Compression</h2>
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-18.JPG" class="">
<p>See an example,</p>
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-19.JPG" class="">
<p>We could set that items like 15, 11, 5, and 1 etc., their parents are 0. This change won't influent the truth which set each item belongs to.</p>
<img src="/2021/02/22/CS61B-DSA/CS61B-14-Disjoint-Sets/14-20.JPG" class="">
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(15): Asymptotics II</title>
    <url>/2021/02/24/CS61B-DSA/CS61B-15-Asymptotics-II/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 15.</p>
<p>In this lecture, we will try to do some exercises to make us understand asymptotic analysis more deeply.</p>
<span id="more"></span>
<h2 id="example-1-and-2-for-loop">Example 1 and 2: For Loop</h2>
<img src="/2021/02/24/CS61B-DSA/CS61B-15-Asymptotics-II/15-0.JPG" class="">
<img src="/2021/02/24/CS61B-DSA/CS61B-15-Asymptotics-II/15-1.JPG" class="">
<p>The Answer is C.</p>
<img src="/2021/02/24/CS61B-DSA/CS61B-15-Asymptotics-II/15-2.JPG" class="">
<p>Runtime analysis often requires careful thought. <strong>CS70</strong> and especially <strong>CS170</strong> will cover this in much more detail.</p>
<h2 id="example-3-recursion">Example 3: Recursion</h2>
<img src="/2021/02/24/CS61B-DSA/CS61B-15-Asymptotics-II/15-3.JPG" class="">
<p>The answer is <strong>E</strong>. This answer is from intuition. How to get the answer from math?</p>
<img src="/2021/02/24/CS61B-DSA/CS61B-15-Asymptotics-II/15-4.JPG" class="">
<p>The answer is <strong>D</strong>.</p>
<img src="/2021/02/24/CS61B-DSA/CS61B-15-Asymptotics-II/15-5.JPG" class="">
<h2 id="example-4-binary-search">Example 4: Binary Search</h2>
<p>This is also an example of recursion.</p>
<img src="/2021/02/24/CS61B-DSA/CS61B-15-Asymptotics-II/15-6.JPG" class="">
<p>The answer is <strong>B</strong>, since problem size halves over and over until it gets down to 1.</p>
<p>How to do exact counting?</p>
<img src="/2021/02/24/CS61B-DSA/CS61B-15-Asymptotics-II/15-7.JPG" class="">
<img src="/2021/02/24/CS61B-DSA/CS61B-15-Asymptotics-II/15-8.JPG" class="">
<h2 id="example-5-merge-sort">Example 5: Merge Sort</h2>
<p>The last example we will see is <strong>Merge Sort</strong>.</p>
<p>First, what is merging?</p>
<p>Given two sorted arrays, the merge operation combines them into a single sorted array by successively copying the smallest item from the two arrays into a target array.</p>
<img src="/2021/02/24/CS61B-DSA/CS61B-15-Asymptotics-II/15-9.JPG" class="">
<p>The answer is <strong>C</strong>.</p>
<p>We can optimize selection sort by using merge operation. And the idea behind the process is called <strong>&quot;Divide and Conquer&quot;</strong>.</p>
<img src="/2021/02/24/CS61B-DSA/CS61B-15-Asymptotics-II/15-10.JPG" class="">
<img src="/2021/02/24/CS61B-DSA/CS61B-15-Asymptotics-II/15-11.JPG" class="">
<p>There is an interesting question: for an array of size N, what is the worst case runtime of Mergesort?</p>
<img src="/2021/02/24/CS61B-DSA/CS61B-15-Asymptotics-II/15-12.JPG" class="">
<p><strong>Nlog N</strong> is basically as good as <strong>N</strong>, and is vastly better than <strong>N^2</strong></p>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(16): ADTs, Sets, Maps. BSTs</title>
    <url>/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 16.</p>
<span id="more"></span>
<h2 id="abstrtact-data-types">Abstrtact Data Types</h2>
<p>Before explaining the term, first, let's review the difference between interfaces and their implementations we've learnt so far.</p>
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-1.JPG" class="">
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-2.JPG" class="">
<p>So, we can conclude that interface is abtract, and its implementations are distinct.</p>
<p><em>Define:</em> An <strong>Abstract Data Type (ADT)</strong> is defined only by its operations, not by its implementation.</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Deque ADT:</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> addFirst(Item x);</span><br><span class="line"><span class="bullet">-</span> addLast(Item x);</span><br><span class="line"><span class="bullet">-</span> boolean isEmpty();</span><br><span class="line"><span class="bullet">-</span> int size();</span><br><span class="line"><span class="bullet">-</span> printDeque();</span><br><span class="line"><span class="bullet">-</span> Item removeFirst();</span><br><span class="line"><span class="bullet">-</span> Item removeLast();</span><br><span class="line"><span class="bullet">-</span> Item get(int index);</span><br></pre></td></tr></table></figure>
<p>So, ArrayDeque and LinkedListDeque are implementations of the Deque ADT.</p>
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-3.JPG" class="">
<p>So, think about which implementation result in faster overall performance of stack? Linked List, or Array?</p>
<p>The answer is both of them are the same. Since no resizing for linked lists, so probably a lil faster.</p>
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-4.JPG" class="">
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-5.JPG" class="">
<h2 id="binary-search-trees">Binary Search Trees</h2>
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-6.JPG" class="">
<p>The proble here is that, even though this linked list set is ordered, we can't take advantage of it, searching is still slow.</p>
<p>One solution:</p>
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-7.JPG" class="">
<p>But this lecture's topic is BST, so we won't talk about the above method, we will talk about implementing BST by optimizting this ordered linked list set.</p>
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-8.JPG" class="">
<p>Do even better?</p>
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-9.JPG" class="">
<h3 id="definition">Definition</h3>
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-10.JPG" class="">
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-11.JPG" class="">
<p>One consequence of these rules: <strong>No duplicate keys allowed!</strong></p>
<h3 id="search-operation">Search Operation</h3>
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-12.JPG" class="">
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-13.JPG" class="">
<p>The answer is <strong>A</strong>, and the height of the tree is <code>log(N)</code>.</p>
<h3 id="insert-operation">Insert Operation</h3>
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-14.JPG" class="">
<h3 id="delete-operation">Delete Operation</h3>
<p>Deletion involves 3 Cases:</p>
<ul>
<li>Deletion key has no children.</li>
<li>Deletion key has one child.</li>
<li><p>Deletion key has two children.</p></li>
<li><p><strong>Case 1:</strong></p></li>
</ul>
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-15.JPG" class="">
<ul>
<li><strong>Case 2:</strong></li>
</ul>
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-16.JPG" class="">
<ul>
<li><strong>Case 3:</strong></li>
</ul>
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-17.JPG" class="">
<h2 id="summary">Summary</h2>
<p>Finally, let's talk about how to use the knowledge we've learnt so far to implement <strong>Set</strong> and <strong>Map</strong>.</p>
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-18.JPG" class="">
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-19.JPG" class="">
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-20.JPG" class="">
<h2 id="tips-for-bst-lab">Tips for BST Lab</h2>
<img src="/2021/02/26/CS61B-DSA/CS61B-16-ADTs-Sets-Maps-BSTs/16-21.JPG" class="">
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(17): B-Trees(2-3, 2-3-4 Trees)</title>
    <url>/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 17.</p>
<p>In today's lecture, we are gonna be primarily concerned with one thing: tree height.</p>
<span id="more"></span>
<h2 id="bst-again">BST Again</h2>
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-1.JPG" class="">
<p>The answer is B.</p>
<p>WE can see that performance of operations on spindly trees can be just as bad as a linked list!</p>
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-2.JPG" class="">
<hr />
<p>Big O is still a useful idea:</p>
<ul>
<li>Allows us to make simple blanket statements, e.g. can just say “binary search is O(log N)” instead of “binary search is Θ(log N) in the worst case”.</li>
<li>Sometimes don’t know the exact runtime, so use O to give an upper bound.
<ul>
<li>Example: Runtime for finding shortest route that goes to all world cities is O(2N)*. There might be a faster way, but nobody knows one yet.</li>
</ul></li>
<li>Easier to write proofs for Big O than Big Theta, e.g. finding runtime of mergesort, you can round up the number of items to the next power of 2 (see A level study guide problems for Asymptotics2 lecture). A little beyond the scope of our course</li>
</ul>
<hr />
<p>Let’s now turn to understanding the performance of BST operations.</p>
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-3.JPG" class="">
<ul>
<li>The “height” of a tree determines the worst case runtime to find a node.
<ul>
<li>Example: Worst case is contains(s), requires 5 comparisons (height + 1).</li>
</ul></li>
<li>The “average depth” determines the average case runtime to find a node.
<ul>
<li>Example: Average case is 3.35 comparisons (average depth + 1).</li>
</ul></li>
</ul>
<p>So an important question is <strong>What about Real World BSTs</strong>? One way to approximate this is to consider randomized BSTs.</p>
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-5.JPG" class="">
<h2 id="b-tree">B-Tree</h2>
<p>So, to avoid spindly trees, we're going to invent a very close cousin to the BST which is called <strong>B-Tree</strong>.</p>
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-6.JPG" class="">
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-7.JPG" class="">
<p>However, this idea also has a problem that maybe you will meet a leaf with high O(N).</p>
<h3 id="basix-insertion">Basix Insertion</h3>
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-8.JPG" class="">
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-9.JPG" class="">
<p>Before we continue, let's first do a quiz to exam your understanding.</p>
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-10.JPG" class="">
<p>What we've talked is leaves. Then, what about non-leaf nodes? What if a non-leaf node gets too full? Can we split that?</p>
<p>The answer is yes!</p>
<h3 id="split-non-leaf-nodes">Split Non-leaf Nodes</h3>
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-11.JPG" class="">
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-12.JPG" class="">
<p>Observation: <strong>Splitting-trees have perfect balance.</strong></p>
<ul>
<li>If we split the root, every node gets pushed down by exactly one level.</li>
<li>If we split a leaf node or internal node, the height doesn’t change.</li>
</ul>
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-13.JPG" class="">
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-14.JPG" class="">
<h3 id="runtime-analysis">Runtime Analysis</h3>
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-15.JPG" class="">
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-16.JPG" class="">
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-17.JPG" class="">
<p>Now, we've know that B-Tree is bushy, let's do runtime analysis.</p>
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-18.JPG" class="">
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-19.JPG" class="">
<h2 id="summary">Summary</h2>
<img src="/2021/03/01/CS61B-DSA/CS61B-17-B-Trees-2-3-2-3-4-Trees/17-20.JPG" class="">
<h2 id="extra-deletion">Extra: Deletion</h2>
<p>See <a href="https://docs.google.com/presentation/d/1NgaMi7IWs94sC_fhF7_UWx2O4LyPicvVJ9xkru9m2dU/edit#slide=id.g4fe50d0bd7_4_20">Extra Slides</a></p>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(19): Hashing</title>
    <url>/2021/03/05/CS61B-DSA/CS61B-19-Hashing/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 23.</p>
<span id="more"></span>
<p>What we have done by far?</p>
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-1.JPG" class="">
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-2.JPG" class="">
<p>Today we’ll see the answer to both of the questions above is yes.</p>
<h2 id="data-indexed-arrays">Data Indexed Arrays</h2>
<p>Let's start from a strange approach.</p>
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-3.JPG" class="">
<p>And what's nice about this idea is that the implementation is very simple.</p>
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-4.JPG" class="">
<p>However, this approach has an issue that it extremely wastes memory. Furthermore, since we want a data indexed set that can store arbitrary types ideally, so we also need some way to generalize beyond integers.</p>
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-5.JPG" class="">
<p>However, this approach has two problems,</p>
<ul>
<li>Collisions: other words start with 'C'.
<ul>
<li>set.contains('church') --&gt; true ❌</li>
</ul></li>
<li>Can't store other string which doesn't start with EN letters, such as &quot;98yawef&quot;.</li>
</ul>
<p>Let's try to tackle these problems.</p>
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-6.JPG" class="">
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-7.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Converts i-th character of string to a letter number. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">letterNum</span><span class="params">(String s, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ithChar = s.charAt(i);</span><br><span class="line">	<span class="keyword">if</span> ((ithChar &lt; <span class="string">&#x27;a&#x27;</span>) || (ithChar &gt; <span class="string">&#x27;z&#x27;</span>)) &#123; </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(); </span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> ithChar - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">englishToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> intRep = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i += <span class="number">1</span>) &#123;       	</span><br><span class="line">        intRep = intRep * <span class="number">27</span>;</span><br><span class="line">        intRep = intRep + letterNum(s, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> intRep;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="data-indexed-string-set">Data Indexed String Set</h2>
<p>The approach above can only use lowercase English characters, which is too restrictive. What if we want to store strings like “2pac” or “eGg!”? To understand what value we need to use for our base, let’s discuss briefly discuss the ASCII standard.</p>
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-8.JPG" class="">
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-9.JPG" class="">
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-10.JPG" class="">
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-11.JPG" class="">
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-12.JPG" class="">
<h2 id="hash-codes">Hash Codes</h2>
<p>In Java, the largest possible integer is 2,147,483,647.</p>
<ul>
<li>If you go over this limit, you overflow, starting back over at the smallest integer, which is -2,147,483,648.</li>
<li>In other words, the next number after 2,147,483,647 is -2,147,483,648.</li>
</ul>
<p>Because Java has a maximum integer, we will run into overflow even for short strings. And overflow can result in collisions, causing incorrect answers.</p>
<p>The official term for the number we’re computing is <strong>hash code</strong>.</p>
<ul>
<li>A hash code “projects a value from a set with many (or even an infinite number of) members to a value from a set with a fixed number of (fewer) members.”</li>
<li>Our target set is the set of Java integers, which is of size 4294967296.</li>
</ul>
<p>However, <em>Pigeonhole principle</em> tells us that if there are more than 4294967296 possible items, multiple items will share the same hash code. So, <strong>Collisions are inevitable!</strong></p>
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-13.JPG" class="">
<h2 id="hash-tables-handling-collisions">Hash Tables: Handling Collisions</h2>
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-14.JPG" class="">
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-15.JPG" class="">
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-16.JPG" class="">
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-17.JPG" class="">
<h2 id="hash-table-performance">Hash Table Performance</h2>
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-18.JPG" class="">
<p>The answer is, do not use a fixed number of buckets. Use an increasing number of buckets.</p>
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-19.JPG" class="">
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-20.JPG" class="">
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-21.JPG" class="">
<p>Even distribution of item is critical for good hash table performance. So we still need to discuss how to ensure even distribution (see lecture slide).</p>
<h2 id="hash-tables-in-java">Hash Tables in Java</h2>
<p><em>Python dictionaries are just hash tables in disguise.</em></p>
<p>In Java, implemented as <strong>java.util.HashMap</strong> and <strong>java.util.HashSet</strong>.</p>
<ul>
<li>compute an object’s hash code: <code>.hashCode()</code>
<ul>
<li>if an object's hash code is negative, use <code>Math.floorMod</code> method.</li>
</ul></li>
</ul>
<img src="/2021/03/05/CS61B-DSA/CS61B-19-Hashing/19-22.JPG" class="">
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(2): Define and Use Classes</title>
    <url>/2021/01/22/CS61B-DSA/CS61B-2-Define-and-Use-Classes/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 2.</p>
<span id="more"></span>
<h2 id="compilation">Compilation</h2>
<p>If you use an IDE(Integrated Development Environment), you can just click <code>run</code> button and the program will be executed directly. But let's see the process of executing Java code under the hood.</p>
<img src="/2021/01/22/CS61B-DSA/CS61B-2-Define-and-Use-Classes/2-1.JPG" class="">
<h2 id="defining-and-instantiating-classes">Defining and Instantiating Classes</h2>
<p>Let's define a Dog class without main method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bark!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Since there is no <code>main</code> method, we cannot run the above code directly. To run it, we use another class called <code>DogLauncher</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** The DogLauncher class will test drive the Dog class. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog.makeNoise();    <span class="comment">// Bark!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>However, in the real world, different dog yells differently. How to deal with it?</p>
<p>To make it more natural to represent the entire universe of dogs, we use the key feature of Java:</p>
<ul>
<li><strong>classes can contain not just functions (a.k.a. methods), but also data.</strong></li>
<li><strong>classes can be instantiated as objects.</strong></li>
</ul>
<p>The Dog class provides a bludeprint that all Dog objects will follow.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> weightInPounds;  <span class="comment">// instance variables</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** constructor: determines how to instantiate the class */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        weightInPounds = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// instance method, a.k.a non-static method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (weightInPounds &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yip!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (weightInPounds &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;bark!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;wooof!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** The DogLauncher class will test drive the Dog class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog(<span class="number">50</span>);    <span class="comment">// create instances of Dog</span></span><br><span class="line">        d.makeNoise();          <span class="comment">// wooof!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Notice the method <code>makeNoise</code> above is <strong>non-static</strong> now, meaning it should be invoked by an instance of the class.</p>
<hr />
<p>Key differences between static and non-static (a.k.a. instance) methods are:</p>
<ul>
<li>Static methods are invoked using the class name, e.g. Dog.makeNoise( );</li>
<li>Instance methods are invoked using an instance name, e.g. maya.makeNoise( );</li>
<li>Static methods can’t access “my” instance variables, because there is no “me”.
<ul>
<li>for example: <code>d.weightInPounds</code> is ok, <code>Dog.weightInPounds</code> will be wrong.</li>
</ul></li>
</ul>
<hr />
<p>Class can have a mix of static and non-static memebers (methods and variables), just like follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> weightInPounds;                          <span class="comment">// instance variables</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String binomen = <span class="string">&quot;Canis familiaris&quot;</span>;  <span class="comment">// static variable</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** constructor: determines how to instantiate the class */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        weightInPounds = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (weightInPounds &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yip!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (weightInPounds &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;bark!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;wooof!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title">maxDog</span><span class="params">(Dog d1, Dog d2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (d1.weightInPounds &gt; d2.weightInPounds) &#123;</span><br><span class="line">            <span class="keyword">return</span> d1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// non-static method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">maxDog</span><span class="params">(Dog d2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.weightInPounds &gt; d2.weightInPounds) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Although you can use <code>System.out.println(d.binomen)</code>, it's a bad style. <strong>Remeber, if you declare a static member, use class instead of instance to access it</strong>, like <code>System.out.println(Dog.binomen)</code> .</p>
<h2 id="arrays-of-objects">Arrays of Objects</h2>
<p>To create an array of objects, you need 2 steps:</p>
<ul>
<li>First use the <code>new</code> keyword to create the array.</li>
<li>Then use <code>new</code> again for each object that you want to put in the array.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dogs[] dogs = <span class="keyword">new</span> Dog[<span class="number">2</span>];</span><br><span class="line">dogs[<span class="number">0</span>] = <span class="keyword">new</span> Dog(<span class="number">8</span>);</span><br><span class="line">dogs[<span class="number">1</span>] = <span class="keyword">new</span> Dog(<span class="number">20</span>);</span><br><span class="line">dogs[<span class="number">0</span>].makeNoise();</span><br></pre></td></tr></table></figure>
<h2 id="exercise">Exercise</h2>
<p>Finally, let's see an exercise. Will the following program compile? If so, what will it print?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLoop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog smallDog = <span class="keyword">new</span> Dog(<span class="number">5</span>);</span><br><span class="line">        Dog mediumDog = <span class="keyword">new</span> Dog(<span class="number">25</span>);</span><br><span class="line">        Dog hugeDog = <span class="keyword">new</span> Dog(<span class="number">150</span>);</span><br><span class="line">        </span><br><span class="line">        Dog[] manyDogs = <span class="keyword">new</span> Dog[<span class="number">4</span>];</span><br><span class="line">        manyDogs[<span class="number">0</span>] = smallDog;</span><br><span class="line">        manyDogs[<span class="number">1</span>] = hugeDog;</span><br><span class="line">        manyDogs[<span class="number">2</span>] = <span class="keyword">new</span> Dog(<span class="number">130</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; manyDogs.length) &#123;</span><br><span class="line">            Dog.maxDog(manyDogs[i], mediumDog).makeNoise();</span><br><span class="line">            i = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The answer is:</p>
<ul>
<li>Yes, it can pass the compilation.</li>
<li>It'll print:
<ul>
<li>bark!</li>
<li>wooof!</li>
<li>wooof!</li>
<li><strong>NullPointerException</strong> (since Dog[3] is null)</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(3): Testing</title>
    <url>/2021/01/25/CS61B-DSA/CS61B-3-Testing/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 3.</p>
<p>In this lecture, we will discuss an important and realistic issue -- <strong>Testing</strong>.</p>
<span id="more"></span>
<p>🐹 Let's think about an important question - how do you know that your code works correctly?</p>
<ul>
<li>Pass Autograder. (in this lecture)</li>
<li>Run to see if the code works as your expect.</li>
<li><strong>Pass tests.</strong></li>
</ul>
<p>The last one is the most important one. In the real world, programmers believe their code works because of <strong>tests they write themselves.</strong></p>
<h2 id="ad-hoc-testing-vs.-junit">Ad Hoc Testing vs. JUnit</h2>
<p>Let's try to write a method that sorts arrays of Strings and promise its correctness.</p>
<img src="/2021/01/25/CS61B-DSA/CS61B-3-Testing/3-1.JPG" class="">
<p>With the old way, we will write the <code>sort</code> method, and use Autograder to verify its correctness. But with the new way which will be taught in this lecture, <strong>we will write sort method, as well as our own test for sort method.</strong></p>
<h3 id="ad-hoc-testing">Ad Hoc Testing</h3>
<p>We will start by writing <code>testSort</code> first! (Writing tests takes precedence over implementing function!)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Tests the Sort class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Tests the Sort.sort method */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;;</span><br><span class="line">        Sort.sort(input);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!input[i].equals(expected[i])) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Mismatch in position &quot;</span> + i +</span><br><span class="line">                    <span class="string">&quot;, expected: &quot;</span> + expected[i] + <span class="string">&quot;, but got: &quot;</span> + input[i]);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testSort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>While the single test above wasn't a ton of work, writing a suite of such ad hoc tests would be very tedious, as it would entail writing a bunch of different loops and print statements. In the next section, we'll see how the <code>org.junit</code> library saves us a lot of work.</p>
<h3 id="junit">JUnit</h3>
<img src="/2021/01/25/CS61B-DSA/CS61B-3-Testing/3-2.JPG" class="">
<p>Next, we will do testing with <code>JUnit</code> , and write tests and the sort method simultaneously.</p>
<p>We will implement <strong>Selection Sort</strong> in sort method. The idea of selection sort is as follows:</p>
<img src="/2021/01/25/CS61B-DSA/CS61B-3-Testing/3-3.JPG" class="" title="Selection Sort">
<p>The following is the final code. If you are curious about the process, please watch <a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD4ZxWDcuItnUElH2Pnneamc">lecture videos</a>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Tests the Sort class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSort</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** If you want to have your tests timeout after a certain amount of time </span></span><br><span class="line"><span class="comment">     * (to prevent infinite loops), you can declare your test like the following: */</span></span><br><span class="line">    <span class="meta">@Test(timeout = 1000)</span></span><br><span class="line">    <span class="comment">/** Tests the .findSmallest method. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindSmallest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> expected = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> actual = Sort.findSmallest(input, <span class="number">0</span>);</span><br><span class="line">        assertEquals(expected, actual);</span><br><span class="line"></span><br><span class="line">        String[] input2 = &#123;<span class="string">&quot;there&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;many&quot;</span>, <span class="string">&quot;pigs&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> expected2 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> actual2 = Sort.findSmallest(input2, <span class="number">2</span>);</span><br><span class="line">        assertEquals(expected2, actual2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">/** Tests the .swap method. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSwap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        Sort.swap(input, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        org.junit.Assert.assertArrayEquals(expected, input);</span><br><span class="line"></span><br><span class="line">        String[] input2 = &#123;<span class="string">&quot;there&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;many&quot;</span>, <span class="string">&quot;pigs&quot;</span>&#125;;</span><br><span class="line">        String[] expected2 = &#123;<span class="string">&quot;there&quot;</span>, <span class="string">&quot;pigs&quot;</span>, <span class="string">&quot;many&quot;</span>, <span class="string">&quot;are&quot;</span>&#125;;</span><br><span class="line">        Sort.swap(input2, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        assertArrayEquals(expected2, input2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">/** Tests the .sort method */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;;</span><br><span class="line">        Sort.sort(input);</span><br><span class="line"></span><br><span class="line">        assertArrayEquals(expected, input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Sorts strings destructively. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] x)</span> </span>&#123;</span><br><span class="line">        sort(x, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// OVERLOAD</span></span><br><span class="line">    <span class="comment">/** Sorts x starting at position start. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] x, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == x.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find the smallest item</span></span><br><span class="line">        <span class="keyword">int</span> smallestId = Sort.findSmallest(x, start);</span><br><span class="line">        <span class="comment">// Swap</span></span><br><span class="line">        swap(x, start, smallestId);</span><br><span class="line">        <span class="comment">// Selection sort the rest ... using recursion!</span></span><br><span class="line">        sort(x, start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the index of the smallest String in x, starting at start. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findSmallest</span><span class="params">(String[] x, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> smallestId = start;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; x.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = x[i].compareTo(x[smallestId]);</span><br><span class="line">            <span class="comment">// from the internet, if x[i] &lt; x[smallestId], cmp will be -1</span></span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                smallestId = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> smallestId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Swaps item at position a with item at position b. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(String[] x, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        String temp = x[a];</span><br><span class="line">        x[a] = x[b];</span><br><span class="line">        x[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="unit-testing">Unit Testing</h2>
<p>Unit Testing is a great way to rigorously test each method of your cod, and ultimately to ensure that you have a working project.</p>
<p>The “Unit” part of Unit Testing comes from the idea that you can break your program down into units, or the smallest testable part of an application. Therefore, Unit Testing enforces good code structure <strong>(each method should only do “One Thing”)</strong>, and allows you to consider all of the edge cases for each method and test for them individually.</p>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(4): References, Recursion, and Lists</title>
    <url>/2021/01/27/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 4.</p>
<span id="more"></span>
<p>In this lecture, we will learn about primitive types and reference types in Java, and use these concepts to construct our first data strucure - <strong>Linked Data Structures.</strong></p>
<p>Q1: What's your answer of the following question? Will the change to <code>b</code> affects <code>a</code>?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">class Walrus &#123;</span></span><br><span class="line"><span class="comment">    int weight;</span></span><br><span class="line"><span class="comment">    double tuskSize;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Walrus(int w, double t) &#123;</span></span><br><span class="line"><span class="comment">        weight = w;</span></span><br><span class="line"><span class="comment">        tuskSize = t;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">Walrus a = <span class="keyword">new</span> Walrus(<span class="number">1000</span>, <span class="number">8.3</span>);</span><br><span class="line">Walrus b;</span><br><span class="line">b = a;</span><br><span class="line">b.weight = <span class="number">5</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>
<p>The answer is yes! And the output is as follows:</p>
<blockquote>
<p>weight: 5, tusk size: 8.30 weight: 5, tusk size: 8.30</p>
</blockquote>
<p>Q2: Think about another question, will the change to <code>x</code> affect <code>y</code>?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">y = x;</span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;x is: &quot;</span> + x);</span><br><span class="line">System.out.println(<span class="string">&quot;y is: &quot;</span> + y);</span><br></pre></td></tr></table></figure>
<p>The answer is no, and x is 2 and y is 5.</p>
<p>You may wonder why. To clear up your confusion, let's explore data types in Java world.</p>
<h2 id="primitive-types">Primitive Types</h2>
<p>Anything you want to store on a computer is stored in so-called <code>memory</code>. And whatever the information you want to store, ultimately it will be encoded as a sequence of ones and zeros.</p>
<p>Actually, sometimes, two different things will be stored as the same bits sequence. For example, number <code>72</code> stored as 01001000, and letter <code>H</code> stored as 01001000, too.</p>
<p>So how computer interprets them correctly? The answer is <strong>the data type tells Java interpreter how to interpret it.</strong></p>
<p>There are 8 <strong>primitive types</strong> in Java: <strong>byte, short, int, long, float, double, boolean, char.</strong></p>
<img src="/2021/01/27/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/4-1.JPG" class="">
<h2 id="reference-types">Reference Types</h2>
<p>We already know that there are 8 primitive types in Java. Everything else, including array and string, is a <strong>reference type.</strong></p>
<img src="/2021/01/27/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/4-2.JPG" class="">
<img src="/2021/01/27/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/4-3.png" class="">
<img src="/2021/01/27/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/4-4.png" class="">
<h2 id="the-golden-rule-of-equals">The Golden Rule of Equals</h2>
<p>This is a very important rule and it helps us answer the above puzzles.</p>
<ul>
<li>Given variables x and y : <code>y = x</code> means <strong>copies all bits from x into y</strong>.</li>
</ul>
<p>And reference types also obey this rule. If x and y are reference types, after <code>y = x</code>, x and y will refer to the same object.</p>
<img src="/2021/01/27/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/4-5.JPG" class="">
<img src="/2021/01/27/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/4-6.JPG" class="">
<h2 id="exercise">Exercise</h2>
<p>Try to do the following exercise and make sure you understand everyting so far.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Does the call to doStuff(walrus, x) have an affect on walrus and/or main’s x?</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Walrus walrus = <span class="keyword">new</span> Walrus(<span class="number">3500</span>, <span class="number">10.5</span>);</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">9</span>;</span><br><span class="line">    doStuff(walrus, x);</span><br><span class="line">    System.out.println(walrus);</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doStuff</span><span class="params">(Walrus W, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    W.weight = W.weight - <span class="number">100</span>;</span><br><span class="line">    x = x - <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The answer is &quot;walrus will lose 100 lbs, but main’s x will not change&quot;.</p>
<h2 id="linked-data-structures">Linked Data Structures</h2>
<p>If you have used Python before, you must be familiar with <strong>list</strong>. Java has list too.</p>
<p>A <strong>list</strong> is going to be able to grow arbitrarily large, which is different from array. But you may wonder why list can have arbitrary size. To answer this question, you need to know the its data structure under the hood, i.e. <strong>Linked List</strong>.</p>
<p>We learn it by building it from scratch. Our goal is to build a linked list as follows,</p>
<img src="/2021/01/27/CS61B-DSA/CS61B-4-References-Recursion-and-Lists/4-7.JPG" class="">
<h3 id="create-linked-list">Create Linked List</h3>
<p>You can build it intuitively, even though it is awkward.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntList L = <span class="keyword">new</span> IntList();</span><br><span class="line">        L.first = <span class="number">5</span>;</span><br><span class="line">        L.rest = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        L.rest = <span class="keyword">new</span> IntList();</span><br><span class="line">        L.rest.first = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">        L.rest.rest = <span class="keyword">new</span> IntList();</span><br><span class="line">        L.rest.rest.first = <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can make things slightly better by using constructor.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntList</span><span class="params">(<span class="keyword">int</span> f, IntList r)</span> </span>&#123;</span><br><span class="line">        first = f;</span><br><span class="line">        rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntList L = <span class="keyword">new</span> IntList(<span class="number">15</span>, <span class="keyword">null</span>);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">10</span>, L);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">5</span>, L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="define-size-method">Define size( ) Method</h3>
<p>In Python, we use <code>len(list)</code> to get the size of list. In Java, we use <code>L.size()</code>. How can we implement it?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Return the size of the list using ... recursion! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rest == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="keyword">this</span>.rest.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Return the size of the list using ... iteration! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    IntList p = <span class="keyword">this</span>;   <span class="comment">// p: pointer</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">        p = p.rest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="define-get-method">Define get( ) Method</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Return the i-th item of the list using ... recursion! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rest.get(id - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Return the i-th item of the list using ... iteration! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeGet</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    IntList p = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">while</span> (id != <span class="number">0</span>) &#123;</span><br><span class="line">        p = p.rest;</span><br><span class="line">        id -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p.first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="final-code">Final code</h2>
<p>The following is the overall code we built in this lecture. It reveals the structure of linked list although it is hard to use. In the next lecture, we will improve our implementation of linked list. See you next time 🤠</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntList</span><span class="params">(<span class="keyword">int</span> f, IntList r)</span> </span>&#123;</span><br><span class="line">        first = f;</span><br><span class="line">        rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the size of the list using ... recursion! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rest == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="keyword">this</span>.rest.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the size of the list using ... iteration! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">        IntList p = <span class="keyword">this</span>;   <span class="comment">// p: pointer</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            size += <span class="number">1</span>;</span><br><span class="line">            p = p.rest;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the i-th item of the list using ... recursion! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rest.get(id - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the i-th item of the list using ... iteration! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeGet</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        IntList p = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">while</span> (id != <span class="number">0</span>) &#123;</span><br><span class="line">            p = p.rest;</span><br><span class="line">            id -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntList L = <span class="keyword">new</span> IntList(<span class="number">15</span>, <span class="keyword">null</span>);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">10</span>, L);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">5</span>, L);</span><br><span class="line"></span><br><span class="line">        System.out.println(L.size());</span><br><span class="line">        System.out.println(L.iterativeSize());</span><br><span class="line"></span><br><span class="line">        System.out.println(L.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(L.iterativeGet(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(5): SLLists, Nested Classes, Sentinel Nodes</title>
    <url>/2021/01/29/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 5.</p>
<span id="more"></span>
<p>Review the <code>IntList</code> we implemented in lecture 4. We call it &quot;naked linked list&quot;.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntList</span><span class="params">(<span class="keyword">int</span> f, IntList r)</span> </span>&#123;</span><br><span class="line">        first = f;</span><br><span class="line">        rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>While functional, above “naked” linked lists are hard to use.</p>
<p>Inspired by our experience with the IntList, we'll now build a new class called <code>SLList</code>, which much more closely resembles the list implementations that programmers use in modern languages. We'll do so by iteratively adding a sequence of improvements.</p>
<h2 id="improvement-1-introducing-the-sllist-bureaucracy">Improvement 1: Introducing the SLList Bureaucracy</h2>
<p>Firstly, rename the IntList class and remove all methods.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">public</span> IntNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">        item = i;</span><br><span class="line">        next = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then, create a class called <code>SLList</code>. Let IntNode be its instance variable, and add &quot;addFirst&quot; and &quot;getFirst&quot; methods to it.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** An SLList is a list of integers, which hides the terrible</span></span><br><span class="line"><span class="comment"> * truth of the nakedness within.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> IntNode first;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SLList L = <span class="keyword">new</span> SLList(<span class="number">15</span>);  <span class="comment">// creates a list of one integer, namely 15</span></span><br><span class="line">        L.addFirst(<span class="number">10</span>);</span><br><span class="line">        L.addFirst(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(L.getFirst());  <span class="comment">// 5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Until now, I bet you have already realize what's the strength of SLList - it is easier to instantiate and use.</p>
<p>Actually, it is the data structure that makes it easier to use.</p>
<img src="/2021/01/29/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/5-1.JPG" class="">
<h2 id="improvement-2-the-private-keyword">Improvement 2: The private Keyword</h2>
<p>However, the above implementation has some flaws. One of them is the abuse of <strong>public</strong>. For example, users of this class might to do some unexpected operations, like</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SLList L = <span class="keyword">new</span> SLList(<span class="number">15</span>);</span><br><span class="line">L.addFirst(<span class="number">10</span>);</span><br><span class="line">L.first.next.next = L.first.next;</span><br></pre></td></tr></table></figure>
<img src="/2021/01/29/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/5-2.JPG" class="" title="Result of Bad Operations">
<p>We can prevent programmers from making such mistakes with the <strong>private</strong> keyword. The private keyword restricts access, it prevents code in other classes from using members (or constructors) of a class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntNode first;  <span class="comment">// public --&gt; private</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="improvement-3-nested-classes">Improvement 3: Nested Classes</h2>
<p>The IntNode class provides nothing but just be subordinate to SLList. We can make it as a nested class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> IntNode first; </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">      first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">   &#125; </span><br><span class="line">   </span><br><span class="line">   <span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<p>Here, we use <code>private</code> and <code>static</code> modifier.</p>
<ul>
<li><strong>private:</strong> if other external classes never use the nested class, declare it private</li>
<li><strong>static:</strong> if the nested class never uses any instance variables or methods of the outer class, declare it static (results in a minor savings of memory)</li>
</ul>
<h2 id="improvement-4-recursive-private-helper-methods">Improvement 4: Recursive private helper Methods</h2>
<p>To motivate our remaining improvements, and to give more functionality to our SLList class, let's add <code>.addLast</code> and <code>.size</code> methods.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    IntNode p = first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns the size of list using ... recursion! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    the following code will cause error, since IntNode doesn&#x27;t has the size method.</span></span><br><span class="line"><span class="comment">    So we need a helper method.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    IntNode p = first;</span></span><br><span class="line"><span class="comment">    if (p == null) &#123;</span></span><br><span class="line"><span class="comment">        return 0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 1 + p.next.size();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> size(first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// helper method</span></span><br><span class="line"><span class="comment">/** Returns the size of the list starting at IntNode p. */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(IntNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + size(p.next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns the size of list using ... iteration! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> totalSize = <span class="number">0</span>;</span><br><span class="line">    IntNode p = first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        totalSize += <span class="number">1</span>;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> totalSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You may notice we have two <code>.size</code> methods, one has parmaters while another does not have. We call it <strong>Overload(重载)</strong>.</p>
<h2 id="improvement-5-caching">Improvement 5: Caching</h2>
<p>There are some issues of <code>addLast</code> and <code>size</code> methods - <strong>both of them are pretty slow.</strong></p>
<p>Can you figure out why?</p>
<blockquote>
<p>It is because of the need of traversing the whole linked-list.</p>
</blockquote>
<p>In this lecture, we will focus on modifying size method so that the execution time of it is always fast, and in the next lecture, we will get inspiration for quick addLast method.</p>
<p>Our solution is maintaining a special size variable that <code>caches</code> the size of the list.</p>
<blockquote>
<p>Caching(缓存): putting aside data to speed up retrieval.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> IntNode first;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, first);</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        IntNode p = first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the size of list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/01/29/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/5-3.JPG" class="">
<h2 id="improvement-6-sentinel-nodes">Improvement 6: Sentinel Nodes</h2>
<img src="/2021/01/29/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/5-4.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add a new constructor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Creates an empty SLList. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    first = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Seems pretty good, right?</p>
<p>Well, actually there is a subtle bug, can you find it?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// If you create an empty SLList, then using addLast, the code will crash.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    IntNode p = first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;  <span class="comment">// Error: first is null and doesn&#x27;t have .next</span></span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Let's do our last modification of SLList to fix this bug.</p>
<h3 id="naive-solution">Naive Solution</h3>
<p>One possible solution is adding a special case for the empty list.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  size += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (first == <span class="keyword">null</span>) &#123;</span><br><span class="line">    first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  IntNode p = first;</span><br><span class="line">  <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">    p = p.next;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this case, it's ok. But in some other complex cases, such as tree data structure, it will cause vast amount of complexity, and make the code ugly. 🤮</p>
<p>There are better ways!</p>
<h3 id="sentinel-solution">Sentinel Solution</h3>
<p>We avoid special cases by <strong>making all SLLists the same!</strong></p>
<img src="/2021/01/29/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/5-5.JPG" class="">
<p>The following is our final implementation of <code>SLList</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** An SLList is a list of integers, which hides the terrible</span></span><br><span class="line"><span class="comment"> * truth of the nakedness within.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="comment">// attention: inner class should have private members</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">private</span> IntNode next;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* The first item (if it exits) is always at sentinel.next ... invariants */</span></span><br><span class="line">    <span class="keyword">private</span> IntNode sentinel;  <span class="comment">// rename first to be sentinel</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates an empty SLList. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sentinel node’s item needs to be an integer, </span></span><br><span class="line">        <span class="comment">// but doesn’t matter what value we pick.</span></span><br><span class="line">        sentinel = <span class="keyword">new</span> IntNode(-<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> IntNode(-<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> IntNode(x, sentinel.next);</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sentinel.next.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        IntNode p = sentinel;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the size of list using ... recursion! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/01/29/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/5-6.JPG" class="" title="Empty SLList">
<img src="/2021/01/29/CS61B-DSA/CS61B-5-SLLists-Nested-Classes-Sentinel-Nodes/5-7.JPG" class="" title="Non-empty SLList">
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(6): DLLists, Arrays</title>
    <url>/2021/02/01/CS61B-DSA/CS61B-6-DLLists-Arrays/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 6.</p>
<span id="more"></span>
<p>In the previous lecture, we built <code>SLLit</code> by adding a extra layer (<code>sentinel</code>) on the naked data structure IntNode.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** An SLList is a list of integers, which hides the terrible</span></span><br><span class="line"><span class="comment"> * truth of the nakedness within.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* The first item (if it exits) is at sentinel.next */</span></span><br><span class="line">    <span class="keyword">private</span> IntNode sentinel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates an empty SLList. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sentinel node’s item needs to be some integer, </span></span><br><span class="line">        <span class="comment">// but doesn’t matter what value we pick.</span></span><br><span class="line">        sentinel = <span class="keyword">new</span> IntNode(-<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> IntNode(-<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> IntNode(x, sentinel.next);</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sentinel.next.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        IntNode p = sentinel;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the size of list using ... recursion! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>However, SLList has some limitations, one of them is inserting at the back of an SLList is much slower than the front. This is because under the hood, to add an item at the end of the SLList, it needs to iterate through all of the items.</p>
<p>How could we modify our list data structure so that addLast is also fast?</p>
<h2 id="dllist-doubly-linked-list">DLList: Doubly Linked List</h2>
<img src="/2021/02/01/CS61B-DSA/CS61B-6-DLLists-Arrays/6-1.JPG" class="">
<img src="/2021/02/01/CS61B-DSA/CS61B-6-DLLists-Arrays/6-2.JPG" class="">
<p>While fast, adding <code>.last</code> and <code>.prev</code> introduces lots of special cases. To avoid these, either:</p>
<ul>
<li>Add an additional <code>sentBack</code> sentinel at the end of the list.</li>
<li><strong>Make your linked list circular (highly recommened for project 1)</strong>, with a single sentinel in the middle.</li>
</ul>
<img src="/2021/02/01/CS61B-DSA/CS61B-6-DLLists-Arrays/6-3.JPG" class="" title="Method 1: Add Additional Sentinel">
<img src="/2021/02/01/CS61B-DSA/CS61B-6-DLLists-Arrays/6-4.JPG" class="" title="Method 2: Make Linked List Circular">
<p>The implementation process of DLList will be completed in Proj1.</p>
<p>TODO: add link Link: <a href="">click here</a></p>
<h2 id="generic-lists">Generic Lists</h2>
<p>Until now, our <code>SLList</code> and <code>DLList</code> only support Integers. To make our list better, one important task it to make it generic.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Generic SLList */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span>&lt;<span class="title">Type</span>&gt; </span>&#123;	</span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">StuffNode</span> </span>&#123;</span><br><span class="line">		<span class="keyword">public</span> Type item;</span><br><span class="line">		<span class="keyword">public</span> StuffNode next;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">StuffNode</span><span class="params">(Type i, StuffNode n)</span> </span>&#123;</span><br><span class="line">			item = i;</span><br><span class="line">			next = n;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> StuffNode first;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line">		first = <span class="keyword">new</span> StuffNode(x, <span class="keyword">null</span>);</span><br><span class="line">		size = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line"> 		first = <span class="keyword">new</span> StuffNode(x, first);</span><br><span class="line"> 		size += <span class="number">1</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> Type <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> 		<span class="keyword">return</span> first.item; 		</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line"> 		size += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"> 		StuffNode p = first;</span><br><span class="line"></span><br><span class="line"> 		<span class="comment">/* Move p until it reaches the end of the list. */</span></span><br><span class="line"> 		<span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line"> 			p = p.next;</span><br><span class="line"> 		&#125;</span><br><span class="line"></span><br><span class="line"> 		p.next = <span class="keyword">new</span> StuffNode(x, <span class="keyword">null</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> 		<span class="keyword">return</span> size;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLListLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SLList&lt;String&gt; L = <span class="keyword">new</span> SLList&lt;&gt;(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        L.addFirst(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SLList&lt;Integer&gt; L2 = <span class="keyword">new</span> SLList&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        L.addFirst(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">When declaring or instantiating your data structure, use the reference type.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. int: Integer</span></span><br><span class="line"><span class="comment">2. double: Double</span></span><br><span class="line"><span class="comment">3. char: Character</span></span><br><span class="line"><span class="comment">4. boolean: Boolean</span></span><br><span class="line"><span class="comment">4. long: Long</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="arrays">Arrays</h2>
<p>Try to understand the following code. I think it is easy for you to except the last line.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] z = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] x, y;</span><br><span class="line"> </span><br><span class="line">x = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">y = x;</span><br><span class="line">x = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">99</span>&#125;;</span><br><span class="line">y = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">z = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> xL = x.length;</span><br><span class="line"> </span><br><span class="line">String[] s = <span class="keyword">new</span> String[<span class="number">6</span>];</span><br><span class="line">s[<span class="number">4</span>] = <span class="string">&quot;ketchup&quot;</span>;</span><br><span class="line">s[x[<span class="number">3</span>] - x[<span class="number">1</span>]] = <span class="string">&quot;muffins&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[] b = &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;;  <span class="comment">// can omit the new if you are also declaring a variable</span></span><br><span class="line">System.arraycopy(b, <span class="number">0</span>, x, <span class="number">3</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<img src="/2021/02/01/CS61B-DSA/CS61B-6-DLLists-Arrays/6-5.JPG" class="">
<p>To understand array deeper, let’s take a look at 2-dimensional arrays in Java. Try to understand the following code.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] pascalsTriangle;</span><br><span class="line">pascalsTriangle = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line"><span class="keyword">int</span>[] rowZero = pascalsTriangle[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">pascalsTriangle[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;;</span><br><span class="line">pascalsTriangle[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">pascalsTriangle[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">pascalsTriangle[<span class="number">3</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] rowTwo = pascalsTriangle[<span class="number">2</span>];</span><br><span class="line">rowTwo[<span class="number">1</span>] = -<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] matrix;</span><br><span class="line">matrix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line">matrix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] pascalAgain = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                              	&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>This is the result:</p>
<img src="/2021/02/01/CS61B-DSA/CS61B-6-DLLists-Arrays/6-6.JPG" class="">
<h2 id="exercise-2d-arrays">Exercise: 2D Arrays</h2>
<p>What will be the value of x[0][0] and w[0][0] when the code shown completes?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] x = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] z = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">z[<span class="number">0</span>] = x[<span class="number">0</span>];</span><br><span class="line">z[<span class="number">0</span>][<span class="number">0</span>] = -z[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] w = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">System.arraycopy(x[<span class="number">0</span>], <span class="number">0</span>, w[<span class="number">0</span>], <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">w[<span class="number">0</span>][<span class="number">0</span>] = -w[<span class="number">0</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<p>🐹 Solution:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x[<span class="number">0</span>][<span class="number">0</span>]: -<span class="number">1</span></span><br><span class="line">w[<span class="number">0</span>][<span class="number">0</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(7): ALists, Resizing, vs. SLists</title>
    <url>/2021/02/03/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 7.</p>
<p>We have already seen how we can harness recursive class definition to build an expandable list, the <code>IntList</code>, the <code>SLList</code>, and the <code>DLList</code>.</p>
<p>Now let us stop continuing it and try to use another basic data structure, array, to build list, which is called <code>AList</code>. You will find these two kinds of lists have differnet pros and cons.</p>
<span id="more"></span>
<h2 id="alist-array-based-list">AList: Array-based List</h2>
<p>The data structure of <code>DLList</code> we have talked in the last lecture is pretty beautiful. And it also has fast operations like a<code>ddFirst</code>, <code>addLast</code> etc. So why should we try to build AList?</p>
<p>Let's talk about a limitation to lists.</p>
<img src="/2021/02/03/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-1.JPG" class="">
<p>The reason why we use array to prove the limitation is that <strong>retrieval from any position of any array is very fast, and it is independent of array size.</strong></p>
<h3 id="naive-alist">1. Naive AList</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Invariants:</span></span><br><span class="line"><span class="comment"> addLast: The next item we want to add, will go into position &quot;size&quot;</span></span><br><span class="line"><span class="comment"> getLast: The item we want to return is in position &quot;size - 1&quot;</span></span><br><span class="line"><span class="comment"> size: The number of items in the list should be &quot;size&quot;.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates an empty list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Inserts X into the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        items[size] = x;</span><br><span class="line">        size = size + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the item from the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Gets the ith item in the list (0 is the front). */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the number of items in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="removelast-method">2. removeLast() method</h3>
<img src="/2021/02/03/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-2.JPG" class="">
<p>The answer is we only need to change size.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Deletes item from back of the list and returns deleted item. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = getLast();</span><br><span class="line">    <span class="comment">// items[size - 1] = null;   yeah, but unnecessary</span></span><br><span class="line">    size = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="resizing-arrays">3. Resizing Arrays</h3>
<img src="/2021/02/03/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-3.JPG" class="">
<p><strong>When the array gets too full, just make a new array!</strong></p>
<p>🦉 <strong>Resizing process:</strong></p>
<ul>
<li>int[ ] a = new int[newSize]</li>
<li>System.arraycopy( )</li>
<li>a[size] = targetNum</li>
<li>items = a</li>
<li>size += 1</li>
</ul>
<p>Let's implement this process.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];</span><br><span class="line">    System.arraycopy(items, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">    items = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">        resize(size + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    items[size] = x;</span><br><span class="line">    size = size + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="performance-problem-1">Performance Problem 1</h4>
<p>The big issue here is that <strong>how to set a proper capacity as the parameter of resize method?</strong></p>
<p>Do an experiment to test the speed of resizing when using two different strategies.</p>
<ul>
<li>one is <strong>resize(size + 10)</strong></li>
<li>another is <strong>resize(2 * size)</strong></li>
</ul>
<img src="/2021/02/03/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-5.JPG" class="">
<img src="/2021/02/03/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-4.JPG" class="">
<h4 id="performance-problem-2">Performance Problem 2</h4>
<p>There is another performance problem. Suppose we have a very rare situation occur which causes us to: - Insert 1,000,000,000 items. - Then remove 990,000,000 items.</p>
<p>Our data structure will handle this spike of events as well as it could, but afterwards there is a problem - <strong>a waste of space!</strong></p>
<img src="/2021/02/03/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-6.JPG" class="">
<h2 id="final-code">Final Code</h2>
<p>Finally, let's make AList generic, and we will get the following code.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Item[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates an empty list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = (Item[]) <span class="keyword">new</span> Object[<span class="number">100</span>];   <span class="comment">// Java Syntax: casting</span></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Resizes the underlying array to the target capacity. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        Item[] a = (Item[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        System.arraycopy(items, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        items = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Inserts X into the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">            resize(size + <span class="number">10</span>);</span><br><span class="line">            <span class="comment">// resize(size * 2);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        items[size] = x;</span><br><span class="line">        size = size + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the item from the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Gets the ith item in the list (0 is the front). */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the number of items in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Deletes item from back of the list and</span></span><br><span class="line"><span class="comment">      * returns deleted item. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item x = getLast();</span><br><span class="line">        items[size - <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        size = size - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="loitering">Loitering</h2>
<img src="/2021/02/03/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-7.JPG" class="">
<img src="/2021/02/03/CS61B-DSA/CS61B-7-ALists-Resizing-vs-SLists/7-8.JPG" class="">
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(8): Inheritance, Implements</title>
    <url>/2021/02/05/CS61B-DSA/CS61B-8-Inheritance-Implements/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 8.</p>
<span id="more"></span>
<p>Recall <code>SLList</code> and <code>AList</code> we have implemented before. They have many same methods (signatures), althoug their data structures under the hood are totally different.</p>
<p>Now, suppose we’re writing a library to manipulate lists of words. We might want to write a function that finds the longest word from a list of words.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longest</span><span class="params">(SLList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list.get(maxId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SLList&lt;String&gt; L = <span class="keyword">new</span> SLList&lt;&gt;();</span><br><span class="line">        L.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L));   <span class="comment">// watching</span></span><br><span class="line"></span><br><span class="line">        AList&lt;String&gt; L2 = <span class="keyword">new</span> AList&lt;&gt;();</span><br><span class="line">        L2.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L2));   <span class="comment">// Error: we can&#x27;t give AList to longest method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Read the code above, I think you should understand why there is an error when calling <code>longest</code> method on an AList.</p>
<p>Now, we want the <code>longest</code> method can handle AList. What should we do?</p>
<p>To sovle this problem, you should know the knowledge of <code>interface</code> and <code>inheritance</code>.</p>
<h2 id="hypernyms-hyponyms-and-interface-inheritance">Hypernyms, Hyponyms, and Interface Inheritance</h2>
<ul>
<li>Hypernyms(上位词) represents abstraction.</li>
<li>Hyponyms(下位词) represents details.</li>
</ul>
<img src="/2021/02/05/CS61B-DSA/CS61B-8-Inheritance-Implements/8-1.JPG" class="">
<p>Java can help us capture this hierarchy.</p>
<img src="/2021/02/05/CS61B-DSA/CS61B-8-Inheritance-Implements/8-2.JPG" class="">
<img src="/2021/02/05/CS61B-DSA/CS61B-8-Inheritance-Implements/8-3.JPG" class="">
<img src="/2021/02/05/CS61B-DSA/CS61B-8-Inheritance-Implements/8-4.JPG" class="">
<p>Now, turn back to the previous problem. We can solve it now.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longest</span><span class="params">(List61B&lt;String&gt; list)</span> </span>&#123;  <span class="comment">// &lt;-- change here</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list.get(maxId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SLList&lt;String&gt; L = <span class="keyword">new</span> SLList&lt;&gt;();</span><br><span class="line">        L.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L));   <span class="comment">// watching</span></span><br><span class="line"></span><br><span class="line">        AList&lt;String&gt; L2 = <span class="keyword">new</span> AList&lt;&gt;();</span><br><span class="line">        L2.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L2));   <span class="comment">// watching</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="overriding-vs.-overloading">Overriding vs. Overloading</h2>
<ul>
<li>Overriding: 重写</li>
<li>Overloading: 重载</li>
</ul>
<img src="/2021/02/05/CS61B-DSA/CS61B-8-Inheritance-Implements/8-5.JPG" class="">
<h2 id="once-again-interface-inheritance">Once Again: Interface Inheritance</h2>
<img src="/2021/02/05/CS61B-DSA/CS61B-8-Inheritance-Implements/8-6.JPG" class="">
<p>In the last section, we said that subclass must override all methods of interface, otherwise it will fail to compile. In fact, this is not accurate.</p>
<img src="/2021/02/05/CS61B-DSA/CS61B-8-Inheritance-Implements/8-7.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List61B</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item x)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item y)</span></span>;</span><br><span class="line">   </span><br><span class="line">    <span class="function">Item <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Item <span class="title">getLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Item <span class="title">removeLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Item <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item x, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i += <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(get(i) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If you don’t like a default method, you absolutely can override it. For example, the default <code>print</code> method is inefficient for <code>SLList</code>, so we override it:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">List61B</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * the default print method is inefficient for SLList, so we override it. </span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Node p = sentinel.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">            System.out.print(p.item + <span class="string">&quot; &quot;</span>);     	</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="static-and-dynamic-type-dynamic-method-selection">Static and Dynamic Type, Dynamic Method Selection</h2>
<img src="/2021/02/05/CS61B-DSA/CS61B-8-Inheritance-Implements/8-8.JPG" class="">

<p>To wrap up above materials, let's do a puzzle.</p>
<p>Suppose we have classes defined below. Try to predict the results.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;hello animal&quot;</span>); &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;sniff animal&quot;</span>); &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">flatter</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool animal&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;dog sniff animal&quot;</span>); &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flatter</span><span class="params">(Dog a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool dog&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">        a.greet(d);</span><br><span class="line">        a.sniff(d);</span><br><span class="line">        d.flatter(d);</span><br><span class="line">        a.flatter(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Add annotation to the above code, and also give the answer.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">(Animal a)</span> </span>&#123; </span><br><span class="line">        print(<span class="string">&quot;hello animal&quot;</span>); &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;sniff animal&quot;</span>); &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">flatter</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool animal&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;dog sniff animal&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Overload</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flatter</span><span class="params">(Dog a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool dog&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Dog();  <span class="comment">// static type:Animal; dynamic type: Dog</span></span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog();  <span class="comment">// static type &amp; dynamic type: Dog</span></span><br><span class="line">        </span><br><span class="line">        a.greet(d);  <span class="comment">// hello animal</span></span><br><span class="line">        a.sniff(d);  <span class="comment">// dog sniff animal</span></span><br><span class="line">        d.flatter(d);  <span class="comment">// u r cool dog</span></span><br><span class="line">        a.flatter(d);  <span class="comment">// u r cool animal</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The shocking answer is the last one, i.e. <code>a.flatter(d);</code> . Why?</p>
<p>Look at the above slide, if a variable has different compile-time type and run-time type, if and only if run-time type <strong>overrides</strong> the method, run-time type's method will be used instead. Otherwise, it still use compile-time type's method.</p>
<p><em>It try to use dynamic type's method. However, since the method is not overwritten in dynamic type, it will just go one step higher in the hierarchy, i.e. jump into static type and find the method, then use it.</em></p>
<p>In the above code, <code>flatter</code> method in Dog class does not override, it is just overload!</p>
<p>🦔 Another viewpoint: link <a href="https://docs.google.com/presentation/d/1EUOpd9NXq28eEUqQMZoo_rRpxw8EekQ2LEp61U9bnDc/edit#slide=id.gb943cfb275_0_158">here</a></p>
<h2 id="real-world">Real World</h2>
<p>Finally, let's go back to the real world, and see the Java's built in List interface and class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Examples</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        L.add(<span class="number">5</span>);</span><br><span class="line">        L.add(<span class="number">10</span>);</span><br><span class="line">        L.add(<span class="number">15</span>);</span><br><span class="line">        System.out.println(L);  <span class="comment">// L.toString()</span></span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; L2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(9): Extends, Casting, HoFs</title>
    <url>/2021/02/08/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 9.</p>
<p>🌳 In this lecture, we will talk more about implementation inheritance.</p>
<span id="more"></span>
<h2 id="implementation-inheritance-extends">Implementation Inheritance: Extends</h2>
<p>In the last lecture, we talked about <strong>implements</strong> keyword. When a class is a hyponym of an interface, we used implements.</p>
<p>If you want one class to be a hyponym of another <em>class</em>, you use <strong>extends</strong>.</p>
<img src="/2021/02/08/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-1.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* SLList, but with additional rotateRight operation. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotatingSLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">extends</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Todo: Implement RotatingSLList such that code compiles </span></span><br><span class="line"><span class="comment">     * and outputs correct result.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Rotates list to the right. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item x = removeLast();</span><br><span class="line">        addFirst(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RotatingSLList&lt;Integer&gt; rel = <span class="keyword">new</span> RotatingSLList&lt;&gt;();</span><br><span class="line">        rel.addLast(<span class="number">10</span>);</span><br><span class="line">        rel.addLast(<span class="number">11</span>);</span><br><span class="line">        rel.addLast(<span class="number">12</span>);</span><br><span class="line">        rel.addLast(<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">        rel.rotateRight();</span><br><span class="line">        rel.print();  <span class="comment">// 13, 10, 11, 12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2021/02/08/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-2.JPG" class="">
<p>Then, take a look another example. Suppose we want to build an SLList called <strong>VengefulSLList</strong> that:</p>
<ul>
<li>Remembers all Items that have been destroyed by removeLast.</li>
<li>Has an additional method <code>printLostItems()</code>, which prints all deleted items.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VengefulSLList</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	VengefulSLList&lt;Integer&gt; vs1 = <span class="keyword">new</span> VengefulSLList&lt;Integer&gt;();</span><br><span class="line">    	vs1.addLast(<span class="number">1</span>);</span><br><span class="line">    	vs1.addLast(<span class="number">5</span>);</span><br><span class="line">    	vs1.addLast(<span class="number">10</span>);</span><br><span class="line">    	vs1.addLast(<span class="number">13</span>);      <span class="comment">/* [1, 5, 10, 13] */</span></span><br><span class="line">    	vs1.removeLast();     <span class="comment">/* 13 gets deleted. */</span></span><br><span class="line">    	vs1.removeLast();     <span class="comment">/* 10 gets deleted. */</span></span><br><span class="line">    	System.out.print(<span class="string">&quot;The fallen are: &quot;</span>);</span><br><span class="line">    	vs1.printLostItems(); <span class="comment">/* Should print 10 and 13. */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>What should we do?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** SList with additional operation printLostItems() which prints all items</span></span><br><span class="line"><span class="comment">  * that have ever been deleted. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VengefulSLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">extends</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    SLList&lt;Item&gt; deletedItems;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// super();</span></span><br><span class="line">        deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(x);</span><br><span class="line">        deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item x = <span class="keyword">super</span>.removeLast();</span><br><span class="line">        deletedItems.addLast(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Prints deleted items. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLostItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        deletedItems.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="constructor-behavior">Constructor Behavior</h2>
<img src="/2021/02/08/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-3.JPG" class="">
<img src="/2021/02/08/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-4.JPG" class="">
<img src="/2021/02/08/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-5.JPG" class="">
<p>❗❗❗ Important Note: both <code>implements</code> and <code>extends</code> should only be used for <strong>is-a</strong> relationship instead of <strong>has-a</strong> relationship.</p>
<h2 id="encapsulation">Encapsulation</h2>
<img src="/2021/02/08/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-6.JPG" class="">
<p><strong>Module:</strong> A set of methods that work together as a whole to perform some task or set of related tasks.</p>
<p>A module is said to be <strong>encapsulated</strong> if its implementation is completely hidden, and it can be accessed only through a documented interface.</p>
<p>🌴 Reminder: You should use the idea of encapsulation to guide yourself when completing project1b, and other large project.</p>
<h2 id="type-checking-and-casting">Type Checking and Casting</h2>
<img src="/2021/02/08/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-7.JPG" class="">
<img src="/2021/02/08/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-8.JPG" class="">
<h2 id="higher-order-functions">Higher Order Functions</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example of HoF</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tenX</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> * x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_twice</span>(<span class="params">f, x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f(f(x))</span><br><span class="line"></span><br><span class="line">do_twice(tenX, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>HoFs is powerful and useful. However, before Java7 and earlier, there is a fundamental issue that <strong>memory boxes(variable) cannot contain pointers to functions.</strong> So if you want to define HoFs in Java7 or earlier, you should use interface instead.</p>
<img src="/2021/02/08/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-9.JPG" class="">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Represent a function that takes in an integer, and returns an integer. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IntUnaryFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TenX</span> <span class="keyword">implements</span> <span class="title">IntUnaryFunction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/** Returns ten times its argument. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> * x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HoFDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_twice</span><span class="params">(IntUnaryFunction f, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f.apply(f.apply(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntUnaryFunction tenX = <span class="keyword">new</span> TenX();</span><br><span class="line">        System.out.println(do_twice(tenX, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="summary">Summary</h2>
<img src="/2021/02/08/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9-10.JPG" class="">
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>Lab1: 实验报告</title>
    <url>/2021/01/24/CS61B-DSA/Lab1-%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<p>本文是CS61B第1周的实验报告。</p>
<span id="more"></span>
<p>这周的实验很简单，主要是对自己的个人</p>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>Project0: 2048 Game</title>
    <url>/2021/01/30/CS61B-DSA/Project0-2048-Game/</url>
    <content><![CDATA[<h2 id="overview">Overview</h2>
<p>This is the first project of CS61B, 2021sp version.</p>
<p>The goal of this project is writing a program imitating the game &quot;2048&quot;. If you have never played this game before, you can try it by clicking this <a href="https://play2048.co/">link</a>.</p>
<p>With this project, we can get familiar with Java and the various tools, such as IntelliJ IDE and JUnit. Our task is building the game logic, and using JUnit test to check our correctness. From my perspective, this is not a too hard project since we've been provided with a great deal of start code, though understand them maybe a little hard and time-consuming.</p>
<p>Try it, I bet you feel this project interesting! 🚀</p>
<p>🐹 LINK: <a href="https://sp21.datastructur.es/materials/proj/proj0/proj0">Project Spec</a></p>
<span id="more"></span>
<p>⚡⚡⚡ <strong>Attention:</strong> As said in the spec, the final method <code>tilt</code> is quite difficult. The professor anticipates this method will take 3 to 10 hours. Actually, I spent 5 hours to implement it correctly and successfully.</p>
<p>If you get stuck, you can scroll down and read <strong>Tips</strong> section. In this part, I wrote some of my implementation details and ideas, hope can help you 😊</p>
<h2 id="demo-video">Demo Video</h2>
<video src="2048_demo.mp4" type="video/mp4" controls="controls" preload="auto" width="60%" height="60%">
</video>
<h2 id="troubleshooting">Troubleshooting</h2>
<p>You need to press arrow keys in your keyboard to play this 2048 Game.</p>
<p>However, if there is no reaction after pressing keyboard, there are 2 possible reasons:</p>
<ol type="1">
<li><p>You haven't implemented <code>tilt</code> yet. If you have already implemented it, check your implementation and see if you forget to set the <strong>local variable</strong> <code>changed</code> to <code>true</code>.</p></li>
<li><p>The language of your operating system is not English.</p></li>
</ol>
<h2 id="tips-of-implementing-tilt-method">Tips of Implementing tilt Method</h2>
<ol type="1">
<li><p>Read the project spec carefully, and try to answer those Google Form quizzes correctly.</p></li>
<li><p>Take advantage of abstraction. You need at least one helper method to implement abstraction layer.</p></li>
<li><p>In my implementation, I think it's easier to build a helper method to handle a single column. So I overwrite a helper method,</p></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tilt</span><span class="params">(Side side)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> changed;</span><br><span class="line">        changed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; board.size(); col += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> merged = tilt(col);</span><br><span class="line">            <span class="keyword">if</span> (merged) &#123;</span><br><span class="line">                changed = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        checkGameOver();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">            setChanged();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> changed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// helper method: Tilt the given column of the board</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">tilt</span><span class="params">(<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>I use the following strategy to tilt:</li>
</ol>
<ul>
<li>Iterate rows from top to down.</li>
<li>For each column, find an empty row at the top most, and record its value.</li>
<li>iterate from the second top row,
<ul>
<li>if the current tile is null, then skip;</li>
<li>if the current tile is not null, then move it to the top non-empty row, update non-empy row</li>
<li>if two adjacent tiles have the same value, then merge</li>
</ul></li>
</ul>
<p>For tricky merge, I use a boolean variable, to record whether the tile above the current tile has already been merged or not.</p>
<p>The following is the structure of my implementation, you don't need to follow it, and I believe you will find a better solution.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Tilt the given column of the board. */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">tilt</span><span class="params">(<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// variable to record if there are changes in this column</span></span><br><span class="line"></span><br><span class="line">    findFirstEmptyRow(col);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// true if the above tile has already merged, and thus cannot merge this tile again</span></span><br><span class="line">    <span class="keyword">boolean</span> prevMerged = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> row = board.size() - <span class="number">2</span>; row &gt;= <span class="number">0</span>; row -= <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// case 1: current tile is empty</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// case 2: current tile is not empty, but the above tile is empty</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// tricky merge</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// case 3: both current tile and above tile are not empty, and have the same value</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> changed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Determine if it is need to merge the current tile with its above tile furthermore.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> col column of the current tile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> row row of the current tile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if it can merge, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasFurtherMerge</span><span class="params">(<span class="keyword">int</span> col, <span class="keyword">int</span> row)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Merge two adjacent tiles if they have the same values. */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">mergeAdjacentTiles</span><span class="params">(Tile tile1, Tile tile2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Return the row value corresponding to the first empty space in the given column.  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findFirstEmptyRow</span><span class="params">(<span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>Project1: Implement Data Structures</title>
    <url>/2021/02/15/CS61B-DSA/Project1-Data-Structures/</url>
    <content><![CDATA[<h2 id="overview">Overview</h2>
<p>🐳 This is the second project of CS61B.</p>
<p>The goal of the first part is to build data structures. You are required to implement the <strong>Deque (Double Ended Queue)</strong> APIs which support various operations, and to verify the correctness of these data structures yourself using the randomized and timing test skills you gained from Lab 3.</p>
<p>The goal of the second part is to using deque, which is implemented in the first part, for implementing an algorithm that allows us to simulate the plucking of a guitar string.</p>
<p>Prerequisite of this project is the knowledge of array and linked-list (singly linked list and doubly linked list). Compared to the first project (2048), this projeect will be more challenging since there is little scaffolding, and there are many design issues to consider. But it is a good chance to practice everything you learned in lectures.</p>
<p>Hope you can enjoy this project. 🤭</p>
<span id="more"></span>
<h2 id="spec">Spec</h2>
<p>Our Deque implementation must have exactly the following operations:</p>
<ul>
<li><code>public void addFirst(T item)</code>: Adds an item of type T to the front of the deque.</li>
<li><code>public void addLast(T item)</code>: Adds an item of type T to the back of the deque.</li>
<li><code>public boolean isEmpty()</code>: Returns true if deque is empty, false otherwise.</li>
<li><code>public int size()</code>: Returns the number of items in the deque.</li>
<li><code>public void printDeque()</code>: Prints the items in the deque from first to last, separated by a space.</li>
<li><code>public T removeFirst()</code>: Removes and returns the item at the front of the deque. If no such item exists, returns null.</li>
<li><code>public T removeLast()</code>: Removes and returns the item at the back of the deque. If no such item exists, returns null.</li>
<li><code>public T get(int index)</code>: Gets the item at the given index, where 0 is the front, 1 is the next item, and so forth. If no such item exists, returns null. Must not alter the deque!</li>
</ul>
<p>In addition, we also want our Deques, <code>LinkedListDeque.java</code> and <code>ArrayDeque.java</code> , to implement these two special methods:</p>
<ul>
<li><code>public Iterator&lt;T&gt; iterator()</code>: The Deque objects we’ll make are iterable (i.e. Iterable<T>) so we must provide this method to return an iterator.</li>
<li><code>public boolean equals(Object o)</code>: Returns whether or not the parameter o is equal to the Deque. o is considered equal if it is a Deque and if it contains the same contents.</li>
</ul>
<h2 id="deliverables">Deliverables</h2>
<p>According to the course policy, my code is private.</p>
<p>So here, I will show the correctess of my implementations by JUnit tests.</p>
<ul>
<li>LinkedListDeque Test</li>
</ul>
<video src="LinkedListDequeTest.mp4" type="video/mp4" controls="controls" preload="auto" width="60%" height="60%">
</video>
<ul>
<li>ArrayDeque Test</li>
</ul>
<video src="ArrayDequeTest.mp4" type="video/mp4" controls="controls" preload="auto" width="60%" height="60%">
</video>
<h2 id="tips">Tips</h2>
<p>💁‍♀️ Here are some tips I think very useful.</p>
<ol type="1">
<li>Before trying implementing the deque, the first thing you should do is understanding <code>Deque</code> thoroughly.</li>
</ol>
<img src="/2021/02/15/CS61B-DSA/Project1-Data-Structures/1.png" class="">
<ol start="2" type="1">
<li><p>Although you are required to build a Deque which can accept any generic type, it will be a good choice to start with integer type.</p></li>
<li><p><strong>Circular!</strong> It is recommended that you design your data structure circularly. That is, when implementing <code>LinkedListDeque</code>, concult the circular sentinel topology; and when implementing <code>ArrayDeque</code>, treat the array as circular.</p></li>
</ol>
<ol type="a">
<li>Circular sentinel topology in LinkedListDeque:</li>
</ol>
<img src="/2021/02/15/CS61B-DSA/Project1-Data-Structures/2.JPG" class="">
<ol start="2" type="a">
<li>Circular array in ArrayDeque:</li>
</ol>
<img src="/2021/02/15/CS61B-DSA/Project1-Data-Structures/3.JPG" class="">
<img src="/2021/02/15/CS61B-DSA/Project1-Data-Structures/4.JPG" class="">
<img src="/2021/02/15/CS61B-DSA/Project1-Data-Structures/5.JPG" class="">
<img src="/2021/02/15/CS61B-DSA/Project1-Data-Structures/6.JPG" class="">
<img src="/2021/02/15/CS61B-DSA/Project1-Data-Structures/7.JPG" class="">
<img src="/2021/02/15/CS61B-DSA/Project1-Data-Structures/8.JPG" class="">
<img src="/2021/02/15/CS61B-DSA/Project1-Data-Structures/9.JPG" class="">
<ol start="4" type="1">
<li><p>When building <code>ArrayDeque</code>, considering not doing resizing at all until your code works without it.</p></li>
<li><p>Resizing in ArrayDeque is very tricky. The following is my implementation, you can refer to it if you like.</p></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDeque</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nextFirst, nextLast;  <span class="comment">// position of insertion</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns the next id of the given id.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">plusOne</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (id + <span class="number">1</span>) % items.length;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns the previous id of the given id.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">minusOne</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (id - <span class="number">1</span> + items.length) % items.length;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Resizes the underlying array to the target capacity.</span></span><br><span class="line"><span class="comment">	 * Keeps the usage factor less than 25%.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">		T[] newItems = (T[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">		copyArray(<span class="keyword">this</span>, newItems);</span><br><span class="line">		items = newItems;</span><br><span class="line">		nextFirst = minusOne(<span class="number">0</span>);</span><br><span class="line">		nextLast = size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Copies the elements from source array to the destination array.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copyArray</span><span class="params">(ArrayDeque&lt;T&gt; src, T[] dest)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (i &lt; size) &#123;</span><br><span class="line">			dest[i] = src.get(i);</span><br><span class="line">			i += <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6" type="1">
<li>Take full advantage of the methods you have completed!</li>
</ol>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>Project2: Gitlet</title>
    <url>/2021/07/18/CS61B-DSA/Project2-Gitlet/</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>Web Dev(1): SQL and Data Modelding(II)</title>
    <url>/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/</url>
    <content><![CDATA[<p>As said previously, using <strong>psycopg2</strong> still requires us to write SQL, and writing SQL directly is a fairly clunky way.</p>
<p>In this blog post, I will introduce a powerful Python library called <strong>SQLAlchemy</strong> which is used to interact with databases.</p>
<span id="more"></span>
<h2 id="sqlalchemy-basics">SQLAlchemy Basics</h2>
<h3 id="introduction">Introduction</h3>
<p><strong>SQLAlchemy</strong> is the most popular open-source library for working with relational databases from Python.</p>
<ul>
<li>It is an end-to-end tool for working with relational databases without writing raw SQL (avoid SQL's dialect).</li>
<li>It allows SQL clauses to be built via Python functions and expressions.</li>
<li>It avoids sending SQL to the database on every call. The SQLAlchemy ORM library features <strong>automatic caching</strong>, caching collections and references between objects once initially loaded..</li>
<li>It allows us be able to switch database systems without rewriting code.</li>
</ul>
<p>It is one type of <strong>ORM</strong> library, a.k.a an <strong>Object-Relational Mapping</strong> library, which provides an interface for using object-oriented programming to interact with a database.</p>
<ul>
<li>ORM library will map tables and columns to class objects and attributes.</li>
</ul>
<hr />
<p>Notes on ORMs</p>
<p>Using an ORM to interact with your database is simply one of many valid approaches for how you can add additional layers of abstraction to your web application to interact with a database more easily.</p>
<p>There are other kinds of <strong>query builder libraries</strong> you can use that are between talking to a database directly (with a database driver library like pyscopg2), and using an ORM.</p>
<p>An ORM is considered to be the highest level of abstraction you can add to a web application for database management. Query Builder libraries are somewhere in the middle. There are many mixed opinions about whether ORMs are a best practice approach in all cases, such as this opinion on <a href="https://blog.logrocket.com/why-you-should-avoid-orms-with-examples-in-node-js-e0baab73fa5/">&quot;Why you should avoid ORMs&quot;</a>.</p>
<p>Thankfully, SQLAlchemy happens to offer multiple levels of abstraction you can prefer, between the database driver and the ORM, so you can customize the development of your web application to your own like. The many granular levels of abstraction that SQLAlchemy offers is one of the reasons that has led to its widespread popularity and diverse ways of using the library and approaching your database programming.</p>
<hr />
<h3 id="sqlalchemys-layers-of-abstraction">SQLAlchemy's Layers of Abstraction</h3>
<h4 id="overview">Overview</h4>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/sqlalchemy-abstract.JPG" class="">
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/sqlalchemy-abstract2.JPG" class="">
<p><strong>SQLAlchemy vs psycopg2</strong> :</p>
<ul>
<li>SQLAlchemy <strong>generates</strong> SQL statements.</li>
<li>psycopg2 directly <strong>sends</strong> SQL statements to the database.</li>
<li>SQLAlchemy depends on psycopg2 or other database drivers to communicate with the database, under the hood.</li>
</ul>
<p>SQLALchemy lets you traverse through all 3 layers of abstraction to interact with your database.</p>
<ul>
<li>Can stay on the <strong>ORM level</strong></li>
<li>Can dive into database operations to run customized SQL code specific to the database, on the <strong>Expressions level</strong>.</li>
<li>Can write raw SQL to execute, when needed, on the <strong>Engine level</strong>.
<ul>
<li>Can more simply use psycopg2 in this case</li>
</ul></li>
</ul>
<p>Next, let's go over every layer of abstraction in SQLAlchemy and see what they offer.</p>
<h4 id="the-dialect">1) The Dialect</h4>
<p>SQLAlchemy uses the <strong>dialect</strong> to communicate with various types of DBAPIs implementations and databases. The dialect layer allows us to forget about the database system we're using.</p>
<p>🌞 Resources: <a href="https://docs.sqlalchemy.org/en/14/dialects/">SQLAlchemy Docs on the Dialect</a></p>
<h4 id="the-connection-pool">2) The Connection Pool</h4>
<p>A connection pool is a standard technique used to maintain long running connections in memory for efficient re-use. It lets us avoid open and close connection manually using DBAPI alone.</p>
<p>Also, a connection pool provides management for the total number of connections an application might use simultaneously.</p>
<p>With connection pool, the opening and closing of connections and which connection you are using when you're executing statements within a session is completely abstracted.</p>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/connecting-pool.JPG" class="">
<p>🌞 Resources: <a href="https://docs.sqlalchemy.org/en/14/core/pooling.html">SQLAlchemy Docs on its Connection Pooling</a></p>
<h4 id="the-engine">3) The Engine</h4>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/sqlalchemy-engine1.JPG" class="">
<p>You should notice that,</p>
<ul>
<li>The Engine in SQLAlchemy refers to both itself, the Dialect and the Connection Pool, which all work together to interface with our database.</li>
<li>A connection pool gets automatically created when we create a SQLAlchemy engine.</li>
</ul>
<p>🌞 Resources: <a href="https://docs.sqlalchemy.org/en/14/core/engines.html">SQLAlchemy Docs on the Engine</a></p>
<h4 id="sql-expressions">4) SQL Expressions</h4>
<p>Instead of sending raw SQL (using the Engine), we can compose SQL statements by building Python objects.</p>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/sqlalchemy-sql-expression.JPG" class="">
<p>You still need to know how to use SQL to interact with databse.</p>
<h4 id="sqlalchemy-orm">5) SQLAlchemy ORM</h4>
<p>SQLAlchemy ORM is the highest layer of abstraction in SQLALchemy. With it, you can compose SQL expressions by mapping Python classes of objects to tables in the database --&gt; <strong>Maps classes to tables</strong>. It wraps the SQL Expressions and Engine to work together to interact with the database.</p>
<p>In fact, SQLAlchemy is split into two libraries:</p>
<ul>
<li><strong>SQLAlchemy Core</strong>: Expressions &amp; Engine</li>
<li><strong>SQLAlchemy ORM</strong>: SQLALchemy ORM is offered as an optional library, so you don't have to use the ORM in order to use the rest of SQLAlchemy.
<ul>
<li>The ORM uses the Core library;</li>
<li>The ORM lets you <strong>map data from the database to the application's Python objects</strong>;</li>
<li>The ORM persists objects into corresponding database tables.</li>
</ul></li>
</ul>
<p><strong>SQLAlchemy Layers of Abstraction Overview (Diagram)</strong></p>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/sqlalchemy-layers-of-abstraction.JPG" class="">
<h3 id="mapping-between-tables-and-classes">Mapping Between Tables and Classes</h3>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/map-class-table.JPG" class="">
<h3 id="demo-hello-app-with-flask-sqlalchemy">Demo: Hello APP with Flask-SQLAlchemy</h3>
<p>🌞 Resources:</p>
<ol type="1">
<li><a href="https://flask.palletsprojects.com/en/2.0.x/">Flask Docs</a></li>
<li><a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/">Flask-SQLAlchemy Docs</a></li>
</ol>
<p><strong>Flask</strong> is a very simple web framework for serving web pages with data. <strong>Flask-SQLAlchemy</strong> is a Flask extension that supports the usage of SQLAlchemy underneath.</p>
<h4 id="initialize-run-the-flask-app">Initialize &amp; Run the Flask app</h4>
<p>🍄 <strong>Note:</strong> <em>Before going further, make sure you've got both Flask and Flask-SQLAlchemy installed.</em></p>
<ul>
<li>To install Flask, go to the terminal and run <code>pip3 install flask</code></li>
<li>To install Flask-SQLAlchemy, go to the terminal and run <code>pip3 install flask-sqlalchemy</code></li>
<li><p>If <code>pip3</code>does not work, try <code>pip</code></p></li>
<li><p>Initialize app:</p></li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flask_hello_app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Run app:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start the server</span></span><br><span class="line"><span class="comment"># specify the location of the flask app</span></span><br><span class="line">$ FLASK_APP=flask_hello_app.py flask run</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable live reload</span></span><br><span class="line">$ FLASK_APP=flask_hello_app.py FLASK_DEBUG=<span class="literal">true</span> flask run</span><br></pre></td></tr></table></figure>
<p>There is an alternative approach to run app:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flask-hello-app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add these two lines</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>And run with the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># alternative way:</span></span><br><span class="line">$ python flask_hello_app.py</span><br></pre></td></tr></table></figure>
<h4 id="connect-app-to-db">Connect App to DB</h4>
<p>Database Connection URI Parts:</p>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/database-connection-uri-parts.JPG" class="">
<p>By default, SQLAlchemy will automatically choose which DBAPI you use underneath. You can also optionally specify it. For Python application, psycopg2 is the default database adpater).</p>
<blockquote>
<p>'postgresql+psycopg2://username:password...' where 'psycopg2' is optional</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="comment"># standard way for creating a flask application</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># connect to database from the Flask application by setting configuration</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/example&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)  <span class="comment"># db: instance of database</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h4 id="map-classes-to-tables">Map classes to tables</h4>
<ul>
<li><code>db.Model</code> lets us create and manipulate data models
<ul>
<li>Map classes to tables via SQLAlchemy ORM.</li>
<li>By default, SQLAlchemy will pick the name of the table for you, setting it equal to the lower-case version of your class's name. You can also set the name of the table by yourself.</li>
</ul></li>
<li><code>db.session</code> lets us create and manipulate database transactions</li>
<li><code>db.create_all()</code> will detect models and creates tables for them (if they don't exist)</li>
</ul>
<hr />
<p><em>NOTE</em></p>
<p>SQLAlchemy names the table by the name of the class, all lower cased, by default. Then, if it finds a table with that name already, regardless of whether the schema matches the class, it will skip creating another table by that same name, and do nothing.</p>
<hr />
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="comment"># standard way for creating a flask application</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># connect to database from the Flask application by setting configuration</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/example&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)  <span class="comment"># db: instance of database</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;persons&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create table</span></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h4 id="interact-with-db">Interact with DB</h4>
<ul>
<li>You can create records with psql</li>
</ul>
<blockquote>
<p>(in psql) INSERT INTO persons(name) VALUES ('Amy');</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="comment"># standard way for creating a flask application</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># connect to database from the Flask application by setting configuration</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/example&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)  <span class="comment"># db: instance of database</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;persons&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create table</span></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    person = Person.query.first()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello &#x27;</span> + person.name + <span class="string">&#x27;!&#x27;</span>  <span class="comment"># Hello Amy!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>You can also create records with Python interpreter</li>
</ul>
<p>First, create records in Python's interactive mode using <code>db.session.add()</code> :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; from flask_hello_app import db, Person</span><br><span class="line">&gt;&gt;&gt; person = Person(name=<span class="string">&#x27;Emma&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; db.session.add(person)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure>
<p>Then, revise the <code>flask_hello_app.py</code>. See code in line 17~19:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="comment"># standard way for creating a flask application</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># connect to database from the Flask application by setting configuration</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/example&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)  <span class="comment"># db: instance of database</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;persons&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># useful for debugging: customized show</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Person ID: <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span>, name: <span class="subst">&#123;self.name&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create table</span></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    person = Person.query.first()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello &#x27;</span> + person.name + <span class="string">&#x27;!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>Finally run as the following in Python's interpreter,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; import flask_hello_app</span><br><span class="line">&gt;&gt;&gt; from flask_hello_app import Person</span><br><span class="line">&gt;&gt;&gt; Person.query.first()</span><br><span class="line">&lt;Person ID: 1, name: Amy&gt;</span><br><span class="line">&gt;&gt;&gt; Person.query.all()</span><br><span class="line">[&lt;Person ID: 1, name: Amy&gt;, &lt;Person ID: 2, name: Emma&gt;]</span><br></pre></td></tr></table></figure>
<h4 id="sqlalchemy-data-type">SQLALchemy Data Type</h4>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/screen-shot-2019-08-18-at-11.36.57-pm.JPG" class="">
<p>🌞 Resources:</p>
<ol type="1">
<li><a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/models/">Flask-SQLAlchemy: Declaring Models</a></li>
<li><a href="https://docs.sqlalchemy.org/en/14/core/types.html">Column and Data Types</a></li>
</ol>
<h4 id="sqlalchemy-constraints">SQLAlchemy Constraints</h4>
<ul>
<li>Column constraints ensure data integrity across our database, allowing for database accuracy and consistency.</li>
<li>Constraints are conditions on your column, that provide checks on the data's validity. It does not allow data that violates constraints to be inserted into the database (it will raise an error if you attempt to).</li>
<li>In SQLAlchemy, constraints are set in db.Column( ) after setting the data type.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># column contraint demo</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">  name = db.Column(db.String(), nullable=<span class="literal">False</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># check constraint</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;ensures that no product goes into the table with a nonpositive price value&quot;&quot;&quot;</span></span><br><span class="line">  price = db.Column(db.Float, db.CheckConstraint(<span class="string">&#x27;price&gt;0&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>🐵 <strong>Resource:</strong> <a href="https://github.com/crazyguitar/pysheeet/blob/master/docs/notes/python-sqlalchemy.rst#set-a-database-url">SQLAlchemy Cheat Sheet</a></p>
<h2 id="sqlalchemy-orm-in-depth">SQLAlchemy ORM in Depth</h2>
<h3 id="model.query">Model.query</h3>
<ul>
<li><code>db.Model.query</code> offers us the <strong>Query</strong> object. This object lets us generate <code>SELECT</code> statements that let us query and return slices of data from our database.</li>
<li>The Query object can be accessed on a model using either:
<ul>
<li><strong>MyModel.query</strong></li>
<li><strong>db.session.query(MyModel)</strong></li>
</ul></li>
</ul>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/model-query-2-ways.JPG" class="">
<p>🦜 <strong>Resource:</strong> <a href="https://github.com/rileywang0819/demo-todoapp/blob/master/query-cheat-sheet.pdf">SQLAlchemy Query methods Cheat Sheet</a></p>
<h3 id="sqlalchemy-object-lifecycle">SQLAlchemy Object Lifecycle</h3>
<p>We can insert new records into the database by writing the raw SQL. We can also use SQLAlchemy by running the following code, which will build a <em>transaction</em> for inserting in a person instance in our model/table, and persist it to the database upon calling <code>commit()</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person = Person(name=<span class="string">&#x27;Amy&#x27;</span>)</span><br><span class="line">db.session.add(person)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure>
<p>Let's dive into the process, and learn how an object goes from pending to persistent, i.e. <strong>the SQLAlchemy object life cycle</strong>.</p>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/session2.JPG" class="">
<p>We don't commit anything to the database until we execute <code>db.session.commit()</code>.</p>
<ul>
<li>Within a session, we create transactions every time we want to commit work to the database.</li>
<li>Proposed changes are not immediately committed to the database and instead go through stages to allow for &quot;undos&quot;.</li>
<li>The ability to undo is allowed via <code>db.session.rollback()</code></li>
</ul>
<p>Let's look at different stages of object lifecycle.</p>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/life-cycle.JPG" class="">
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/life-cycle2.JPG" class="">
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/life-cycle3.JPG" class="">
<p>Let's dive into <strong>Flush</strong> stage.</p>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/flush.JPG" class="">
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/life-cycle4.JPG" class="">
<p>Especially, <strong>when a statement has been flushed already, SQLAlchemy knows not to do the work again of translating actions to SQL statements (caching).</strong></p>
<p>Look at the original table, there are 8 records,</p>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/flushed1.JPG" class="" title="original table">
<p>Then we use SQLAlchemy to add a new record, and look at the table once again. Since we still don't do commit operation, so the database has no changes.</p>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/flushed2.JPG" class="" title="terminal">
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/flushed3.JPG" class="">
<p>However, if we do some queries, meaning the statements have been flushed, we can see that the action has already been translated into SQL commands though database is not persisted.</p>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/flushed4.JPG" class="">
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/flushed3.JPG" class="">
<p>Finally, make commit to change the database permanetly.</p>
<blockquote>
<p>db.session.commit()</p>
</blockquote>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-II/flushed5.JPG" class="">
]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(1): SQL and Data Modeling(I)</title>
    <url>/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/</url>
    <content><![CDATA[<h2 id="overview">Overview</h2>
<p>In this serials, I will talk about skills needed to develop an entire database-backed web application.</p>
<p>You will learn:</p>
<ul>
<li>How to do <strong>CRUD</strong> operations?</li>
<li>How to apply these operations across both databases and web applications?</li>
<li>How to set up relationships between elements of an application?</li>
<li>How to think about important principles and patterns in building data models for a web application?</li>
</ul>
<p>We take &quot;Learn by doing&quot; strategy to acquire these skills. The tech stack is:</p>
<ul>
<li>programming language: Python 3
<ul>
<li>use <code>pip</code> to install specific Python packages from <strong>Python Package Index (PyPI)</strong></li>
</ul></li>
<li>web server framework: <code>Flask</code></li>
<li>database: <code>PostgresSQL</code></li>
<li>Python libraries:
<ul>
<li><code>psycopg2</code></li>
<li><code>SQLAlchemy</code></li>
<li><code>Flask-SQLAlchemy</code></li>
</ul></li>
</ul>
<span id="more"></span>
<h2 id="interacting-with-databases">Interacting with Databases</h2>
<p>In this blog, we focus on 3 core topics.</p>
<p><strong>1. Interacting with a (remote) database</strong></p>
<p>Backend developers need to interact with databases regularly in order to manipulate and maintain the models behind their web applications. In working with a database, we'll need to use a <strong>Database Management System (DBMS)</strong>.</p>
<p>Database Management System (DBMS) is simply a software that allows you to interact with a database.</p>
<hr />
<p><strong>2. Database Application Programming Interfaces (DBAPIs)</strong></p>
<p>We need to interact with database from a sepicific language or web server framework (such as Python, NodeJS, Ruby on Rails, etc.). This is where <strong>DBAPIs</strong> come in.</p>
<hr />
<p><strong>3. psycopg2</strong></p>
<p>We use <code>psycopg2</code> library to interact with a database from Python.</p>
<p><strong>psycopg2</strong> is the most popular PostgreSQL database adapter, which allows us to interact with database from Python.</p>
<p>🍓 <em>Anything that implements the DBAPI to connect to an external database can be reasonably called a database driver or database adapter.</em></p>
<hr />
<h3 id="relational-databases">Relational Databases</h3>
<ul>
<li>key characteristics of database:</li>
</ul>
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/key-characteristic-of-database.JPG" class="">
<ul>
<li>qualities of relational DBMS:</li>
</ul>
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/qualities-of-relational-dbms.JPG" class="">
<p>Next, let us review concepts of <strong>primary key</strong> and <strong>foreign key</strong> .</p>
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/primary-key.JPG" class="">
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/foreign-key.JPG" class="">
<h3 id="sql">SQL</h3>
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/SQL.JPG" class="">
<p>✨ Read <a href="https://www.postgresqltutorial.com/">PostgreSQL Tutorial</a> to learn more about PostgreSQL.</p>
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/execution-plan.JPG" class="">
<p>The <strong>execution plan</strong> gives important insight into the performance of the query. Since there can multiple ways of performing queries against a database with various performance tradeoffs, it's important to choose the one with the best execution plan for quickly and efficiently returning the results that you need.</p>
<p>🤠 You can also register a database bootcamp course to learn more SQL.</p>
<p>🔥 Supplyment:</p>
<ul>
<li><a href="https://www.winwire.com/25-tips-to-improve-sql-query-performance/">techniques for improving the performance of SQL queries</a></li>
<li><a href="https://www.postgresqltutorial.com/postgresql-indexes/postgresql-create-index/">use critical indexes to speed up information lookups</a></li>
<li><a href="https://db.grussell.org/sql3.html#_myauto10">SQL views</a></li>
<li><a href="https://use-the-index-luke.com/">optimize SQL queries: Use the Index, Luke!</a></li>
</ul>
<h3 id="client-server-model">Client-Server Model</h3>
<p>In order to build database-backed web applications, we first need to understand how servers, clients, and databases interact. A major part of this is the <strong>client-server model</strong>, and the basic idea is very simple:</p>
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/basic-idea-of-client-server-model.JPG" class="">
<ul>
<li>Servers and clients are programs that run on a <strong>host</strong>.
<ul>
<li>A <strong>host</strong> is a computer connected over the network.</li>
<li>A <strong>client</strong> is a program (like the web browser on your computer) that <strong>sends a request</strong> to the server.</li>
<li>A <strong>server</strong> is a centralized program that communicates over a network (such as the Internet) to serve many clients. It <strong>sends back a response</strong> to the client.</li>
<li>The client and server use a common language (a <strong>communication protocol</strong>, such as <strong>TCP/IP</strong>) for communicating with each other.</li>
</ul></li>
</ul>
<p>Now, adding a relational databases to this basic client-server model. This modern-day database systems also follow the client-server model.</p>
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/db-web-server-with-client.JPG" class="">
<p>✨ <em>Basically, we call things clients when they are making a request and servers when they are fulfilling a request with a repsonse. Since a web server can do both, it sometimes acts as a server and sometimes acts as a client.</em></p>
<h4 id="client-server-model-example-onlinr-store">Client-Server Model Example: Onlinr Store</h4>
<hr />
<p><strong>Background</strong></p>
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/ex-jane-online-store.JPG" class="">
<p>Click the Polo product and show a product detail page as follows :</p>
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/ex-jane-online-store2.JPG" class="">
<hr />
<p>Let's look the steps under the hood :</p>
<ul>
<li>Clicking on the Polo product leads to a <strong>click event</strong> being registered by the browser, on the client computer.</li>
<li>A <strong>click handler(事件处理器)</strong> in the <code>view</code> would send a request, including information about the request type and any user input data, to the server (in Javascript) from the client browser.</li>
<li>A client could request more data and a different view to be rendered (with that data).</li>
<li>A server process listens to the request sent from the view, and uses the user input data to determine how to shape its request to the database, and sends a request to the database.</li>
<li>The database processes this request, and sends a response back to the web server.</li>
<li>The web server receives the response from the database, and uses it to determine the view and power the view template with the fetched data, sending it back to the client's browser.</li>
<li>The client is responsible for rendering something to the user, that represents both the data and its representation.</li>
</ul>
<p><strong>MVC: model-view-controller</strong></p>
<p>Let's use some pseudocode to illustrate this process.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frontend</span></span><br><span class="line"></span><br><span class="line">&lt;!-- view.html --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;polo&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;1&quot;</span>&gt;</span> Polo <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;polo&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = <span class="keyword">new</span> Request();</span><br><span class="line">  request.send(<span class="string">&#x27;GET product detail on product with id &#x27;</span>, <span class="number">1</span>);  <span class="comment">// send request</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">request 2 things:</span></span><br><span class="line"><span class="comment">1. request more data;</span></span><br><span class="line"><span class="comment">2. reder a different page to the client web app</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># backend (web server)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; server.py &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">result = application.listen_on(request)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result.<span class="built_in">id</span>)    <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">server does:</span></span><br><span class="line"><span class="string">1. send request to the database, about info about object with result.id;</span></span><br><span class="line"><span class="string">2. receives the response and sends back info about the view and the data;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">application.render_view(<span class="string">&#x27;product_details.html&#x27;</span>, data)</span><br></pre></td></tr></table></figure>
<h3 id="tcpip">TCP/IP</h3>
<ul>
<li>Transmission Control Protocol (TCP)</li>
<li>Internet Protocol (IP)</li>
</ul>
<p><code>TCP/IP</code> is a suite of communication protocols that is used to connect devices and transfer data over the Internet.</p>
<p>TCP/IP uses:</p>
<ul>
<li><strong>IP addresses</strong>: An IP address identifies the location of a computer on a network.</li>
<li><strong>Ports</strong>: A port is a location on the recipient computer, where data is received.
<ul>
<li><strong>Port 80</strong>: The port number most commonly used for HTTP requests. For example, when a client makes a request to a web server, this request is usually sent through port 80.</li>
<li><strong>Port 5432</strong>: The port number used by most database systems; also the default port for PostgreSQL.</li>
</ul></li>
</ul>
<hr />
<p>Q: Why are ports used?</p>
<p>While an IP address tells you where to find a particular computer, it doesn't tell you specifically where on that computer a particular connection should be made—that's what port numbers are for.</p>
<p>Ports allow multiple types of traffic being received at the same time on a given device, to be tracked and routed to where they need to go.</p>
<p>Ports are much like the different terminals(航站楼) of an airport, tracking and receiving different airplanes at the same time, allowing for the effective receipt of multiple types of traffic at the same IP address.</p>
<p>🌿 Additional Resource: <a href="https://opensource.com/article/18/10/common-network-ports">14 of the most common ports</a></p>
<hr />
<p><strong>TCP/IP is connection-based.</strong> Over TCP/IP, we'll always need to establish a connection between clients and servers in order to enable communications.</p>
<ul>
<li>Establish a connection enables communications.</li>
<li>Close a connection to end communications.</li>
<li>Deliveries over the connection are <strong>error-checked</strong>: if packets arrive damaged or lost, then they are resent (known as retransmission).</li>
</ul>
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/session1.JPG" class="">
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/session2.JPG" class="">
<hr />
<p><em>Supplement: TCP vs UDP</em></p>
<p>The internet also offers the UDP protocol.</p>
<p>UDP is much simpler than TCP: hosts on the network send data (in units called datagrams) without any connections needing to be established.</p>
<p>If TCP is like building highways between houses before sending packages between them, then UDP is much like sending over a carrier pigeon from one house to another in order to deliver packages: you don't know whether the pigeon will head in the right way, drop your package along the way, or encounter an issue mid-travel. On the other hand, there is less overhead to use UDP than managing a connection over TCP / building a highway.</p>
<p>When speed is more important than reliability, especially when applications need to stream very small amounts of information quickly (smaller packages of information means less issues with reliability), then UDP is preferred. A lot of real time streaming applications, (e.g. live TV streaming, Voice over IP (VoIP)) prefer UDP over TCP. Since UDP does not need to retransmit lost datagrams, nor does it do any connection setup, there are fewer delays over UDP than TCP. TCP's continuous connection is more reliable but has more latency(时延).</p>
<hr />
<h3 id="transactions">Transactions</h3>
<p><strong>Transactions(事务)</strong> are atomic units of work for the database to perform as a whole.</p>
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/transaction.JPG" class="">
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/transaction2.JPG" class="">
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/transaction3.JPG" class="">
<p><strong>Transactions capture logical bundles of work.</strong> Work is bundled into transactions, so that in case of system failures, data in your database is still kept in a valid state (by rolling back the entire transaction if any part of it fails). To ensure a database is consistent before and after work done to it, databases uses <strong>atomic transactions</strong>, and actions like <code>commits</code> and <code>rollbacks</code> to handle failures appropriately. Transactions are, in other words, <a href="https://www.geeksforgeeks.org/acid-properties-in-dbms/">ACID</a> .</p>
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/bundle-work.JPG" class="">
<h3 id="dbapis-and-psycopg2">DBAPIs and psycopg2</h3>
<h4 id="psql">psql</h4>
<p><code>psql</code> is an interactive terminal application for connecting and interacting with your local postgres server on your machine. It lets you type and execute SQL commands to your database directly.</p>
<p>🐹 If you don't like psql, you can use GUI cilent to inspect and interact with your PostgreSQL server.</p>
<hr />
<p>🍁 <strong>Useful basic psql commands</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># connect</span></span><br><span class="line">$ psql -U postgres</span><br><span class="line"></span><br><span class="line">$ psql &lt;dbname&gt; [&lt;username&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># connection information</span></span><br><span class="line">$ postgres=<span class="comment"># \c </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># connect to a specific db</span></span><br><span class="line">$ postgres=<span class="comment"># \c &lt;dbname&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list all db on the server</span></span><br><span class="line">$ postgres=<span class="comment"># \l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show db tables</span></span><br><span class="line">$ postgres=<span class="comment"># \dt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># describe table schema</span></span><br><span class="line">$ postgres=<span class="comment"># \d &lt;tablename&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># quit psql</span></span><br><span class="line">$ postgres=<span class="comment"># \q</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># helper</span></span><br><span class="line">$ postgres=<span class="comment"># \?</span></span><br></pre></td></tr></table></figure>
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/psql.JPG" class="">
<hr />
<h4 id="dbapis">DBAPIs</h4>
<p>We will sometimes want to interact with our database and use its results in a specific programming language. E.g. to build web applications or data pipelines in a specific language (Ruby, Python, Javascript, etc.). That's where <strong>DBAPIs</strong> come in.</p>
<p>DBAPI:</p>
<ul>
<li>provides a standard interface for one programming language (like Python) to talk to a relational database server;</li>
<li>is a low level library for writing SQL statements that connect to a database;</li>
</ul>
<p>Different DBAPIs exist for different server framework or language + database system. Database adapters define a standard for using a database (with SQL) and using the results of database queries as input data in the given language.</p>
<p>For example, the SQL statement <code>SELCET * FROM &lt;table&gt;</code> will</p>
<ul>
<li>list of rows into an array of objects in Javascript for a NodeJS adapter;</li>
<li>or a list of tuples in Python for a Python adapter</li>
</ul>
<img src="/2021/07/12/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-I/dbapis.jpg" class="">
<p>In this blog, I will use <strong>psycopg2</strong> to establish a connection to PostgreSQL server, and interact with it in Python.</p>
<h4 id="psycopg2">psycopg2</h4>
<p>Intall psycopg2: <a href="https://pypi.org/project/psycopg2/">ref</a></p>
<p>🌈 <strong>Demos:</strong></p>
<ol type="1">
<li>psycopg2:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"></span><br><span class="line">conn = psycopg2.connect(<span class="string">&#x27;dbname=example user=postgres password=xxxxxxxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open a cursor to perform database operations</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># create table</span></span><br><span class="line"><span class="comment"># (note: triple quotes allow multiline text in python)</span></span><br><span class="line">cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  CREATE TABLE table1 (</span></span><br><span class="line"><span class="string">    id INTEGER PRIMARY KEY,</span></span><br><span class="line"><span class="string">    completed BOOLEAN NOT NULL DEFAULT False</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">&#x27;INSERT INTO table1 (id, completed) VALUES (1, true);&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit, so it does the executions on the db and persists in the db</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>psycopg2: string composition</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"></span><br><span class="line">conn = psycopg2.connect(<span class="string">&#x27;dbname=example user=postgres password=xxxxxxxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open a cursor to perform database operations</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Drop table if it already exited</span></span><br><span class="line">cur.execute(<span class="string">&#x27;DROP TABLE IF EXISTS table2;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (re)create table</span></span><br><span class="line"><span class="comment"># (note: triple quotes allow multiline text in python)</span></span><br><span class="line">cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  CREATE TABLE table2 (</span></span><br><span class="line"><span class="string">    id INTEGER PRIMARY KEY,</span></span><br><span class="line"><span class="string">    completed BOOLEAN NOT NULL DEFAULT False</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 ways to compose SQL query using strings:</span></span><br><span class="line"><span class="comment"># 1. use tuple</span></span><br><span class="line">cur.execute(<span class="string">&#x27;INSERT INTO table2 (id, completed) VALUES (%s, %s);&#x27;</span>, (<span class="number">1</span>, <span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. use dictionary</span></span><br><span class="line">SQL = <span class="string">&#x27;INSERT INTO table2 (id, completed) VALUES (%(id)s, %(completed)s);&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="number">2</span>, </span><br><span class="line">    <span class="string">&#x27;completed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">&#125;</span><br><span class="line">cur.execute(SQL, data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit, so it does the executions on the db and persists in the db</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>psycopg2: fetching results</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Establish a connection, starting a session, begins a transaction</span></span><br><span class="line">conn = psycopg2.connect(<span class="string">&#x27;dbname=example user=postgres password=xxxxxxxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open a cursor to perform database operations</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Drop table if it already exited</span></span><br><span class="line">cur.execute(<span class="string">&#x27;DROP TABLE IF EXISTS table2;&#x27;</span>)</span><br><span class="line"><span class="comment"># cur.rollback()</span></span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  CREATE TABLE table2 (</span></span><br><span class="line"><span class="string">    id INTEGER PRIMARY KEY,</span></span><br><span class="line"><span class="string">    completed BOOLEAN NOT NULL DEFAULT False</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 ways to compose SQL query using strings:</span></span><br><span class="line"><span class="comment"># 1. use tuple</span></span><br><span class="line">cur.execute(<span class="string">&#x27;INSERT INTO table2 (id, completed) VALUES (%s, %s);&#x27;</span>, (<span class="number">1</span>, <span class="literal">True</span>))</span><br><span class="line"><span class="comment"># 2. use dictionary</span></span><br><span class="line">SQL = <span class="string">&#x27;INSERT INTO table2 (id, completed) VALUES (%(id)s, %(completed)s);&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="number">2</span>, </span><br><span class="line">    <span class="string">&#x27;completed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">&#125;</span><br><span class="line">cur.execute(SQL, data)</span><br><span class="line"></span><br><span class="line">cursor.execute(<span class="string">&#x27;SELECT * FROM table2;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line"><span class="comment">## How to fetch the result? ##</span></span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># way 1</span></span><br><span class="line">result = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># [(1, True), (2, False)]</span></span><br><span class="line"><span class="comment"># way 2</span></span><br><span class="line"><span class="built_in">print</span>(cursor.fetchmany(<span class="number">3</span>))</span><br><span class="line"><span class="comment"># way 3</span></span><br><span class="line"><span class="built_in">print</span>(cursor.fetchone())  <span class="comment"># fetches the first result in the result sets</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># commit, so it does the executions on the db and persists in the db</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<h2 id="forecast">Forecast</h2>
<p>Until now, we have learnt how to use <strong>psycopg2</strong> library to interact with PostgreSQL database from Python.</p>
<p>However, writing SQL directly is a fairly clunky way of doing web development. It's useful to learn some higher level libraries that let us interact with a database, using Python classes and expressions.</p>
<p>In the next post, I will talk about one of the most powerful Python libraries for interacting with databases: <strong>SQLAlchemy</strong>.</p>
]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(1): SQL and Data Modeling(V)</title>
    <url>/2021/07/15/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-V/</url>
    <content><![CDATA[<p>We've completed built CRUD for a single model (todo item). However, in the real world, we often implement web apps with multiple models that have relationships with one another.</p>
<p>The relationships between models can determine if certain actions on one model should happen on other models, so that when something happens to one model, related model objects should also be affected (by being CRUD).</p>
<p>Examples are:</p>
<ul>
<li>Removing a User's account should remove all of that user's photos, documents, etc.</li>
<li>Deleting a Discussion Thread should delete all of its comments.</li>
<li>Accessing a Blog Post should also access all of its comments.</li>
<li>Accessing an Airbnb host's profile should also access all of their listings.</li>
</ul>
<p>So, in the rest of this blog, I'll talk about how to build our todo app further to make it more pratical.</p>
<span id="more"></span>
<img src="/2021/07/15/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-V/todo-app.png" class="">
<h2 id="model-relationships">Model Relationships</h2>
<p>In order to handle CRUD across related models which have relationships with one another, we'll need to learn about how to map relationships between models.</p>
<h3 id="relationship-join">Relationship &amp; Join</h3>
<p>Relational databases can map relationships that occur between tables and bwetween rows across tables.</p>
<img src="/2021/07/15/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-V/relational-mapping.JPG" class="" title="Figure 1.">
<p>Query: What's the make, model and year of vehicles that driver Sarah have?</p>
<p>You can use the following SQL command to query,</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> make, model, <span class="keyword">year</span> <span class="keyword">FROM</span> vehicles</span><br><span class="line"><span class="keyword">JOIN</span> drivers</span><br><span class="line"><span class="keyword">ON</span> vehicles.driver_id <span class="operator">=</span> drivers.id</span><br><span class="line"><span class="keyword">WHERE</span> drivers.name <span class="operator">=</span> <span class="string">&#x27;Sarah&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- default JOIN is INNER JOIN</span></span><br></pre></td></tr></table></figure>
<h3 id="db.relationship">db.relationship</h3>
<p>SQLAlchemy configures the settings between model relationships once, and generates <code>JOIN</code> statements for us whenever we need them.</p>
<p>We use an interface named <code>db.relationship</code>, which is provided by SQLAlchemy, to configure a mapped relationship between two models.</p>
<p><code>db.relationship</code> is defined on the <strong>parent</strong> model.</p>
<img src="/2021/07/15/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-V/db-relationship.JPG" class="">
<h3 id="configure-relationships">Configure Relationships</h3>
<p>So when do we load <code>child1.some_parent</code> from the database?</p>

<p>There are two different ways that we can optimize the loading of joined data: <strong>Lazy loading</strong> &amp; <strong>Eager loading</strong>.</p>
<h4 id="lazy-loading">Lazy loading</h4>
<p>With Lazy loading, we only load these joined data only when needed. It is the default load way in SQLAlchemy.</p>
<ul>
<li>Pro: no initial wait time. Load only what you need.</li>
<li>Con: produces a join SQL call every time there is a request for a joined asset. Bad if you do this a lot.</li>
</ul>
<p><code>lazy=True</code> (lazy loading) is the default option in <code>db.relationship</code>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">children = db.relationship(<span class="string">&#x27;ChildModel&#x27;</span>, backref=<span class="string">&#x27;some_parent&#x27;</span>, lazy=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h4 id="eager-loading">Eager loading</h4>
<p>In eager loading, we will load all needed joined data objects, all at once.</p>
<ul>
<li>Pro: reduces further queries to the database. Subsequent SQL calls read existing data</li>
<li>Con: loading the joined table has a long upfront initial load time.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">children = db.relationship(<span class="string">&#x27;ChildModel&#x27;</span>, backref=<span class="string">&#x27;some_parent&#x27;</span>, lazy=<span class="string">&#x27;joined&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>You can see the <a href="https://docs.sqlalchemy.org/en/14/orm/loading_relationships.html">SQLAlchemy Docs on Relationship Loading Techniques</a> for more loading options.</p>
<h4 id="other-relationship-options">Other Relationship Options</h4>
<p>Besides lazy loading and eager loading, there are also a couple of other options that you can set on relationships. The two very handy options are:</p>
<ul>
<li>collection_class</li>
<li>cascade</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">  __tablename__ = <span class="string">&#x27;parents&#x27;</span></span><br><span class="line">  <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">  name = db.Column(sb.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">  children = db.relationship(</span><br><span class="line">    <span class="string">&#x27;Chile&#x27;</span>,</span><br><span class="line">    backref=<span class="string">&#x27;parent&#x27;</span>,</span><br><span class="line">    lazy=<span class="literal">True</span>,</span><br><span class="line">    collection_class = <span class="built_in">list</span>,</span><br><span class="line">    cascade = <span class="string">&#x27;save-update&#x27;</span>  <span class="comment"># OR: all, delete-orphan</span></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; collection_class = list: whether or not we want the collection of children to be set equal to the data type list, or we want to set it to a dictionary or set in Python instead. &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>Check <a href="https://docs.sqlalchemy.org/en/13/orm/relationship_api.html#sqlalchemy.orm.relationship">SQLALchemy ORM Relationship Docs</a> for more possible ways.</p>
<p><a href="https://www.osgeo.cn/sqlalchemy/orm/cascades.html#cascade-save-update">SQLAlchemy 1.4 Doc (zh version)</a></p>
<h3 id="foreign-key-constraint-setup">Foreign Key Constraint Setup</h3>
<p>SQLAlchemy can configure relationship between parents and children, using <code>backref</code> to link relationships between models. However,</p>
<ul>
<li><code>db.relationship</code> does not set up foreign key constraints for us. We need to add a column, <code>some_parent_id</code>, on the child model that has a foreign key constraint.</li>
<li>Whereas we set <code>db.relationship</code> on the <strong>parent</strong> model, we set the foreign key constraint on the <strong>child</strong> model.</li>
<li>A foreign key constraint prefers <strong>referential integrity</strong> from one table to another, by ensuring that the foreign key column always maps a primary key in the foreign table.</li>
</ul>
<img src="/2021/07/15/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-V/foreign-key-constraint.JPG" class="" title="Refrence Foreign Key with Primary Key">
<p>So how this is done using SQLAlchemy?</p>
<p>In SQLAlchemy, there is an option in <code>db.Column</code> called <code>db.ForeignKey</code> that you can use to specify a foreign key constraint, referring to the primary key of the other table / model.</p>
<img src="/2021/07/15/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-V/setup-foreign-key-constraint.JPG" class="">
<hr />
<p>🐿️ Exercise: Try to map relationships between models shown in Figure 1.(driver table &amp; vehicles table)</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Solution</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Driver</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;drivers&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    state = db.Column(db.String())</span><br><span class="line">    issued = db.Column(db.Datetime)</span><br><span class="line">    vehicles = db.relationship(<span class="string">&#x27;Vehicle&#x27;</span>, backref=<span class="string">&#x27;driver&#x27;</span>, lazy=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;vehicles&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    make = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    model = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    year = db.Column(db.Integer)</span><br><span class="line">    driver_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;drivers.id&#x27;</span>), nullable=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>Resources : <a href="https://docs.sqlalchemy.org/en/14/core/constraints.html">SQLAlchemy Docs on Defining Constraints</a></p>
<h2 id="build-todo-app-further">Build Todo App Further</h2>
<h3 id="one-to-many-relationship-setup">One-to-Many Relationship Setup</h3>
<p>Now that we've learnt how to use <code>db.relationship</code> and <code>db.ForeignKey</code> to set up relationships between models. Let's focus back on our todo app and use these concepts to model &quot;todo lists&quot; in our app, and set up the relationship between our <strong>todo model</strong> and our new <strong>todo list model</strong>.</p>
<hr />
<p>Todo lists have many todos, and every todo item belongs to exactly one todo list, which indicates the existence of a &quot;one to many relationship&quot; between todos and todo lists.</p>
<p>Reading: <a href="https://database.guide/the-3-types-of-relationships-in-database-design/">3 Types of Relationships in Database Design</a></p>
<hr />
<h4 id="create-todo-list-model">Create Todo-List Model</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    completed = db.Column(db.Boolean, nullable=<span class="literal">False</span>, default=<span class="literal">False</span>)</span><br><span class="line">    list_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;todolists.id&#x27;</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Todo <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.description&#125;</span> <span class="subst">&#123;self.completed&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todolists&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    todos = db.relationship(<span class="string">&#x27;Todo&#x27;</span>, backref=<span class="string">&#x27;list&#x27;</span>, lazy=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h4 id="migration-upgrade-the-schema">Migration: Upgrade the Schema</h4>
<p>Create and run a migration,</p>
<blockquote>
<p>~$ flask db migrate -m &quot;create todolist model&quot;</p>
</blockquote>
<p>If we run <code>flask db upgrade</code> now, it will cause error since <code>list_id</code> cannot be nullable. Like before, revise .py files,</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; aaa2f3a607b6_create_todolist_model.py &quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upgrade</span>():</span></span><br><span class="line">    <span class="comment"># ### commands auto generated by Alembic - please adjust! ###</span></span><br><span class="line">    op.create_table(<span class="string">&#x27;todolists&#x27;</span>,</span><br><span class="line">    sa.Column(<span class="string">&#x27;id&#x27;</span>, sa.Integer(), nullable=<span class="literal">False</span>),</span><br><span class="line">    sa.Column(<span class="string">&#x27;name&#x27;</span>, sa.String(), nullable=<span class="literal">False</span>),</span><br><span class="line">    sa.PrimaryKeyConstraint(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;change here&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># op.add_column(&#x27;todos&#x27;, sa.Column(&#x27;list_id&#x27;, sa.Integer(), nullable=False))</span></span><br><span class="line">    op.add_column(<span class="string">&#x27;todos&#x27;</span>, sa.Column(<span class="string">&#x27;list_id&#x27;</span>, sa.Integer(), nullable=<span class="literal">True</span>))</span><br><span class="line">    </span><br><span class="line">    op.create_foreign_key(<span class="literal">None</span>, <span class="string">&#x27;todos&#x27;</span>, <span class="string">&#x27;todolists&#x27;</span>, [<span class="string">&#x27;list_id&#x27;</span>], [<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">    <span class="comment"># ### end Alembic commands ###</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; app.py &quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line">    list_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;todolists.id&#x27;</span>), nullable=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>~$ flask db upgrade</p>
</blockquote>
<img src="/2021/07/15/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-V/after-upgrade.JPG" class="">
<blockquote>
<p>todoapp=# INSERT INTO todolists(name) VALUES('Default'); todoapp=# UPDATE todos SET list_id = 1 WHERE list_id IS NULL;</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; app.py &quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line">    list_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;todolists.id&#x27;</span>), nullable=<span class="literal">False</span>) <span class="comment"># set to back False</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>~$ flask db migrate ~$ flask db upgrade</p>
</blockquote>
<p>You've done!</p>
<img src="/2021/07/15/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-V/final-schema.JPG" class="">
<p>By the way, you can also do the above things using migration files.</p>
<hr />
<p>🐷 Final Check:</p>
<p>Add items with a list &quot;Urgent&quot; with ID of 2 and check if we get the expected results.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from app import db, TodoList, Todo</span><br><span class="line">&gt;&gt;&gt; list = TodoList(name=<span class="string">&#x27;urgent&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; todo = Todo(description=<span class="string">&#x27;This is a really important thing.&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; todo2 = Todo(description=<span class="string">&#x27;Urgent todo 2&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; todo3 = Todo(description=<span class="string">&#x27;Urgent todo 3&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; todo.list = list</span><br><span class="line">&gt;&gt;&gt; todo2.list = list</span><br><span class="line">&gt;&gt;&gt; todo3.list = list</span><br><span class="line">&gt;&gt;&gt; todo.completed = False</span><br><span class="line">&gt;&gt;&gt; todo2.completed = False</span><br><span class="line">&gt;&gt;&gt; todo3.completed = False</span><br><span class="line">&gt;&gt;&gt; db.session.add(list)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure>
<hr />
<h3 id="crud-on-list-of-todos">CRUD on List of Todos</h3>
<p>Try yourself to complete the todo lists app,</p>
<ul>
<li>Read a List: When clicking the specific todo list, display all todos belonging to the list.</li>
<li>Create a List: Implement a &quot;Create List form&quot; above the list of To-Do Lists to enable the user to create Lists.</li>
<li>Update a List (and all of its children items): Implement a Checkbox next to a To-Do List, and allow the user to mark an entire list as completed. When the list is marked completed, implement the controller so that all of its child items are also marked as completed.</li>
<li>Delete a List (and all of its children items): Implement an &quot;x&quot; remove button next to each List, and allow a user to click it in order to remove a List. When a list is removed, all of its child items should also be removed.</li>
</ul>
<p>🐣 <strong>Solution</strong>: You can visit my <a href="https://github.com/rileywang0819/demo-todoapp/tree/master/todo-app">Github repository</a> to see the source code.</p>
<h3 id="many-to-many-relationship">Many-to-Many Relationship</h3>
<p>Finally, let's talk about the 3rd type of relationship --&gt; many-to-many relationship.</p>
<h4 id="what-is-many-to-many-relationship">What is many-to-many relationship</h4>
<img src="/2021/07/15/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-V/relationship-type.JPG" class="">
<img src="/2021/07/15/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-V/relationship-type2.JPG" class="">
<img src="/2021/07/15/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-V/relationship-type3.JPG" class="">
<p>Takeaways - In one-to-many and one-to-one, the foreign key is established on the child model. - In many-to-many, a special <strong>association table</strong> exists to join the two tables together, storing two foreign keys that link to the two foreign tables that have a relationship with each other.</p>
<h4 id="setup-many-to-many-relationships">Setup many-to-many relationships</h4>
<p>To set up a many-to-many in SQLALchemy, we:</p>
<ul>
<li>Define an association table using Table from SQLAlchemy.</li>
<li>Set the multiple foreign keys in the association table.</li>
<li>Map the association table to a parent model using the option <code>secondary</code> in <code>db.relationship</code>.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Setting up the many-to-many relationship</span></span><br><span class="line"></span><br><span class="line">association_table = Table(<span class="string">&#x27;association&#x27;</span>, Base.metadata, </span><br><span class="line">    Column(<span class="string">&#x27;left_id&#x27;</span>, Integer, ForeignKey(<span class="string">&#x27;left.id&#x27;</span>)),</span><br><span class="line">    Column(<span class="string">&#x27;right_id&#x27;</span>, Integer, ForeignKey(<span class="string">&#x27;right.id&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    children = relationship(<span class="string">&#x27;Child&#x27;</span>, secondary=association_table)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;right&#x27;</span></span><br><span class="line">    children = Column(Integer, primary_key=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;postgres://password@localhost:5432/example&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">order_items = db.Table(<span class="string">&#x27;order_items&#x27;</span>,</span><br><span class="line">    db.Column(<span class="string">&#x27;order_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;order.id&#x27;</span>), primary_key=<span class="literal">True</span>),</span><br><span class="line">    db.Column(<span class="string">&#x27;product_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;product.id&#x27;</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">  <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">  status = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">  products = db.relationship(<span class="string">&#x27;Product&#x27;</span>, secondary=order_items,</span><br><span class="line">      backref=db.backref(<span class="string">&#x27;orders&#x27;</span>, lazy=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">  <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">  name = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>Until now, we've learnt how to model relationship in a relational database (PostgreSQL). We also have learnt how to build a web app connected to database using a Python library, i.e. SQLAlchemy. It supports CRUD operations.</p>
<img src="/2021/07/15/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-V/congs.gif" class="">
]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(2): API Dev and Doc(II)</title>
    <url>/2021/07/19/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-II/</url>
    <content><![CDATA[<p>Until now, we've learnt,</p>
<ul>
<li>how to organize API endpoints</li>
<li>how to handle CORS</li>
<li>how to parse the request path and body
<ul>
<li>pagination</li>
</ul></li>
<li>how to use POST/PATCH/GET/DELETE request in Flask</li>
<li>How to handle error with <code>@app.errorhanlder()</code></li>
</ul>
<p>We need to test API to ensure its correctness. In this blog, I will talk about <strong>unit tests</strong>, which make the process of testing much more faster. Then, I will talk about API documentation.</p>
<span id="more"></span>
<h2 id="api-testing">API Testing</h2>
<h3 id="overview">Overview</h3>
<p>As developers, we need to write unit tests for our APIs to verify its behavior, and besides, unit tests can ensure that when we update APIs, we can still easily test all previous functionality.</p>
<p>For APIs, test should be written:</p>
<ul>
<li>To confirm expected request handling behavior</li>
<li>To confirm success-response structure is correct</li>
<li>To confirm expected errors are handled appropriately</li>
<li>To confirm CRUD operations are correct and persistent</li>
</ul>
<p>The order of operations for application development should always be:</p>
<ul>
<li>Discovery: market research, technical documentation specification, feature map.</li>
<li>Design: sketch, wireframe, mockup.</li>
<li>Development: front-end and back-end.</li>
<li>Quality Assurance</li>
<li>Release to the store – deployment.</li>
<li>Maintenance, technical support and further software development.</li>
</ul>
<img src="/2021/07/19/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-II/app-quality-assurance.png" class="" title="Quality Assurance">
<h3 id="testing-in-flask">Testing in Flask</h3>
<p>Let's look at an example.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import dependencies</span></span><br><span class="line"><span class="keyword">from</span> flaskr <span class="keyword">import</span> create_app</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> setup_db</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="comment"># define the test case class for app or section of app</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppNameTestCase</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; This class represents the _____ test case. &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Define test variables and initialize app. &quot;&quot;&quot;</span></span><br><span class="line">        self.app = create_app()</span><br><span class="line">        self.client = self.app.test_client</span><br><span class="line">        self.database_name = <span class="string">&quot;test_db&quot;</span></span><br><span class="line">        self.database_path = <span class="string">&quot;postgresql://&#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            <span class="string">&#x27;localhost:5432&#x27;</span>, self.database_name</span><br><span class="line">        )</span><br><span class="line">        setup_db(self.app, self.database_path)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot; Run after each test. &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_given_behavior</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot; Test the given behavior. &quot;&quot;&quot;</span></span><br><span class="line">            response = self.client().get(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            self.assertEqual(response.status_code, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># make the tests executable</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>
<p>🍉 External Resource:</p>
<ul>
<li><a href="http://docs.jinkan.org/docs/flask/testing.html">Flask Testing</a></li>
<li><a href="https://github.com/rileywang0819/demo-bookshelf-api/blob/master/backend/test_flaskr.py">tests of Bookshelf API</a></li>
</ul>
<h3 id="tdd">TDD</h3>
<p>Test-Driven Development (or TDD) is a software development paradigm used very commonly in production. It is based on a short, rapid development cycle in which tests are written before the executable code and constantly iterated on.</p>
<img src="/2021/07/19/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-II/TDD-cycle.JPG" class="">
<h2 id="documentation">Documentation</h2>
<h3 id="doc-examples">Doc Examples</h3>
<p>Let's look at some examples of documentaion, which can help you to form intuitive impression about documantion.</p>
<ul>
<li><a href="https://developers.google.com/maps/documentation/">Google Maps API</a> : too large</li>
<li><a href="https://restcountries.eu/">REST countries</a> : without response examples ☹️</li>
<li><a href="https://stripe.com/docs/api?utm_source=zapier.com&amp;utm_medium=referral&amp;utm_campaign=zapier&amp;utm_source=zapier.com&amp;utm_medium=referral&amp;utm_campaign=zapier">Stripe API</a> : strong and good 😁</li>
</ul>
<h3 id="api-doc">API Doc</h3>
<p>Good API documentation allows any developer considering the API to quickly understand the purpose of the API, the data it works with, and how to send requests and parse the responses. Some documentation. particularly for large projects, even host samples which can run withing the doc.</p>
<p>You'd better includes the following components in your API doc.</p>
<ul>
<li>Introduction</li>
<li>Getting Started
<ul>
<li>Base URL</li>
<li>API Keys /Authentication (if applicable)</li>
</ul></li>
<li>Errors
<ul>
<li>Response codes</li>
<li>Messages</li>
<li>Error types</li>
</ul></li>
<li>Resource endpoint library
<ul>
<li>Organized by resource</li>
<li>Include each endpoint</li>
<li>Sample request</li>
<li>Arguments including data types</li>
<li>Response object including status codes and data types</li>
</ul></li>
</ul>
<hr />
<p>Example</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># Getting started</span></span><br><span class="line"></span><br><span class="line">Now, add a Getting Started section to your documentation. </span><br><span class="line">Remember, this should include at least your base URL and an explanation of authentication.</span><br><span class="line">Feel free to provide other information that is relevant for your API.</span><br><span class="line"></span><br><span class="line"><span class="section"># Error Handling</span></span><br><span class="line">Now, add an Error Handling section to your documentation. </span><br><span class="line">It should include the format of the error responses the client can expect as well as which status codes you use.</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Response codes</span><br><span class="line"><span class="bullet">-</span> Messages</span><br><span class="line"><span class="bullet">-</span> Error types</span><br><span class="line"></span><br><span class="line"><span class="section"># Endpoint Library</span></span><br><span class="line"></span><br><span class="line">Now, add an Endpoint Library section to your documentation. </span><br><span class="line">Make sure that endpoints, methods and returned data are all clear. </span><br><span class="line">Consider including sample requests for clarity</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Organized by resource</span><br><span class="line"><span class="bullet">-</span> Include each endpoint</span><br><span class="line"><span class="bullet">-</span> Sample request</span><br><span class="line"><span class="bullet">-</span> Arguments including data types</span><br><span class="line"><span class="bullet">-</span> Response object including status codes and data types</span><br></pre></td></tr></table></figure>
<hr />
<p>🌌 External Resource: <a href="https://swagger.io/">Swagger</a></p>
<h3 id="project-doc">Project Doc</h3>
<p>All good, well-documented projects have a README.md file that should clearly explain the project and how to get started with it to any developers who may want to use or contribute to the project.</p>
<p>Here is an example of how to constrcut the project's doc.</p>
<ul>
<li>Project Title
<ul>
<li>Description of project and motivation</li>
<li>Screenshots (if applicable), with captions</li>
<li>Code Style if you are following particular style guides</li>
</ul></li>
<li>Getting Started
<ul>
<li>Prerequisites &amp; Installation, including code samples for how to download all pre-requisites</li>
<li>Local Development, including how to set up the local development environment and run the project locally</li>
<li>Tests and how to run them</li>
</ul></li>
<li><p>API Reference. If the API documentation is not very long, it can be included in the README</p></li>
<li><p>Deployment (if applicable)</p></li>
<li><p>Authors</p></li>
<li><p>Acknowledgements</p></li>
</ul>
]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(3): Identity and Access Management(I)</title>
    <url>/2021/07/20/Full-Stack-Web-Development/Web-Dev-3-Identity-and-Access-Management-I/</url>
    <content><![CDATA[<p>Until now, we have learnt</p>
<ul>
<li>How to model data of a project</li>
<li>How to connect to PostgreSQL database and do operations using Flask-SQLAlchemy</li>
<li>How to design, implement and test api</li>
<li>How to write api docs</li>
</ul>
<p>Too many things but one important thing left —— security!</p>
<p>Next, I will try to secure API endpoints by talking about topics including,</p>
<ul>
<li>Authentication(认证) systems - design, implementation, and use of third party services.</li>
<li>Common vulnerabilities while working with passwords and how to avoid these pitfalls.</li>
<li>Authorization(授权) systems - design and implementation for backend and frontend.</li>
<li>Basic security best practices and key principals to keep in mind.</li>
</ul>
<span id="more"></span>
<img src="/2021/07/20/Full-Stack-Web-Development/Web-Dev-3-Identity-and-Access-Management-I/overview.JPG" class="">
<p>By the way, in this part, we don't cover,</p>
<ul>
<li>Advanced security principals.</li>
<li>Penetration testing, red teaming, vulnerability detection.</li>
<li>&quot;Hacking&quot; and tools and systems to perform nefarious actions.</li>
<li>DevOps, Deployments, Scaling or maintaining these systems in the cloud</li>
</ul>
<h2 id="overview">Overview</h2>
<h3 id="recap-http-status-code">Recap: HTTP status code</h3>
<p>We have met several HTTP status codes, such as 200, 400, 404, 405, 422 etc. In this part, there are 2 important status codes,</p>
<ul>
<li><strong>401 Unauthorized</strong>
<ul>
<li>The client has failed in authentication, or not yet provide it. The server cannot validate the identity of the requested party.</li>
</ul></li>
<li><strong>403 Forbidden</strong>
<ul>
<li>The client does not have permission to access the resource. Unlike 401, the server knows who is making the request, but that requesting party has no authorization to access the resource.</li>
</ul></li>
</ul>
<h3 id="postman">Postman</h3>
<p>Previously, we always use command line tool named <code>curl</code> to help us develop and test APIs. From here, we will use another GUI tool called <strong>Postman</strong>.</p>
<h3 id="recap-sqlalchemy">Recap: SQLAlchemy</h3>
<p>Recap SQLAlchemy (not Flask-SQLAlchemy) with the following example,</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># Init the engine</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, String, Integer</span><br><span class="line"></span><br><span class="line">DB_NAME = <span class="string">&#x27;sqlalchemy_example&#x27;</span></span><br><span class="line">PROJECT_DIR = os.path.dirname(os.path.abspath(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">DB_HOST = os.getenv(<span class="string">&#x27;DB_HOST&#x27;</span>, <span class="string">&#x27;localhost:5432&#x27;</span>)</span><br><span class="line">DB_USER = os.getenv(<span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;postgres&#x27;</span>)</span><br><span class="line">DB_PASSWORD = os.getenv(<span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">DB_NAME = os.getenv(<span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;sqlalchemy_example&#x27;</span>)</span><br><span class="line">DB_PATH = <span class="string">&quot;postgresql://&#123;&#125;:&#123;&#125;@&#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">    DB_USER, DB_PASSWORD, DB_HOST, DB_NAME</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">engine = create_engine(DB_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># Define model</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span></span><br><span class="line">    <span class="comment"># Autoincrementing, unique primary key</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer().with_variant(Integer, <span class="string">&quot;postgresql&quot;</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = Column(String(<span class="number">80</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    password =  Column(String(<span class="number">180</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">         <span class="keyword">return</span> <span class="string">f&#x27;&lt;User <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.username&#125;</span> <span class="subst">&#123;self.password&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">already_exist = engine.dialect.has_table(engine.connect(), <span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> already_exist:</span><br><span class="line">    User.metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line">User.__table__</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># Init a session</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">Session.configure(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># Add a new record</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    new_user = User(username=<span class="string">&#x27;Abby&#x27;</span>, password=<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    session.add(new_user)</span><br><span class="line">    session.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    session.rollback()</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># Fetch</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"></span><br><span class="line">user = session.query(User).filter_by(username=<span class="string">&#x27;Abby&#x27;</span>).one_or_none()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;No such user.&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(user)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># Close session</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"></span><br><span class="line">session.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="identity-and-authentication">Identity and Authentication</h2>
<h3 id="overview-1">Overview</h3>
<p>Both identity and authentication are revolving around one question, &quot;Who are you?&quot;, or more specifically, &quot;who is making request to system?&quot;</p>
<h3 id="common-authentication-methods">Common Authentication Methods</h3>
<p>In digital authentication, a commonly used method in the age of &quot;Software as a Service (Saas)&quot; is using <code>username</code> and <code>password</code> pair. We use database and other forms of storage so that we can store our ground truth of what our user credentials should look like. We also use a temporary credential called <code>token</code> which is stored in client, to avoid entering password on each individual request.</p>
<img src="/2021/07/20/Full-Stack-Web-Development/Web-Dev-3-Identity-and-Access-Management-I/digital_authentication1.JPG" class="">
<p>Even though passwords are by far the most common way of authenticating, they come with a load of problems.</p>
<ul>
<li>Users maybe
<ul>
<li>forget their passwords</li>
<li>use simple passwords</li>
<li>use common passwords</li>
<li>repeat passwords across different service</li>
<li>share passwords</li>
</ul></li>
<li>Passwords can be compromised(破解、泄露)</li>
<li>Developers maybe incorrectly check, e.g. compare password strings</li>
<li>Developers can cut corners</li>
</ul>
<p>An important thing is <strong>we should never store plain text password in database.</strong> TODO: why?</p>
<h3 id="alternative-authentication-methods">Alternative Authentication Methods</h3>
<h4 id="single-sign-on-sso">Single Sign-On (SSO)</h4>
<p>Single Sign-On, essentially is trusting someone else can answer who you are.</p>
<img src="/2021/07/20/Full-Stack-Web-Development/Web-Dev-3-Identity-and-Access-Management-I/without-SSO.JPG" class="" title="World without SSO">
<img src="/2021/07/20/Full-Stack-Web-Development/Web-Dev-3-Identity-and-Access-Management-I/with-SSO.JPG" class="" title="World with SSO">
<h4 id="multi-factor-authentication">Multi-Factor Authentication</h4>
<p>Multi-factor authentication gives us one layer of trust on top of a password.</p>
<img src="/2021/07/20/Full-Stack-Web-Development/Web-Dev-3-Identity-and-Access-Management-I/multi-factor-auth.JPG" class="">
<img src="/2021/07/20/Full-Stack-Web-Development/Web-Dev-3-Identity-and-Access-Management-I/multi-factor-auth2.JPG" class="">
<h4 id="passwordless">Passwordless</h4>
<img src="/2021/07/20/Full-Stack-Web-Development/Web-Dev-3-Identity-and-Access-Management-I/passwordless.JPG" class="">
<h4 id="biometric-authentication">Biometric Authentication</h4>
<img src="/2021/07/20/Full-Stack-Web-Development/Web-Dev-3-Identity-and-Access-Management-I/bio-auth.JPG" class="">
<h3 id="third-party-auth-systems">Third-Party Auth Systems</h3>
<p>Monolithic architecture is great as you are starting off with small systems where you might have a few endpoints or few responsiblities. But as your system starts grow and becomes more complex, it might become overwhelming to maintain and manage. Often in a monolithic service with many responsiblities, there might be interdependencies that make it difficult to make changes to your code. This is called <em>technical debt</em>.</p>
<p>Modern architecture is ofter referred to as <strong>microservices</strong>, where we take those individual responsibilies and split them up into smaller servers or smaller pieces of architecture deployed across different areas of stack. One server might have a single responsiblity.</p>
<img src="/2021/07/20/Full-Stack-Web-Development/Web-Dev-3-Identity-and-Access-Management-I/monolithic-vs-microservices.JPG" class="" title="Monolithic vs. Microservice">
<p>In the above microservice architecture, our authentication service is now embedded within each system. If we change one of these systems or fix one vulnerablity in a system, we might have to change across all different services or fix across entire stack.</p>
<p>In this case, maybe it will be better to treat out authentication service as a microservice of its own.</p>
<img src="/2021/07/20/Full-Stack-Web-Development/Web-Dev-3-Identity-and-Access-Management-I/micro-auth.JPG" class="">
<img src="/2021/07/20/Full-Stack-Web-Development/Web-Dev-3-Identity-and-Access-Management-I/3rd-pary-authen.JPG" class="" title="Third-Party Extra Authentication Service">
<p>Now, you can either implement your own authentication microservices, or optionally use third-party authentication systems. In this blog, I will talk about how to use a third-party system called <code>Auth0</code> to perform authentication.</p>
<hr />
<p>🐶</p>
<p>在分布式系统中，由于业务逻辑封装在各个微服务中，每个微服务都需要对用户的行为进行认证和许可，于是就产生了两种可能的方式：第一种是通过一个中心化的权限管理系统，对用户的身份和权限进行统一的管理，可以做到一次授权，多次多点使用，但是这个独立的安全微服务需要聚合各个微服务中的权限控制逻辑，多一个基于不同业务逻辑实现的微服务可能需要在安全微服务中添加新的实现；第二种是将安全部分分散到各个微服务中，由各个微服务根据自身的业务对用户的访问进行管理和控制，这会导致安全管理过于分散，甚至每个微服务都有自己的一套实现方式，不利于统一管理。这两种方式都有利有弊，如何选择需要根据项目的具体需求进行宏观判断，甚至在一定情况下可以结合使用。</p>
<hr />
<p>External Resources: commonly used third-party authentication systems</p>
<ul>
<li><a href="https://auth0.com/">Auth0</a></li>
<li><a href="https://aws.amazon.com/cn/cognito/">AWS Cognito</a></li>
<li><a href="https://firebase.google.com/docs/auth">Firebase Auth</a></li>
<li><a href="https://www.okta.com/">Okta</a></li>
</ul>
<h3 id="implement-auth0">Implement Auth0</h3>
<p><code>Auth0</code> works a little bit differently from a normal login flow. Instead of rendering the login screen on our client directly, we will direct our clients to a hosted page provided by Auth0. On this page, the user can perform one of many types of authentication including a username and password, SSO and etc.</p>
<p>Auth0 is entirely responsible for the login action within their service. Once the login is complete, Auth0 will redirect our user back to our main frontend, complete with the <code>JWT</code> of that authenticated request. That JWT can be passed along to our various services which need to authenticate our user. Those servers will interact with our Auth0 account to validate that those JWTs are authentic and have not been tampered with.</p>
<p>You can setup Auth0 by visiting <a href="https://auth0.com/">Auth0 website</a> and signing up for a new account.</p>
<hr />
<p>Note: Auth0 will prompt us to request a <strong>tenant domain name</strong>. This the domain name that you will be interacting with both for API calls to validate JWTs, but also for our client to redirect to, for that hosted login screen. So it should be something that is branded or sounds nice for your end users.</p>
<hr />
]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(3): Identity and Access Management(II)</title>
    <url>/2021/07/21/Full-Stack-Web-Development/Web-Dev-3-Identity-and-Access-Management-II/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(4): Server Deployment, Containerization and Testing(1)</title>
    <url>/2021/07/27/Full-Stack-Web-Development/Web-Dev-4-Server-Deployment-Containerization-and-Testing-1/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(4): Server Deployment, Containerization and Testing(2)</title>
    <url>/2021/07/28/Full-Stack-Web-Development/Web-Dev-4-Server-Deployment-Containerization-and-Testing-2/</url>
    <content><![CDATA[
]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Lecture 1: The Shell</title>
    <url>/2021/12/17/The-Missing-Semester/Lecture-1-The-Shell/</url>
    <content><![CDATA[<p>This is the lecture note of The Missing Semester - <a href="https://missing.csail.mit.edu/2020/course-shell/">Lecture 1</a>.</p>
<p>Today's topic is the shell.</p>
<span id="more"></span>
<h2 id="what-is-the-shell">What is the shell?</h2>
<p>Computers have a variety of interfaces for giving commands:</p>
<ul>
<li>GUIs</li>
<li>Voice Interfaces</li>
<li>AR/VR</li>
<li>Shell: old-school textual interfaces</li>
<li>...</li>
</ul>
<p>The core functionality of the shell: allows you to run programs, give them input, and inspect their semi-structured output.</p>
<h2 id="using-the-shell">Using the shell</h2>
<p>🦁 The shell showed in this blog is <code>BASH</code>, which is one of the most widely used shells, and has similar syntax to many other shells.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># machine: missing</span></span><br><span class="line"><span class="comment"># current working directory: ~(home)</span></span><br><span class="line"><span class="comment"># $: tells that you are not the root user</span></span><br><span class="line">missing:~$ date</span><br><span class="line">Fri Dec 17 16:06:49 JST 2021</span><br><span class="line"></span><br><span class="line"><span class="comment"># shell parses the command by whitespace</span></span><br><span class="line">missing ~$ <span class="built_in">echo</span> hello</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># either use quotes or escape characters</span></span><br><span class="line">missing ~$ <span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span>   <span class="comment"># single quote is also ok</span></span><br><span class="line">Hello World</span><br><span class="line">missing ~$ <span class="built_in">echo</span> Hello\ World</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>
<p>How does the shell know how to find the <code>date</code> and <code>echo</code> program?</p>
<p>Actually, <strong>the shell is a programming environment</strong>, just like Python or Ruby. So it has variables, conditionals, loops, and functions. When you run commands in your shell, you are writing a small bit of code that your shell interprets. If the shell is asked to execute a command that doesn't match one the its programming keywords, it will consult an <code>environment variable</code> called <code>$PATH</code> that lists which directories the shell should search for programs.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the shell searches through the &quot;:&quot;-separated list of directories for a file named echo</span></span><br><span class="line">missing:~$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># find out which file is executed for a program name: using &quot;which&quot; program</span></span><br><span class="line">missing:~$ <span class="built_in">which</span> <span class="built_in">echo</span></span><br><span class="line">/bin/<span class="built_in">echo</span></span><br></pre></td></tr></table></figure>
<h2 id="navigating-in-the-shell">Navigating in the shell</h2>
<p>A path on the shell is a delimited list of directories, separated by:</p>
<ul>
<li>Linux and MacOS: <code>/</code></li>
<li>Windows: <code>\</code></li>
</ul>
<p>On Linux and MacOS, the path <code>/</code> is the <strong>&quot;root&quot;</strong> of the file system, under which all directories and files lie. On Windows, there is one root for each disk partition, such as <code>C:\</code> .</p>
<p>A path can be either:</p>
<ul>
<li>absolute path: start with <code>/</code></li>
<li>relative path</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">missing:missing$ <span class="built_in">pwd</span></span><br><span class="line">/home/missing</span><br><span class="line"></span><br><span class="line">missing:~$ <span class="built_in">cd</span> /home</span><br><span class="line">missing:/home$ <span class="built_in">pwd</span></span><br><span class="line">/home</span><br><span class="line"></span><br><span class="line">missing:/home$ <span class="built_in">cd</span> ..</span><br><span class="line">missing:/$ <span class="built_in">pwd</span></span><br><span class="line">/</span><br><span class="line"></span><br><span class="line">missing:/$ <span class="built_in">cd</span> ./home</span><br><span class="line">missing:/home$ <span class="built_in">pwd</span></span><br><span class="line">/home</span><br><span class="line"></span><br><span class="line">missing:/home$ <span class="built_in">cd</span> missing</span><br><span class="line">missing:missing$ <span class="built_in">pwd</span></span><br><span class="line">/home/missing</span><br><span class="line"></span><br><span class="line"><span class="comment"># cd to the directory you were previously in</span></span><br><span class="line">missing:/home$ <span class="built_in">cd</span> -</span><br><span class="line">/home</span><br><span class="line"></span><br><span class="line">missing:~$ ../../bin/<span class="built_in">echo</span> hello</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>
<h2 id="commands">Commands</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">missing:/$ ls</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># -l: usee a long listing format</span></span><br><span class="line"><span class="comment"># r: for files, it means read contents; for directories, it means see which files are in the directory; </span></span><br><span class="line"><span class="comment"># w: for files, it means write or revise contents of the file; for directories, it means rename/create/remove files within this directory</span></span><br><span class="line"><span class="comment"># x: for files, it means execute the file; for directories, it means search or enter the directory</span></span><br><span class="line">missing:~$ ls -l /home</span><br><span class="line">drwxr-xr-x 1 missing  users  4096 Jun 15  2019 missing</span><br></pre></td></tr></table></figure>
<p>The paramter <code>-l</code> gives us more information about each file or directory.</p>
<ul>
<li>The first <code>d</code> tells that <code>missing</code> is a directory; if it is a file ,then use <code>-</code> parameter;</li>
<li><code>rwx</code> indicates what permissions the owner of the file(<code>missing</code>) have;</li>
<li><code>r-x</code> indicates what permissions the owning groups(<code>users</code>) have, <code>-</code> means the given principal does not have the given permission;</li>
<li><code>r-x</code> indicates what permissions everyone else has;</li>
</ul>
<p>If you ever want more information about a program's arguments, input, outputs, or how it works in general, use <code>man</code> program.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># press &quot;q&quot; to exit</span></span><br><span class="line">missing:~$ man ls</span><br></pre></td></tr></table></figure>
<h2 id="connecting-programs">Connecting programs</h2>
<p>In the shell, programs have 2 primary &quot;streams&quot;, <strong>input stream</strong> and <strong>output stream</strong>.</p>
<p>Normally, a program's input and output are both your terminal —— keyboard as input and screen as output. However, we can rewire streams.</p>
<p>The simplest form of redirection is <code>&lt; file</code> and <code>&gt; file</code> , which will let you rewire the input and output streams of a program to a file respectively.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">missing:~$ <span class="built_in">echo</span> hello &gt; hello.txt</span><br><span class="line"></span><br><span class="line">missing:~$ cat hello.txt</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">missing:~$ cat &lt; hello.txt</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">missing:~$ cat &lt; hello.txt &gt; hello2.txt</span><br><span class="line">missing:~$ cat hello2.txt</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt; operator: append to a file</span></span><br><span class="line">missing:~$ <span class="built_in">echo</span> hello2 &gt;&gt; hello2.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip character |: chain promgrams such that the output of one is the input of another</span></span><br><span class="line">missing:/$ ls</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line"></span><br><span class="line"><span class="comment"># tail: print the last n lines of its input</span></span><br><span class="line">missing:/$ ls | tail -n2</span><br><span class="line"><span class="comment"># etc</span></span><br><span class="line"><span class="comment"># home</span></span><br></pre></td></tr></table></figure>
<h2 id="a-versatile-and-powerful-tool">A versatile and powerful tool</h2>
<p>The &quot;root&quot; user if a special user on most Unix-like systems.</p>
<p>The root user is above (almost) all access restrictions, and can create, read, update, and delete any file in the system. You will not usually log into your system as the root user though, since it’s too easy to accidentally break something. Instead, you will be using the <code>sudo</code> command(program). As its name implies, it lets you “do” something “as su” (short for “super user”, or “root”). When you get permission denied errors, it is usually because you need to do something as root. Though make sure you first double-check that you really wanted to do it that way!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">missing:/$ sudo su</span><br><span class="line">(enter password)</span><br><span class="line"><span class="comment">#change from $ to #: from non-root user to root user</span></span><br><span class="line">missing:/<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>Let's look an example.</p>
<p>If you want to write to the <code>sysfs</code> file system mounted under <code>/sys</code>. <code>sysfs</code> exposes a number of kernel parameters as files, so that you can easily reconfigure the kernel on the fly without specialized tools.</p>
<p><em>Note that <code>sysfs</code> does not exist on Windows or macOS.</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /sys/class/backlight file: expose your laptop&#x27;s screen</span></span><br><span class="line"></span><br><span class="line">$ sudo find -L /sys/class/backlight -maxdepth 2 -name <span class="string">&#x27;*brightness*&#x27;</span></span><br><span class="line">/sys/class/backlight/thinkpad_screen/brightness</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /sys/class/backlight/thinkpad_screen</span><br><span class="line"></span><br><span class="line"><span class="comment"># tee command: take its input and write to a file, but also to the standard output</span></span><br><span class="line">$ <span class="built_in">echo</span> 3 | sudo tee brightness</span><br></pre></td></tr></table></figure>
<h2 id="exercises">Exercises</h2>
<p><a href="https://github.com/rileywang0819/missing-semester/blob/main/lecture1.md">My solution</a> of exercises.</p>
]]></content>
      <categories>
        <category>The-Missing-Semester-Of-Your-CS-Education</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(0): A Primer</title>
    <url>/2021/07/11/Full-Stack-Web-Development/Web-Dev-0-A-Primer/</url>
    <content><![CDATA[<p>This blog introduces everything about web development. You will have a better idea of what different technologies are out there and what you'll want to learn if you want to get into web development.</p>
<p>🌼 Reminder: <em>Keep learning if you don't want to be weeded out.</em></p>
<span id="more"></span>
<h2 id="prerequisite">Prerequisite</h2>
<p>You can get into web development as long as you knows the basics of programming.</p>
<h2 id="networks">Networks</h2>
<p>The Internet is a computer network spreading across the globe that connects a multitude of devices and allows them to communicate with one another.</p>
<p>Websites on the Internet are hosted on devices referred to as <strong>servers</strong> , the device that you’re accessing the webpage is referred to as the <strong>client</strong>. When you’re interacting with a webpage on the Internet, what you’re essentially doing is exchanging data with the server.</p>
<hr />
<p>The <strong>World Wide Web (WWW)</strong>, commonly known as the <strong>Web</strong>, is an information system where documents and other web resources are identified by <code>Uniform Resource Locators(URLs, such as https://example.com/)</code>, which may be interlinked by hyperlinks, and are accessible over the Internet. The resources of the Web are transferred via the <code>Hypertext Transfer Protocol(HTTP)</code>, may be accessed by users by a software application called a <code>web browser</code>, and are published by a software application called a <code>web server</code>. The World Wide Web is not synonymous with the Internet, Web can be seen as one of services provided by the Internet.</p>
<hr />
<h4 id="network-layers">Network layers</h4>
<img src="/2021/07/11/Full-Stack-Web-Development/Web-Dev-0-A-Primer/Internet-layer.jpg" class="" title="Network Layers">
<p>The network are typically divided into abstract layers, each of which performs a specific task that aids in the overall communication process:</p>
<p>(from the bottom layer up to the topmost layer)</p>
<ul>
<li><p><strong>Application Layer:</strong> is responsible for process-to-process communication across the Internet. The application itself is built on top of this layer. The application layer provides a communication interface and end-user services to the application for its communication with single processes.</p></li>
<li><p><strong>Transport Layer:</strong> is responsible for connecting applications on the Internet. It demultiplexes(解复用) data coming in from a single source and transmits it to the application it is intended for. The basic purpose of the transport layer in the context of the web is that it provides process-to-process communication; it allows two individual processes on either the same machine or separate machines to send messages to each other. To do so, it uses <strong>sockets(套接字)</strong>, which are essentially just the gateway to a process. In other words, sockets are the means through which messages are received and sent out by a process.</p></li>
<li><p><strong>Network Layer:</strong> is responsible for connecting any two machines on the Internet, allows for end-systems to commnunicate with each other on a large scale</p></li>
<li><p><strong>Data Link Layer:</strong> is responsible for transimitting data from one device to another device that is <strong>exactly one line away</strong></p></li>
<li><p><strong>Physical Layer:</strong> physical wiring and circuits that makes the network works</p></li>
</ul>
<p>Each layer is built on top of the previous layer. And each layer has <code>protocols</code> that implement specific functionalities that are involved in the data exchange process.</p>
<h3 id="how-does-web-work">How does Web work?</h3>
<p>We have already know that clients send messages to servers requesting data, and servers respond with the required data. But how is this data transferred?</p>
<p>To answer this question, first, we will define the structure of the Internet. Then talk about how data is transported across the network.</p>
<img src="/2021/07/11/Full-Stack-Web-Development/Web-Dev-0-A-Primer/internet-structure.png" class="">
<h4 id="switches">1. Switches</h4>
<p>The Internet is comprised of devices known as <strong>switches(交换机)</strong> that facilitate the connection of each device to every other device on the network. The devices themselves are referred to as end-systems. End-systems are connected to switches through <strong>links</strong> and all of the switches are, in turn, connected to each other. Thus ensuring that every end-system on the Internet is implicitly connected to every other end-system.</p>
<p>In addition to connecting end-systems to one another, switches facilitate the communication between any two end-systems by forwarding packets(转发数据包) along the path that they know exists between the packet source and destination. So basically, switches store pre-determined paths between end-systems and forwards packets among them.</p>
<h4 id="routers">2. Routers</h4>
<p><strong>Routers(路由器</strong>) have the same function as switches also connect end systems to the rest of the web. However, routers are actually very different from switches <em>since they have the additional capability of allowing lookups for destination addresses and determining the shortest or the least busy path from the source of a packet to its destination.</em></p>
<h4 id="data-packets">3. Data packets</h4>
<p>The data that needs to be transferred will be divided into several smaller chunks of bits known as <strong>packets(数据包)</strong>, and then each packet will be sent to its destination independently.</p>
<p>Compared to sending large amounts of data in a single packet, sending multiple smaller packets will be more efficient and reliable.</p>
<h4 id="tcp">4. TCP</h4>
<p>The primarily used protocol for communication between a web application and a browser is referred to as the <code>Transmission Control Protocol (TCP)</code>. TCP is a transport layer protocol that takes the responsibility of transmitting data and ensures reliable data transfer between clients and servers across the web.</p>
<p>The way TCP does is by adding additional information to data packets that allow for packet authentication(认证), and by allowing the exchange of acknowledgment messages between the client and server to confirm data transmissions.</p>
<p>The TCP protocol starts with a <code>3-way handshake</code>. The handshake allows both ends (server and client) to initiate and maintain several TCP connections at once.</p>
<img src="/2021/07/11/Full-Stack-Web-Development/Web-Dev-0-A-Primer/3-Way-TCP-Handshake.png" class="">
<h4 id="http-https">5. HTTP &amp; HTTPS</h4>
<p>After initiating TCP connections, clients and servers communicate with each other by sending messages to one another. Now, we will look into exactly how these messages are structured.</p>
<p><code>HyperText Transfer Protocol(HTTP)</code> is an application layer protocol that dictates the structure of messages exchanged between client and server. It also dictates how messages are exchanged. It is used for transmitting text and hyperlinks.</p>
<p>HTTP is built on top of TCP. Basically, when you enter a URL in your browser, what actually happens is that an HTTP command gets sent to the server hosting the application to fetch and transmit the requested web page through TCP.</p>
<hr />
<p><code>HTTPS</code> is an acronym for <strong>HyperText Transfer Protocol Secure</strong>, and it is basically just the secure version of HTTP. What this means is that communications between the browser and the hosting server are encrypted so that no third parties on the network can access information that is not intended to be shared.</p>
<hr />
<h4 id="ports">6. Ports</h4>
<p>HTTP and TCP ensure efficient communication between end-systems on the web, but they don't determine destination where messages to go. Ports solve this problem.</p>
<p><code>Ports</code> are where messages from the network arrive on an end-system.</p>
<p>We briefly discussed sockets earlier and said they are the gateways to processes. Sockets are opened on ports in order to allow processes to send and receive messages. Ports are designated by numbers, and all ports below 1024 are associated with a specific protocol by default. The port number for HTTP, for instance, is 80, and what this means is that any messages you send or receive on the web come in to and leave your machine on a socket at port 80. Ports above 1024 are open ports available to programmers to use for any process they want to communicate with a network. They can build sockets on these ports, and define the structure and type of messages that this socket can cater to through socket programming.</p>
<p><em>Socket programming</em> is an aspect of Computer Networks, and it is a highly useful skill.</p>
<h3 id="how-data-finds-its-way">How Data Finds its Way?</h3>
<p>In this part, we will look into how clients and servers know where they want to send their data, and what protocols exist to ensure each end-system on a network has a unique identity that allows it to be reached by other end-systems.</p>
<h4 id="internet-protocol-ip-addresses">Internet protocol &amp; IP addresses</h4>
<p><code>Internet Protocol(IP)</code>, is a network layer protocol that is responsible for assigning addresses to devices in order to give them <strong>unique</strong> identities that make them reachable and discoverable. Each device on the Internet has a unique IP address that other devices use to connect with it.</p>
<p>Once you have your website host(托管) on a server, users will be able to connect with it through the <code>IP address</code> of the server and receive data.</p>
<p>You can use the following command line to find your own IP address:</p>
<blockquote>
<p>$ Linux, macOS: ifconfig</p>
<p>$ Windows: ipconfig</p>
</blockquote>
<h4 id="dns">DNS</h4>
<p>You may be wondering now where the IP address comes in if you reach websites through URLs. Well, that’s where <code>DNS (Domain Name System)</code> comes in. Routers across the web do not store URLs for every single website hosted on the Internet, they only know IP addresses and forward packets towards their destinations based on them. Users, however, only know URLs, or domain names, for the websites they are visiting. To bridge this clear gap of information, the Internet makes use of <strong>DNS servers</strong>, which serve as translational intermediaries between end-systems and the routers that serve to forward data packets coming from them to their destinations. The process of making a lookup for a domain name on a DNS server and obtaining its corresponding IP address is referred to as a <strong>DNS resolution(解析)</strong>.</p>
<img src="/2021/07/11/Full-Stack-Web-Development/Web-Dev-0-A-Primer/DNS-work.png" class="">
<h3 id="vedio-life-of-a-packet">Vedio: Life of a Packet</h3>
<p>You can watch <a href="https://www.youtube.com/watch?v=9BGWrLiT9qs">this vedio: Life of an IP Packet</a> to know exactly how data goes from a client to server. Although some terminology used in it might not exactly be up-to-date, but the underpinnings are essentially the same today. It is a nice overview for beginners.</p>
<h2 id="databases">Databases</h2>
<p>In this part, we will talk about <strong>databases</strong> and <strong>database management systems (DBMS)</strong>, and the role they play in making the web applications.</p>
<h3 id="databases-in-web-development">Databases in Web Development</h3>
<h4 id="static-vs.-dynamic-web-pages">Static vs. Dynamic Web Pages</h4>
<p>Websites may be classified into one of two types:</p>
<ul>
<li>Static</li>
<li>Dynamic</li>
</ul>
<p><strong>Static websites</strong> are ones that only display information such as text or pictures on their web pages that users cannot interact with.</p>
<p><strong>Dynamic websites</strong>, on the other hand, allow for user interaction such as login or click the button, and that is where Databases come into the picture. The information that web applications are able to display or allow you to access, needs to be stored in database associated with the web application.</p>
<p>Think of any website you’ve visited today. How many of them required for you to sign in or allowed you to click on a button that retrieved some information? The information that web applications are able to display to you or process to allow you to access other information needs to be stored somewhere. That somewhere is a database associated with the web application.</p>
<img src="/2021/07/11/Full-Stack-Web-Development/Web-Dev-0-A-Primer/basic-struc-dynamic-website.JPG" class="">
<h4 id="dbms">DBMS</h4>
<p><strong>Database Management System(DBMS)</strong> allows data to be separated from the logic of the application and stored separately. When application needs data, it then makes calls to database for any required data without having to integrate large amounts of handling code within the application code itself.</p>
<p>Therefore, DBMS are important to developers because they provide a highly efficient method for handling multiple types of data, without interfering with the application’s code.</p>
<p>DBMS can be categorized into two types: 1) <strong>SQL</strong>; 2) <strong>NoSQL</strong></p>
<ol type="1">
<li>SQL databases, also known as <strong>relational databases</strong>, use structured query language (SQL) for defining and manipulating data. SQL is one of the most versatile and widely-used options available, making it a safe choice and especially great for complex queries. However, it can be restrictive, too, since SQL requires that you use predefined <strong>schemas</strong> to determine the structure of your data before you work with it. Moreover, in SQL databases, data is always stored as a table, which sometimes will lead to inefficient and complicated data retrievals.</li>
</ol>
<p>Some common SQL databases include MySQL, PostgreSQL and MariaDB etc.</p>
<ol start="2" type="1">
<li>NoSQL databases, also known as <strong>non-relational databases</strong>, have a dynamic schema for unstructured data, and data is stored in many ways, including &quot;key-value pairs&quot;, &quot;documents&quot; and, even &quot;graphs&quot;. This flexibility means that you don’t have to define the structure of your data explicitly, and each data set can have its own unique structure without having to worry about writing code to process this data to match a specific predefined structure. These databases can grow dynamically, and the structure of data can vary from database to database.</li>
</ol>
<p>Popular NoSQL databases include MongoDB, Apache CouchDB, Redis etc.</p>
<h4 id="transition-from-sql-to-nosql">Transition from SQL to NoSQL</h4>
<p>Speed is the most important factors that affect user experience on a web application. Relying on an unnecessary number of calls to a database usually tends to slow things down for users. Therefore it is important for web developers to <strong>keep some commonly requested chunks of data in immediate storage so that they can be retrieved quickly</strong>, without creating large latencies in displaying data. To do so, web developers need to think about how to get as much data in memory as reasonably possible, and then how to get things cached at the file system level to avoid making calls to a database altogether. The reason for this is that <strong>retrieving data from a database is the bottleneck of most web applications, and decreasing these operations can significantly improve responsiveness</strong>. The process of selecting commonly requested data components and storing them in immediate memory to avoid extraneous database calls is referred to as <strong>caching</strong>, and NoSQL databases have gained popularity in recent times because of their ability to automatically cache data to enhance performance.</p>
<p>In addition, the database calls themselves are more inefficient in SQL databases than in NoSQL databases. This is because <em>SQL databases store data in tabular form, and queries require comprehensive iterations of the table. NoSQL databases, on the other hand, use data structures to store entries</em>, which means that lookups are always optimized and database calls are much more efficient.</p>
<p>Consequently, with modern web applications increasingly requiring fast response times to achieve intended functionality, the shift towards using NoSQL databases has been apparent in recent times.</p>
<h3 id="web-caching">Web Caching</h3>
<p><strong>Web caching</strong> is a design feature of the HTTP protocol that is meant to minimize the amount of traffic an application is handling at any given point in order to improve the responsiveness of the web application, as perceived by users, as a whole. In order to do this, caches are used at each level starting from the server itself all the way to users’ browsers, and each of them is meant to store data that users are very likely to request.</p>
<p>Essentially, web caching works by caching HTTP responses for certain requests according to a probabilistic analysis of requests that are frequently observed on the server. Subsequent requests for cached content can then be fulfilled from a cache closer to the user instead of having to send the request all the way back to the web server, which then makes a call to the database for the required data.</p>
<img src="/2021/07/11/Full-Stack-Web-Development/Web-Dev-0-A-Primer/web-cache.png" class="">
<p>There are multiple benefits of web caching, each of which has been enumerated below:</p>
<ul>
<li>Data can be cached at several different points in the path between the client and the server. When the required data is cached closer to the client, requests do not increase network traffic too much since they are resolved much earlier along the path.</li>
<li>Extending on the first point, since requests are resolved earlier along the path, responses are sent back quicker as well, thus improving the responsiveness of web applications.</li>
<li>Aggressive caching along the network can also allow the application to sustain higher loads of data since a significant chunk of the data can be stored within caches.</li>
<li>In case the server has trouble accessing the database for some reason, data that has been stored in caches can still be served to end-users.</li>
</ul>
<h2 id="the-front-end">The Front End</h2>
<p>The source code of a website can be broken down into two parts: <strong>client-side</strong> and <strong>server-side</strong>, or <strong>frontend</strong> and <strong>backend</strong>.</p>
<ol type="1">
<li>Client-side</li>
</ol>
<p>The code on the ‘client’ side runs on the client computer’s browser and handles what the website looks like, how it requests data from the server, and how it interacts with temporary and local storage on the client machine. This includes but is not limited to selecting and styling user interface components, creating layouts, navigation, form validation, and cache handling.</p>
<p>Client-side languages include <strong>HTML</strong>, <strong>CSS</strong>, and <strong>JavaScrip</strong>t.</p>
<ol start="2" type="1">
<li>Server-side</li>
</ol>
<p>Server-side is used to deliver information that is queried from websites to clients.</p>
<p>For exmaples, companies like Amazon use server-side programming to construct search results for products and make targeted product suggestions based on client preferences and previous buying habits. Banks use server-side programming to store account information and restrict access from unauthorized accounts. Social media sites such as Facebook, Twitter, and Instagram, use server-side programming to highlight, share, and control access to content that is relevant to each user. Server-side programming includes but is not limited to,</p>
<ul>
<li>Delivering and storing information efficiently</li>
<li>Providing a custom experience for each user</li>
<li>Controlling access to content</li>
<li>Storing session/state information</li>
<li>Notifying and communicating</li>
<li>Analyzing data</li>
</ul>
<p>Server-side languages include <strong>PHP</strong>, <strong>Java</strong>, <strong>C++</strong>, <strong>Python</strong>, <strong>JavaScript</strong>, <strong>Ruby</strong>, and <strong>C#</strong> etc.</p>
<h3 id="html">HTML</h3>
<p><strong>HTML(HyperText Markup Language)</strong> is not a programming language. It is a markup language. True programming languages have the ability to describe logic. HTML, however, is used to display and format parts of a webpage.</p>
<p>HTML marks up content with HTML ‘tags’. HTML tags are the basic building blocks of all web pages. Essentially, they format the way that information and text is displayed. All HTML tags can have ‘attributes’ which provide more information about a certain element. Furthermore, valid HTML documents require the <code>&lt;head&gt;</code> and <code>&lt;body&gt;</code> tags.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    doctype: a declaration that tells the browser the HTML version </span></span><br><span class="line"><span class="comment">    that the document is written in.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        head tag: contains metadata such as the page title, links to CSS and JS files,</span></span><br><span class="line"><span class="comment">        and keywords used by search engine.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        body tag: contains the actual markup like text, images, tables etc that </span></span><br><span class="line"><span class="comment">        are displayed in the browser.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="css">CSS</h3>
<p>CSS, like HTML, is not a programming language, it’s a styling language for HTML.</p>
<p>HTML was originally designed as a structural language, but with time and updates, it has been turned into a tool for presentation which uses fonts, colors, and other visual elements. The purpose of CSS is to restore HTML to its original status as a structural language.</p>
<p>To styling our web page, we should add CSS to the HTML code. There are 3 ways.</p>
<ol type="1">
<li>Inline CSS</li>
</ol>
<p>Use <code>style</code> attribute of HTML tags. However, this way is inefficient and not scalable.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;color:blue&quot;</span>&gt;</span>Blue Heading<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>Internal CSS</li>
</ol>
<p>Use <code>&lt;style&gt;</code> tags within the <code>&lt;head&gt;</code> of the HTML.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">h3</span> &#123;<span class="attribute">color</span>: blue;&#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Internal CSS<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>External CSS</li>
</ol>
<p>Write CSS in a separate file, and link it to the HTML.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;cssfilename.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Internal CSS<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="javascript">JavaScript</h3>
<p>#TODO:</p>
<h2 id="the-back-end">The Back End</h2>
<p>The back end of a website loosely consists of a <strong>server</strong>, <strong>databases</strong>, and <strong>APIs</strong>.</p>
<h2 id="web-development-frameworks">Web Development Frameworks</h2>
<h2 id="version-control-with-git">Version Control with Git</h2>
<h2 id="principles-of-software-engineering">Principles of Software Engineering</h2>
<h2 id="conclusion">Conclusion</h2>
]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(1): SQL and Data Modelding(III)</title>
    <url>/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-III/</url>
    <content><![CDATA[<p>In this blog post, I'll show the process of building a web application capable of <strong>CRUD</strong> on a connected database by using everything we've talked so far.</p>
<span id="more"></span>
<h2 id="crud">CRUD</h2>
<p>CRUD ops have their corresponding SQL commands, also have their corresponding command in SQLAlchemy ORM, as follows,</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Operation</th>
<th style="text-align: center;">SQL</th>
<th style="text-align: center;">SQLAlchemy ORM</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">CEATE</td>
<td style="text-align: center;">INSERT</td>
<td style="text-align: center;">db.session.add(object)</td>
</tr>
<tr class="even">
<td style="text-align: center;">READ</td>
<td style="text-align: center;">SELECT</td>
<td style="text-align: center;">db.session.query(Model).all( ) or Model.query.all( )</td>
</tr>
<tr class="odd">
<td style="text-align: center;">UPDATE</td>
<td style="text-align: center;">UPDATE</td>
<td style="text-align: center;">object.attribute = 'new value'</td>
</tr>
<tr class="even">
<td style="text-align: center;">DELETE</td>
<td style="text-align: center;">DELETE</td>
<td style="text-align: center;">db.session.delete(object)</td>
</tr>
</tbody>
</table>
<p>In the rest, I will cover the following skills by build a database-backed web application.</p>
<ul>
<li>Traversing across all layers of our backend stack, from our backend server in Flask to our database in Postgres, by understanding mappings between user operations, to the ORM, to the SQL executed on a database.</li>
<li>Developing using the MVC (Model-View-Controller) pattern, for architecting our application</li>
<li>Handling changes to our data schema over time</li>
<li>Modeling relationships between objects in our web application</li>
<li>Implementing Search</li>
</ul>
<h2 id="build-todo-app">Build Todo App</h2>
<h3 id="dummy-todo-app">Dummy Todo App</h3>
<p><strong>Code 1:</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># render_template is a Flask function used to generating output from a template file based on Jinja2 engine</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">todos = [</span><br><span class="line">    &#123;<span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Todo 1&#x27;</span>&#125;, </span><br><span class="line">    &#123;<span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Todo 2&#x27;</span>&#125;, </span><br><span class="line">    &#123;<span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Todo 3&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hp.html&#x27;</span>, todos=todos)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hp.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Todo App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Jinja for loop --&gt;</span></span><br><span class="line">            &#123;% for todo in todos %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; todo.description &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>We use a templating engine called <strong>Jinja2</strong>, which allows us to embed non-HTML inside HTML files, to process HTML templates.</p>
<h3 id="r-in-crud">&quot;R&quot; in CRUD</h3>
<p>🦉 Make sure you have already built a database called <code>todoapp</code> before running the following code.</p>
<p><strong>Code 2:</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">db_info = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/todoapp&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = db_info</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Todo <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.description&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hp.html&#x27;</span>, todos=Todo.query.<span class="built_in">all</span>())</span><br></pre></td></tr></table></figure>
<h3 id="mvc">MVC</h3>
<ul>
<li><strong>MVC</strong> stands for <strong>Model-View-Controller</strong>, a common pattern for architecting a full stack web applications.</li>
<li>It is a way of thinking an application in terms of three layer,
<ul>
<li><strong>Models</strong> manage data structure and business logic, capturing logical relationships and properties across the web app objects.</li>
<li><strong>Views</strong> take data and models we have, handle display and representation logic, and what the user sees (HTML, CSS, JS from the user's perspective).</li>
<li>Models and Views don't talk to each other directly, Controller is the bridge between them.</li>
<li><strong>Controllers</strong> control the logic of how commands are sent to the models and views, and how models and views interact with each other.</li>
</ul></li>
</ul>
<p>So, based on the definition, we can find MVC layer separately in the previous code.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- View --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- hp.html --&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Models</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)  </span><span class="comment"># listen to the route</span></span><br><span class="line"><span class="comment"># index method is the controller</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hp.html&#x27;</span>, todos=Todos.query.<span class="built_in">all</span>())  <span class="comment"># Todos.query.all() is also Models</span></span><br></pre></td></tr></table></figure>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-III/MVC.JPG" class="">
<h3 id="handling-user-input">5.3 Handling User Input</h3>
<p>🌼 Creating, updating, and deleting information from a database requires handling user input on what is being created/updated/deleted.</p>
<p>Use &quot;C&quot; in CRUD as example, the process of adding &quot;create todo item functionality&quot; is as follows,</p>
<ul>
<li>On the view: implement an HTML form.</li>
<li>On the controller: retrieve the user's input from request, and manipulate models.</li>
<li>On the models: create a record in our database, and return the newly created to-do item to the controller.</li>
<li>On the controller: take the newly created to-do item, and direct how the view should update upon.</li>
<li>On the view: update what the user sees on the client.</li>
</ul>
<h4 id="getting-user-data-in-flask">Getting User Data in Flask</h4>
<p>There are 3 methods of getting user data from a view to a controller.</p>
<ul>
<li>URL query parameters</li>
<li>Forms</li>
<li>JSON</li>
</ul>
<hr />
<p>🦆 Comparison:</p>
<ol type="1">
<li><strong>URL query parameters</strong></li>
</ol>
<p>Using URL query parameters is the quickest method.</p>
<p>URL query parameters are listed as <code>key-value</code> pairs at the end of a URL, preceding a <code>?</code> question mark.</p>
<p>E.g. <code>www.example.com/hello?my_key=my_value</code></p>
<p>In Flask, we can get the data by using <code>request.args</code>,</p>
<p>E.g. <code>my_value = request.args.get('my_key')</code></p>
<ol start="2" type="1">
<li><strong>HTML From Submission</strong></li>
</ol>
<p>Using forms to get user's data is a traditional method. We can use <code>request.form.get('&lt;name&gt;')</code> to read the value from a form input control (text input, number input, password input, etc) by the <code>name</code> attribute on the input HTML element.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/create-todo&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>create a todo item<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;description&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Create&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Forms take an <code>action</code> (name of the route) and <code>method</code> (route method) to submit data to the server.</li>
<li>The <code>name</code> attribute on a form control element is the key used to retrieve data.</li>
<li>All forms either define a submit button, or allow the user to hit ENTER on an input to submit the form.</li>
</ul>
<p>Another thing needed to discuss is form methods.</p>
<p>The way form data traverses from the client to server differs based on whether we are using a <code>GET</code> or a <code>POST</code> method on the form.</p>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-III/post-vs-get.JPG" class="" title="POST submission">
<ul>
<li>The POST submission : On submit, we send off an <strong>HTTP POST request</strong> to the route &quot;/create&quot; with a request body. The request body stringifies(字符串化) the key-value pairs of fields from the form (as part of the name attribute) along with their values.</li>
</ul>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-III/post-vs-get2.JPG" class="" title="GET submission">
<ul>
<li>The GET submission : Sends off a GET request with <strong>URL query parameters</strong> that appends the form data to the URL, which is ideal for smaller form submissions.</li>
</ul>
<p><code>POST</code> are ideal for longer form submissions, since URL query parameters can only be so long compared to request bodies (max 64K, i.e. 2048 characters). Moreover, forms can only send POST and GET requests, and nothing else.</p>
<p>🦔 <em>Click <a href="https://www.oschina.net/news/77354/http-get-post-different">here</a> to see an CHN article discussing about POST and GET.</em></p>
<p>🦦 Read more about <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms/Sending_and_retrieving_form_data">sending form data</a> .</p>
<ol start="3" type="1">
<li><strong>JSON</strong></li>
</ol>
<p>JSON is modern way to retrieve user data.</p>
<p>In Flask, it's like</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data_string = request.data  <span class="comment"># retrieve JSON as string</span></span><br><span class="line">data_dictinary = json.loads(data_string)  <span class="comment"># turn the string into list and dictionary</span></span><br></pre></td></tr></table></figure>
<hr />
<p>Let's try to implement the &quot;create todo item functionality&quot; in todo app.</p>
<p><strong>Code 3:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- View --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Todo App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/todos/create&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;label for=&quot;name&quot;&gt;create a todo item&lt;/label&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;description&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Create&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            &#123;% for todo in todos %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; todo.description &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">db_info = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/todoapp&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = db_info</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Todo <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.description&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># controller listens to the view &#x27;/todos/create&#x27; : create a new todo</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/create&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_todo</span>():</span></span><br><span class="line">    desc = request.form.get(<span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># read data from form</span></span><br><span class="line">    new_todo = Todos(description=desc)</span><br><span class="line">    db.session.add(new_todo)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hp.html&#x27;</span>, todos=Todos.query.<span class="built_in">all</span>())</span><br></pre></td></tr></table></figure>
<h4 id="using-ajax-to-send-data-to-flask-asynchronously">Using AJAX to Send Data to Flask Asynchronously</h4>
<p>Previously, we've talked that there are 3 ways to get user data in Flask.</p>
<p>There are 2 ways to send data request from the client to the server.</p>
<ul>
<li>send synchronously(同步)</li>
<li>send asynchronously(异步)
<ul>
<li>Async data requests are requests that get sent to the server and back to the client without the client needing to be refreshed.</li>
</ul></li>
</ul>
<hr />
<ol type="1">
<li>什么是AJAX？</li>
</ol>
<p>AJAX: Asynchronous Javascript + XML</p>
<p>如果网页没有使用AJAX技术，你点一个按钮就要刷新一下页面，尽管新页面上只有一行字和当前页面不一样，但你还是要无聊地等待页面刷新。用了AJAX之后，你点击，然后页面上的一行字就变化了，页面本身不用刷。AJAX只是一种技术，不是某种具体的东西。不同的浏览器有自己实现AJAX的组件。</p>
<p>而所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果我们可以再来处理这个事。</p>
<ol start="2" type="1">
<li>什么是同步请求？什么是异步请求？</li>
</ol>
<p>同步请求的原理：当浏览器向服务器发送同步请求时，服务器处理同步请求的过程中，浏览器会处于等待的状态，服务器处理完请求把数据响应给浏览器并覆盖浏览器内存中原有的数据，浏览器重新加载页面并展示服务器响应的数据。</p>
<p>异步请求的原理：浏览器把请求交给代理对象—&gt; XMLHttpRequest（绝大多数浏览器都内置了这个对象），由代理对象向服务器发起请求，接收、解析服务器响应的数据，并把数据更新到浏览器指定的控件上。从而实现了页面数据的局部刷新。</p>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-III/sync-async.jpg" class="">
<hr />
<p>There are various libraries candidates (such as <code>axios</code> and<code>jQuery</code>) can be used to send AJAX requests from the client. But no matter what library you use, under the hood, you are using one of two methods to send AJAX request (Async requests) :</p>
<ul>
<li><strong>XMLHttpRequest</strong></li>
<li><strong>Fetch</strong> (a more modern implementation of using XMLHttpRequest)</li>
</ul>
<h5 id="xmlhttprequest">XMLHttpRequest</h5>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** a typical client side code */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// build out request object</span></span><br><span class="line"><span class="keyword">var</span> xhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetch the data from the DOM</span></span><br><span class="line">description = <span class="built_in">document</span>.getElementById(<span class="string">&quot;description&quot;</span>).value;</span><br><span class="line"></span><br><span class="line"><span class="comment">// open a connection from client to the server</span></span><br><span class="line">xhttp.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/todos/create?description=&quot;</span> + description);</span><br><span class="line"></span><br><span class="line"><span class="comment">// send the request and close the connection</span></span><br><span class="line">xhttp.send();</span><br></pre></td></tr></table></figure>
<p>In a synchronous request, when you finish processing your requests on the server, the server dictates how the view should then update. What we have already completed at <code>Code 3</code> are sync request.</p>
<p>In a asynchronous request, it is on the client side that you react to the server and you figure out how to update the DOM that is already loaded on the client based on the request you get,</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* XMLHttpRequest on success */</span></span><br><span class="line"></span><br><span class="line">xhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.readyState === <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status === <span class="number">200</span>) &#123; </span><br><span class="line">      <span class="comment">// on successful response</span></span><br><span class="line">      <span class="built_in">console</span>.log(xhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1. this.readyState === 4: indicates that the operation on a server has already been completed;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. this.status === 200: indicates that the reponse is successful</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h5 id="fetch">Fetch</h5>
<p>Fetch is another window object that allows us to send requests and specify the parameters such as method and body etc. more easily.</p>
<p>With fetch, in order to send a request to the server, we would specify fetch and then pass the request to the URL route, followed by a request object where you can specify the method as well as the request body, followd by any possible custom header.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;/url-route&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    <span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;some description here&#x27;</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Now, let's change the traditional HTML form we've created, using AJAX requests which use fetch to create todo item.</p>
<h5 id="revise-traditional-html-form">Revise Traditional HTML Form</h5>
<p>The Fetch API provides a <code>fetch()</code> method defined on the window object, which you can use to perform requests. This method returns a <strong>Promise</strong> that you can use to retrieve the response of the request.</p>
<p><strong>Code 4:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Todo App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.hidden</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&#x27;form&#x27;</span> <span class="attr">action</span>=<span class="string">&quot;/todos/create&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;label for=&quot;name&quot;&gt;create a todo item&lt;/label&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;description&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Create&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;error&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span>Something went wrong!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&#x27;todos&#x27;</span>&gt;</span></span><br><span class="line">            &#123;% for todo in todos %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; todo.description &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// e: event handler</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&#x27;form&#x27;</span>).onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// default behavior: full page refresh and submit it using the method and action attributes</span></span></span><br><span class="line"><span class="javascript">                e.preventDefault();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// use fetch method to send request async</span></span></span><br><span class="line"><span class="javascript">                fetch(<span class="string">&#x27;todos/create&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;  <span class="comment">// JSON.stringify(): stringify JSON object</span></span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;description&#x27;</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;description&#x27;</span>).value</span></span><br><span class="line"><span class="javascript">                    &#125;),</span></span><br><span class="line"><span class="javascript">                    <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)  <span class="comment">// return a promise</span></span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> response.json();</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">jsonResponse</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(jsonResponse);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> liItem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    liItem.innerHTML = jsonResponse[<span class="string">&#x27;description&#x27;</span>];</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;todos&#x27;</span>).appendChild(liItem);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// if succeed: no display error info</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;hidden&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, jsonify</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db_info = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/todoapp&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = db_info</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Todo <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.description&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/create&#x27; : create a new todo &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/create&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_todo</span>():</span></span><br><span class="line">    desc = request.get_json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">    new_todo = Todos(description=desc)</span><br><span class="line">    db.session.add(new_todo)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="comment"># jsonify:return json data to the client</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">        <span class="string">&#x27;description&#x27;</span>: new_todo.description</span><br><span class="line">    &#125;) </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hp.html&#x27;</span>, todos=Todos.query.<span class="built_in">all</span>())</span><br></pre></td></tr></table></figure>
<p>🍄 Appendix: click to learn more <a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch">fetch</a> and <a href="https://zhuanlan.zhihu.com/p/26523836">promise</a></p>
<h4 id="using-sessions-in-controllers">Using sessions in Controllers</h4>
<ul>
<li>Commits can succeed or fail.</li>
<li>On fail, we want to rollback the session to avoid potential implicit commits done by the database on closing a connection.</li>
<li>Good practice is to close connections at the end of every session used in a controller, to return the connection back to the connection pool.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/create&#x27; : create a new todo &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/create&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_todo</span>():</span></span><br><span class="line">    error = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        desc = request.get_json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">        new_todo = Todos(description=desc)</span><br><span class="line">        db.session.add(new_todo)</span><br><span class="line">        db.session.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        error = <span class="literal">True</span></span><br><span class="line">        db.session.rollback()</span><br><span class="line">        <span class="built_in">print</span>(sys.exc_info())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.session.close()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> error:</span><br><span class="line">        <span class="comment"># jsonify:return json data to the client</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&#x27;description&#x27;</span>: new_todo.description</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
<p>If we do things like above, when we run the app, the terminal will show error message, and the view will show error information.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python app.py</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">sqlalchemy.orm.exc.DetachedInstanceError: Instance &lt;Todos at 0x18d2c644e48&gt; is not bound to a Session; attribute refresh operation cannot proceed</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>But check the database, the new todo record has already created.</p>
<p>Why this happened?</p>
<p>See the above code. Actually, we close the session before returning json data to the client. It's like our new_todo object was detached from our session.</p>
<p>There is a default setting that is applied to every database session instance.</p>
<img src="/2021/07/13/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modelding-III/expire_on_commit.JPG" class="">
<p>Additionally, the route handler should always return something or raise an intentional exception, in the case of an error. To fix this with a simple solution, we can simply import abort from Flask, and we can call <code>abort(&lt;status code&gt;)</code>, e.g. with status code 500 --&gt; <code>abort(500)</code> to rise an HTTPException for an Internal Server Error, in order to abort a request and prevent it from expecting a returned result.</p>
<p>Finally, we can get the following code,</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> abort</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/create&#x27; : create a new todo &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/create&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_todo</span>():</span></span><br><span class="line">    error = <span class="literal">False</span></span><br><span class="line">    body = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        desc = request.get_json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">        new_todo = Todos(description=desc)</span><br><span class="line">        db.session.add(new_todo)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        body[<span class="string">&#x27;description&#x27;</span>] = new_todo.description</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        error = <span class="literal">True</span></span><br><span class="line">        db.session.rollback()</span><br><span class="line">        <span class="built_in">print</span>(sys.exc_info())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.session.close()</span><br><span class="line">    <span class="keyword">if</span> error:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> error:</span><br><span class="line">        <span class="comment"># jsonify:return json data to the client</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(body)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(1): SQL and Data Modeling(IIII)</title>
    <url>/2021/07/14/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-IIII/</url>
    <content><![CDATA[<p>Until now, we have learned how to develop app on MVC pattern, and how to add READ and CREATE functionality. We have also learned how to send request asynchronously using AJAX.</p>
<p>In this section, we will learn how to change our data models over time, and buil our todo app further.</p>
<span id="more"></span>
<h2 id="migrations">Migrations</h2>
<h3 id="introduction">Introduction</h3>
<p>Requirements can change, thus sometimes we need to modify our data schema over time. <strong>Migrations</strong> deal with how we manage modifications to our data schema.</p>
<img src="/2021/07/14/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-IIII/migration-examplel.JPG" class="">
<p>So, migration is a file that keep track of changes to our database schema (structure of our database). You can think them as <code>git commits</code>, which offers version control on data schema. - Migrations stack together in order to form the latest version of our database schema. - We can <strong>upgrade</strong> our database schema by applying migrations; - We can <strong>roll back</strong> our database schema to a former version by reverting migrations that we applied</p>
<p>Migrations are applied using command line scripts. There are generally 3 migration command line scripts needed :</p>
<ul>
<li><strong>migrate</strong>: creating a migration script template to fill out; generating a migration file based on changes to be made</li>
<li><strong>upgrade</strong>: applying migrations that hadn't been applied yet (&quot;upgrading&quot; our database)</li>
<li><strong>downgrade</strong>: rolling back applied migrations that were problematic (&quot;downgrading&quot; our database)</li>
</ul>
<p>The migration tool that we use is going to differ based on which framework we use. For Flask, we typically use <strong>FLASK-Migrate</strong> and <strong>Flask-Script</strong>.</p>
<ul>
<li><a href="https://flask-migrate.readthedocs.io/en/latest/">Flask-Migrate</a> is our migration manager for migrating changes using SQLAlchemy. It uses a library called <a href="https://alembic.sqlalchemy.org/en/latest/index.html">Alembic</a> underneath the hood.</li>
<li><code>Flask-Script</code> lets us run migration scripts we defined, from the terminal</li>
</ul>
<p>Finally, let's talk about why use migrations.</p>
<img src="/2021/07/14/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-IIII/manage-changes-to-the-schema.JPG" class="">
<img src="/2021/07/14/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-IIII/without-migration.JPG" class="" title="Without Migrations">
<img src="/2021/07/14/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-IIII/with-migration.JPG" class="" title="With Migrations">
<hr />
<p>🦊 Self Opinion on Migration</p>
<p>Migration are some physical files that manage data schema (database structure). Actually these files are abstracted SQL implemented with Python. You can run these migration script to change database structure. These files are also the part of a project.</p>
<p>Even without migration, we can also change db structure using SQL. However, writing SQL is tedious and verbose, especially in group development. Even if a small change in a table, it needs every team member to update it with SQL manually, which is troublesome.</p>
<p>On the contrary, with migration, what he/she/it needs to do is just generating a migration file, push it to the version control system, such as git, and notify other members. Other team members can just pull the migration fileoff and run it, and change the db structure. In the future, if we want to rollback to the previous db structure, we can also rollback easily and quickly.</p>
<hr />
<h3 id="flask-migrations">Flask Migrations</h3>
<h4 id="install">Install</h4>
<p>Running the following command to install Flask-Migrate:</p>
<blockquote>
<p>pip3 install Flask-Migrate, or pip install Flask-Migrate</p>
</blockquote>
<ul>
<li><a href="https://flask-migrate.readthedocs.io/en/latest/">Flask-Migrate documentation</a></li>
<li><a href="https://alembic.sqlalchemy.org/en/latest/">Alembic documentation</a></li>
</ul>
<h4 id="usage-of-migration">Usage of Migration</h4>
<ol type="1">
<li>Import migrate library and create instance of the migrate class</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># ....</span></span><br><span class="line"><span class="comment"># ....</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">migrate = Migrate(app, db)</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>Creating the migrations directory structure</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> create initial migration directory structure</span></span><br><span class="line"><span class="meta">~$</span><span class="bash"> flask db init</span></span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>Sync models</li>
</ol>
<p>🦁 Reminder: Since we use migration now, so we don't use <code>db.create_all()</code> anymore. Please delete this code or comment it. Besides, if you have already a todoapp database but not intialize it, please drop it.</p>
<p>We use the following command to detect the model's changes, and create a migration file with upgrade and downgrade logic set up, replacing use of <code>db.create_all()</code> :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> flask db migrate</span></span><br><span class="line"><span class="meta">~$</span><span class="bash"> flask db migrate -m <span class="string">&quot;Initial migration.&quot;</span>   <span class="comment"># with message</span></span></span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>Upgrade and downgrade</li>
</ol>
<p>Runs the upgrade/downgrade command in the migration file, to apply the migration.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> flask db upgrade</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~$</span><span class="bash"> flask db downgrade</span></span><br></pre></td></tr></table></figure>
<ol start="5" type="1">
<li>Add the completed column</li>
</ol>
<p>Our goal is to add a new column name &quot;completed&quot;, it is boolean data type, so we need to change the existing model.</p>
<p>First, change our data model,</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># add a new column</span></span><br><span class="line">    completed = db.Column(db.Boolean, nullable=<span class="literal">False</span>, default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Todo <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.description&#125;</span> <span class="subst">&#123;self.completed&#125;</span>&gt;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>then, run the command,</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> flask db migrate</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~$</span><span class="bash"> flask db upgrade</span></span><br></pre></td></tr></table></figure>
<p>Now, the data schema has changed.</p>
<img src="/2021/07/14/Full-Stack-Web-Development/Web-Dev-1-SQL-and-Data-Modeling-IIII/model-change.JPG" class="">
<ol start="6" type="1">
<li>Work with existing data</li>
</ol>
<p>If we have already have some records in the todos table which has the original data schema,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> id | description</span><br><span class="line">----+-------------</span><br><span class="line">  1 | todo 1</span><br><span class="line">  2 | todo 2</span><br><span class="line">  3 | todo 3</span><br></pre></td></tr></table></figure>
<p>Then we change our data schema with running <code>flask db upgrade</code>, it will cause <code>NotNullViolation Error</code>. This is because we declared that the completed column shouldn't be null previously. In this context, we can revise the migration file like below:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a68fdf8c772b_add_completed_column.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upgrade</span>():</span></span><br><span class="line">    <span class="comment"># ### commands auto generated by Alembic - please adjust! ###</span></span><br><span class="line">    <span class="comment"># op.add_column(&#x27;todos&#x27;, sa.Column(&#x27;completed&#x27;, sa.Boolean(), nullable=False))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Modify from False to True, so we can add a column that applies to our</span></span><br><span class="line"><span class="string">    existing data successfully. &quot;&quot;&quot;</span></span><br><span class="line">    op.add_column(<span class="string">&#x27;todos&#x27;</span>, sa.Column(<span class="string">&#x27;completed&#x27;</span>, sa.Boolean(), nullable=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot; add the following two lines &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># update the existing recoreds that don&#x27;t yet have a completed column with SQL</span></span><br><span class="line">    op.execute(<span class="string">&#x27;UPDATE todos SET completed = False WHERE completed IS NULL;&#x27;</span>)</span><br><span class="line">     <span class="comment"># update the column on todos</span></span><br><span class="line">    op.alter_column(<span class="string">&#x27;todos&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ### end Alembic commands ###</span></span><br></pre></td></tr></table></figure>
<p>Then upgrade again, you will get the following result,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> id | description | completed</span><br><span class="line">----+-------------+-----------</span><br><span class="line">  1 | todo 1      | f</span><br><span class="line">  2 | todo 2      | f</span><br><span class="line">  3 | todo 3      | f</span><br></pre></td></tr></table></figure>
<h2 id="build-todo-app-further">Build Todo App Further</h2>
<p>🏃 We have already finish &quot;Read&quot; and &quot;Create&quot; functionality among &quot;CRUD&quot;. In this part, let's continue build our todo app, and try to finish &quot;Update&quot; and &quot;Delete&quot; functionality.</p>
<h3 id="u-in-crud">&quot;U&quot; in CRUD</h3>
<p>An update involves setting the attributes of an existing object in the database.</p>
<p>In SQL, we use SQL command to update, where in SQLAlchemy ORM, we use python code to update.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SQL</span></span><br><span class="line"></span><br><span class="line">UPDATE table_name</span><br><span class="line"><span class="keyword">SET</span> column1 <span class="operator">=</span> value1, column2 <span class="operator">=</span> value2, ...</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SQlAlchemy ORM</span></span><br><span class="line"></span><br><span class="line">some_object = User.query.get(some_id)</span><br><span class="line">some_object.attribute = <span class="string">&#x27;Some new name&#x27;</span></span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure>
<p>Now. let's try to modify the view to add checkboxes, and having the checkboxes send off POST request. Then defining the route handler, you should get the following code.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Todo App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.hidden</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&#x27;form&#x27;</span> <span class="attr">action</span>=<span class="string">&quot;/todos/create&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;label for=&quot;name&quot;&gt;create a todo item&lt;/label&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;description&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Create&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;error&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span>Something went wrong!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&#x27;todos&#x27;</span>&gt;</span></span><br><span class="line">            &#123;% for todo in todos %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- add checkboxes --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;check-completed&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;&#123;&#123; todo.id &#125;&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> &#123;% <span class="attr">if</span> <span class="attr">todo.completed</span> %&#125; <span class="attr">checked</span> &#123;% <span class="attr">endif</span> %&#125;&gt;</span>  </span><br><span class="line">                &#123;&#123; todo.description &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/** Sets todo completed. */</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> checkboxes = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.check-completed&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; checkboxes.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> checkbox = checkboxes[i];</span></span><br><span class="line"><span class="javascript">                checkbox.onchange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(&#x27;event&#x27;, e);</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> newCompleted = e.target.checked;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> todoId = e.target.dataset[<span class="string">&#x27;id&#x27;</span>];</span></span><br><span class="line"><span class="javascript">                    fetch(<span class="string">&#x27;/todos/&#x27;</span> + todoId + <span class="string">&#x27;/set-completed&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="string">&#x27;completed&#x27;</span>: newCompleted</span></span><br><span class="line"><span class="javascript">                        &#125;),</span></span><br><span class="line"><span class="javascript">                        <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;hidden&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/** Creates new todo. */</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&#x27;form&#x27;</span>).onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;  <span class="comment">// e: event handler</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// default behavior: full page refresh and submit it using the method and action attributes</span></span></span><br><span class="line"><span class="javascript">                e.preventDefault();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// use fetch method to send request async</span></span></span><br><span class="line"><span class="javascript">                fetch(<span class="string">&#x27;todos/create&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;  <span class="comment">// JSON.stringify(): stringify JSON object</span></span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;description&#x27;</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;description&#x27;</span>).value</span></span><br><span class="line"><span class="javascript">                    &#125;),</span></span><br><span class="line"><span class="javascript">                    <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)  <span class="comment">// return a promise</span></span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> response.json();</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">jsonResponse</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(jsonResponse);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> liItem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    liItem.innerHTML = jsonResponse[<span class="string">&#x27;description&#x27;</span>];</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;todos&#x27;</span>).appendChild(liItem);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// if succeed: no display error info</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;hidden&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.location.reload(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, abort, jsonify</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db_info = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/todoapp&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = db_info</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">migrate = Migrate(app, db)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    completed = db.Column(db.Boolean, nullable=<span class="literal">False</span>, default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Todo <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.description&#125;</span> <span class="subst">&#123;self.completed&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># db.create_all() since we use migration</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/create&#x27; : create a new todo &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/create&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_todo</span>():</span></span><br><span class="line">    error = <span class="literal">False</span></span><br><span class="line">    body = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        desc = request.get_json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">        new_todo = Todos(description=desc)</span><br><span class="line">        db.session.add(new_todo)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        body[<span class="string">&#x27;description&#x27;</span>] = new_todo.description</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        error = <span class="literal">True</span></span><br><span class="line">        db.session.rollback()</span><br><span class="line">        <span class="built_in">print</span>(sys.exc_info())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.session.close()</span><br><span class="line">    <span class="keyword">if</span> error:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> error:</span><br><span class="line">        <span class="comment"># jsonify:return json data to the client</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(body)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/&lt;todo_id&gt;/set-completed&#x27; : set todo completed &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/&lt;todo_id&gt;/set-completed&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_todo</span>(<span class="params">todo_id</span>):</span></span><br><span class="line">    error = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        completed = request.get_json()[<span class="string">&#x27;completed&#x27;</span>]</span><br><span class="line">        todo = Todos.query.get(todo_id)</span><br><span class="line">        todo.completed = completed</span><br><span class="line">        db.session.commit()</span><br><span class="line">    <span class="keyword">except</span>():</span><br><span class="line">        db.session.rollback()</span><br><span class="line">        error = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">print</span>(sys.exc_info())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.session.close()</span><br><span class="line">    <span class="keyword">if</span> error:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># return redirect(url_for(&#x27;index&#x27;))</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hp.html&#x27;</span>, todos=Todos.query.order_by(<span class="string">&#x27;id&#x27;</span>).<span class="built_in">all</span>())  <span class="comment"># fix the ordering</span></span><br></pre></td></tr></table></figure>
<h3 id="d-in-crud">&quot;D&quot; in CRUD</h3>
<p>Deletes deal with removing existing objects in our database.</p>
<p>In SQL, we use SQL command to delete, where in SQLAlchemy ORM, we use python code to delete.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SQLAlchemy ORM</span></span><br><span class="line"></span><br><span class="line">todo = Todos.query.get(todo_id) </span><br><span class="line">db.session.delete(todo) <span class="comment"># or...</span></span><br><span class="line">Todo.query.filter_by(<span class="built_in">id</span>=todo_id).delete()</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure>
<p>Steps that we implement delete are as follows,</p>
<ul>
<li>Loop through every To-Do item and show a delete button</li>
<li>Pressing the delete button sends a request that includes which to-do item to delete</li>
<li>The controller takes the user input, and notifies the models to delete the To-Do object by ID</li>
<li>On successful deletion by the models, the controller should notify the view to refresh the page and redirect to our homepage, showing a fresh fetch of all To-Do items to now exclude the removed item.</li>
</ul>
<p>Try it before you look at the solution.</p>
<hr />
<p><strong>Solution:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Todo App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.hidden</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">li</span> <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="css">                -webkit-appearance: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">                <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">                <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&#x27;form&#x27;</span> <span class="attr">action</span>=<span class="string">&quot;/todos/create&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;label for=&quot;name&quot;&gt;create a todo item&lt;/label&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;description&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Create&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;error&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span>Something went wrong!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&#x27;todos&#x27;</span>&gt;</span></span><br><span class="line">            &#123;% for todo in todos %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- add checkboxes --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;check-completed&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;&#123;&#123; todo.id &#125;&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> &#123;% <span class="attr">if</span> <span class="attr">todo.completed</span> %&#125; <span class="attr">checked</span> &#123;% <span class="attr">endif</span> %&#125;&gt;</span>  </span><br><span class="line">                &#123;&#123; todo.description &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete-btn&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;&#123;&#123; todo.id &#125;&#125;&quot;</span>&gt;</span><span class="symbol">&amp;cross;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/** Deletes todo item. */</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> deleteBtns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.delete-btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; deleteBtns.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> btn = deleteBtns[i];</span></span><br><span class="line"><span class="javascript">                btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;event&#x27;</span>, e);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> todoId = e.target.dataset[<span class="string">&#x27;id&#x27;</span>];</span></span><br><span class="line"><span class="javascript">                    fetch(<span class="string">&#x27;/todos/&#x27;</span> + todoId, &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">method</span>: <span class="string">&#x27;DELETE&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;hidden&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">const</span> item = e.target.parentElement;</span></span><br><span class="line"><span class="javascript">                        item.remove();</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .catch(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/** Sets todo completed. */</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> checkboxes = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.check-completed&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; checkboxes.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> checkbox = checkboxes[i];</span></span><br><span class="line"><span class="javascript">                checkbox.onchange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(&#x27;event&#x27;, e);</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> newCompleted = e.target.checked;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> todoId = e.target.dataset[<span class="string">&#x27;id&#x27;</span>];</span></span><br><span class="line"><span class="javascript">                    fetch(<span class="string">&#x27;/todos/&#x27;</span> + todoId + <span class="string">&#x27;/set-completed&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="string">&#x27;completed&#x27;</span>: newCompleted</span></span><br><span class="line"><span class="javascript">                        &#125;),</span></span><br><span class="line"><span class="javascript">                        <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;hidden&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/** Creates new todo. */</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&#x27;form&#x27;</span>).onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;  <span class="comment">// e: event handler</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// default behavior: full page refresh and submit it using the method and action attributes</span></span></span><br><span class="line"><span class="javascript">                e.preventDefault();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// use fetch method to send request async</span></span></span><br><span class="line"><span class="javascript">                fetch(<span class="string">&#x27;todos/create&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;  <span class="comment">// JSON.stringify(): stringify JSON object</span></span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;description&#x27;</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;description&#x27;</span>).value</span></span><br><span class="line"><span class="javascript">                    &#125;),</span></span><br><span class="line"><span class="javascript">                    <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)  <span class="comment">// return a promise</span></span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> response.json();</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">jsonResponse</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(jsonResponse);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> liItem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    liItem.innerHTML = jsonResponse[<span class="string">&#x27;description&#x27;</span>];</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;todos&#x27;</span>).appendChild(liItem);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// if succeed: no display error info</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;hidden&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.location.reload(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, abort, jsonify</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db_info = <span class="string">&#x27;postgresql://postgres:pupu0819@localhost:5432/todoapp&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = db_info</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">migrate = Migrate(app, db)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    completed = db.Column(db.Boolean, nullable=<span class="literal">False</span>, default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Todo <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.description&#125;</span> <span class="subst">&#123;self.completed&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># db.create_all() since we use migration</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/create&#x27; : create a new todo &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/create&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_todo</span>():</span></span><br><span class="line">    error = <span class="literal">False</span></span><br><span class="line">    body = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        desc = request.get_json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">        new_todo = Todos(description=desc)</span><br><span class="line">        db.session.add(new_todo)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        body[<span class="string">&#x27;description&#x27;</span>] = new_todo.description</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        error = <span class="literal">True</span></span><br><span class="line">        db.session.rollback()</span><br><span class="line">        <span class="built_in">print</span>(sys.exc_info())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.session.close()</span><br><span class="line">    <span class="keyword">if</span> error:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> error:</span><br><span class="line">        <span class="comment"># jsonify:return json data to the client</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(body)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/&lt;todo_id&gt;/set-completed&#x27; : set todo completed &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/&lt;todo_id&gt;/set-completed&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_todo</span>(<span class="params">todo_id</span>):</span></span><br><span class="line">    error = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        completed = request.get_json()[<span class="string">&#x27;completed&#x27;</span>]</span><br><span class="line">        todo = Todos.query.get(todo_id)</span><br><span class="line">        todo.completed = completed</span><br><span class="line">        db.session.commit()</span><br><span class="line">    <span class="keyword">except</span>():</span><br><span class="line">        db.session.rollback()</span><br><span class="line">        error = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">print</span>(sys.exc_info())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.session.close()</span><br><span class="line">    <span class="keyword">if</span> error:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># return redirect(url_for(&#x27;index&#x27;))</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/&lt;todo_id&gt;&#x27; : delete a todo item &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/&lt;todo_id&gt;&#x27;</span>, methods=[<span class="string">&#x27;DELETE&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_todo</span>(<span class="params">todo_id</span>):</span></span><br><span class="line">    error = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        todo = Todos.query.get(todo_id)</span><br><span class="line">        db.session.delete(todo)</span><br><span class="line">        db.session.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        error = <span class="literal">True</span></span><br><span class="line">        db.session.rollback()</span><br><span class="line">        <span class="built_in">print</span>(sys.exc_info())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.session.close()</span><br><span class="line">    <span class="keyword">if</span> error:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># return redirect(url_for(&#x27;index&#x27;))  # 405 error</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; either is ok &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line">        <span class="comment"># return render_template(&#x27;index.html&#x27;, todos=Todo.query.order_by(&#x27;id&#x27;).all())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hp.html&#x27;</span>, todos=Todos.query.order_by(<span class="string">&#x27;id&#x27;</span>).<span class="built_in">all</span>())  <span class="comment"># fix the ordering</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(2): API Dev and Doc(I)</title>
    <url>/2021/07/17/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-I/</url>
    <content><![CDATA[<p>In this and next blog, I will talk about skills about API development including,</p>
<ol type="1">
<li><strong>APIs</strong> : what APIs are and how do they work.</li>
<li><strong>Handling HTTP Requests</strong> : HTTP, Flask, and writing and accessing endpoints.</li>
<li><strong>Routing and API Endpoints</strong> : how to use endpoints and <code>payloads</code> (information passed along with the request) to extend the functionality of APIs, also learn to organize API endpoints, handling Cross-Origin Resource Sharing (CORS) requests, parsing different request types, and handling errors.</li>
<li><strong>Documentation</strong> - learn to write documentation。</li>
<li><strong>Testing</strong> - learn <code>unit testing</code> and <code>test-driven development (TDD)</code>.</li>
</ol>
<span id="more"></span>
<h2 id="introdcution-to-apis">Introdcution to APIs</h2>
<h3 id="what-are-apis">What are APIs?</h3>
<p><strong>API (Application Programming Interface)</strong> is an interface which has been created to help two different systems interact with one another.</p>
<p>The defined functionality of API is independent of the actual implementation. You don't need to understand the entirety of the application implementation in order to interact with it through the API. This has multiple benefits:</p>
<ul>
<li>It doesn't expose the implementation to those who shouldn't have access to it.</li>
<li>The API provides a standard way of accessing the application.</li>
<li>It makes much easier to understand how to access the application's data.</li>
</ul>
<p>🦁 Resources: Some frequently used APIs include:</p>
<ul>
<li><a href="https://developers.google.com/maps/documentation/">Google Maps API</a></li>
<li><a href="https://stripe.com/docs/api?utm_source=zapier.com&amp;utm_medium=referral&amp;utm_campaign=zapier&amp;utm_source=zapier.com&amp;utm_medium=referral&amp;utm_campaign=zapier">Stripe API</a></li>
<li><a href="https://developers.facebook.com/docs">Facebook API</a></li>
<li><a href="https://developers.facebook.com/docs">Instagram API</a></li>
<li><a href="https://developer.spotify.com/documentation/web-api/">Spotify API</a></li>
</ul>
<p>External Resource: <a href="https://blog.postman.com/intro-to-apis-what-is-an-api/">Postman blog - What is an API?</a></p>
<h3 id="how-apis-work">How APIs work?</h3>
<img src="/2021/07/17/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-I/api-workflow.JPG" class="">
<h3 id="restful-apis">RESTful APIs</h3>
<p><code>REST</code> stands for <strong>Representational State Transfer</strong>, which is an architectural style(架构风格) introduced by Roy Fielding in 2000.</p>
<p>Here's a short summary of the REST principles:</p>
<ul>
<li><strong>Uniform Interface :</strong> Every REST architecture must have a standardized way of accessing and processing data resources. This includes unique resource identifiers (i.e., unique URLs) and self-descriptive messages in the server response that describe how to process the representation (for instance JSON vs XML) of the data resource.</li>
<li><strong>Stateless(无状态) :</strong> Every client request is self-contained in, that the server doesn't need to store any application data in order to respond to subsequent requests.</li>
<li><strong>Client-Server :</strong> There must be both a client and server in the architecture.</li>
<li><strong>Cacheable &amp; Layered System :</strong> Caching and layering increases networking efficiency.</li>
</ul>
<img src="/2021/07/17/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-I/client-proxy-api.png" class="" title="Using the RESTful APIs">
<p><strong>Why RESTful are stateless?</strong></p>
<p>It might appear easier to design a server that isn't stateless. There is a reason why RESTful web servers are not allowed to remember anything about the previous requests that the user has sent. In short, <strong>stateless servers make your applications scalable</strong>.</p>
<p>External Resource: - <a href="https://stackoverflow.com/questions/671118/what-exactly-is-restful-programming">What exactly is RESTful programming?</a> - An article from StackOverflow blogs- <a href="https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/">Best practices for REST API design</a> - blog: <a href="https://cloud.tencent.com/developer/article/1590279">什么是RESTful风格的API设计</a></p>
<h2 id="http-and-flask-basics">HTTP and Flask Basics</h2>
<h3 id="introduction-to-http">Introduction to HTTP</h3>
<p>HTTP has been the foundation of Internet communication since 1990.</p>
<p>HTTP Features:</p>
<ul>
<li><strong>Connectionless:</strong> When a request is sent, the client opens the connection; once a response is received, the client closes the connection. The client and server only maintain a connection during the response and request. Future responses are made on a new connection. (When a connection has been opened, it means that the port on the client/server is occupied)</li>
<li><strong>Stateless :</strong> There is no dependency between successive requests.</li>
<li><strong>Not Sessionless :</strong> Utilizing headers, cookies and caching, sessions can be created to allow each HTTP request to share the same context. (img you visit Facebook and send various request with the same account)</li>
<li><strong>Media Independent :</strong> Any type of data can be sent over HTTP as long as both the client and server know how to handle the data format. In our case, we'll use <code>JSON</code>.</li>
</ul>
<hr />
<p>🦄 <strong>Notes on Cookie</strong></p>
<ol type="1">
<li>用途：</li>
</ol>
<p>因为 HTTP 协议是无状态的，即服务器不知道用户上一次做了什么，这严重阻碍了交互式 Web 应用程序的实现。在典型的网上购物场景中，用户浏览了几个页面，买了一盒饼干和两瓶饮料。最后结帐时，由于 HTTP 的无状态性，不通过额外的手段，服务器并不知道用户到底买了什么，所以 Cookie 就是用来绕开 HTTP 的无状态性的“额外手段”之一。服务器可以设置或读取 Cookies 中包含的信息，借此维护用户跟服务器会话中的状态。</p>
<p>在刚才的购物场景中，当用户选购了第一项商品，服务器在向用户发送网页的同时，还发送了一段 Cookie，记录着那项商品的信息。当用户访问另一个页面，浏览器会把 Cookie 发送给服务器，于是服务器知道他之前选购了什么。用户继续选购饮料，服务器就在原来那段 Cookie 裡追加新的商品信息。结帐时，服务器读取发送来的 Cookie 即可。</p>
<p>Cookie 另一个典型的应用是当登录一个网站时，网站往往会请求用户输入用户名和密码，并且用户可以勾选“下次自动登录”。如果勾选了，那么下次访问同一网站时，用户会发现没输入用户名和密码就已经登录了。这正是因为前一次登录时，服务器发送了包含登录凭据（用户名加密码的某种加密形式）的 Cookie 到用户的硬盘上。第二次登录时，如果该 Cookie 尚未到期，浏览器会发送该 Cookie，服务器验证凭据，于是不必输入用户名和密码就让用户登录了。</p>
<ol start="2" type="1">
<li>分类</li>
</ol>
<p>Cookie 保存在客户端中，按在客户端中的存储位置，可分为内存 Cookie 和硬盘 Cookie。</p>
<p>内存 Cookie 由浏览器维护，保存在内存中，浏览器关闭即消失，存在时间短暂。硬盘 Cookie 保存在硬盘裡，有过期时间，除非用户手动清理或到了过期时间，硬盘 Cookie 不会清除，存在时间较长。所以，按存在时间，可分为非持久 Cookie 和持久 Cookie。</p>
<ol start="3" type="1">
<li>缺陷</li>
</ol>
<ul>
<li>Cookie 会被附加在每个 HTTP 请求中，所以无形中增加了流量。</li>
<li>由于 HTTP 请求中的 Cookie 是明文传递的，所以安全性成问题，除非使用 <em>超文本传输安全协定(HTTPs)</em> 。</li>
<li>Cookie 的大小限制在 4 KB 左右，对于复杂的存储需求来说是不够用的。</li>
</ul>
<hr />
<p>HTTP Elements:</p>
<ul>
<li><strong>Universal Resource Identifiers (URIs, 统一资源标识符) :</strong> URIs are basically URLs or address which point to specific resources. An example URI is like: <code>http://www.example.com/tasks/term=homework</code> . It has certain components:
<ul>
<li><strong>Scheme:</strong> specifies the protocol used to access the resource, HTTP or HTTPS. In our example <code>http</code> .</li>
<li><strong>Host:</strong> specifies the host that holds the resources. In our example <code>www.example.com</code> .</li>
<li><strong>Path:</strong> specifies the specific resource being requested. In our example, <code>/tasks</code> .</li>
<li><strong>Query:</strong> an optional component, the query string provides information the resource can use for some purpose such as a search parameter. In our example it is <code>/term=homework</code> .</li>
</ul></li>
<li><strong>Messages :</strong> Requests and Responses.</li>
<li><strong>Status Code :</strong> e.g. 404 NOT FOUND</li>
</ul>
<hr />
<p>🦓 Supplement: <code>URI</code> vs. <code>URL</code></p>
<p>You may be unsure what the difference is between a <strong>URI (Universal Resource Identifier)</strong> and a <strong>URL (Universal Resource Locator)</strong> . These terms tend to get confused a lot, and are even frequently used interchangeably—but there is a distinction.</p>
<p>The term URI can refer to any identifier for a resource—for example, it could be either the name of a resource or the address of a resource (since both the name and address are identifiers of that resource). In contrast, URL only refers to the location of a resource—in other words, it only ever refers to an address.</p>
<p>So, &quot;URI&quot; could refer to a name or an address, while &quot;URL&quot; only refers to an address. Thus, URLs are a specific type of URI that is used to locate a resource on the internet when a client makes a request to a server.</p>
<hr />
<p>🐑 <strong>Resource</strong> : <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview">MDN Web Docs - An overview of HTTP</a></p>
<h3 id="http-requests-and-responses">HTTP Requests and Responses</h3>
<h4 id="requests">Requests</h4>
<p>HTTP requests are sent from the client to the server to initiate some operation. it has some elements to specify the requested resource.</p>
<ul>
<li>Method: Defines the operation to be performed.</li>
<li>Path: The URL of the resource to be fetched, excluding the scheme and host.</li>
<li>HTTP Version</li>
<li>Headers: optional information, success as Accept-Language.</li>
<li>Body: optional information, usually for methods such as <code>POST</code> and <code>PATCH</code>, which contain the resource being sent to the server</li>
</ul>
<img src="/2021/07/17/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-I/http-request1.JPG" class="">
<img src="/2021/07/17/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-I/http-request2.JPG" class="">
<p>Let's take a look at some common used HTTP request methods.</p>
<img src="/2021/07/17/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-I/http-request-methods.JPG" class="">
<h4 id="responses">Responses</h4>
<p>After the request has been received by the server and processed, the server returns an HTTP response message to the client.</p>
<img src="/2021/07/17/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-I/http-response.JPG" class="">
<p>As an API developer, it's important to send the correct status code. As a developer using an API, the status codes, particularly the error codes, are important for understanding what caused an error and how to proceed.</p>
<img src="/2021/07/17/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-I/http-status-code.JPG" class="">
<hr />
<p>🦔 Resource:</p>
<p><a href="https://httpstatusdogs.com/">1. HTTP Dogs</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status">2. MDN Web Docs - HTTP response status codes</a></p>
<h3 id="flasks">Flasks</h3>
<h4 id="basic-flask-app">Basic Flask App</h4>
<p>Next, I will use Flask to create API server.</p>
<p>Flask is a &quot;micro&quot; framework, which means that its core functionality is kept simple, but that there are numerous extensions to allow developers to add other functionality (such as authentication and database support).</p>
<p>Let's creat a basic Flask application,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~$ mkdir flask-example</span><br><span class="line">~$ <span class="built_in">cd</span> flask-example</span><br><span class="line">~$ mkdir flaskr</span><br><span class="line">~$ <span class="built_in">cd</span> flaskr</span><br><span class="line">~$ touch __init__.py</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>(<span class="params">test_config=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># create and configure the app</span></span><br><span class="line">    app = Flask(__name__, instance_relative_config=<span class="literal">True</span>)</span><br><span class="line">    app.config.from_mapping(</span><br><span class="line">        SECRET_KEY=<span class="string">&#x27;dev&#x27;</span>,</span><br><span class="line">        DATABASE=os.path.join(app.instance_path, <span class="string">&#x27;flaskr.sqlite&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> test_config <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># load the instance config, if it exists, when not testing</span></span><br><span class="line">        app.config.from_pyfile(<span class="string">&#x27;config.py&#x27;</span>, silent=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># load the test config if passed in</span></span><br><span class="line">        app.config.from_mapping(test_config)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># endpoint: a simple page that says hello</span></span><br><span class="line">    <span class="comment"># By default, Flask `@app.route` decorators only respond to GET requests.</span></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">        <span class="comment"># jsonify:return json data to the client</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure>
<p>And run the above Flask app using commands,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">~$ <span class="built_in">cd</span> ..</span><br><span class="line">~$ <span class="built_in">pwd</span></span><br><span class="line">flask-example</span><br><span class="line">~$ <span class="built_in">cd</span> flask-example</span><br><span class="line">~$ <span class="built_in">export</span> FLASK_APP=flaskr</span><br><span class="line">~$ <span class="built_in">export</span> FLASK_ENV=development</span><br><span class="line">~$ flask run</span><br></pre></td></tr></table></figure>
<img src="/2021/07/17/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-I/project-structure.JPG" class="" title="Flask project structure">
<hr />
<p>🍄 <strong>应用工厂</strong></p>
<p>一个Flask应用应该是一个 <code>Flask</code> 类的实例，应用的所有东西，如配置和URL，都会和这个实例一起注册。</p>
<p>创建一个Flask应用最简单的方法就是在代码一开创建一个全局的Flask实例，就像我们之前讲的那样，</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flask_hello_app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure>
<p>当项目越来越大的时候，这种方法就不太好的。取而代之的是，我们可以在一个函数内部创建Flask实例来代替创建全局实例。这个函数被称为<strong>应用工厂</strong>，所有应用相关的配置、注册和其他设置都会在函数内部完成， 然后返回这个应用。</p>
<p>上面的 “<strong>init.py</strong>” 文件有两个作用：1）包含应用工厂；2）告诉Python应当视“flaskr”文件夹为一个package。</p>
<p>为了启动创建的Flask应用，我们在terminal使用下面三行命令，</p>
<blockquote>
<p>export FLASK_APP=flaskr # tell the terminal where to find the app export FLASK_ENV=development # run the app in development mode flask run # actually start the app</p>
</blockquote>
<p>🍒 External Resource:</p>
<ul>
<li><a href="https://dormousehole.readthedocs.io/en/latest/tutorial/factory.html">应用设置</a></li>
<li><a href="https://github.com/rileywang0819/demo-bookshelf-api/blob/master/Flask_Doc_v1.1.4.pdf">Flask Doc: 1.5 Tutorial</a></li>
</ul>
<hr />
<h3 id="curl">Curl</h3>
<p><strong>Curl</strong> is a library and command-line tool that completes IP transfers of data using URLs.</p>
<p>Curl syntax:</p>
<blockquote>
<p>curl -X POST URL curl --help</p>
</blockquote>
<img src="/2021/07/17/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-I/curl-command-ex.JPG" class="">
<p>Some Examples:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get books</span></span><br><span class="line">~$ curl http://127.0.0.1:5000/books</span><br><span class="line"></span><br><span class="line"><span class="comment"># update a single book&#x27;s rating</span></span><br><span class="line">~$ curl http://127.0.0.1:5000/books/8 -X PATCH -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&#x27;&#123;&quot;rating&quot;:&quot;1&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete a single book</span></span><br><span class="line">~$ curl -X DELETE http://127.0.0.1:5000/books/8 </span><br><span class="line"></span><br><span class="line"><span class="comment"># create a new book</span></span><br><span class="line">~$ curl -X POST -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&#x27;&#123;&quot;title&quot;:&quot;Neverwhere&quot;, &quot;author&quot;:&quot;Neil Gaiman&quot;, &quot;rating&quot;:&quot;5&quot;&#125;&#x27;</span> http://127.0.0.1:5000/books   </span><br></pre></td></tr></table></figure>
<p>By default curl performs a <code>get</code> request, so you don't need to use the options flag and specify GET.</p>
<p>Typing the following command to check if you already have the curl locally,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~$ curl --version</span><br></pre></td></tr></table></figure>
<p>And you can refer this <a href="https://everything.curl.dev/get">e-book</a> to install curl.</p>
<p>Tip: you can also download a command-line JSON processor call <a href="https://stedolan.github.io/jq/">jp</a> to make the output more clearly.</p>
<h2 id="endpoints-and-payloads">Endpoints and Payloads</h2>
<p>In this section, we'll learn how to use endpoints and payloads to extend the functionality of the API.</p>
<h3 id="organize-api-endpoints">Organize API endpoints</h3>
<p>When organizing API endpoints, you should follow some principles,</p>
<ul>
<li>Should be intuitive</li>
<li>Organize by resources instead of by actions
<ul>
<li>Use nouns in the path, not verbs</li>
<li>The method used will determine the operation taken</li>
<li>Example:
<ul>
<li>GOOD: https://example.com/posts</li>
<li>BAD: https://example.com/create-posts</li>
</ul></li>
</ul></li>
<li>Keep a consistent scheme
<ul>
<li>Plural nouns for collections</li>
<li>Use parameters to specify a specific item</li>
<li>Example:
<ul>
<li>GOOD: https://example.com/entrees/5</li>
<li>BAD: https://example.com/entree_five</li>
</ul></li>
</ul></li>
<li>Don’t make them too complex or lengthy
<ul>
<li>No longer than <code>collection/item/collection</code></li>
<li>Example:
<ul>
<li>GOOD: https://example.com/entrees/5/reviews</li>
<li>BAD: https://example.com/entrees/5/customers/4/reviews</li>
</ul></li>
</ul></li>
</ul>
<p>The request mothod used will determine the operation performed for the given resource URI. Though your API documentation should explain exactly what operation is performed and data returned via the response, it should be intuitive for anyone using your API,</p>
<img src="/2021/07/17/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-I/method-reviews.JPG" class="">
<h3 id="cors">CORS</h3>
<p>If you've had a little experience as a web developer, you may have seen an error in the browser:</p>
<blockquote>
<p>No 'Access-Control-Allow-Origin' header is present on the requested resource</p>
</blockquote>
<p>This error is all about <strong>Cross-Origin Resource Sharing(跨域资源共享)</strong> or <strong>CORS</strong>.</p>
<h4 id="cors-1">CORS</h4>
<p>Before talking about <strong>Cross-Origin Resource Sharing</strong>, let's look at <strong>the same-origin policy</strong> firstly.</p>
<p>The same-origin policy is a concept of web security. It allows scripts in Webpage 1 to access data from Webpage 2 <em>only if</em> they share the same domain. This policy is very important because it protects you. Imagine you have 2 pages in your browser, one page contains an advertisement which is embedded with malicious script, and another page is your bank website. The same-origin policy can prevent those malicious scripts from successfully making requests to your bank's website as you access the website hosting the advertisement.</p>
<p>So, if we try to make requests from:</p>
<ul>
<li>Different domains</li>
<li>Different subdomains (<code>example.com</code> and <code>api.example.com</code>)</li>
<li>Different ports (<code>example.com</code> and <code>example.com:1234</code>)</li>
<li>Different protocols (<code>http://example.com</code> and <code>https://example.com</code>)</li>
</ul>
<p>it will trigger CORS.</p>
<p>As a developer, if you're sending any requests beyond very simple <code>GET</code> or <code>POST</code> requests, then before your actual request is sent, the browser sends a <em>preflight OPTIONS request</em> to the server. If CORS is not enabled, then the browser will not respond properly and the actual request will not be sent, and the above error will be raised.</p>
<p>In order for the requests to be processed properly, CORS utilizes HTTP response headers to specify what the server will allow:</p>
<img src="/2021/07/17/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-I/CORS.JPG" class="">
<p>CORS strategy is needed to make the frontend communicate properly since a different host serves it than your Python's backend. However, you should be careful while working with it since it can expose risk for your application if not handled safely.</p>
<p>🍧 External Resource: <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">MDN Web Docs - CORS</a></p>
<h4 id="flask-cors">Flask-CORS</h4>
<p><strong>Flask-CORS</strong> is an extension library of Flask for handling CORS.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install the flask_cors dependency</span></span><br><span class="line">~$ pip install -U flask-cors</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check the specific version</span></span><br><span class="line">~$ pip show flask-cors</span><br></pre></td></tr></table></figure>
<p>Now, let's try to use Flask-CORS library to enable CORS on a simple application.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS, cross_origin</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> setup_db, Bookshelf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>(<span class="params">test_config=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># create and configure the app</span></span><br><span class="line">    app = Flask(__name__, instance_relative_config=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># resources=&#123;&#125;</span></span><br><span class="line">    <span class="comment"># 1st element: specify what resources we&#x27;re talking about</span></span><br><span class="line">    <span class="comment"># 2nd element: specify what origins from the client can access those resources</span></span><br><span class="line">    <span class="comment"># cors = CORS(app, resources=&#123;r&quot;*/api/*&quot;: &#123;&quot;origins&quot;: &quot;*&quot;&#125;&#125;)</span></span><br><span class="line">    cors = CORS(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.after_request</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">after_request</span>(<span class="params">response</span>):</span></span><br><span class="line">        response.headers.add(</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Type, Authorization&#x27;</span></span><br><span class="line">        )</span><br><span class="line">        response.headers.add(</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;GET, POST, PATCH, DELETE, OPTION&#x27;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">    @cross_origin()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">        <span class="comment"># jsonify:return json data to the client</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure>
<p>🍧 External Resource: <a href="https://flask-cors.readthedocs.io/en/latest/#">Flask-CORS Doc</a></p>
<h3 id="flask-pagination">Flask Pagination</h3>
<p>When using <code>GET</code> request, you can retrieve data of the the given URI. However, sending huge sets of data all to the frontend at once is bad for speed, and will reduce the quality of users' experience. So when handling large collections of data, what we want to do is <strong>paginate</strong> the data using query parameters and request arguments, and send it in chunks.</p>
<h5 id="query-parameters">Query Parameters</h5>
<p>Query parameters convention dictates that,</p>
<ul>
<li>A question mark precedes the query parameters.</li>
<li>Parameters are in key=value pairs with an equal sign in between the key and value.</li>
<li>Sets of parameters are separated by an ampersand.</li>
</ul>
<p>For example,</p>
<blockquote>
<p>www.example.com/entrees?page=1 www.example.com/entrees?page=1&amp;allergens=peanut</p>
</blockquote>
<h5 id="request-arguments">Request Arguments</h5>
<p><code>request.args</code> is a Python dictionary.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/entrees&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_entrees</span>():</span></span><br><span class="line">    page = request.args.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>
<img src="/2021/07/17/Full-Stack-Web-Development/Web-Dev-2-API-Dev-and-Doc-I/request-properties.png" class="" title="Request Properties Examples">
<h4 id="pagination-example">Pagination Example</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paginate_books</span>(<span class="params">request, books</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Paginate the books. &quot;&quot;&quot;</span></span><br><span class="line">    page = request.args.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">    start = (page - <span class="number">1</span>) * BOOKS_PER_SHELF</span><br><span class="line">    end = start + BOOKS_PER_SHELF</span><br><span class="line">    formatted_books = [book.<span class="built_in">format</span>() <span class="keyword">for</span> book <span class="keyword">in</span> books]</span><br><span class="line">    current_books = formatted_books[start: end]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> current_books</span><br></pre></td></tr></table></figure>
<p>This implementation is straightforward, but can cause problems in the long run: If the dataset becomes too large, it can introduce a lack of memory and application unresponsiveness which is terrible for the end-users.</p>
<p>So, it is recommended that we should implement pagination by leveraging controls to the database operations rather than manipulating the output to shape pagination.</p>
<p>Let's look at an example.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">books_limit = request.args.get(<span class="string">&#x27;limit&#x27;</span>, <span class="number">10</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">selected_page = request.args.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">start_index = (selected_page - <span class="number">1</span>) * books_limit</span><br><span class="line"></span><br><span class="line">books = Book.query.order_by(Book.<span class="built_in">id</span>).limit(</span><br><span class="line">    books_limit</span><br><span class="line">    ).offset(start_index).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>
<h3 id="flask-error-handling">Flask Error Handling</h3>
<p>Until now, the only way that we know how to handle errors is by using <code>abort</code>, but those are not insufficient.</p>
<p><code>abort()</code> will return an HTML which is hard to read. We should also send JSON back when request fails, since the cilent needs clearer information about the exact error. And that's where something call <strong><span class="citation" data-cites="app.errorhandler">@app.errorhandler</span> decorator</strong> comes in.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)  </span><span class="comment"># pass the status code or Python error</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_found</span>(<span class="params">error</span>):</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">        <span class="string">&quot;success&quot;</span>: <span class="literal">False</span>, </span><br><span class="line">        <span class="string">&quot;error&quot;</span>: <span class="number">404</span>,</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Not found&quot;</span></span><br><span class="line">        &#125;), <span class="number">404</span></span><br></pre></td></tr></table></figure>
<h3 id="synthesis">Synthesis</h3>
<p>Let's synthesize the knowledge we've learnt so far, and make an implementation of bookshelf api.</p>
<p>You can check the frontend code in <a href="https://github.com/rileywang0819/demo-bookshelf-api/tree/master/frontend">Github</a></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort, jsonify</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy  <span class="comment"># , or_</span></span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> setup_db, Book</span><br><span class="line"></span><br><span class="line">BOOKS_PER_SHELF = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paginate_books</span>(<span class="params">request, books</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Paginate the books. &quot;&quot;&quot;</span></span><br><span class="line">    page = request.args.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">    start = (page - <span class="number">1</span>) * BOOKS_PER_SHELF</span><br><span class="line">    end = start + BOOKS_PER_SHELF</span><br><span class="line">    formatted_books = [book.<span class="built_in">format</span>() <span class="keyword">for</span> book <span class="keyword">in</span> books]</span><br><span class="line">    current_books = formatted_books[start: end]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> current_books</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>(<span class="params">test_config=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># create and configure the app</span></span><br><span class="line">    app = Flask(__name__, instance_relative_config=<span class="literal">True</span>)</span><br><span class="line">    setup_db(app)</span><br><span class="line">    <span class="comment"># resources=&#123;...&#125;</span></span><br><span class="line">    <span class="comment"># 1st element: specify what resources we&#x27;re talking about</span></span><br><span class="line">    <span class="comment"># 2nd element: specify what origins from the client can access those resources</span></span><br><span class="line">    <span class="comment"># cors = CORS(app, resources=&#123;r&quot;*/api/*&quot;: &#123;&quot;origins&quot;: &quot;*&quot;&#125;&#125;)</span></span><br><span class="line">    CORS(app)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># CORS Headers</span></span><br><span class="line"><span class="meta">    @app.after_request</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">after_request</span>(<span class="params">response</span>):</span></span><br><span class="line">        response.headers.add(</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Type,Authorization,true&#x27;</span></span><br><span class="line">        )</span><br><span class="line">        response.headers.add(</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;GET,PUT,POST,DELETE,OPTIONS&#x27;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/books&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_books</span>():</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Retrieves all books, paginated. &quot;&quot;&quot;</span></span><br><span class="line">        books = Book.query.order_by(Book.<span class="built_in">id</span>).<span class="built_in">all</span>()</span><br><span class="line">        current_books = paginate_books(request, books)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(current_books) == <span class="number">0</span>:</span><br><span class="line">            abort(<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&#x27;books&#x27;</span>: current_books,</span><br><span class="line">            <span class="string">&#x27;total_books&#x27;</span>: <span class="built_in">len</span>(books)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/books/&lt;int:book_id&gt;&#x27;</span>, methods=[<span class="string">&#x27;PATCH&#x27;</span>]</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_rating</span>(<span class="params">book_id</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Update a specific book&#x27;s rating. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            book = Book.query.filter_by(<span class="built_in">id</span>=book_id).one_or_none()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> book <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                abort(<span class="number">404</span>)</span><br><span class="line">            new_rating = request.get_json().get(<span class="string">&#x27;rating&#x27;</span>)</span><br><span class="line">            book.rating = new_rating</span><br><span class="line">            book.update()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">                <span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: book.<span class="built_in">id</span></span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            abort(<span class="number">400</span>)  <span class="comment"># bad request</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/books/&lt;int:book_id&gt;&#x27;</span>, methods=[<span class="string">&#x27;DELETE&#x27;</span>]</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_book</span>(<span class="params">book_id</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Deletes a specific book. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            book = Book.query.filter_by(<span class="built_in">id</span>=book_id).one_or_none()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> book <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                abort(<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">            book.delete()</span><br><span class="line">            books = Book.query.order_by(Book.<span class="built_in">id</span>).<span class="built_in">all</span>()</span><br><span class="line">            current_books = paginate_books(request, books)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">                <span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">&#x27;deleted&#x27;</span>: book_id,</span><br><span class="line">                <span class="string">&#x27;books&#x27;</span>: current_books,</span><br><span class="line">                <span class="string">&#x27;total_books&#x27;</span>: <span class="built_in">len</span>(books)</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            abort(<span class="number">422</span>)  <span class="comment"># unprocessable entity</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/books&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_book</span>():</span></span><br><span class="line">        body = request.get_json()</span><br><span class="line">        new_title = body.get(<span class="string">&#x27;title&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        new_author = body.get(<span class="string">&#x27;author&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        new_rating = body.get(<span class="string">&#x27;rating&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            book = Book(title=new_title, author=new_author, rating=new_rating)</span><br><span class="line">            book.insert()</span><br><span class="line">            books = Book.query.order_by(Book.<span class="built_in">id</span>).<span class="built_in">all</span>()</span><br><span class="line">            current_books = paginate_books(request, books)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">                <span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">&#x27;created&#x27;</span>: book.<span class="built_in">id</span>,</span><br><span class="line">                <span class="string">&#x27;books&#x27;</span>: current_books,</span><br><span class="line">                <span class="string">&#x27;total_books&#x27;</span>: <span class="built_in">len</span>(books)</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            abort(<span class="number">422</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">not_found</span>(<span class="params">error</span>):</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;success&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="number">404</span>,</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Not found&quot;</span></span><br><span class="line">        &#125;), <span class="number">404</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @app.errorhandler(<span class="params"><span class="number">400</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bad_request</span>(<span class="params">error</span>):</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;success&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="number">400</span>,</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Bad Request&quot;</span></span><br><span class="line">        &#125;), <span class="number">400</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">    @app.errorhandler(<span class="params"><span class="number">422</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unprocessable</span>(<span class="params">error</span>):</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;success&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="number">422</span>,</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Unprocessable&quot;</span></span><br><span class="line">        &#125;), <span class="number">422</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">    @app.errorhandler(<span class="params"><span class="number">405</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">not_allowed</span>(<span class="params">error</span>):</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;success&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="number">405</span>,</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Not Allowed Method&quot;</span></span><br><span class="line">        &#125;), <span class="number">405</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
</search>
