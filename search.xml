<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>15213(1): Overview</title>
    <url>/2021/07/07/15213-CSAPP/15213-1-Overview/</url>
    <content><![CDATA[<p>You must have used the idea of abstraction many times, such as abstract data types or asymptotic analysis since CS courses emphasize abstraction. </p>
<p>However, abstractions have limits, especially in the presence of bugs. Most of time, in order to fix bugs, you need to understand details of underlying implementations. To help you understand these underlying implementations, we provide this course - <code>15-213: Intro to Computer Systems</code> .</p>
<p>In this course, you will be taught a lot of useful knowledge, skills and tools, which will make you become a more effective programmer. You will understand how programs run, how machines support programs, and will understand why sometimes programs work while sometimes they don‚Äôt. These knowledge is the preparation of later systems courses, such as Compilers, OS, Networks etc. </p>
<span id="more"></span>


<h2 id="Crazy-Reality"><a href="#Crazy-Reality" class="headerlink" title="Crazy Reality"></a>Crazy Reality</h2><p>In this section, we will look at some interesting examples. You will find that they have different results as you thought.</p>
<h3 id="Reality-1-Ints-are-not-Integers-Floats-are-not-Reals"><a href="#Reality-1-Ints-are-not-Integers-Floats-are-not-Reals" class="headerlink" title="Reality #1: Ints are not Integers, Floats are not Reals"></a>Reality #1: Ints are not Integers, Floats are not Reals</h3><img src="/2021/07/07/15213-CSAPP/15213-1-Overview/reality-1.JPG" class="">


<h3 id="Reality-2-You-have-Got-to-Know-Assembly-Ê±áÁºñ"><a href="#Reality-2-You-have-Got-to-Know-Assembly-Ê±áÁºñ" class="headerlink" title="Reality #2: You have Got to Know Assembly(Ê±áÁºñ)"></a>Reality #2: You have Got to Know Assembly(Ê±áÁºñ)</h3><img src="/2021/07/07/15213-CSAPP/15213-1-Overview/reality-2.JPG" class="">

<h3 id="Reality-3-Random-Access-Memory-Is-an-Unphysical-Abstraction"><a href="#Reality-3-Random-Access-Memory-Is-an-Unphysical-Abstraction" class="headerlink" title="Reality #3: Random Access Memory Is an Unphysical Abstraction"></a>Reality #3: Random Access Memory Is an Unphysical Abstraction</h3><ul>
<li>Memory is not unbounded<ul>
<li>It must be allocated and managed</li>
<li>Many applications are memory dominated</li>
</ul>
</li>
<li>Memory referencing bugs especially pernicious<ul>
<li>Effects are distant in both time and space</li>
</ul>
</li>
<li>Memory performance is not uniform<ul>
<li>Cache and virtual memory effects can greatly affect program performance</li>
<li>Adapting program to characteristics of memory system can lead to major speed improvements</li>
</ul>
</li>
</ul>
<p>Let‚Äôs see an example of Memory Referencing Bug.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> a[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">double</span> d;</span><br><span class="line">&#125; <span class="keyword">struct_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">struct_t</span> s;</span><br><span class="line">  s.d = <span class="number">3.14</span>;</span><br><span class="line">  s.a[i] = <span class="number">1073741824</span>; <span class="comment">/* Possibly out of bounds */</span></span><br><span class="line">  <span class="keyword">return</span> s.d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fun(0) =&gt; 	3.14</span></span><br><span class="line"><span class="comment">// fun(1) =&gt; 	3.14</span></span><br><span class="line"><span class="comment">// fun(2) =&gt; 	3.1399998664856</span></span><br><span class="line"><span class="comment">// fun(3) =&gt; 	2.00000061035156</span></span><br><span class="line"><span class="comment">// fun(4) =&gt; 	3.14</span></span><br><span class="line"><span class="comment">// fun(6) =&gt; 	Segmentation fault</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// * Result is system specific</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img src="/2021/07/07/15213-CSAPP/15213-1-Overview/reality-3.JPG" class="">

<p>C/C++ do not provide any memory protection, so you can access memory at will. And sometimes, this will lead nasty bugs because of out of bounds array references, invalid pointer values, or abuses of malloc/free etc. Whether or not bug jumps out depends on your system and compiler, sometimes, effect of bug may be first observed long after it is generated.</p>
<p>To deal with this problem, you can 1) choose another programming language; 2) use or develop tools to detect referencing errors (e.g. Valgrind)</p>
<h3 id="Reality-4-There‚Äôs-more-to-performance-than-asymptotic-complexity"><a href="#Reality-4-There‚Äôs-more-to-performance-than-asymptotic-complexity" class="headerlink" title="Reality #4: There‚Äôs more to performance than asymptotic complexity"></a>Reality #4: There‚Äôs more to performance than asymptotic complexity</h3><p>In asymptotic analysis, constant factors have been ignored.</p>
<p>However, Constant factors matter too! And even exact operation count does not predict performance. Depending on how code written, performance will vary in a large range. Let‚Äôs look at an example.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyij</span><span class="params">(<span class="keyword">int</span> src[<span class="number">2048</span>][<span class="number">2048</span>], <span class="keyword">int</span> dst[<span class="number">2048</span>][<span class="number">2048</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2048</span>; j++)</span><br><span class="line">            dst[i][j] = src[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runtime cost: 4.3ms</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyji</span><span class="params">(<span class="keyword">int</span> src[<span class="number">2048</span>][<span class="number">2048</span>], <span class="keyword">int</span> dst[<span class="number">2048</span>][<span class="number">2048</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2048</span>; j++)</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; i++)</span><br><span class="line">            dst[i][j] = src[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runtime cost: 81.8ms</span></span><br></pre></td></tr></table></figure>

<p>Two code snippests do the same thing. However, their performance are very different. This is in connection with hierarchical memory organization.</p>
<img src="/2021/07/07/15213-CSAPP/15213-1-Overview/reality-4.JPG" class="">

<p>In reality, to optimize the code, you must optimize at multiple levels: <code>algorithm</code>, <code>data representations</code>, <code>procedures</code>, and <code>loops</code> .To do this, you must understand system:</p>
<ul>
<li>How programs compiled and executed</li>
<li>How to measure program performance and identify bottlenecks</li>
<li>How to improve performance without destroying code modularity and generality</li>
</ul>
<h3 id="Reality-5-Computers-do-more-than-execute-programs"><a href="#Reality-5-Computers-do-more-than-execute-programs" class="headerlink" title="Reality #5: Computers do more than execute programs"></a>Reality #5: Computers do more than execute programs</h3><img src="/2021/07/07/15213-CSAPP/15213-1-Overview/reality-5.JPG" class="">

<p>This course will covers these topics as well.</p>
<ul>
<li>Of course, you need to learn a specific course if you want to be topic-centric, but this course can serve as a good prerequiste.</li>
</ul>
<img src="/2021/07/07/15213-CSAPP/15213-1-Overview/role.JPG" class="">


<h2 id="Labs"><a href="#Labs" class="headerlink" title="Labs"></a>Labs</h2><p>Labs are the heart of this course. There are 7 labs.</p>
<hr>
<p><strong>Part I. Programs and Data</strong></p>
<p>üåª topics:</p>
<ul>
<li>Bits operations, arithmetic, assembly language programs</li>
<li>Representation of C control and data structures</li>
<li>Includes aspects of architecture and compilers </li>
</ul>
<p>üë©‚Äçüíª labs:</p>
<ul>
<li>L1 (datalab): Manipulating bits</li>
<li>L2 (bomblab): Defusing a binary bomb</li>
<li>L3 (attacklab): The basics of code injection attacks</li>
</ul>
<hr>
<p><strong>Part II. The Memory Hierarchy</strong></p>
<p>üåª topics:</p>
<ul>
<li>Memory technology, memory hierarchy, caches, disks, locality</li>
<li>Includes aspects of architecture and OS</li>
</ul>
<p>üë©‚Äçüíª labs:</p>
<ul>
<li>L4 (cachelab): Building a cache simulator and optimizing for locality.<br>Learn how to exploit locality in your programs. </li>
</ul>
<hr>
<p><strong>Part III. Exceptional  Control Flow</strong></p>
<p>üåª topics:</p>
<ul>
<li>Hardware exceptions, processes, process control, Unix signals, nonlocal jumps</li>
<li>Includes aspects of compilers, OS, and architecture</li>
</ul>
<p>üë©‚Äçüíª labs:</p>
<ul>
<li>L5 (tshlab): Writing your own Unix shell.<br>A first introduction to concurrency</li>
</ul>
<hr>
<p><strong>Part IV. Virtual Memory</strong></p>
<p>üåª topics:</p>
<ul>
<li>Virtual memory, address translation, dynamic storage allocation</li>
<li>Includes aspects of architecture and OS</li>
</ul>
<p>üë©‚Äçüíª labs:</p>
<ul>
<li>L6 (malloclab): Writing your own malloc package. <ul>
<li>Get a real feel for systems-level programming</li>
</ul>
</li>
</ul>
<hr>
<p><strong>Part V. Networking, and Concurrency</strong></p>
<p>üåª topics:</p>
<ul>
<li>High level and low-level I/O, network programming</li>
<li>Internet services, Web servers</li>
<li>concurrency, concurrent server design, threads</li>
<li>I/O multiplexing with select</li>
<li>Includes aspects of networking, OS, and architecture</li>
</ul>
<p>üë©‚Äçüíª labs:</p>
<ul>
<li>L7 (proxylab): Writing your own Web proxy.<ul>
<li>Learn network programming and more about concurrency and synchronization. </li>
</ul>
</li>
</ul>
<h2 id="Reminder"><a href="#Reminder" class="headerlink" title="Reminder"></a>Reminder</h2><p>üìö Do not forget to read the textbook! You should read chapter 1.</p>
]]></content>
      <categories>
        <category>15213-Intro to Computer Systems</category>
      </categories>
      <tags>
        <tag>15213</tag>
      </tags>
  </entry>
  <entry>
    <title>ÊïôÁ®ãÔºö‰ΩøÁî®GithubÂíåHexoÊê≠Âª∫‰∏™‰∫∫ÂçöÂÆ¢</title>
    <url>/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/</url>
    <content><![CDATA[<h2 id="ÂâçË®Ä"><a href="#ÂâçË®Ä" class="headerlink" title="ÂâçË®Ä"></a>ÂâçË®Ä</h2><p>Âú®ËøôÁØáÂçöÂÆ¢ÈáåÔºåÊàëËØ¶ÁªÜËÆ∞ÂΩï‰∫ÜËá™Â∑±‰ΩøÁî® <code>Github + Hexo</code> Êê≠Âª∫‰∏™‰∫∫ÂçöÂÆ¢ÁöÑÂÖ®ËøáÁ®ãÔºå‰ª•ÂèäËá™Â∑±ÈÅáÂà∞ÁöÑÈóÆÈ¢òÁöÑËß£ÂÜ≥ÊñπÊ°àÔºåÂ∏åÊúõÂèØ‰ª•Â∏ÆÂà∞Ê≠£Âú®ÈòÖËØªËØ•ÂçöÊñáÁöÑ‰Ω†„ÄÇüòÄ</p>
<p>Â¶ÇÊûú‰Ω†Êúâ‰ªª‰ΩïÈóÆÈ¢òÔºåÊ¨¢ËøéÂú®ÁïôË®ÄÊùøÈáåÂÜô‰∏ã‰Ω†ÁöÑÈóÆÈ¢ò„ÄÇ</p>
<span id="more"></span>

<h2 id="ÂºÄÂßã‰πãÂâç"><a href="#ÂºÄÂßã‰πãÂâç" class="headerlink" title="ÂºÄÂßã‰πãÂâç"></a>ÂºÄÂßã‰πãÂâç</h2><p>Âú®ÂºÄÂßãÊê≠Âª∫ÂçöÂÆ¢‰πãÂâçÔºåËØ∑ÂÖàÁ°ÆËÆ§‰Ω†ÊòØÂê¶ÂÆåÊàê‰∫Ü‰ª•‰∏ãÁöÑÂáÜÂ§áÂ∑•‰ΩúÔºö</p>
<ul>
<li>Êã•Êúâ<strong>Github</strong>Ë¥¶Âè∑Ôºõ</li>
<li>ÂÆâË£Ö‰∫Ü<strong>node.js„ÄÅnpm</strong>;</li>
<li>ÂÆâË£Ö‰∫Ü<strong>git</strong> (git for macOS/Windows/Linux/Unix);</li>
</ul>
<h3 id="1-Github"><a href="#1-Github" class="headerlink" title="1. Github"></a>1. Github</h3><p>ËøõÂÖ•<a href="https://github.com/">GithubÂÆòÁΩë</a>Ê≥®ÂÜåÔºåËØ∑ËÆ∞‰Ωè‰Ω†Ê≥®ÂÜåÊó∂‰ΩøÁî®ÁöÑË¥¶Âè∑ÂíåÈÇÆÁÆ±„ÄÇ</p>
<h3 id="2-node-js-amp-npm"><a href="#2-node-js-amp-npm" class="headerlink" title="2. node.js &amp; npm"></a>2. node.js &amp; npm</h3><p>ËøõÂÖ•<a href="https://nodejs.org/en/download/">NodeÂÆòÁΩë</a>‰∏ãËΩΩ‰∏é‰Ω†Ê≠£Âú®‰ΩøÁî®ÁöÑÊìç‰ΩúÁ≥ªÁªüÁõ∏ÂØπÂ∫îÁöÑÁâàÊú¨ÔºåÂπ∂ÂÆâË£Ö„ÄÇÂÆâË£ÖÊàêÂäüÂêéÔºåÊâìÂºÄ <code>terminal(macOS/Linux)„ÄÅCMD/Powershell(Windows)Á≠â</code>, ËæìÂÖ•‰ª•‰∏ãÂëΩ‰ª§Ê£ÄÊü•ÊòØÂê¶ÂÆâË£ÖÊàêÂäü„ÄÇ</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node --version  <span class="comment"># Êü•ÁúãnodeÁâàÊú¨Âè∑</span></span><br><span class="line">$ npm --version  <span class="comment"># Êü•ÁúãnpmÁâàÊú¨Âè∑</span></span><br></pre></td></tr></table></figure>

<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/1.JPG" class="">

<p>‚ùó Â¶ÇÊûúÊòØWindowsÁ≥ªÁªüÔºåËØ∑Âä°ÂøÖÂ∞ÜË∑ØÂæÑÊ≠£Á°ÆÊ∑ªÂä†Âà∞ <code>PATH</code> ÁéØÂ¢ÉÂèòÈáè‰∏≠„ÄÇ</p>
<h3 id="3-Git"><a href="#3-Git" class="headerlink" title="3. Git"></a>3. Git</h3><p>ËøõÂÖ•<a href="https://git-scm.com/">GitÂÆòÁΩë</a>‰∏ãËΩΩ„ÄÅÂÆâË£ÖÊúÄÊñ∞ÁâàÊú¨ÁöÑGit„ÄÇ</p>
<p>Â¶ÇÊûú‰Ω†ÂØπÂÆâË£ÖGitÊÑüÂà∞‰∏çÂÆâÔºåÂèØ‰ª•ÂèÇËÄÉ‰∏ãÈù¢ÁöÑÈìæÊé•„ÄÇ</p>
<ul>
<li>Linux: <a href="https://sp21.datastructur.es/materials/lab/lab1setup/linux.html">Link</a></li>
<li>maxOS: <a href="https://sp21.datastructur.es/materials/lab/lab1setup/mac.html">Link</a></li>
<li>WindowsÔºö<a href="https://sp21.datastructur.es/materials/lab/lab1setup/windows.html#b-install-git">Link</a></li>
</ul>
<hr>
<p>PS: Â¶ÇÊûú‰Ω†‰ΩøÁî®WindowsÁ≥ªÁªüÔºåÂº∫ÁÉàÂª∫ËÆÆ‰Ω†ÂÆâË£Ö <code>Windows Terminal</code> , ÂÆâË£ÖÊñπÊ≥ïÂèØ‰ª•ÂèÇËÄÉ‰∏äËø∞WindowsÈìæÊé•ÁöÑPart C.</p>
<hr>
<p>Âú®ÁªàÁ´ØËæìÂÖ• <code>git --version</code> Ê£ÄÊü•ÊòØÂê¶ÂÆâË£ÖÊàêÂäü„ÄÇ</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/2.JPG" class="">

<ul>
<li>ÂèØÈÄâÊìç‰Ωú(ÈùûÂøÖÈ°ª)Ôºö</li>
</ul>
<p>Âú®ÁªàÁ´ØËæìÂÖ•Â¶Ç‰∏ãÂëΩ‰ª§Êù•ËÆæÁΩÆÁî®Êà∑ÂêçÂíåÈÇÆÁÆ±„ÄÇ</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;user_name&quot;</span> <span class="comment"># user_nameÂ°´ÂÖ•GitHubÁî®Êà∑Âêç</span></span><br><span class="line"></span><br><span class="line">$ git config --global user.email <span class="string">&quot;user_email&quot;</span> <span class="comment"># user_emailÂ°´ÂÖ•GitHubÊ≥®ÂÜåÁöÑÈÇÆÁÆ±</span></span><br></pre></td></tr></table></figure>

<p>Êü•ÁúãÂ∑≤ËÆæÁΩÆÁöÑÁî®Êà∑ÂêçÂíåÈÇÆÁÆ±Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line"></span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure>

<h2 id="Êê≠Âª∫GithubÂçöÂÆ¢"><a href="#Êê≠Âª∫GithubÂçöÂÆ¢" class="headerlink" title="Êê≠Âª∫GithubÂçöÂÆ¢"></a>Êê≠Âª∫GithubÂçöÂÆ¢</h2><h3 id="1-ÂàõÂª∫‰ªìÂ∫ì"><a href="#1-ÂàõÂª∫‰ªìÂ∫ì" class="headerlink" title="1. ÂàõÂª∫‰ªìÂ∫ì"></a>1. ÂàõÂª∫‰ªìÂ∫ì</h3><p>ÁôªÂΩïGithubÔºåÊñ∞ÂàõÂª∫‰∏Ä‰∏™‰ªìÂ∫ì„ÄÇ‰ªìÂ∫ìÂêç‰∏∫Ôºö<code>username.github.io</code> ÔºåÂÖ∂‰ªñÁöÑ‰∏∫ÈªòËÆ§ÈÄâÈ°πÂç≥ÂèØ„ÄÇ</p>
<p>‚ùó ‰∏ÄÂÆöÊòØusernameËÄå‰∏çÊòØname„ÄÇ</p>
<h3 id="2-ÈÖçÁΩÆSSH-key"><a href="#2-ÈÖçÁΩÆSSH-key" class="headerlink" title="2. ÈÖçÁΩÆSSH key"></a>2. ÈÖçÁΩÆSSH key</h3><p>ÊâìÂºÄ terminal/Git BashÁ≠â, ËæìÂÖ•‰ª•‰∏ãÂëΩ‰ª§Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;user.email&quot;</span> <span class="comment"># user.email‰∏∫GitHub‰∏äÊ≥®ÂÜåÁöÑÈÇÆÁÆ±</span></span><br></pre></td></tr></table></figure>

<p>ÈªòËÆ§‰∏çÈúÄË¶ÅËÆæÁΩÆÂØÜÁ†ÅÔºåËøûÁª≠ÊåâÂõûËΩ¶ÈîÆÂç≥ÂèØ„ÄÇÁªìÊùüÂêéÔºåÊâìÂºÄÁî®Êà∑‰∏ªÁõÆÂΩïÊü•ÁúãÊòØÂê¶ÊàêÂäüÁîüÊàê‰∫Ü<strong>ssh-key</strong>„ÄÇ</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Áî®Êà∑‰∏ªÁõÆÂΩïÊâÄÂú®‰ΩçÁΩÆÔºö</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> macOS/Linux: ~/.ssh</span><br><span class="line"><span class="bullet">-</span> Windows: C:\Users\<span class="xml"><span class="tag">&lt;<span class="name">XX</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/3.JPG" class="">

<p>ËøõÂÖ• <code>.ssh</code> Êñá‰ª∂Â§πÔºå‰Ω†‰ºöÁúãÂà∞‰∏äËø∞Êìç‰Ωú‰∏∫Êàë‰ª¨ÁîüÊàê‰∫Ü‰∏Ä‰∏™keyÔºåÂåÖÊã¨‰∏Ä‰∏™Âêç‰∏∫ <code>id_rsa.pub</code> ÁöÑÂÖ¨Èí•ÔºåÂíå‰∏Ä‰∏™Âêç‰∏∫ <code>id_rsa</code> ÁöÑÁßÅÈí•„ÄÇ(‚ö†Ô∏èÊ≥®ÊÑèÔºöÁßÅÈí•Áªù‰∏çÂèØ‰ª•Ê≥ÑÈú≤ÔºåËÄåÂÖ¨Èí•ÂèØ‰ª•ÊîæÂøÉÂëäËØâÂà´‰∫∫„ÄÇ)</p>
<p>ÊâìÂºÄ<a href="https://github.com/settings/keys">SSH and GPG keys</a>ÔºåÁÇπÂáª <code>new SSH Key</code> Ôºå‰Ω†Â∞Ü‰ºöÁúãÂà∞Â¶Ç‰∏ãÁ™óÂè£Ôºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/4.jpg" class="">

<p>ÂÖ∂‰∏≠ <code>Title</code> ‰∏∫Ê†áÈ¢òÔºåÂèØ‰ª•ÈöèÊÑèÂ°´ÂÜô„ÄÇÂ∞ÜÂàöÊâçÁîüÊàêÁöÑÂÖ¨Èí• <code>id_rsa.pub</code> ‰∏≠ÁöÑÂÜÖÂÆπÂ§çÂà∂Âà∞KeyÁ™óÂè£‰∏≠ÔºåÊúÄÂêéÁÇπÂáª <code>Add SSH key</code>„ÄÇ</p>
<p>Âú®ÁªàÁ´ØËæìÂÖ•Â¶Ç‰∏ãÂëΩ‰ª§‰ª•Ê£ÄÊü•GithubÂÖ¨Èí•ËÆæÁΩÆÊòØÂê¶ÊàêÂäüÔºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># Â¶ÇÊûú‰Ω†ÁúãÂà∞Á±ª‰ººÂ¶Ç‰∏ãÁöÑ‰ø°ÊÅØÔºåÂàôËØ¥ÊòéËÆæÁΩÆÊàêÂäü„ÄÇ</span></span><br><span class="line"></span><br><span class="line">Hi XXX! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p><strong>Ë°•ÂÖÖ</strong>ÔºöÂÖ≥‰∫éÈÖçÁΩÆSSHÁöÑÁî®ÈÄîÔºåÂèØ‰ª•ÂèÇËÄÉ<a href="https://segmentfault.com/a/1190000008509620">ËøôÁØáÊñáÁ´†</a></p>
<h2 id="‰ΩøÁî®HexoÂçöÂÆ¢Ê°ÜÊû∂"><a href="#‰ΩøÁî®HexoÂçöÂÆ¢Ê°ÜÊû∂" class="headerlink" title="‰ΩøÁî®HexoÂçöÂÆ¢Ê°ÜÊû∂"></a>‰ΩøÁî®HexoÂçöÂÆ¢Ê°ÜÊû∂</h2><h3 id="1-‰ªÄ‰πàÊòØHexo"><a href="#1-‰ªÄ‰πàÊòØHexo" class="headerlink" title="1. ‰ªÄ‰πàÊòØHexo"></a>1. ‰ªÄ‰πàÊòØHexo</h3><p><code>Hexo</code> ÊòØ‰∏Ä‰∏™ÁÆÄÂçï„ÄÅÂø´ÈÄü„ÄÅÂº∫Â§ßÁöÑÂü∫‰∫é <code>Github Pages</code> ÁöÑÂçöÂÆ¢Ê°ÜÊû∂ÔºåÊîØÊåÅ <code>Markdown</code> Ê†ºÂºèÔºåÊúâ‰ºóÂ§ö‰ºòÁßÄÊèí‰ª∂Âíå‰∏ªÈ¢ò„ÄÇ</p>
<p><strong>ÈìæÊé•Ôºö</strong><a href="https://hexo.io/zh-cn/docs/">ÂÆòÊñπÊñáÊ°£</a></p>
<h3 id="2-‰∏∫‰ªÄ‰πàË¶ÅÁî®Hexo"><a href="#2-‰∏∫‰ªÄ‰πàË¶ÅÁî®Hexo" class="headerlink" title="2. ‰∏∫‰ªÄ‰πàË¶ÅÁî®Hexo"></a>2. ‰∏∫‰ªÄ‰πàË¶ÅÁî®Hexo</h3><p>Áî±‰∫é <code>Github Pages</code> Â≠òÊîæÁöÑÈÉΩÊòØÈùôÊÄÅÊñá‰ª∂ÔºåÂçöÂÆ¢Â≠òÊîæÁöÑ‰∏çÂè™ÊòØÊñáÁ´†ÂÜÖÂÆπÔºåËøòÊúâÊñáÁ´†ÂàóË°®„ÄÅÂàÜÁ±ª„ÄÅÊ†áÁ≠æ„ÄÅÁøªÈ°µÁ≠âÂä®ÊÄÅÂÜÖÂÆπÔºåÂÅáÂ¶ÇÊØèÊ¨°ÂÜôÂÆå‰∏ÄÁØáÊñáÁ´†ÈÉΩË¶ÅÊâãÂä®Êõ¥Êñ∞ÂçöÊñáÁõÆÂΩïÂíåÁõ∏ÂÖ≥ÈìæÊé•‰ø°ÊÅØÔºåÁõ∏‰ø°Ë∞ÅÈÉΩ‰ºöÁñØÊéâÔºåÊâÄ‰ª• <code>Hexo</code> ÊâÄÂÅöÁöÑÂ∞±ÊòØÂ∞ÜËøô‰∫õ <code>.md</code> Êñá‰ª∂ÈÉΩÊîæÂú®Êú¨Âú∞ÔºåÊØèÊ¨°ÂÜôÂÆåÊñáÁ´†ÂêéË∞ÉÁî®ÂÜôÂ•ΩÁöÑÂëΩ‰ª§Êù•ÊâπÈáèÂÆåÊàêÁõ∏ÂÖ≥È°µÈù¢ÁöÑÁîüÊàêÔºåÁÑ∂ÂêéÂÜçÂ∞ÜÊúâÊîπÂä®ÁöÑÈ°µÈù¢Êèê‰∫§Âà∞ <code>GitHub</code> „ÄÇ</p>
<h3 id="3-ÂÆâË£Ö‰∏éÈÖçÁΩÆ"><a href="#3-ÂÆâË£Ö‰∏éÈÖçÁΩÆ" class="headerlink" title="3. ÂÆâË£Ö‰∏éÈÖçÁΩÆ"></a>3. ÂÆâË£Ö‰∏éÈÖçÁΩÆ</h3><p>ËØ¥ÊòéÔºöÊàë‰ΩøÁî®ÁöÑÊòØWindowsÊìç‰ΩúÁ≥ªÁªüÔºåÊâÄÊúâÁöÑÂëΩ‰ª§ÊàëÈÉΩÊòØÂú® <code>Windows Terminal</code> ‰∏≠ÁöÑ <code>bash shell</code> ‰∏≠ÂÆåÊàêÁöÑÔºåÊ≤°ÊúâÈÅáÂà∞‰ªª‰ΩïÈóÆÈ¢ò„ÄÇ</p>
<p>Ê†πÊçÆÁΩë‰∏äÁöÑÁªèÈ™åÔºåÂ¶ÇÊûú‰Ω†‰ΩøÁî® <code>git bash</code> , ÈÇ£‰πàÂú®hexoÂàùÂßãÂåñÁöÑËøáÁ®ã‰∏≠‰Ω†ÂèØËÉΩ‰ºöÈÅáÂà∞ <code>node_modules</code> Êñá‰ª∂Â§πÊó†Ê≥ïÁîüÊàêÁöÑÈóÆÈ¢òÔºåÂèØ‰ª•ÈÖçÂêà <code>cmd</code> Ëß£ÂÜ≥ËØ•ÈóÆÈ¢ò(ÂêéÈù¢‰ºöËØ¥Êòé)„ÄÇ</p>
<h4 id="1-ÂÆâË£Ö‰∏éÂàùÂßãÂåñ"><a href="#1-ÂÆâË£Ö‰∏éÂàùÂßãÂåñ" class="headerlink" title="1. ÂÆâË£Ö‰∏éÂàùÂßãÂåñ"></a>1. ÂÆâË£Ö‰∏éÂàùÂßãÂåñ</h4><p>ËæìÂÖ•‰ª•‰∏ãÂëΩ‰ª§Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli <span class="comment"># ËØ•ÂëΩ‰ª§ÂÆåÊàêhexoÁöÑÂÆâË£Ö</span></span><br></pre></td></tr></table></figure>

<p>ÂÆâË£ÖÂÆåÊàêÂêéÔºåËØ∑Ê†πÊçÆ‰∏™‰∫∫ÂñúÂ•ΩÂú®ËÆ°ÁÆóÊú∫ÂÜÖÂàõÂª∫‰∏Ä‰∏™Á©∫Êñá‰ª∂Â§πÔºà‰∏çÈôêÂà∂ÂêçÁß∞ÔºâÔºåÁî®‰∫éÂ≠òÊîæÂçöÂÆ¢ÂÜÖÁöÑÊâÄÊúâÂÜÖÂÆπÂíåÁ¥†Êùê„ÄÇ</p>
<p>‰ΩøÁî®ÂëΩ‰ª§Ë°åËøõÂÖ•ÂàöÊâçÂàõÂª∫ÁöÑÊñá‰ª∂Â§πÂÜÖÔºåËæìÂÖ•Â¶Ç‰∏ãÂëΩ‰ª§Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init <span class="comment"># ËØ•ÂëΩ‰ª§ÂÆåÊàêhexoÂú®Êú¨Âú∞ÂçöÂÆ¢ÁõÆÂΩïÁöÑÂàùÂßãÂåñ</span></span><br></pre></td></tr></table></figure>

<p>ÂÆåÊàêÂêéËØ∑Ê£ÄÊü•Êñá‰ª∂Â§πÂÜÖÁöÑÂÜÖÂÆπÔºåÂ¶Ç‰∏ãÂõæÔºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/5.jpg" class="">


<hr>
<p>Â¶ÇÊûú‰Ω†‰ΩøÁî®ÁöÑÊòØ <code>git bash</code> ÔºåÂπ∂‰∏îÈÅáÂà∞‰∫Ü <code>node_modules</code> Êñá‰ª∂Â§πÊó†Ê≥ïÁîüÊàêÁöÑÈóÆÈ¢òÔºåÂèØ‰ª•ÂèÇËÄÉ‰ª•‰∏ãËß£ÂÜ≥ÊñπÊ°à„ÄÇ</p>
<p>‚ùó Ê≥®ÊÑèÔºöÂõ†‰∏∫ÊàëÂπ∂Ê≤°ÊúâÈÅáÂà∞Ëøô‰∏™ÈóÆÈ¢òÔºåÊâÄ‰ª•Êó†Ê≥ï‰øùËØÅËØ•Ëß£ÂÜ≥ÊñπÊ°à‰∏ÄÂÆöÊúâÊïà„ÄÇ‰ªÖ‰æõÂèÇËÄÉ„ÄÇ</p>
<p>‰∫ßÁîüËØ•ÈóÆÈ¢òÁöÑÂéüÂõ†‰∏∫ÔºåÂú®Ëá™Â∑±ÁöÑÂçöÂÆ¢Êñá‰ª∂Â§π‰∏≠ <code>.gitignore</code> Êñá‰ª∂‰∏≠Ê∑ªÂä†‰∫Ü <code>node_modules/</code> ÔºåÂØºËá¥Êõ¥Êñ∞ÁöÑÊó∂ÂÄôÔºåËøô‰∏™Êñá‰ª∂Â§πË¢´ÂøΩÁï•ÔºåÊ≤°ÊúâË¢´Êõ¥Êñ∞‰∏äÂéª„ÄÇ</p>
<p>Ëß£ÂÜ≥ÊñπÊ°àÔºö</p>
<ol>
<li>cmdËøõÂÖ•ÂçöÂÆ¢ÂΩìÂâçÊñá‰ª∂Â§πË∑ØÂæÑ</li>
<li>ÊâßË°å npm install</li>
<li>ÊâßË°å hexo server</li>
</ol>
<hr>
<h4 id="2-ÁîüÊàêÈùôÊÄÅÊñá‰ª∂"><a href="#2-ÁîüÊàêÈùôÊÄÅÊñá‰ª∂" class="headerlink" title="2. ÁîüÊàêÈùôÊÄÅÊñá‰ª∂"></a>2. ÁîüÊàêÈùôÊÄÅÊñá‰ª∂</h4><p>Âú®ÁªàÁ´ØËæìÂÖ•ÂëΩ‰ª§Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g <span class="comment"># ÁîüÊàêÈùôÊÄÅÊñá‰ª∂</span></span><br></pre></td></tr></table></figure>

<p>ÊâßË°å‰ª•‰∏äÂëΩ‰ª§‰πãÂêéÔºåHexo Â∞±‰ºöÂú® <code>public</code> Êñá‰ª∂Â§πÁîüÊàêÁõ∏ÂÖ≥ <code>HTML</code> Êñá‰ª∂ÔºåËøô‰∫õÊñá‰ª∂Âú®‰πãÂêé‰ºöË¢´Êèê‰∫§Âà∞ GitHub ‰∏ä <code>username.github.io</code> ÁöÑ‰ªìÂ∫ì‰∏≠„ÄÇ</p>
<h4 id="3-Êú¨Âú∞È¢ÑËßà"><a href="#3-Êú¨Âú∞È¢ÑËßà" class="headerlink" title="3. Êú¨Âú∞È¢ÑËßà"></a>3. Êú¨Âú∞È¢ÑËßà</h4><p>ËæìÂÖ•‰ª•‰∏ãÂëΩ‰ª§Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s <span class="comment"># ÂºÄÂêØÊú¨Âú∞È¢ÑËßà</span></span><br></pre></td></tr></table></figure>

<p>Êú¨Âú∞È¢ÑËßàÊúçÂä°ÂºÄÂêØÂêéÔºåÊâìÂºÄÊµèËßàÂô®ËÆøÈóÆ <code>http://localhost:4000</code> ÊàñÁõ¥Êé•ÁÇπÂáªÁªàÁ´ØÁöÑÈìæÊé•Âç≥ÂèØ„ÄÇ‰Ω†Â∫îËØ•ÂèØ‰ª•ÁúãÂà∞Â¶Ç‰∏ãÁöÑÈ°µÈù¢Ôºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/6.jpg" class="">



<p>ÈÄöËøáÊú¨Âú∞È¢ÑËßàÔºå‰Ω†ÂèØ‰ª•ÂÆûÊó∂Êü•ÁúãÂçöÂÆ¢ÁöÑÁºñËæëÊÉÖÂÜµÔºåÁ≠âÂçöÂÆ¢ÂÆåÊàêÂêéÂÜçÈÉ®ÁΩ≤Âà∞ <code>GitHub</code> ‰∏ä„ÄÇ</p>
<h3 id="4-‰∏ä‰º†Âà∞Github"><a href="#4-‰∏ä‰º†Âà∞Github" class="headerlink" title="4. ‰∏ä‰º†Âà∞Github"></a>4. ‰∏ä‰º†Âà∞Github</h3><h4 id="1-ÈÖçÁΩÆÁ´ôÁÇπÈÖçÁΩÆÊñá‰ª∂"><a href="#1-ÈÖçÁΩÆÁ´ôÁÇπÈÖçÁΩÆÊñá‰ª∂" class="headerlink" title="1. ÈÖçÁΩÆÁ´ôÁÇπÈÖçÁΩÆÊñá‰ª∂"></a>1. ÈÖçÁΩÆÁ´ôÁÇπÈÖçÁΩÆÊñá‰ª∂</h4><p>hexo Êúâ2Áßç <code>_config.yml</code> Êñá‰ª∂Ôºå‰∏Ä‰∏™ÊòØÊ†πÁõÆÂΩï‰∏ãÁöÑÂÖ®Â±ÄÁöÑ <code>_config.yml</code> ,Âú®ÂçöÂÆ¢Êñá‰ª∂Â§πÁöÑÊ†πÁõÆÂΩï‰∏ãÔºõÂè¶‰∏Ä‰∏™ÊòØÂêÑ‰∏™‰∏ªÈ¢ò <code>theme</code> ‰∏ãÁöÑ <code>_config.yml</code> „ÄÇÂâçËÄÖË¢´Áß∞‰∏∫<strong>Á´ôÁÇπÈÖçÁΩÆÊñá‰ª∂</strong>Ôºå ÂêéËÄÖË¢´Áß∞‰∏∫<strong>‰∏ªÈ¢òÈÖçÁΩÆÊñá‰ª∂</strong>„ÄÇ</p>
<p>ÊâìÂºÄ(Êé®ËçêÁî® <code>VS Code</code> )Ê†πÁõÆÂΩï‰∏ãÁ´ôÁÇπÈÖçÁΩÆÊñá‰ª∂ <code>_config.yml</code> ÔºåÈÖçÁΩÆÊúâÂÖ≥ <code>deploy</code> ÁöÑÈÉ®ÂàÜÔºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/7.JPG" class="">


<h4 id="2-ÂÆâË£ÖÈÉ®ÁΩ≤Êèí‰ª∂"><a href="#2-ÂÆâË£ÖÈÉ®ÁΩ≤Êèí‰ª∂" class="headerlink" title="2. ÂÆâË£ÖÈÉ®ÁΩ≤Êèí‰ª∂"></a>2. ÂÆâË£ÖÈÉ®ÁΩ≤Êèí‰ª∂</h4><p>Âú®ÁªàÁ´ØËæìÂÖ•‰ª•‰∏ãÂëΩ‰ª§Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save <span class="comment"># ÂÆâË£ÖÈÉ®ÁΩ≤Êèí‰ª∂</span></span><br></pre></td></tr></table></figure>

<p>Â¶ÇÊûú‰∏çËøõË°å‰∏äËø∞Êìç‰ΩúÔºåÁõ¥Êé•‰ΩøÁî® <code>hexo d</code> ÈÉ®ÁΩ≤Âà∞ <code>GitHub</code>ÔºåÂ∞Ü‰ºöÊä•Èîô„ÄÇ</p>
<h4 id="3-ÈÉ®ÁΩ≤Âà∞-GitHub"><a href="#3-ÈÉ®ÁΩ≤Âà∞-GitHub" class="headerlink" title="3. ÈÉ®ÁΩ≤Âà∞ GitHub"></a>3. ÈÉ®ÁΩ≤Âà∞ GitHub</h4><p>ËæìÂÖ•‰ª•‰∏ãÂëΩ‰ª§Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p>PS: ÂØπ‰∫éWindowsÁî®Êà∑Ôºå‰∏çË¶ÅÂú® <code>cmd</code> ‰∏≠ËæìÂÖ•ËØ•ÂëΩ‰ª§„ÄÇËØ∑‰ΩøÁî® <code>git bash</code> or <code>bash shell</code> ÔºåÂê¶Âàô‰ºöÊèêÁ§∫ <code>Permission denied (publickey)</code> „ÄÇ</p>
<p>ÈÉ®ÁΩ≤ÊàêÂäüÂêéÔºåÂú®ÊµèËßàÂô®ËæìÂÖ• <code>https://&lt;username&gt;.github.io/</code> ÔºåÂ¶ÇÊûúÂá∫Áé∞‰∏ãÂõæÔºåÂàôË°®Á§∫ÈÉ®ÁΩ≤ÊàêÂäü„ÄÇ</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/8.jpg" class="">

<p>Âà∞Ê≠§ÔºåÊàë‰ª¨Â∞±ÂÆåÊàê‰∫ÜÂçöÂÆ¢ÁöÑÊê≠Âª∫Â∑•‰ΩúÔºåÂâ©‰∏ãÁöÑÂ∞±ÊòØÂ≠¶‰π†Â¶Ç‰ΩïÂÜôÂçöÂÆ¢ÔºåÂ¶Ç‰ΩïÂ¢ûÊ∑ª‰Ω†ÊÉ≥Ë¶ÅÁöÑÂäüËÉΩÔºå‰ª•ÂèäÂ¶Ç‰ΩïÁæéÂåñÂçöÂÆ¢„ÄÇ‰Ω†ÂèØ‰ª•Ëá™Áî±Êé¢Á¥¢Ôºå‰πüÂèØ‰ª•ÂèÇËÄÉÊàë‰ΩøÁî®ÁöÑÊñπÊ°à„ÄÇ</p>
<h2 id="HexoÂçöÂÆ¢ÊïÖÈöúËÆ∞ÂΩïÂèäÁæéÂåñÊñπÊ°àÔºàÊåÅÁª≠Êõ¥Êñ∞Ôºâ"><a href="#HexoÂçöÂÆ¢ÊïÖÈöúËÆ∞ÂΩïÂèäÁæéÂåñÊñπÊ°àÔºàÊåÅÁª≠Êõ¥Êñ∞Ôºâ" class="headerlink" title="HexoÂçöÂÆ¢ÊïÖÈöúËÆ∞ÂΩïÂèäÁæéÂåñÊñπÊ°àÔºàÊåÅÁª≠Êõ¥Êñ∞Ôºâ"></a>HexoÂçöÂÆ¢ÊïÖÈöúËÆ∞ÂΩïÂèäÁæéÂåñÊñπÊ°àÔºàÊåÅÁª≠Êõ¥Êñ∞Ôºâ</h2><h3 id="HexoÂ∏∏Áî®ÂëΩ‰ª§"><a href="#HexoÂ∏∏Áî®ÂëΩ‰ª§" class="headerlink" title="HexoÂ∏∏Áî®ÂëΩ‰ª§"></a>HexoÂ∏∏Áî®ÂëΩ‰ª§</h3><ol>
<li>hexo new ‚ÄúpostName‚Äù # Êñ∞Âª∫ÊñáÁ´†</li>
<li>hexo clean # Ê∏ÖÈô§ÁºìÂ≠ò</li>
<li>hexo generate # ÁîüÊàêÈùôÊÄÅÈ°µÈù¢Ëá≥ public ÁõÆÂΩï</li>
<li>hexo server # ÂºÄÂêØÈ¢ÑËßàËÆøÈóÆÁ´ØÂè£ÔºàÈªòËÆ§Á´ØÂè£ 4000Ôºå‚Äôctrl + c‚ÄôÂÖ≥Èó≠ serverÔºâ</li>
<li>hexo deploy # ÈÉ®ÁΩ≤Âà∞ GitHub</li>
<li>hexo help # Êü•ÁúãÂ∏ÆÂä©</li>
<li>hexo version # Êü•Áúã Hexo ÁöÑÁâàÊú¨</li>
<li>hexo s -g # ÁîüÊàêÂπ∂Êú¨Âú∞È¢ÑËßà</li>
<li>hexo d -g # ÁîüÊàêÂπ∂‰∏ä‰º†</li>
</ol>
<p>PS: HexoÊîØÊåÅÁº©ÂÜôÂëΩ‰ª§ÔºåÂç≥Ôºö<br>    - hexo n == hexo new<br>    - hexo g == hexo generate<br>    - hexo s == hexo server<br>    - hexo d == hexo deploy</p>
<h3 id="Êõ¥Êîπ‰∏ªÈ¢ò"><a href="#Êõ¥Êîπ‰∏ªÈ¢ò" class="headerlink" title="Êõ¥Êîπ‰∏ªÈ¢ò"></a>Êõ¥Êîπ‰∏ªÈ¢ò</h3><p>Â¶ÇÊûú‰Ω†‰∏çÊÉ≥‰ΩøÁî®ÈªòËÆ§‰∏ªÈ¢òÔºå‰Ω†ÂèØ‰ª•Ëá™Áî±Êé¢Á¥¢ÂÖ∂‰ªñÁöÑHexo‰∏ªÈ¢ò„ÄÇ</p>
<blockquote>
<p><a href="https://hexo.io/themes/">ÂÆòÊñπ‰∏ªÈ¢ò</a><br><a href="https://www.zhihu.com/question/24422335">Áü•‰πé</a><br><a href="https://github.com/hexojs/hexo/wiki/Themes">Github</a></p>
</blockquote>
<p>ËøôÈáå‰ª•NexT<a href="http://theme-next.iissnan.com/"> (Doc)</a> ‰∏ªÈ¢ò‰∏∫‰æãÔºåËØ¥Êòé‰∏Ä‰∏ãÊõ¥Êîπ‰∏ªÈ¢òÁöÑÊñπÊ≥ï„ÄÇ</p>
<ul>
<li>‰∏ãËΩΩ‰∏ªÈ¢òÔºö</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Âú®ÁªàÁ´ØÁ™óÂè£‰∏ãÔºåÂÆö‰ΩçÂà∞ Hexo Á´ôÁÇπÁõÆÂΩï‰∏ã„ÄÇ‰ΩøÁî® Git checkout ‰ª£Á†ÅÔºö</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<ul>
<li>ÂêØÁî®‰∏ªÈ¢òÔºö</li>
</ul>
<p>‰∏éÊâÄÊúâ Hexo ‰∏ªÈ¢òÂêØÁî®ÁöÑÊ®°Âºè‰∏ÄÊ†∑„ÄÇ ÂΩì ÂÖãÈöÜ/‰∏ãËΩΩ ÂÆåÊàêÂêéÔºåÊâìÂºÄ Á´ôÁÇπÈÖçÁΩÆÊñá‰ª∂(Ê†πÁõÆÂΩï‰∏ãÁöÑ <code>_config.yml</code>)Ôºå ÊâæÂà∞ theme Â≠óÊÆµÔºåÂπ∂Â∞ÜÂÖ∂ÂÄºÊõ¥Êîπ‰∏∫ next„ÄÇ</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/9.jpg" class="">

<p>Âà∞Ê≠§ÔºåNexT ‰∏ªÈ¢òÂÆâË£ÖÂÆåÊàê„ÄÇ‰∏ã‰∏ÄÊ≠•Êàë‰ª¨Â∞ÜÈ™åËØÅ‰∏ªÈ¢òÊòØÂê¶Ê≠£Á°ÆÂêØÁî®„ÄÇÂú®ÂàáÊç¢‰∏ªÈ¢ò‰πãÂêé„ÄÅÈ™åËØÅ‰πãÂâçÔºå Êàë‰ª¨ÊúÄÂ•Ω‰ΩøÁî® <code>hexo clean</code> Êù•Ê∏ÖÈô§ Hexo ÁöÑÁºìÂ≠ò„ÄÇÈ¶ñÂÖàÂêØÂä® Hexo Êú¨Âú∞Á´ôÁÇπÔºåÂπ∂ÂºÄÂêØË∞ÉËØïÊ®°ÂºèÔºàÂç≥Âä†‰∏ä ‚ÄìdebugÔºâÔºåÊï¥‰∏™ÂëΩ‰ª§ÊòØ <code>hexo s --debug</code>„ÄÇ Âú®ÊúçÂä°ÂêØÂä®ÁöÑËøáÁ®ãÔºåÊ≥®ÊÑèËßÇÂØüÂëΩ‰ª§Ë°åËæìÂá∫ÊòØÂê¶Êúâ‰ªª‰ΩïÂºÇÂ∏∏‰ø°ÊÅØÔºåÂ¶ÇÊûú‰Ω†Á¢∞Âà∞ÈóÆÈ¢òÔºåËøô‰∫õ‰ø°ÊÅØÂ∞ÜÂ∏ÆÂä©‰ªñ‰∫∫Êõ¥Â•ΩÁöÑÂÆö‰ΩçÈîôËØØ„ÄÇ ÂΩìÂëΩ‰ª§Ë°åËæìÂá∫‰∏≠ÊèêÁ§∫Âá∫Ôºö</p>
<blockquote>
<p>INFO  Hexo is running at <a href="http://0.0.0.0:4000/">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p>
</blockquote>
<p>Ê≠§Êó∂Âç≥ÂèØ‰ΩøÁî®ÊµèËßàÂô®ËÆøÈóÆ <code>http://localhost:4000</code>ÔºåÊ£ÄÊü•Á´ôÁÇπÊòØÂê¶Ê≠£Á°ÆËøêË°å„ÄÇÂΩì‰Ω†ÁúãÂà∞Á´ôÁÇπÁöÑÂ§ñËßÇ‰∏é‰∏ãÂõæÊâÄÁ§∫Á±ª‰ººÊó∂Âç≥ËØ¥Êòé‰Ω†Â∑≤ÊàêÂäüÂÆâË£Ö NexT ‰∏ªÈ¢ò„ÄÇËøôÊòØ NexT ÈªòËÆ§ÁöÑ Scheme ‚Äî‚Äî Muse„ÄÇ</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/10.png" class="">

<p><strong>TroubleShooting:</strong> ÊâßË°å <code>hexo s</code> Êó∂Ôºå<a href="https://github.com/iissnan/hexo-theme-next/issues/2253">location:4000ÊòæÁ§∫‰∏çÂØπÁöÑÊïÖÈöú</a></p>
<p>NexT‰∏ªÈ¢òÊúâ4‰∏≠Scheme„ÄÇÂ¶ÇÊûú‰Ω†ÊÉ≥Ë¶ÅÊõ¥Êç¢SchemeÔºåÊâìÂºÄ ‰∏ªÈ¢òÈÖçÁΩÆÊñá‰ª∂(theme Êñá‰ª∂Â§π -&gt; NexTÊñá‰ª∂Â§π -&gt; <code>_config.yml</code>), ‰øÆÊîπSchemeÔºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/11.JPG" class="">


<h3 id="ÈÖçÁΩÆÁ´ôÁÇπ‰ø°ÊÅØ"><a href="#ÈÖçÁΩÆÁ´ôÁÇπ‰ø°ÊÅØ" class="headerlink" title="ÈÖçÁΩÆÁ´ôÁÇπ‰ø°ÊÅØ"></a>ÈÖçÁΩÆÁ´ôÁÇπ‰ø°ÊÅØ</h3><p>ÊâìÂºÄÊ†πÁõÆÂΩï‰∏ãÁ´ôÁÇπÈÖçÁΩÆÊñá‰ª∂ <code>_config.yml</code> Ôºå‰Ω†ÂèØ‰ª•ËÆæÁΩÆÁ´ôÁÇπÁöÑ‰∏Ä‰∫õÂü∫Êú¨‰ø°ÊÅØÔºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/12.JPG" class="">

<ul>
<li>titleÔºöÁΩëÁ´ôÊ†áÈ¢ò</li>
<li>subtitleÔºöÁΩëÁ´ôÂâØÊ†áÈ¢ò</li>
<li>descriptionÔºöÁΩëÁ´ôÊèèËø∞</li>
<li>keywordsÔºöÂÖ≥ÈîÆÂ≠ó</li>
<li>authorÔºö‰ΩúËÄÖ</li>
<li>languageÔºöÁΩëÁ´ô‰ΩøÁî®ÁöÑËØ≠Ë®ÄÔºàÊ≥®ÊÑèÔºö‰∏ÄÂÆöË¶ÅËÆæÁΩÆ‰∏∫‰∏ª‰ΩìËÉΩÂ§üËØÜÂà´ÁöÑËØ≠Ë®ÄÔºåÂê¶Âàô‰ºöÂá∫Áé∞‰π±Á†ÅÔºâ<ul>
<li>‰Ω†ÂèØ‰ª•Âú® ‚Äú\themes\next\languages&quot; ‰∏≠ÊâæÂà∞‰∏ªÈ¢òÊîØÊåÅÁöÑËØ≠Ë®Ä</li>
</ul>
</li>
<li>timezoneÔºöÁΩëÁ´ôÊó∂Âå∫„ÄÇHexo ÈªòËÆ§‰ΩøÁî®ÊÇ®ÁîµËÑëÁöÑÊó∂Âå∫</li>
</ul>
<h3 id="ÂàõÂª∫ÂçöÊñá"><a href="#ÂàõÂª∫ÂçöÊñá" class="headerlink" title="ÂàõÂª∫ÂçöÊñá"></a>ÂàõÂª∫ÂçöÊñá</h3><p>ü¶ù HexoÁöÑÂçöÊñá‰ΩøÁî®MarkdownËØ≠Ë®Ä„ÄÇÂ¶ÇÊûú‰Ω†‰ªéÊù•Ê≤°Áî®ËøáÔºåÂèØ‰ª•ÂèÇËÄÉÊïôÁ®ãÔºö<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown ËèúÈ∏üÊïôÁ®ã</a> or <a href="https://www.appinn.com/markdown/#%E4%BB%A3%E7%A0%81">MarkdownËØ≠Ê≥ïËØ¥Êòé(‰∏≠ÊñáÁâà)</a></p>
<p>ËæìÂÖ•Â¶Ç‰∏ãÂëΩ‰ª§ÂàõÂª∫ÂçöÊñáÔºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&#x27;name of the blog&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Hexo‰ºöÂú® <code>source\_posts</code> ‰∏ãÁîüÊàêÁõ∏ÂÖ≥ <code>.md</code> Êñá‰ª∂ÔºåÊØè‰∏ÄÁØáÂçöÂÆ¢ÂØπÂ∫î‰∏Ä‰∏™ <code>.md</code> Êñá‰ª∂ÔºåÁõ¥Êé•ÁºñËæëÂçöÊñáÂØπÂ∫îÁöÑÊñá‰ª∂Âç≥ÂèØ„ÄÇ</p>
<p>Â¶ÇÊûú‰Ω†ÊÉ≥Ë¶ÅÊõ¥ÊîπÂçöÊñáÁöÑÊ®°ÊùøÔºåÊâìÂºÄ <code>scaffolds</code> Êñá‰ª∂Â§πÔºå‰Ω†ÂèØ‰ª•ÁúãÂà∞3‰∏™ÈªòËÆ§ÁöÑÊ®°Êùø <code>draft.md</code> , <code>page.md</code> Âíå <code>post.md</code> ÔºåÈô§Ê≠§‰πãÂ§ñÔºå‰Ω†ËøòÂèØ‰ª•ÂàõÂª∫Ëá™Â∑±ÂÆöÂà∂ÁöÑÊ®°Êùø„ÄÇ</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="ÊùÇ‰∏ÉÊùÇÂÖ´"><a href="#ÊùÇ‰∏ÉÊùÇÂÖ´" class="headerlink" title="ÊùÇ‰∏ÉÊùÇÂÖ´"></a>ÊùÇ‰∏ÉÊùÇÂÖ´</h3><p>Q1ÔºöHexoÊõ¥Êîπ‰∏ªÈ¢òÂêéËøúÁ®ãÁΩëÁ´ô‰∏çÊõ¥Êñ∞Ôºü</p>
<p>AÔºöÊõ¥Êîπ‰∏ªÈ¢òÂêéÔºåÂÖàÊâßË°å <code>hexo clean</code>ÔºåÂÜçÊâßË°å <code>hexo g</code> Âíå <code>hexo d</code>„ÄÇÂ¶ÇÊûú‰ªçÁÑ∂Ê≤°ÊúâÂèòÂåñÔºåÂèØËÉΩÊòØÊµèËßàÂô®ÁºìÂ≠òÁöÑÂéüÂõ†„ÄÇÊåâ F12 ÊàñËÄÖÈº†Ê†áÂè≥ÈîÆÊâìÂºÄ <code>Ê£ÄÊü•</code> , ÈÄâÊã© Network ‰πãÂêéÈÄâ‰∏≠ <code>Disable cache</code> .</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/13.JPG" class="">

<hr>
<p>Q2: Â¶Ç‰ΩïÂú®ÂçöÊñá‰∏≠ÊèíÂÖ•ÂõæÁâá„ÄÅËßÜÈ¢ëÔºü</p>
<p>AÔºöÂèØ‰ª•ÂèÇËÄÉ<a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/">ËøôÁØáÂçöÊñá</a>„ÄÇÂõ†‰∏∫ÊàëÂú®ÂÜôÂçöÂÆ¢ÁöÑÊó∂ÂÄôÁªèÂ∏∏ÈúÄË¶ÅÊèíÂÖ•ÂæàÂ§öÂõæÁâáÂíåËßÜÈ¢ëÔºåÊâÄ‰ª•ÊàëÈááÂèñ‰∏∫ÊØèÁØáÂçöÊñáÂª∫Á´ãËá™Â∑±ÁõÆÂΩïÁöÑÊñπÊ≥ï„ÄÇÊâìÂºÄÁ´ôÁÇπÈÖçÁΩÆÊñá <code>_config.yml</code> Ôºå‰øÆÊîπ <code>post_asset_folder</code> ‰∏∫ <code>true</code> Âπ∂‰øùÂ≠òÈÄÄÂá∫„ÄÇ</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/14.JPG" class="">

<p>‰πãÂêéÊØèÊ¨°ÂàõÂª∫ÂçöÊñáÁöÑÊó∂ÂÄô‰ºöÂêåÊó∂ÁîüÊàêÂêåÂêçÁöÑÊñá‰ª∂Â§πÔºå‰Ω†ÂèØ‰ª•Â∞ÜÂêÑÁßçËµÑÊ∫êÔºàÂõæÁâá„ÄÅÈü≥È¢ëÁ≠âÔºâÊîæÂà∞Ëøô‰∏™Êñá‰ª∂Â§πÈáå„ÄÇÂú®ÂçöÊñá‰∏≠ÂºïÁî®ÁöÑÊó∂ÂÄôÔºå‰ΩøÁî®‰ª•‰∏ãÁöÑËØ≠Ê≥ïÂç≥ÂèØÔºö</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ÊèíÂÖ•ÂõæÁâá: &#123;% asset_img &lt;image name&gt; &lt;title&gt; %&#125;</span><br><span class="line"></span><br><span class="line">ÊèíÂÖ•ËßÜÈ¢ëÔºö</span><br><span class="line">    &lt;video src=&#x27;vedio source&#x27; </span><br><span class="line">       type=&#x27;video/mp4&#x27; </span><br><span class="line">       controls=&#x27;controls&#x27;  </span><br><span class="line">       preload=&quot;auto&quot;</span><br><span class="line">       width=&#x27;100%&#x27; </span><br><span class="line">       height=&#x27;100%&#x27;&gt;</span><br><span class="line">    &lt;/video&gt;</span><br><span class="line"></span><br><span class="line">ÈÉ®ÂàÜÂèÇÊï∞Ôºö</span><br><span class="line">- autoplay ÂàôËßÜÈ¢ëÂú®Â∞±Áª™ÂêéÈ©¨‰∏äÊí≠Êîæ„ÄÇ</span><br><span class="line">- controls Áî®Êà∑ÊòæÁ§∫Êéß‰ª∂ÔºåÊØîÂ¶ÇÊí≠ÊîæÊåâÈíÆ„ÄÇ</span><br><span class="line">- width È¢ëÊí≠ÊîæÂô®ÁöÑÂÆΩÂ∫¶„ÄÇ</span><br><span class="line">- height ËÆæÁΩÆËßÜÈ¢ëÊí≠ÊîæÂô®ÁöÑÈ´òÂ∫¶</span><br><span class="line">- loop Êñá‰ª∂ÂÆåÊàêÊí≠ÊîæÂêéÂÜçÊ¨°ÂºÄÂßãÊí≠Êîæ„ÄÇ loop=&quot;loop&quot;</span><br><span class="line">- preload ËßÜÈ¢ëÂú®È°µÈù¢Âä†ËΩΩÊó∂ËøõË°åÂä†ËΩΩÔºåÂπ∂È¢ÑÂ§áÊí≠Êîæ preload=&quot;auto&quot;</span><br><span class="line">- src Ë¶ÅÊí≠ÊîæÁöÑËßÜÈ¢ëÁöÑ URL„ÄÇ</span><br></pre></td></tr></table></figure>

<hr>
<p>Q3: ÂçöÂÆ¢‰∏ªÈ°µÊñáÁ´†‰∏∫ÂÖ®ÊñáÊòæÁ§∫ÔºåÂ•Ω‰∏ëÔºåÊÄé‰πàÂäûÔºü</p>
<p>AÔºö‰Ω†ÂèØ‰ª•ÂèÇËÄÉ<a href="https://jiangding1990.github.io/2017/04/25/Hexo%E4%BD%BF%E7%94%A8NexT%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E6%96%B9%E6%B3%95/">ËøôÁØáÂçöÊñá</a>Ëß£ÂÜ≥„ÄÇ ÊàëÁî®ÁöÑÊòØÁ¨¨‰∏ÄÁßçÊñπÊ≥ïÔºåÂç≥Âú®ÂçöÊñá‰∏≠‰ΩøÁî® <code>&lt;!--more--&gt;</code> ÊâãÂä®Êà™Êñ≠„ÄÇ</p>
<hr>
<p>Q4. ÊÉ≥ÁªôÂçöÊñáËÆæÁΩÆÊùÉÈôêÔºü</p>
<p>AÔºöÊâìÂºÄ‰∏ªÈ¢òÈÖçÁΩÆÊñá‰ª∂ÔºåÂ£∞ÊòéÂçöÊñáÊùÉÈôêÔºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/15.JPG" class="">

<hr>
<p>Q5. ÂàÜÈ°µÊòæÁ§∫ÊúâÈóÆÈ¢òÔºü</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/16.JPG" class="">

<p>AÔºöÂèÇËÄÉ<a href="https://github.com/hexojs/hexo/issues/3794">ËØ•ÈóÆÈ¢ò‰∏ãÁöÑËÆ®ËÆ∫</a></p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/17.JPG" class="">

<hr>
<p>Q6. NexT‰∏ªÈ¢ò‰∏ãÔºå‰∏≠ÊñáÂçöÂÆ¢ÁõÆÂΩïÂ§±Êïà„ÄÇ</p>
<p>AÔºöÁÇπÂáª‰∏≠ÊñáÁõÆÂΩïÈîöÁÇπÔºåÂèëÁé∞Êó†Ê≥ïÊ≠£Â∏∏Ë∑≥ËΩ¨„ÄÇÂêåÊó∂ÔºåÊâìÂºÄ <code>ÊéßÂà∂Âè∞</code> Âêé‰ºöÂèëÁé∞Êä•ÈîôÔºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/18.JPG" class="">

<p>Ê†πÊçÆÊä•Èîô‰ø°ÊÅØÔºåÊâìÂºÄ <code>themes/next/source/js/src/post-details.js</code> Êñá‰ª∂Ôºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/19.JPG" class="">

<p>ÂéüÂõ†ÊòØ</p>
<h2 id="ÂèÇËÄÉÈìæÊé•Ôºö"><a href="#ÂèÇËÄÉÈìæÊé•Ôºö" class="headerlink" title="ÂèÇËÄÉÈìæÊé•Ôºö"></a>ÂèÇËÄÉÈìæÊé•Ôºö</h2><p>[1] <a href="https://hexo.io/zh-cn/docs/">Hexo Docs</a></p>
<p>[2] <a href="http://theme-next.iissnan.com/theme-settings.html">NexT‰∏ªÈ¢òÈÖçÁΩÆ</a></p>
<p>[3] <a href="https://github.com/iissnan/hexo-theme-next/issues">GithubÔºöNexT‰∏ªÈ¢òÂ∏∏ËßÅÈóÆÈ¢òÊ±áÊÄª</a></p>
<p>[4] <a href="http://yearito.cn/posts/hexo-advanced-settings.html">Hexo Êê≠Âª∫‰∏™‰∫∫ÂçöÂÆ¢Á≥ªÂàóÔºöËøõÈò∂ËÆæÁΩÆÁØá</a></p>
<p>HexoÔºöËÉåÊôØÂõæÁâá</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/06/22/Blog/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><span id="more"></span>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(1): Hello Java World</title>
    <url>/2021/06/23/CS61B-DSA/CS61B-1-Hello-Java-World/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Let‚Äôs start learning CS61B! Firstly, let‚Äôs make sure what is this course about:</p>
<ul>
<li>Writing code that runs efficiently.<ul>
<li>Good <code>algorithms</code>.</li>
<li>Good <code>data structures</code>.</li>
</ul>
</li>
<li>Writing code efficiently.<ul>
<li>Designing, building, testing, and debugging large programs.</li>
<li>Use of programming tools.<ul>
<li>git, IntelliJ, JUnit, and various command line tools.</li>
</ul>
</li>
<li>Java (not the focus of the course!)</li>
</ul>
</li>
</ul>
<p>This course assumes you have a solid foundation in programming fundamentals, including OOP, recursion, lists and trees. You can access <a href="https://inst.eecs.berkeley.edu/~cs61a/archives.html">CS61A</a> if you do not have these concepts.  </p>
<span id="more"></span>

<h2 id="Hello-Java-World"><a href="#Hello-Java-World" class="headerlink" title="Hello Java World"></a>Hello Java World</h2><p>Take a look at <em>hello world</em> programs implemented in Python and Java separately.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># in Python</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in Java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> lec1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arrgs)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">1. All code in Java must be part of a class.</span></span><br><span class="line"><span class="comment">2. We delimit the beginnging and end of segments of code using &#123; and &#125;.</span></span><br><span class="line"><span class="comment">3. All statements in Java must end in a semi-colon.</span></span><br><span class="line"><span class="comment">4. For code to run we need &quot;public static void main(String[] arrgs)&quot;.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Static-Typing"><a href="#Static-Typing" class="headerlink" title="Static Typing"></a>Static Typing</h2><p>Let‚Äôs compare two pieces of code, you should notice that the usages of variable x between Python and Java are different.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;horse&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> + <span class="string">&quot;horse&quot;</span>)  <span class="comment"># error</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lec1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloNumbers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">            x += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// x = &quot;horse&quot;;  // error: cannot convert from String to int</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. Before Java variables can be used, they must be declared.</span></span><br><span class="line"><span class="comment">2. Java variables must have a specific type.</span></span><br><span class="line"><span class="comment">3. Java varialbe types can never change.</span></span><br><span class="line"><span class="comment">4. Types are verified (by compiler) before the code even runs!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Declaring-Functions"><a href="#Declaring-Functions" class="headerlink" title="Declaring Functions"></a>Declaring Functions</h2><p>Finally, let‚Äôs learn how to define and use functions in Java. You should notice the way of adding comment in Java.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">larger</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Returns the larger of x and y. &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(larger(-<span class="number">5</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lec1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LargerDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Returns the larger of x and y. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">larger</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(larger(-<span class="number">5</span>, <span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. Function must be declared as part of a class in Java.</span></span><br><span class="line"><span class="comment">    A function that is part of a class is called a &quot;method&quot;.</span></span><br><span class="line"><span class="comment">    So in Java, all functions are methods.</span></span><br><span class="line"><span class="comment">2. To define a function a Java, we use &quot;public static&quot;.</span></span><br><span class="line"><span class="comment">    We will see alternate ways of defining functions later.</span></span><br><span class="line"><span class="comment">3. All parameters of a function must have a declared type,</span></span><br><span class="line"><span class="comment">    and the return value of the function must have a declared type.</span></span><br><span class="line"><span class="comment">    Functions in Java return only one value!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(10): Subtype Polymorphism vs. HoFs</title>
    <url>/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/</url>
    <content><![CDATA[<p>‚õ±Ô∏è In this lecture, we will talk about <code>Polymorphism(Â§öÊÄÅÊÄß)</code> of Java, and continue discussing <code>HoFs</code> deeply.</p>
<p>But before starting this lecture, first, we will review concepts of the previous lecture with a puzzle.</p>
<span id="more"></span>

<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/1.JPG" class="">
<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/2.JPG" class="">


<h2 id="Subtype-Polymorphism"><a href="#Subtype-Polymorphism" class="headerlink" title="Subtype Polymorphism"></a>Subtype Polymorphism</h2><img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/3.JPG" class="">
<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/4.JPG" class="">

<p>In the rest of this lecture, we will think about how to code the second approach in Java.</p>
<h2 id="DIY-Comparison"><a href="#DIY-Comparison" class="headerlink" title="DIY Comparison"></a>DIY Comparison</h2><p>Suppose we want to write a function <code>max()</code> that returns the max of any array, regardless of type.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">max</span><span class="params">(Object[] items)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxDex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (items[i] &gt; items[maxDex]) &#123;    <span class="comment">// this line is wrong!</span></span><br><span class="line">            maxDex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> items[maxDex];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Dog[] dogs = &#123;<span class="keyword">new</span> Dog(<span class="string">&quot;Elyse&quot;</span>, <span class="number">3</span>), <span class="keyword">new</span> Dog(<span class="string">&quot;Sture&quot;</span>, <span class="number">9</span>),</span><br><span class="line">                    <span class="keyword">new</span> Dog(<span class="string">&quot;Benjamin&quot;</span>, <span class="number">15</span>)&#125;;</span><br><span class="line">    Dog maxDog = (Dog) max(dogs);</span><br><span class="line">    maxDog.bark();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To fix the error above, one way is to write a max method is Dog class:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title">maxDog</span><span class="params">(Dog[] dogs)</span> </span>&#123;</span><br><span class="line">   	<span class="keyword">if</span> (dogs == <span class="keyword">null</span> || dogs.length == <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   	Dog maxDog = dogs[<span class="number">0</span>];</span><br><span class="line">   	<span class="keyword">for</span> (Dog d : dogs) &#123;</span><br><span class="line">       <span class="keyword">if</span> (d.size &gt; maxDog.size) &#123;</span><br><span class="line">        	maxDog = d;        	</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> maxDog;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>But this is a bad way, what if we want to compare apples instead of dogs? So we need to find another way. </p>
<p>We have already know that objects cannot be compared to other objects with <code>&gt;</code>, <code>&lt;</code>, <code>==</code> etc. , can inheritance/HoFs help us?</p>
<hr>
<p><strong>Solution:</strong></p>
<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/5.JPG" class="">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OurComparable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Returns </span></span><br><span class="line"><span class="comment">     * 1) negative number if this &lt; o;</span></span><br><span class="line"><span class="comment">     * 2) 0 if this equals o;</span></span><br><span class="line"><span class="comment">     * 3) positive number if this &gt; o</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">OurComparable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String n, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        size = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        Dog uddaDog = (Dog) o;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size - uddaDog.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; says: bark&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Maximizer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OurComparable <span class="title">max</span><span class="params">(OurComparable[] items)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> maxDex = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">		    <span class="keyword">int</span> cmp = items[i].compareTo(items[maxDex]);</span><br><span class="line">                <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    maxDex = i;</span><br><span class="line">                &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> items[maxDex];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog[] dogs = &#123;<span class="keyword">new</span> Dog(<span class="string">&quot;Elyse&quot;</span>, <span class="number">3</span>), <span class="keyword">new</span> Dog(<span class="string">&quot;Sture&quot;</span>, <span class="number">9</span>), </span><br><span class="line">                    <span class="keyword">new</span> Dog(<span class="string">&quot;Benjamin&quot;</span>, <span class="number">15</span>)&#125;;</span><br><span class="line">        Dog maxDog = (Dog) max(dogs);</span><br><span class="line">        maxDog.bark();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<hr>
<p>Now, try to answer 2 quizzes. Hope you can finish them correctly.</p>
<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/6.JPG" class="">
<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/7.JPG" class="">


<blockquote>
<p>Answer:<br>quiz 1: B<br>quiz 2: A</p>
</blockquote>
<h2 id="built-in-Comparable-Interface"><a href="#built-in-Comparable-Interface" class="headerlink" title="built-in Comparable Interface"></a>built-in Comparable Interface</h2><p>Although the built <code>OurComparable</code> works, it is not perfect. In the real world, we use a built-in interface named <code>Comparable</code> .</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T obj)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Rewrite the previous problem:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String n, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        size = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Dog o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size - o.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; says: bark&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Comparators"><a href="#Comparators" class="headerlink" title="Comparators"></a>Comparators</h2><p>We do not always want to compare objects in the same way every time, that is where <code>Comparator</code> comes in/</p>
<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/9.JPG" class="">

<p>Sometimes, maybe you actually want to sort them in a different way, like sorting them alphabetically.</p>
<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/8.JPG" class="">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String n, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        size = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Dog o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size - o.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; says: bark&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NameComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog a, Dog b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.name.compareTo(b.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Comparator&lt;Dog&gt; <span class="title">getNameComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NameComparator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Dog d1 = <span class="keyword">new</span> Dog(<span class="string">&quot;Elyse&quot;</span>, <span class="number">3</span>);</span><br><span class="line">		Dog d2 = <span class="keyword">new</span> Dog(<span class="string">&quot;Sture&quot;</span>, <span class="number">9</span>);</span><br><span class="line">		Dog d3 = <span class="keyword">new</span> Dog(<span class="string">&quot;Benjamin&quot;</span>, <span class="number">15</span>);</span><br><span class="line">        Dog[] dogs = &#123;d1, d2, d3&#125;;</span><br><span class="line">        Dog maxDog = (Dog) max(dogs);</span><br><span class="line">        maxDog.bark();</span><br><span class="line"></span><br><span class="line">	    Comparator&lt;Dog&gt; nc = Dog.getNameComparator();</span><br><span class="line">        <span class="keyword">if</span> (nc.compare(d1, d2) &gt; <span class="number">0</span>) &#123;  <span class="comment">// id d1 comes later than d2 in the alphabet</span></span><br><span class="line">        	d1.bark();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        	d2.bark();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>The only difference between <code>Comparable</code> and <code>Comparator</code> is that <code>Comparable</code> says ‚ÄúI wanna compare myself to other object‚Äù, while <code>Comparator</code> compares two other objects.</p>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(12): Command Line, Git(2021sp)</title>
    <url>/2021/07/14/CS61B-DSA/CS61B-12-Command-Line-Git-2021sp/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(11): Libraries, Abstract Classes, Packages</title>
    <url>/2021/07/12/CS61B-DSA/CS61B-11-Libraries-Abstract-Classes-Packages/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(13): Generics, Autoboxing</title>
    <url>/2021/07/14/CS61B-DSA/CS61B-13-Generics-Autoboxing/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(14): Exceptions, Iterators, Iterables</title>
    <url>/2021/07/14/CS61B-DSA/CS61B-14-Exceptions-Iterators-Iterables/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(2): Define and Use Classes</title>
    <url>/2021/06/23/CS61B-DSA/CS61B-2-Define-and-Use-Classes/</url>
    <content><![CDATA[<h2 id="Compilation"><a href="#Compilation" class="headerlink" title="Compilation"></a>Compilation</h2><p>If you use an IDE, you can just click <code>run</code> button and the program will be executed directly. But let‚Äôs see the process of executing Java code under the hood.</p>
<img src="/2021/06/23/CS61B-DSA/CS61B-2-Define-and-Use-Classes/2-1.JPG" class="">

<h2 id="Defining-and-Instantiating-Classes"><a href="#Defining-and-Instantiating-Classes" class="headerlink" title="Defining and Instantiating Classes"></a>Defining and Instantiating Classes</h2><p>Let‚Äôs define a Dog class without main method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bark!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Since there is no main method, we cannot run this class directly. To run it, we use another class called DogLauncher.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** The DogLauncher class will test drive the Dog class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog.makeNoise();  <span class="comment">// Bark!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>However, in the real world, different dog yells differently. How to deal with it? </p>
<span id="more"></span>

<p>To make it more natural to represent the entire universe of dogs, we use the key feature of Java - <strong>classes can contain not just functions (a.k.a. methods), but also data; and classes can be instantiated as objects.</strong></p>
<p>The Dog class provides a bludeprint that all Dog objects will follow.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> weightInPounds;  <span class="comment">// instance variables</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** constructor: determines how to instantiate the class */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        weightInPounds = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// instance method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (weightInPounds &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yip!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (weightInPounds &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;bark!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;wooof!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** The DogLauncher class will test drive the Dog class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog(<span class="number">50</span>);  <span class="comment">// create instances of Dog</span></span><br><span class="line">        d.makeNoise();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Notice the method <code>makeNoise</code> above is non-static now, it should be invoked by an instance of the class.</p>
<p>Key differences between static and non-static (a.k.a. instance) methods:</p>
<ul>
<li>Static methods are invoked using the class name, e.g. Dog.makeNoise();</li>
<li>Instance methods are invoked using an instance name, e.g. maya.makeNoise();</li>
<li>Static methods can‚Äôt access ‚Äúmy‚Äù instance variables, because there is no ‚Äúme‚Äù.</li>
</ul>
<p>Class can have a mix of static and non-static memebers (methods and variables), just like follows.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> weightInPounds;  <span class="comment">// instance variables</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String binomen = <span class="string">&quot;Canis familiaris&quot;</span>;  <span class="comment">// static variable</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** constructor: determines how to instantiate the class */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        weightInPounds = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (weightInPounds &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yip!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (weightInPounds &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;bark!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;wooof!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title">maxDog</span><span class="params">(Dog d1, Dog d2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (d1.weightInPounds &gt; d2.weightInPounds) &#123;</span><br><span class="line">            <span class="keyword">return</span> d1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// non-static method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">maxDog</span><span class="params">(Dog d2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.weightInPounds &gt; d2.weightInPounds) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Although you can use <code>System.out.println(d.binomen)</code>, but it‚Äôs a bad style. Remeber, if you declare a static member, use class instead of instance to access it.</p>
<h2 id="Arrays-of-Objects"><a href="#Arrays-of-Objects" class="headerlink" title="Arrays of Objects"></a>Arrays of Objects</h2><p>To create an array of objects, you need 2 steps:</p>
<ul>
<li>First use the <code>new</code> keyword to create the array.</li>
<li>Then use <code>new</code> again for each object that you want to put in the array.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dogs[] dogs = <span class="keyword">new</span> Dog[<span class="number">2</span>];</span><br><span class="line">dogs[<span class="number">0</span>] = <span class="keyword">new</span> Dog(<span class="number">8</span>);</span><br><span class="line">dogs[<span class="number">1</span>] = <span class="keyword">new</span> Dog(<span class="number">20</span>);</span><br><span class="line">dogs[<span class="number">0</span>].makeNoise();</span><br></pre></td></tr></table></figure>

<h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p>Finally, let‚Äôs see an exercise. Will the following program compile? If so, what will it print?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLoop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   		Dog smallDog = <span class="keyword">new</span> Dog(<span class="number">5</span>);</span><br><span class="line">   		Dog mediumDog = <span class="keyword">new</span> Dog(<span class="number">25</span>);</span><br><span class="line">   		Dog hugeDog = <span class="keyword">new</span> Dog(<span class="number">150</span>);</span><br><span class="line"> </span><br><span class="line">   		Dog[] manyDogs = <span class="keyword">new</span> Dog[<span class="number">4</span>];  </span><br><span class="line">        manyDogs[<span class="number">0</span>] = smallDog;</span><br><span class="line">   		manyDogs[<span class="number">1</span>] = hugeDog;    	   </span><br><span class="line">        manyDogs[<span class="number">2</span>] = <span class="keyword">new</span> Dog(<span class="number">130</span>);</span><br><span class="line"> </span><br><span class="line">   		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">   		<span class="keyword">while</span> (i &lt; manyDogs.length) &#123;</span><br><span class="line">       		Dog.maxDog(manyDogs[i], mediumDog).makeNoise();</span><br><span class="line">       		i = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The answer is:</p>
<ul>
<li>Yes, it can pass the compilation.</li>
<li>It‚Äôll print<ul>
<li>bark!</li>
<li>wooof!</li>
<li>wooof!</li>
<li>NullPointerException</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(3): References, Recursion and Lists</title>
    <url>/2021/06/23/CS61B-DSA/CS61B-3-References-Recursion-and-Lists/</url>
    <content><![CDATA[<p>Let‚Äôs learn about primitive types and reference types in Java, and use these concepts to learn our first data strucure - <code>Linked Data Structures</code></p>
<p>What‚Äôs your answer of the following question? Will the change to b affect a?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class Walrus &#123;</span></span><br><span class="line"><span class="comment">//     int weight;</span></span><br><span class="line"><span class="comment">//     double tuskSize;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     public Walrus(int w, double t) &#123;</span></span><br><span class="line"><span class="comment">//         weight = w;</span></span><br><span class="line"><span class="comment">//         tuskSize = t;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">Walrus a = <span class="keyword">new</span> Walrus(<span class="number">1000</span>, <span class="number">8.3</span>);</span><br><span class="line">Walrus b;</span><br><span class="line">b = a;</span><br><span class="line">b.weight = <span class="number">5</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>

<p>The answer is yes, and the output is as follows.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">weight: 5, tusk size: 8.30</span><br><span class="line">weight: 5, tusk size: 8.30</span><br></pre></td></tr></table></figure>

<p>Think about another question, will the change to x affect y?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">y = x;</span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;x is: &quot;</span> + x);</span><br><span class="line">System.out.println(<span class="string">&quot;y is: &quot;</span> + y);</span><br></pre></td></tr></table></figure>

<p>The answer is no, and now x is 2 and y is 5.</p>
<p>You may wonder why. To clear up your confusion, let‚Äôs explore data types in Java world.</p>
<span id="more"></span>

<h2 id="Primitive-Types"><a href="#Primitive-Types" class="headerlink" title="Primitive Types"></a>Primitive Types</h2><p>Anything you want to store on a computer is stored in so-called <code>memory</code>. And whatever the information you want to store, ultimately it will be encoded as a sequence of ones and zeros.</p>
<p>Actually, sometimes, two different things will be stored as the same bits sequence. For example, number 72 stored as 01001000, and letter H stored as 01001000, too. So how computer interprets them correctly?</p>
<p>The answer is <strong>the data type tells Java interpreter how to interpret it.</strong></p>
<p>There are 8 <code>primitive types</code> in Java: <strong>byte, short, int, long, float, double, boolean, char.</strong></p>
<img src="/2021/06/23/CS61B-DSA/CS61B-3-References-Recursion-and-Lists/3-1.JPG" class="">

<h2 id="Reference-Types"><a href="#Reference-Types" class="headerlink" title="Reference Types"></a>Reference Types</h2><p>We already know that there are 8 primitive types in Java. Everything else, including <code>array</code> and <code>string</code>, is a <code>reference type</code>.</p>
<img src="/2021/06/23/CS61B-DSA/CS61B-3-References-Recursion-and-Lists/3-2.JPG" class="">
<img src="/2021/06/23/CS61B-DSA/CS61B-3-References-Recursion-and-Lists/3-3.JPG" class="">
<img src="/2021/06/23/CS61B-DSA/CS61B-3-References-Recursion-and-Lists/3-4.JPG" class="">

<h2 id="The-Golden-Rule-of-Equals"><a href="#The-Golden-Rule-of-Equals" class="headerlink" title="The Golden Rule of Equals"></a>The Golden Rule of Equals</h2><p>This is a very important rule and it helps us answer the above questions.</p>
<p>Given variables x and y : y = x <code>copies all bits from x into y</code></p>
<p>If x and y are reference types, after <code>y = x</code>, x and y will refer to the same object.</p>
<img src="/2021/06/23/CS61B-DSA/CS61B-3-References-Recursion-and-Lists/3-5.JPG" class="">

<h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p>Let‚Äôs use an exercise to make sure you understand everyting.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Does the call to doStuff(walrus, x) have an affect on walrus and/or main‚Äôs x?</span></span><br><span class="line"><span class="comment">// hint: passing parameters obeys the same rule - simply copy the bits to the new scope.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Walrus walrus = <span class="keyword">new</span> Walrus(<span class="number">3500</span>, <span class="number">10.5</span>);</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">9</span>;</span><br><span class="line">    doStuff(walrus, x);</span><br><span class="line">    System.out.println(walrus);</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doStuff</span><span class="params">(Walrus W, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    W.weight = W.weight - <span class="number">100</span>;</span><br><span class="line">    x = x - <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The answer is ‚Äúwalrus will lose 100 lbs, but main‚Äôs x will not change‚Äù.</p>
<h2 id="Linked-Data-Structures"><a href="#Linked-Data-Structures" class="headerlink" title="Linked Data Structures"></a>Linked Data Structures</h2><p>If you have used Python before, you must be familiar with <code>list</code>. Java has list too. </p>
<p>A list is going to be able to grow arbitrarily large, which is different from array. But you may wonder why list can have arbitrary size. To answer this question, you need to know the its data structure, i.e. <code>Linked List(ÈìæË°®)</code>, under the hood. We learn it by building it from scratch.</p>
<p>Our goal is to build a linked list as follows.</p>
<img src="/2021/06/23/CS61B-DSA/CS61B-3-References-Recursion-and-Lists/3-6.JPG" class="">

<h3 id="Create-Linked-List"><a href="#Create-Linked-List" class="headerlink" title="Create Linked List"></a>Create Linked List</h3><p>You can build it intuitively, even though it is awkward.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntList L = <span class="keyword">new</span> IntList();</span><br><span class="line">        L.first = <span class="number">5</span>;</span><br><span class="line">        L.rest = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        L.rest = <span class="keyword">new</span> IntList();</span><br><span class="line">        L.rest.first = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">        L.rest.rest = <span class="keyword">new</span> IntList();</span><br><span class="line">        L.rest.rest.first = <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We can make things slightly better by using constructor.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntList</span><span class="params">(<span class="keyword">int</span> f, IntList r)</span> </span>&#123;</span><br><span class="line">        first = f;</span><br><span class="line">        rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntList L = <span class="keyword">new</span> IntList(<span class="number">15</span>, <span class="keyword">null</span>);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">10</span>, L);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">5</span>, L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Define-size-Method"><a href="#Define-size-Method" class="headerlink" title="Define size Method"></a>Define size Method</h3><p>In Python, we use <code>len(list)</code> to get the size of list. In Java, we use <code>L.size()</code>. How can we implement it?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Return the size of the list using ... recursion! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rest == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="keyword">this</span>.rest.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Return the size of the list using ... iteration! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    IntList p = <span class="keyword">this</span>;   <span class="comment">// p: pointer</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">        p = p.rest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Define-get-Method"><a href="#Define-get-Method" class="headerlink" title="Define get Method"></a>Define get Method</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Return the i-th item of the list using ... recursion! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rest.get(id - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Return the i-th item of the list using ... iteration! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeGet</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    IntList p = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">while</span> (id != <span class="number">0</span>) &#123;</span><br><span class="line">        p = p.rest;</span><br><span class="line">        id -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p.first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntList</span><span class="params">(<span class="keyword">int</span> f, IntList r)</span> </span>&#123;</span><br><span class="line">        first = f;</span><br><span class="line">        rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the size of the list using ... recursion! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rest == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="keyword">this</span>.rest.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the size of the list using ... iteration! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">        IntList p = <span class="keyword">this</span>;   <span class="comment">// p: pointer</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            size += <span class="number">1</span>;</span><br><span class="line">            p = p.rest;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the i-th item of the list using ... recursion! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rest.get(id - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the i-th item of the list using ... iteration! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeGet</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        IntList p = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">while</span> (id != <span class="number">0</span>) &#123;</span><br><span class="line">            p = p.rest;</span><br><span class="line">            id -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntList L = <span class="keyword">new</span> IntList(<span class="number">15</span>, <span class="keyword">null</span>);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">10</span>, L);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">5</span>, L);</span><br><span class="line"></span><br><span class="line">        System.out.println(L.size());</span><br><span class="line">        System.out.println(L.iterativeSize());</span><br><span class="line"></span><br><span class="line">        System.out.println(L.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(L.iterativeGet(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(4): SLLists with Sentinel Nodes</title>
    <url>/2021/06/23/CS61B-DSA/CS61B-4-SLLists-with-Sentinel-Nodes/</url>
    <content><![CDATA[<p>Review the <code>IntList</code> we implemented in lecture 3. We call it ‚Äúnaked linked list‚Äù.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntList</span><span class="params">(<span class="keyword">int</span> f, IntList r)</span> </span>&#123;</span><br><span class="line">        first = f;</span><br><span class="line">        rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>While functional, ‚Äúnaked‚Äù linked lists like the one above are hard to use.</p>
<p>Inspired by our experience with the IntList, we‚Äôll now build a new class <code>SLList</code>, which much more closely resembles the list implementations that programmers use in modern languages. We‚Äôll do so by iteratively adding a sequence of improvements.</p>
<span id="more"></span>

<h2 id="Introducing-the-SLList-Bureaucracy"><a href="#Introducing-the-SLList-Bureaucracy" class="headerlink" title="Introducing the SLList Bureaucracy"></a>Introducing the SLList Bureaucracy</h2><p>Firstly, rename the IntList class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">public</span> IntNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">        item = i;</span><br><span class="line">        next = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then, create another class called <code>SLList</code>. Let IntNode be its instance variable, and add ‚ÄúaaddFirst‚Äù and ‚ÄúgetFirst‚Äù methods to it.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** An SLList is a list of integers, which hides the terrible</span></span><br><span class="line"><span class="comment"> * truth of the nakedness within.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> IntNode first;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** Creates a list of one integer, namely 15 */</span></span><br><span class="line">        SLList L = <span class="keyword">new</span> SLList(<span class="number">15</span>);</span><br><span class="line">        L.addFirst(<span class="number">10</span>);</span><br><span class="line">        L.addFirst(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(L.getFirst());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Until now, I bet you have already realize what‚Äôs the strength of SLList - it is easier to instantiate and to use. It is the data structure that makes it is easier to use.</p>
<img src="/2021/06/23/CS61B-DSA/CS61B-4-SLLists-with-Sentinel-Nodes/4-1.JPG" class="">

<h2 id="The-private-Keyword"><a href="#The-private-Keyword" class="headerlink" title="The private Keyword"></a>The private Keyword</h2><p>However, the above implementation has some flaws. One of them is the abuse of <code>public</code>. For example, users of this class might to do some unexpected operations, like</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SLList L = <span class="keyword">new</span> SLList(<span class="number">15</span>);</span><br><span class="line">L.addFirst(<span class="number">10</span>);</span><br><span class="line">L.first.next.next = L.first.next;</span><br></pre></td></tr></table></figure>

<img src="/2021/06/23/CS61B-DSA/CS61B-4-SLLists-with-Sentinel-Nodes/4-2.JPG" class="">

<p>We can prevent programmers from making such mistakes with the <code>private</code> keyword. The private keyword restricts access, it prevents code in other classes from using members (or constructors) of a class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntNode first;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Nested-Classes"><a href="#Nested-Classes" class="headerlink" title="Nested Classes"></a>Nested Classes</h2><p>The IntNode class provides nothing but just be subordinate to SLList. We can make it as a nested class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> IntNode first; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">      first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">   &#125; </span><br><span class="line">   </span><br><span class="line">   <span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>Here, we use <code>private</code> and <code>static</code> modifier.</p>
<ul>
<li>private: if other external classes never use the nested class, declare it private</li>
<li>static: if the nested class never uses any instance variables or methods of the outer class, declare it static (results in a minor savings of memory)</li>
</ul>
<h2 id="Recursive-private-helper-Methods"><a href="#Recursive-private-helper-Methods" class="headerlink" title="Recursive private helper Methods"></a>Recursive private helper Methods</h2><p>To motivate our remaining improvements, and to give more functionality to our SLList class, let‚Äôs add <code>addLast</code> and <code>size</code> methods.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    IntNode p = first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns the size of list using ... recursion! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    IntNode p = first;</span></span><br><span class="line"><span class="comment">    if (p == null) &#123;</span></span><br><span class="line"><span class="comment">        return 0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 1 + p.next.size(); */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// IntNode does not the size method, so you need a helper method</span></span><br><span class="line">    <span class="keyword">return</span> size(first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// helper method</span></span><br><span class="line"><span class="comment">/** Returns the size of the list starting at p. */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(IntNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + size(p.next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns the size of list using ... iteration! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> totalSize = <span class="number">0</span>;</span><br><span class="line">    IntNode p = first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        totalSize += <span class="number">1</span>;</span><br><span class="line">            p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> totalSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You may notice we have two size methods, one has formal parmater while another does not have it. We call it <code>overload(ÈáçËΩΩ)</code>.</p>
<h2 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h2><p>There are some issues of addLast and size methods - <strong>both of them are pretty slow.</strong> Can you figure out why?</p>
<p>I think it is because of the need of traversing the whole linked-list. In this lecture, wewill focus on modifying size method so that the execution time of it always fast, and in the next lecture, we will get inspiration for quick addLast method.</p>
<p>Our solution is maintaining a special size variable that <code>caches</code> the size of the list. </p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Caching(ÁºìÂ≠ò): putting aside data to speed up retrieval.</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> IntNode first;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, first);</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        IntNode p = first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the size of list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/06/23/CS61B-DSA/CS61B-4-SLLists-with-Sentinel-Nodes/4-3.JPG" class="">

<h2 id="Sentinel-Nodes"><a href="#Sentinel-Nodes" class="headerlink" title="Sentinel Nodes"></a>Sentinel Nodes</h2><img src="/2021/06/23/CS61B-DSA/CS61B-4-SLLists-with-Sentinel-Nodes/4-4.JPG" class="">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add a new constructor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Creates an empty SLList. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    first = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Seems pretty good, right? Well actually there is a subtle bug, can you find it? </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// If you create an empty SLList, then using addLast will cause crash.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    IntNode p = first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Let‚Äôs do last modification of SLList to fix this bug.</p>
<p>One possible solution is adding a special case for the empty list.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  size += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (first == <span class="keyword">null</span>) &#123;</span><br><span class="line">    first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  IntNode p = first;</span><br><span class="line">  <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">    p = p.next;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this case, it‚Äôs ok, but in some other complex cases, such as tree data structure, it will cause vast amount of complexity. There are better ways!</p>
<p><strong>We avoid special cases by making all SLLists the same!</strong></p>
<img src="/2021/06/23/CS61B-DSA/CS61B-4-SLLists-with-Sentinel-Nodes/4-5.JPG" class="">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** An SLList is a list of integers, which hides the terrible</span></span><br><span class="line"><span class="comment"> * truth of the nakedness within.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* The first item (if it exits) is at sentinel.next */</span></span><br><span class="line">    <span class="keyword">private</span> IntNode sentinel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates an empty SLList. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sentinel node‚Äôs item needs to be some integer, </span></span><br><span class="line">        <span class="comment">// but doesn‚Äôt matter what value we pick.</span></span><br><span class="line">        sentinel = <span class="keyword">new</span> IntNode(-<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> IntNode(-<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> IntNode(x, sentinel.next);</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sentinel.next.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        IntNode p = sentinel;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the size of list using ... recursion! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(6): ALists vs SLists, Resizing</title>
    <url>/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/</url>
    <content><![CDATA[<p>We have already seen how we can harness recursive class definition to build an expandable list, i.e. the <code>IntList</code>, the <code>SLList</code>, and the <code>DLList</code>. </p>
<p>Now let us stop continuing it and try to use another basic data structure, i.e. array, to build list, which is called <code>AList</code>. You will find these two kinds of lists have differnet pros and cons.</p>
<h2 id="AList-Array-based-List"><a href="#AList-Array-based-List" class="headerlink" title="AList: Array-based List"></a>AList: Array-based List</h2><p>The data structure of DLList we have talked in the last lecture is pretty beautiful. And it also has fast operations like addFirst, addLast etc. Then why should we try to build AList?</p>
<p>Let‚Äôs talk about a limitation to lists.</p>
<span id="more"></span>

<img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-1.JPG" class="">

<p>The reason why we use array to prove the limitation is that <strong>retrieval from any position of any array is very fast, and it is independent of array size.</strong></p>
<h3 id="1-Naive-AList"><a href="#1-Naive-AList" class="headerlink" title="1. Naive AList"></a>1. Naive AList</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Invariants:</span></span><br><span class="line"><span class="comment"> addLast: The next item we want to add, will go into position size</span></span><br><span class="line"><span class="comment"> getLast: The item we want to return is in position size - 1</span></span><br><span class="line"><span class="comment"> size: The number of items in the list should be size.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates an empty list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Inserts X into the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        items[size] = x;</span><br><span class="line">        size = size + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the item from the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Gets the ith item in the list (0 is the front). */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the number of items in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<h3 id="2-removeLast-method"><a href="#2-removeLast-method" class="headerlink" title="2. removeLast() method"></a>2. removeLast() method</h3><img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-2.JPG" class="">

<p>The answer is we only need to change size.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Deletes item from back of the list and returns deleted item. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = getLast();</span><br><span class="line">    <span class="comment">// items[size - 1] = null;   can but unnecessary</span></span><br><span class="line">    size = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<h3 id="3-Resizing-Arrays"><a href="#3-Resizing-Arrays" class="headerlink" title="3. Resizing Arrays"></a>3. Resizing Arrays</h3><img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-3.JPG" class="">

<p>When the array gets too full, just make a new array!</p>
<p><strong>Resizing process:</strong></p>
<ul>
<li>int[] a = new int[newSize]</li>
<li>System.arraycopy()</li>
<li>a[size] = targetNum</li>
<li>items = a</li>
<li>size += 1</li>
</ul>
<p>Let‚Äôs implement this process.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];</span><br><span class="line">    System.arraycopy(items, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">    items = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">        resize(size + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The big issue here is that <strong>how to set a proper capacity as the parameter of resize method</strong>?</p>
<p>Do an experiment to test the speed of resizing when using two different strategies.</p>
<ul>
<li>one is <strong>resize(size + 10)</strong></li>
<li>another is <strong>resize(2 * size)</strong></li>
</ul>
<img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-5.JPG" class="">

<img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-4.JPG" class="">

<p>There is another performance problem. Suppose we have a very rare situation occur which causes us to:</p>
<ul>
<li>Insert 1,000,000,000 items.</li>
<li>Then remove 990,000,000 items.</li>
</ul>
<p>Our data structure will handle this spike of events as well as it could, but afterwards there is a problem - a waste of space!</p>
<img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-6.JPG" class="">


<h2 id="Final-Code"><a href="#Final-Code" class="headerlink" title="Final Code"></a>Final Code</h2><p>Finally, let‚Äôs make AList generic, and we will get the following code.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Item[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates an empty list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = (Item[]) <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Resizes the underlying array to the target capacity. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        Item[] a = (Item[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        System.arraycopy(items, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        items = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Inserts X into the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">            resize(size + <span class="number">10</span>);</span><br><span class="line">            <span class="comment">// resize(size * 2);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        items[size] = x;</span><br><span class="line">        size = size + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the item from the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Gets the ith item in the list (0 is the front). */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the number of items in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Deletes item from back of the list and</span></span><br><span class="line"><span class="comment">      * returns deleted item. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item x = getLast();</span><br><span class="line">        items[size - <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        size = size - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<h2 id="Loitering"><a href="#Loitering" class="headerlink" title="Loitering"></a>Loitering</h2><img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-7.JPG" class="">

<img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-8.JPG" class="">
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(5): DLLists, Arrays</title>
    <url>/2021/06/24/CS61B-DSA/CS61B-5-DLLists-Arrays/</url>
    <content><![CDATA[<p>In the previous lecture, we built <code>SLLit</code> by adding a extra layer on the naked data structure <code>IntNode</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** An SLList is a list of integers, which hides the terrible</span></span><br><span class="line"><span class="comment"> * truth of the nakedness within.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* The first item (if it exits) is at sentinel.next */</span></span><br><span class="line">    <span class="keyword">private</span> IntNode sentinel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates an empty SLList. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sentinel node‚Äôs item needs to be some integer, </span></span><br><span class="line">        <span class="comment">// but doesn‚Äôt matter what value we pick.</span></span><br><span class="line">        sentinel = <span class="keyword">new</span> IntNode(-<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> IntNode(-<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> IntNode(x, sentinel.next);</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sentinel.next.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        IntNode p = sentinel;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the size of list using ... recursion! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>However, SLList has some limitations, one of them is <strong>inserting at the back of an SLList is much slower than the front</strong>. This is because under the hood, to add an item at the end of the SLList, it needs to iterate through all of the items.</p>
<p>How could we modify our list data structure so that addLast is also fast?</p>
<span id="more"></span>

<h2 id="DLList-Doubly-Linked-List"><a href="#DLList-Doubly-Linked-List" class="headerlink" title="DLList: Doubly Linked List"></a>DLList: Doubly Linked List</h2><img src="/2021/06/24/CS61B-DSA/CS61B-5-DLLists-Arrays/5-1.JPG" class="">

<img src="/2021/06/24/CS61B-DSA/CS61B-5-DLLists-Arrays/5-2.JPG" class="">

<p>While fast, adding <code>.last</code> and <code>.prev</code> introduces lots of special cases. To avoid these, either:</p>
<ul>
<li>Add an additional sentBack sentinel at the end of the list.</li>
<li>Make your linked list circular (highly recommened for project 1), with a single sentinel in the middle.</li>
</ul>
<img src="/2021/06/24/CS61B-DSA/CS61B-5-DLLists-Arrays/5-3.JPG" class="">

<img src="/2021/06/24/CS61B-DSA/CS61B-5-DLLists-Arrays/5-4.JPG" class="">

<p>The implementation process of DLList will be completed in <code>proj1a</code>.</p>
<p><strong>Link:</strong> <a href="Project1A-Data-Structures.md">click here</a></p>
<h2 id="Generic-Lists"><a href="#Generic-Lists" class="headerlink" title="Generic Lists"></a>Generic Lists</h2><p>Until now, our SLList or DLList only support Integers. To make our list better, one important task it to make it <code>generic</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Generic SLList */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span>&lt;<span class="title">Type</span>&gt; </span>&#123;	</span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">StuffNode</span> </span>&#123;</span><br><span class="line">		<span class="keyword">public</span> Type item;</span><br><span class="line">		<span class="keyword">public</span> StuffNode next;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">StuffNode</span><span class="params">(Type i, StuffNode n)</span> </span>&#123;</span><br><span class="line">			item = i;</span><br><span class="line">			next = n;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> StuffNode first;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line">		first = <span class="keyword">new</span> StuffNode(x, <span class="keyword">null</span>);</span><br><span class="line">		size = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line"> 		first = <span class="keyword">new</span> StuffNode(x, first);</span><br><span class="line"> 		size += <span class="number">1</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> Type <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> 		<span class="keyword">return</span> first.item; 		</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line"> 		size += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"> 		StuffNode p = first;</span><br><span class="line"></span><br><span class="line"> 		<span class="comment">/* Move p until it reaches the end of the list. */</span></span><br><span class="line"> 		<span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line"> 			p = p.next;</span><br><span class="line"> 		&#125;</span><br><span class="line"></span><br><span class="line"> 		p.next = <span class="keyword">new</span> StuffNode(x, <span class="keyword">null</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> 		<span class="keyword">return</span> size;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLListLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SLList&lt;String&gt; L = <span class="keyword">new</span> SLList&lt;&gt;(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        L.addFirst(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SLList&lt;Integer&gt; L2 = <span class="keyword">new</span> SLList&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        L.addFirst(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">When declaring or instantiating your data structure, use the reference type.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. int: Integer</span></span><br><span class="line"><span class="comment">2. double: Double</span></span><br><span class="line"><span class="comment">3. char: Character</span></span><br><span class="line"><span class="comment">4. boolean: Boolean</span></span><br><span class="line"><span class="comment">4. long: Long</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p>Try to understand the following code. I think it is easy for you except the last line.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] z = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span>[] x, y;</span><br><span class="line"> </span><br><span class="line">x = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">y = x;</span><br><span class="line">x = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">99</span>&#125;;</span><br><span class="line">y = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">z = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> xL = x.length;</span><br><span class="line"> </span><br><span class="line">String[] s = <span class="keyword">new</span> String[<span class="number">6</span>];</span><br><span class="line">s[<span class="number">4</span>] = <span class="string">&quot;ketchup&quot;</span>;</span><br><span class="line">s[x[<span class="number">3</span>] - x[<span class="number">1</span>]] = <span class="string">&quot;muffins&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[] b = &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;;</span><br><span class="line">System.arraycopy(b, <span class="number">0</span>, x, <span class="number">3</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<img src="/2021/06/24/CS61B-DSA/CS61B-5-DLLists-Arrays/5-5.JPG" class="">

<p>To understand array deeper, let‚Äôs take a look at 2-dimensional arrays in Java. Try to understand the following code.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] pascalsTriangle;</span><br><span class="line">pascalsTriangle = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line"><span class="keyword">int</span>[] rowZero = pascalsTriangle[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">pascalsTriangle[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;;</span><br><span class="line">pascalsTriangle[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">pascalsTriangle[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">pascalsTriangle[<span class="number">3</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] rowTwo = pascalsTriangle[<span class="number">2</span>];</span><br><span class="line">rowTwo[<span class="number">1</span>] = -<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] matrix;</span><br><span class="line">matrix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line">matrix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] pascalAgain = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                              	&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>

<p>This is the result.</p>
<img src="/2021/06/24/CS61B-DSA/CS61B-5-DLLists-Arrays/5-6.JPG" class="">

<h2 id="Exercise-2D-Arrays"><a href="#Exercise-2D-Arrays" class="headerlink" title="Exercise: 2D Arrays"></a>Exercise: 2D Arrays</h2><p>What will be the value of <code>x[0][0]</code> and <code>w[0][0]</code> when the code shown completes?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] x = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] z = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">z[<span class="number">0</span>] = x[<span class="number">0</span>];</span><br><span class="line">z[<span class="number">0</span>][<span class="number">0</span>] = -z[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] w = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">System.arraycopy(x[<span class="number">0</span>], <span class="number">0</span>, w[<span class="number">0</span>], <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">w[<span class="number">0</span>][<span class="number">0</span>] = -w[<span class="number">0</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p>Solution:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x[0][0]: -1</span><br><span class="line">w[0][0]: 1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(7): Testing</title>
    <url>/2021/06/24/CS61B-DSA/CS61B-7-Testing/</url>
    <content><![CDATA[<p>In this lecture, we will discuss an important and realistic issue ‚Äì <code>Testing</code> .</p>
<p>How do you know that your code works correctly?</p>
<ul>
<li>Pass Autograder. (in this lecture)</li>
<li>Run to see if the code works as your expect.</li>
<li><strong>Pass tests.</strong></li>
</ul>
<p>The last one is the most important one. In the real world, programmers believe their code works because of <strong>tests they write themselves.</strong></p>
<span id="more"></span>


<h2 id="Ad-Hoc-Testing-vs-JUnit"><a href="#Ad-Hoc-Testing-vs-JUnit" class="headerlink" title="Ad Hoc Testing vs. JUnit"></a>Ad Hoc Testing vs. JUnit</h2><p>Let‚Äôs try to write a method that sorts arrays of Strings and promise its correctness.</p>
<img src="/2021/06/24/CS61B-DSA/CS61B-7-Testing/1.JPG" class="">

<p>With the old way, we will write sort method, and use Autograder to verify its correctness. But with the new way which will be taught in this lecture, <strong>we will write sort, as well as our own test for sort.</strong></p>
<h3 id="Ad-Hoc-Testing"><a href="#Ad-Hoc-Testing" class="headerlink" title="Ad Hoc Testing"></a>Ad Hoc Testing</h3><p>We will start by writing <code>testSort</code> first!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Tests the Sort class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Tests the Sort.sort method */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;;</span><br><span class="line">        Sort.sort(input);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!input[i].equals(expected[i])) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Mismatch in position &quot;</span> + i +</span><br><span class="line">                    <span class="string">&quot;, expected: &quot;</span> + expected[i] + <span class="string">&quot;, but got: &quot;</span> + input[i]);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testSort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h3><img src="/2021/06/24/CS61B-DSA/CS61B-7-Testing/2.JPG" class="">

<p>Next, we will do test by <code>JUnit</code> , and write tests and sort method simultaneously.</p>
<p>The following is the final code. If you are curious about the process, please watch <a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD4ZxWDcuItnUElH2Pnneamc">lecture videos</a>.</p>
<img src="/2021/06/24/CS61B-DSA/CS61B-7-Testing/3.JPG" class="">


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Tests the Sort class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSort</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** If you want to have your tests timeout after a certain amount of time </span></span><br><span class="line"><span class="comment">     * (to prevent infinite loops), you can declare your test like the following: */</span></span><br><span class="line">    <span class="meta">@Test(timeout = 1000)</span></span><br><span class="line">    <span class="comment">/** Tests the Sort.findSmallest method. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindSmallest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> expected = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> actual = Sort.findSmallest(input, <span class="number">0</span>);</span><br><span class="line">        assertEquals(expected, actual);</span><br><span class="line"></span><br><span class="line">        String[] input2 = &#123;<span class="string">&quot;there&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;many&quot;</span>, <span class="string">&quot;pigs&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> expected2 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> actual2 = Sort.findSmallest(input2, <span class="number">2</span>);</span><br><span class="line">        org.junit.Assert.assertEquals(expected2, actual2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">/** Tests the Sort.swap method. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSwap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        Sort.swap(input, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        org.junit.Assert.assertArrayEquals(expected, input);</span><br><span class="line"></span><br><span class="line">        String[] input2 = &#123;<span class="string">&quot;there&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;many&quot;</span>, <span class="string">&quot;pigs&quot;</span>&#125;;</span><br><span class="line">        String[] expected2 = &#123;<span class="string">&quot;there&quot;</span>, <span class="string">&quot;pigs&quot;</span>, <span class="string">&quot;many&quot;</span>, <span class="string">&quot;are&quot;</span>&#125;;</span><br><span class="line">        Sort.swap(input2, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        assertArrayEquals(expected2, input2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">/** Tests the Sort.sort method */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;;</span><br><span class="line">        Sort.sort(input);</span><br><span class="line"></span><br><span class="line">        assertArrayEquals(expected, input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Sorts strings destructively. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] x)</span> </span>&#123;</span><br><span class="line">        sort(x, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Sorts x starting at position start. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] x, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == x.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Find the smallest item</span></span><br><span class="line">        <span class="keyword">int</span> smallestId = Sort.findSmallest(x, start);</span><br><span class="line">        <span class="comment">// Swap</span></span><br><span class="line">        swap(x, start, smallestId);</span><br><span class="line">        <span class="comment">// Selection sort the rest</span></span><br><span class="line">        sort(x, start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the index of the smallest String in x, starting at start. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findSmallest</span><span class="params">(String[] x, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> smallestId = start;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; x.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = x[i].compareTo(x[smallestId]);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                smallestId = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> smallestId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Swaps item at position a with item at position b. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(String[] x, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        String temp = x[a];</span><br><span class="line">        x[a] = x[b];</span><br><span class="line">        x[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Unit-Testing"><a href="#Unit-Testing" class="headerlink" title="Unit Testing"></a>Unit Testing</h2><p>Unit Testing is a great way to rigorously test each method of your code and ultimately ensure that you have a working project.</p>
<p>The ‚ÄúUnit‚Äù part of Unit Testing comes from the idea that you can break your program down into units, or the smallest testable part of an application. Therefore, Unit Testing enforces good code structure <strong>(each method should only do ‚ÄúOne Thing‚Äù)</strong>, and allows you to consider all of the edge cases for each method and test for them individually.</p>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(8): Inheritance, Implements</title>
    <url>/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/</url>
    <content><![CDATA[<p>Recall <code>SLList</code> and <code>AList</code> we have implemented before. They have many same methods althoug their data structures under the hood are different.</p>
<p>Now, suppose we‚Äôre writing a library to manipulate lists of words. Might want to write a function that finds the longest word from a list of words. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longest</span><span class="params">(SLList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list.get(maxId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SLList&lt;String&gt; L = <span class="keyword">new</span> SLList&lt;&gt;();</span><br><span class="line">        L.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L));   <span class="comment">// watching</span></span><br><span class="line"></span><br><span class="line">        AList&lt;String&gt; L2 = <span class="keyword">new</span> AList&lt;&gt;();</span><br><span class="line">        L2.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L2));   <span class="comment">// Error: we can&#x27;t give AList to longest method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Read the code above, I thinkg you should understand why there is an error when calling <code>longest</code> method on AList.</p>
<p>Now, we want the longest method can handle AList. What should we do? To sovle this problem, you should know knowledge of <code>interface</code> and <code>inheritance</code>.</p>
<span id="more"></span>


<h2 id="Hypernyms-Hyponyms-and-Interface-Inheritance"><a href="#Hypernyms-Hyponyms-and-Interface-Inheritance" class="headerlink" title="Hypernyms, Hyponyms, and Interface Inheritance"></a>Hypernyms, Hyponyms, and Interface Inheritance</h2><ul>
<li>Hypernyms(‰∏ä‰ΩçËØç) represents abstraction.</li>
<li>Hyponyms(‰∏ã‰ΩçËØç) represents details.</li>
</ul>
<img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/1.JPG" class="">

<p>Java can help us capture this hierarchy.</p>
<img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/2.JPG" class="">

<img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/3.JPG" class="">

<img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/4.JPG" class="">

<p>Now, turn back to the previous problem. We can solve it now.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longest</span><span class="params">(List61B&lt;String&gt; list)</span> </span>&#123;  <span class="comment">// &lt;-- change here</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list.get(maxId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SLList&lt;String&gt; L = <span class="keyword">new</span> SLList&lt;&gt;();</span><br><span class="line">        L.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L));   <span class="comment">// watching</span></span><br><span class="line"></span><br><span class="line">        AList&lt;String&gt; L2 = <span class="keyword">new</span> AList&lt;&gt;();</span><br><span class="line">        L2.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L2));   <span class="comment">// watching</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Overriding-vs-Overloading"><a href="#Overriding-vs-Overloading" class="headerlink" title="Overriding vs. Overloading"></a>Overriding vs. Overloading</h2><ul>
<li>Overriding: ÈáçÂÜô</li>
<li>Overloading: ÈáçËΩΩ</li>
</ul>
<p>Java allows multiple methods with same name, but different parameters. This is called method <code>overloading</code>.</p>
<img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/5.JPG" class="">



<h2 id="Once-Again-Interface-Inheritance"><a href="#Once-Again-Interface-Inheritance" class="headerlink" title="Once Again: Interface Inheritance"></a>Once Again: Interface Inheritance</h2><img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/6.JPG" class="">

<p>In the last section, we said that subclass must override all methods of interface, otherwise it will fail to compile. In fact, this is not accurate.</p>
<img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/7.JPG" class="">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List61B</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item x)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item y)</span></span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Item <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Item <span class="title">getLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Item <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item x, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i += <span class="number">1</span>) &#123;</span><br><span class="line">         System.out.print(get(i) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If you don‚Äôt like a default method, you can override it. For example, the default <code>print</code> method is inefficient for <code>SLList</code>, so we override it:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">List61B</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Node p = sentinel.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">   	      System.out.print(p.item + <span class="string">&quot; &quot;</span>);     	</span><br><span class="line">	   &#125;</span><br><span class="line"> </span><br><span class="line">	   System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Static-and-Dynamic-Type-Dynamic-Method-Selection"><a href="#Static-and-Dynamic-Type-Dynamic-Method-Selection" class="headerlink" title="Static and Dynamic Type, Dynamic Method Selection"></a>Static and Dynamic Type, Dynamic Method Selection</h2><img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/8.JPG" class="">

<img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/9.JPG" class="">

<p>To wrap up above materials, let‚Äôs do a puzzle. Suppose we have classes defined below. Try to predict the results.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;hello animal&quot;</span>); &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;sniff animal&quot;</span>); &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">flatter</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool animal&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;dog sniff animal&quot;</span>); &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flatter</span><span class="params">(Dog a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool dog&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">        a.greet(d);</span><br><span class="line">        a.sniff(d);</span><br><span class="line">        d.flatter(d);</span><br><span class="line">        a.flatter(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Add annotation to the above code, and also give the answer.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">(Animal a)</span> </span>&#123; </span><br><span class="line">        print(<span class="string">&quot;hello animal&quot;</span>); &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;sniff animal&quot;</span>); &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">flatter</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool animal&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;dog sniff animal&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Overload</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flatter</span><span class="params">(Dog a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool dog&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Dog();  <span class="comment">// static type:Animal; dynamic type: Dog</span></span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog();  <span class="comment">// static type &amp; dynamic type: Dog</span></span><br><span class="line">        </span><br><span class="line">        a.greet(d);  <span class="comment">// hello animal</span></span><br><span class="line">        a.sniff(d);  <span class="comment">// dog sniff animal</span></span><br><span class="line">        d.flatter(d);  <span class="comment">// u r cool dog</span></span><br><span class="line">        a.flatter(d);  <span class="comment">// u r cool animal</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The shocking answer is the last one, i.e. <code>a.flatter(d);</code> . Why?</p>
<p>Look at the above slide, if a variable has different compile-time type and run-time type, if and only if run-time type <strong>overrides</strong> the method, run-time type‚Äôs method will be used instead. Otherwise, it still use  compile-time type‚Äôs method.</p>
<p><em>It try to use dynamic type‚Äôs method. However, since the method is not overwritten in dynamic type, it will just go one step higher in the hierarchy, i.e. jump into static type and find the method, then use it.</em></p>
<p>In the above code, flatter method in Dog class does not override, it is just overload!</p>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(9): Extends, Casting, HoFs</title>
    <url>/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/</url>
    <content><![CDATA[<p>üå≥ In this lecture, we will talk more about implementation inheritance.</p>
<h2 id="Implementation-Inheritance-Extends"><a href="#Implementation-Inheritance-Extends" class="headerlink" title="Implementation Inheritance: Extends"></a>Implementation Inheritance: Extends</h2><p>In the last lecture, we talked about <code>implements</code> keyword. When a class is a hyponym of an interface, we used implements.</p>
<p>If you want one class to be a hyponym of another <em>class</em>, you use <code>extends</code>.</p>
<img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/1.JPG" class="">


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* SLList, but with additional rotateRight operation. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotatingSLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">extends</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Todo: Implement RotatingSLList such that code compiles </span></span><br><span class="line"><span class="comment">     * and outputs correct result.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Rotates list to the right. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item x = removeLast();</span><br><span class="line">        addFirst(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RotatingSLList&lt;Integer&gt; rel = <span class="keyword">new</span> RotatingSLList&lt;&gt;();</span><br><span class="line">        rel.addLast(<span class="number">10</span>);</span><br><span class="line">        rel.addLast(<span class="number">11</span>);</span><br><span class="line">        rel.addLast(<span class="number">12</span>);</span><br><span class="line">        rel.addLast(<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Should be: [13, 10, 11, 12] */</span></span><br><span class="line">        rel.rotateRight();</span><br><span class="line">        rel.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/2.JPG" class="">

<p>Then, take a look another example. Suppose we want to build an SLList called <code>VengefulSLList</code> that:</p>
<ul>
<li>Remembers all Items that have been destroyed by removeLast.</li>
<li>Has an additional method <code>printLostItems()</code>, which prints all deleted items.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VengefulSLList</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	VengefulSLList&lt;Integer&gt; vs1 = <span class="keyword">new</span> VengefulSLList&lt;Integer&gt;();</span><br><span class="line">    	vs1.addLast(<span class="number">1</span>);</span><br><span class="line">    	vs1.addLast(<span class="number">5</span>);</span><br><span class="line">    	vs1.addLast(<span class="number">10</span>);</span><br><span class="line">    	vs1.addLast(<span class="number">13</span>);      <span class="comment">/* [1, 5, 10, 13] */</span></span><br><span class="line">    	vs1.removeLast();     <span class="comment">/* 13 gets deleted. */</span></span><br><span class="line">    	vs1.removeLast();     <span class="comment">/* 10 gets deleted. */</span></span><br><span class="line">    	System.out.print(<span class="string">&quot;The fallen are: &quot;</span>);</span><br><span class="line">    	vs1.printLostItems(); <span class="comment">/* Should print 10 and 13. */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>What should we do?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** SList with additional operation printLostItems() which prints all items</span></span><br><span class="line"><span class="comment">  * that have ever been deleted. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VengefulSLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">extends</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    SLList&lt;Item&gt; deletedItems;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item x = <span class="keyword">super</span>.removeLast();</span><br><span class="line">        deletedItems.addLast(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Prints deleted items. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLostItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        deletedItems.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="Constructor-Behavior"><a href="#Constructor-Behavior" class="headerlink" title="Constructor Behavior"></a>Constructor Behavior</h2><img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/3.JPG" class=""> 

<img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/4.JPG" class=""> 

<img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/5.JPG" class="">

<p>‚ùó‚ùó‚ùó Important Note: both <code>implements</code> and <code>extends</code> should only be used for <strong>is-a</strong> relationship instead of <strong>has-a</strong> relationship.</p>
<h2 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h2><p>üíä</p>
<img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/6.JPG" class="">

<p><strong>Module:</strong> A set of methods that work together as a whole to perform some task or set of related tasks. </p>
<p>A module is said to be <strong>encapsulated</strong> if its implementation is completely hidden, and it can be accessed only through a documented interface.</p>
<p>üå¥ Reminder: You should use the idea of encapsulation to guide yourself when completing project1b, and other large project.</p>
<h2 id="Type-Checking-and-Casting"><a href="#Type-Checking-and-Casting" class="headerlink" title="Type Checking and Casting"></a>Type Checking and Casting</h2><img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/7.JPG" class="">

<img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/8.JPG" class="">


<h2 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher Order Functions"></a>Higher Order Functions</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example of HoF</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tenX</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> * x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_twice</span>(<span class="params">f, x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f(f(x))</span><br><span class="line"></span><br><span class="line">do_twice(tenX, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>HoFs is powerful and useful. However, in Java7 and earlier, there is a fundamental issue that <strong>memory boxes(variable) cannot contain pointers to functions.</strong> So if you want to define HoFs in Java7 or earlier, you should use interface instead.</p>
<img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9.JPG" class="">


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Represent a function that takes in an integer, and returns an integer. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IntUnaryFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TenX</span> <span class="keyword">implements</span> <span class="title">IntUnaryFunction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/** Returns ten times its argument. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> * x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HoFDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_twice</span><span class="params">(IntUnaryFunction f, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f.apply(f.apply(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntUnaryFunction tenX = <span class="keyword">new</span> TenX();</span><br><span class="line">        System.out.println(do_twice(tenX, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/10.JPG" class="">

]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>Project0: NBody</title>
    <url>/2021/06/24/CS61B-DSA/CS61B-Project0-Summary/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>This is the first project of CS61B, 2018sp version. </p>
<p>The goal for this project is to write a program simulating the motion of N objects in a plane, accounting for the gravitational forces mutually affecting each object as demonstrated by Sir Isaac Newton‚Äôs Law of Universal Gravitation. Ultimately, a program <code>NBody.java</code> that draws an animation of bodies floating around in space tugging on each other with the power of gravity will be created.</p>
<p>All prerequisite of this assignment is basic Java knowledge. Since this is an easy project with a great deal of scaffolding, I recommend using text editor, such as VS Code, to finish it. But it is fine if you prefer to use IDE. </p>
<p>Try it, you can finish this project quickly üöÄ</p>
<span id="more"></span>

<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>I create a simulation which looks like below. You can add audio files to make the project cooler.</p>
<p><video src='5bodies_simulation_Trim.mp4' 
       type='video/mp4' 
       controls='controls'  
       preload="auto"
       width='60%' 
       height='60%'><br></video></p>
<h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><p>Â¶ÇÊûú‰Ω†ÁöÑÊìç‰ΩúÁ≥ªÁªü‰∏∫‰∏≠ÊñáÔºåÂΩì‰Ω†‰ΩøÁî®<code>javac fileName.java</code>ÁºñËØëNBody.javaÊó∂Ôºå‰Ω†ÂèØËÉΩ‰ºöÈÅáÂà∞Â¶Ç‰∏ãÈîôËØØÔºö</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ÈîôËØØÔºöÁºñÁ†ÅGBKÁöÑ‰∏çÂèØÊò†Â∞ÑÂ≠óÁ¨¶</span><br></pre></td></tr></table></figure>

<p>ÂéüÂõ†ÂàÜÊûêÔºö</p>
<p>Áî±‰∫éJDKÊòØÂõΩÈôÖÁâàÁöÑÔºåÊàë‰ª¨Âú®Áî®<code>javac</code>ÁºñËØëÊó∂ÔºåÁºñËØëÁ®ãÂ∫èÈ¶ñÂÖà‰ºöËé∑ÂæóÊàë‰ª¨Êìç‰ΩúÁ≥ªÁªüÈªòËÆ§ÈááÁî®ÁöÑÁºñÁ†ÅÊ†ºÂºèÔºà<code>GBK</code>ÔºâÔºåÁÑ∂ÂêéJDKÂ∞±ÊääJavaÊ∫êÊñá‰ª∂‰ªéGBKÁºñÁ†ÅÊ†ºÂºèËΩ¨Êç¢‰∏∫JavaÂÜÖÈÉ®ÈªòËÆ§ÁöÑ<code>Unicode</code>Ê†ºÂºèÊîæÂÖ•ÂÜÖÂ≠ò‰∏≠ÔºåÁÑ∂ÂêéjavacÊääËΩ¨Êç¢ÂêéÁöÑUnicodeÊ†ºÂºèÁöÑÊñá‰ª∂ÁºñËØëÊàêclassÁ±ªÊñá‰ª∂„ÄÇ</p>
<p>Ê≠§Êó∂ÔºåclassÊñá‰ª∂ÊòØUnicodeÁºñÁ†ÅÁöÑÔºåÂÆÉÊöÇÂ≠òÂú®ÂÜÖÂ≠ò‰∏≠ÔºåÁ¥ßÊé•ÁùÄÔºåJDKÂ∞ÜÊ≠§‰ª•UnicodeÊ†ºÂºèÁºñÁ†ÅÁöÑclassÊñá‰ª∂‰øùÂ≠òÂà∞Êìç‰ΩúÁ≥ªÁªü‰∏≠ÂΩ¢ÊàêÊàë‰ª¨ËßÅÂà∞ÁöÑclassÊñá‰ª∂„ÄÇÂΩìÊàë‰ª¨‰∏çÂä†ËÆæÁΩÆÂ∞±ÁºñËØëÊó∂ÔºåÁõ∏ÂΩì‰∫é‰ΩøÁî®‰∫ÜÂèÇÊï∞Ôºö<code>javac -encoding GBK Test.java</code>ÔºåÂ∞±‰ºöÂá∫Áé∞‰∏çÂÖºÂÆπÁöÑÊÉÖÂÜµ„ÄÇ</p>
<p>Ëß£ÂÜ≥ÊñπÊ≥ïÔºö</p>
<p>Âú®terminal‰∏≠ËæìÂÖ•<code>javac -encoding utf-8 fileName.java</code>Âç≥ÂèØ„ÄÇ</p>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>Project1A: Data Structures</title>
    <url>/2021/07/08/CS61B-DSA/Project1A-Data-Structures/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>This is the first part of the second project of CS61B (2018sp version). üê∑</p>
<p>The goal for this project is to build data structures by yourself. You are required to implement the Deque (Double Ended Queue, ÂèåÁ´ØÈòüÂàó) API which support various operations listed as the followings.</p>
<ul>
<li><code>public void addFirst(T item)</code>: Adds an item of type T to the front of the deque.</li>
<li><code>public void addLast(T item)</code>: Adds an item of type T to the back of the deque.</li>
<li><code>public boolean isEmpty()</code>: Returns true if deque is empty, false otherwise.</li>
<li><code>public int size()</code>: Returns the number of items in the deque.</li>
<li><code>public void printDeque()</code>: Prints the items in the deque from first to last, separated by a space.</li>
<li><code>public T removeFirst()</code>: Removes and returns the item at the front of the deque. If no such item exists, returns null.</li>
<li><code>public T removeLast()</code>: Removes and returns the item at the back of the deque. If no such item exists, returns null.</li>
<li><code>public T get(int index)</code>: Gets the item at the given index, where 0 is the front, 1 is the next item, and so forth. If no such item exists, returns null. Must not alter the deque!</li>
</ul>
<p>Prerequisite of this project is the knowledge of array and linked-list (singly linked list and doubly linked list). Compared to the first project, this one will be more challenging since there is no scaffolding and there are many design issues to consider.But it is a good chance to practice everything you learned in lectures.</p>
<p>Hope you can enjoy this project. ü§≠</p>
<span id="more"></span>


<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h3 id="provided-LinkedListDequeTest-java"><a href="#provided-LinkedListDequeTest-java" class="headerlink" title="provided LinkedListDequeTest.java"></a>provided LinkedListDequeTest.java</h3><p>Firstly, use the provided class <code>LinkedListDequeTest.java</code> to test my implementation.</p>
<p><video src='LinkedListDequeTest1.mp4' 
       type='video/mp4' 
       controls='controls'  
       preload="auto"
       width='60%' 
       height='60%'><br></video></p>
<h3 id="LinkedListDeque-Visualization"><a href="#LinkedListDeque-Visualization" class="headerlink" title="LinkedListDeque Visualization"></a>LinkedListDeque Visualization</h3><p>Visualizing the LinkedListDeque.</p>
<p><video src='LinkedListDequeTest2.mp4' 
       type='video/mp4' 
       controls='controls'  
       preload="auto"
       width='60%' 
       height='60%'><br></video></p>
<h3 id="ArrayDeque-Visualization"><a href="#ArrayDeque-Visualization" class="headerlink" title="ArrayDeque Visualization"></a>ArrayDeque Visualization</h3><p><video src='ArrayDeque.mp4' 
       type='video/mp4' 
       controls='controls'  
       preload="auto"
       width='60%' 
       height='60%'><br></video></p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>üíÅ‚Äç‚ôÄÔ∏è</p>
<ol>
<li>The first thing you should do is understanding <code>Deque</code> thoroughly. </li>
</ol>
<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/1.png" class="">


<ol start="2">
<li>Although you are required to build a Deque which can accept any generic type, it will be a good choice to start with integer type.</li>
</ol>
<ol start="3">
<li><strong>Circular!</strong> It is recommended that you design your data structure circularly. That is, when implementing <code>LinkedListDeque</code>, concult the circular sentinel topology; and when implementing <code>ArrayDeque</code>, treat the array as circular.</li>
</ol>
<p>a) Circular sentinel topology in LinkedListDeque:</p>
<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/2.JPG" class="">

<p>b) Circular array in ArrayDeque:</p>
<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/3.JPG" class="">

<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/4.JPG" class="">

<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/5.JPG" class="">

<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/6.JPG" class="">

<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/7.JPG" class="">

<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/8.JPG" class="">

<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/9.JPG" class="">

<ol start="4">
<li>When building <code>ArrayDeque</code>, considering not doing resizing at all until your code works without it.</li>
</ol>
<ol start="5">
<li>Resizing in ArrayDeque is the most tricky task. The following is my implementation, you can refer to it if you like.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDeque</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nextFirst, nextLast;  <span class="comment">// position of insertion</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the previous id of the given id in the array.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id given id, i.e. the current id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrLength length of array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">minusOne</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> arrLength)</span> </span>&#123;</span><br><span class="line">        id = (id - <span class="number">1</span>) % arrLength;</span><br><span class="line">        <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            id = id + arrLength;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the next id of the given id in the array. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">plusOne</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> arrayLength)</span> </span>&#123;</span><br><span class="line">        id = (id + <span class="number">1</span>) % arrayLength;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Resizes the underlying array to the target capacity.</span></span><br><span class="line"><span class="comment">     * The amount of memory used at any given time must be proportional to the number of items.</span></span><br><span class="line"><span class="comment">     * For arrays of length 16 or more, usage factor should always be at least 25%.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        T[] newItems = (T[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        copy(<span class="keyword">this</span>, newItems);</span><br><span class="line">        nextFirst = minusOne(<span class="number">0</span>, newItems.length);</span><br><span class="line">        nextLast = size;</span><br><span class="line">        items = newItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Copies the items from the source to the destination array.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src source deque</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest destination array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(ArrayDeque&lt;T&gt; src, T[] dest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; size) &#123;</span><br><span class="line">            dest[i] = src.get(i);</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>Take full advantage of the methods you have completed!</li>
</ol>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(1): Introduction</title>
    <url>/2021/07/02/CS61A-SICP/CS61A-1-Introduction/</url>
    <content><![CDATA[<h2 id="What-is-Computer-Science"><a href="#What-is-Computer-Science" class="headerlink" title="What is Computer Science?"></a>What is Computer Science?</h2><p>Computer Science has many subfields, and each subfield has its own sub-subfield.</p>
<img src="/2021/07/02/CS61A-SICP/CS61A-1-Introduction/lec1-1.png" class="">

<h2 id="What-is-this-course-about"><a href="#What-is-this-course-about" class="headerlink" title="What is this course about?"></a>What is this course about?</h2><span id="more"></span>

<ul>
<li>A course about <code>managing complexity</code>:<ul>
<li>mastering abstraction</li>
<li>programming paradigms</li>
</ul>
</li>
<li>An introduction to programming:<ul>
<li>full understanding of Python fundamentals</li>
<li>combining multiple ideas in large projects</li>
<li>how computer interpret programming languages</li>
</ul>
</li>
<li>Different types of languages:<ul>
<li>Python</li>
<li>Scheme</li>
<li>SQL</li>
</ul>
</li>
</ul>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Numeric expressions</span></span><br><span class="line"><span class="number">2020</span></span><br><span class="line"><span class="number">2000</span> + <span class="number">20</span></span><br><span class="line">-<span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> * ((<span class="number">5</span> // <span class="number">6</span>) + <span class="number">7</span> * <span class="number">8</span> * <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="built_in">abs</span>(-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">abs</span>(<span class="number">2301</span> - <span class="number">4321</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Values</span></span><br><span class="line"><span class="string">&quot;Go Bears&quot;</span></span><br><span class="line"><span class="string">&quot;Gob&quot;</span> + <span class="string">&quot;ears&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Objects</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">shakes = urlopen(<span class="string">&#x27;http://composingprograms.com/shakespeare.txt&#x27;</span>)</span><br><span class="line">text = shakes.read().decode().split()</span><br><span class="line"><span class="built_in">len</span>(text)</span><br><span class="line">text[:<span class="number">25</span>]</span><br><span class="line">text.count(<span class="string">&#x27;the&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;thou&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;you&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;forsooth&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets</span></span><br><span class="line">words = <span class="built_in">set</span>(text)</span><br><span class="line"><span class="built_in">len</span>(words)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Combinations </span></span><br><span class="line"><span class="string">&#x27;draw&#x27;</span></span><br><span class="line"><span class="string">&#x27;draw&#x27;</span>[<span class="number">0</span>]  <span class="comment"># &#x27;d&#x27;</span></span><br><span class="line">&#123;w[<span class="number">0</span>] <span class="keyword">for</span> w <span class="keyword">in</span> words&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Data</span></span><br><span class="line"><span class="string">&#x27;draw&#x27;</span>[::-<span class="number">1</span>]  <span class="comment"># &#x27;ward&#x27;</span></span><br><span class="line">&#123;w <span class="keyword">for</span> w <span class="keyword">in</span> words <span class="keyword">if</span> w == w[::-<span class="number">1</span>] <span class="keyword">and</span> <span class="built_in">len</span>(w)&gt;<span class="number">4</span>&#125;</span><br><span class="line">&#123;w <span class="keyword">for</span> w <span class="keyword">in</span> words <span class="keyword">if</span> w[::-<span class="number">1</span>] <span class="keyword">in</span> words <span class="keyword">and</span> <span class="built_in">len</span>(w) == <span class="number">4</span>&#125;</span><br><span class="line">&#123;w <span class="keyword">for</span> w <span class="keyword">in</span> words <span class="keyword">if</span> w[::-<span class="number">1</span>] <span class="keyword">in</span> words <span class="keyword">and</span> <span class="built_in">len</span>(w) &gt; <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(10): Trees</title>
    <url>/2021/07/14/CS61A-SICP/CS61A-10-Trees/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(11): Mutable Sequences</title>
    <url>/2021/07/14/CS61A-SICP/CS61A-11-Mutable-Sequences/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(2): Expressions and Functions</title>
    <url>/2021/07/02/CS61A-SICP/CS61A-2-Expressions-and-Functions/</url>
    <content><![CDATA[<h2 id="Expression"><a href="#Expression" class="headerlink" title="Expression"></a>Expression</h2><p>An <code>expression</code> describes a computation and evaluates to a value. All expressions can use function call notation.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># primitive expression</span></span><br><span class="line"><span class="number">2000</span> + <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># call expressions</span></span><br><span class="line"><span class="built_in">max</span>(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">min</span>(<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">pow</span>(<span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul</span><br><span class="line">mul(add(<span class="number">4</span>, mul(<span class="number">4</span>, <span class="number">6</span>)), add(<span class="number">3</span>, <span class="number">5</span>))  <span class="comment"># 224</span></span><br></pre></td></tr></table></figure>

<h3 id="Anatomy-of-a-call-expression"><a href="#Anatomy-of-a-call-expression" class="headerlink" title="Anatomy of a call expression"></a>Anatomy of a call expression</h3><p>Operators and operands can also be expression. An expression tree is as follows:</p>
<span id="more"></span>

<img src="/2021/07/02/CS61A-SICP/CS61A-2-Expressions-and-Functions/lec2-1.png" class="">

<p>Evaluation procedure for call expressions:</p>
<ul>
<li>Evaluate the operator</li>
<li>Evaluate the operands from left to right</li>
<li>Apply the operator (a function) to the<br>evaluated operands (arguments)</li>
</ul>
<h2 id="Names-Assignment-and-User-defined-Functions"><a href="#Names-Assignment-and-User-defined-Functions" class="headerlink" title="Names, Assignment, and User-defined Functions"></a>Names, Assignment, and User-defined Functions</h2><p>Assignment is a simple means of abstraction: binds names to values.</p>
<p>Function definition is a more powerful means of abstraction: binds names to expressions.</p>
<h3 id="Defining-Functions"><a href="#Defining-Functions" class="headerlink" title="Defining Functions"></a>Defining Functions</h3><p>We programmers can build our own functions.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">def <span class="xml"><span class="tag">&lt;<span class="name">name</span>&gt;</span></span>(<span class="xml"><span class="tag">&lt;<span class="name">formal</span> <span class="attr">parameters</span>&gt;</span></span>):</span><br><span class="line"><span class="code">    return &lt;return expression&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># User-defined functions</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> mul(x, x)</span><br><span class="line"></span><br><span class="line">square(<span class="number">21</span>)  <span class="comment"># 441</span></span><br><span class="line">square(add(<span class="number">2</span>, <span class="number">5</span>))  <span class="comment"># 49</span></span><br><span class="line">square(square(<span class="number">3</span>))  <span class="comment"># 81</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_squares</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> add(square(x), square(y))</span><br><span class="line"></span><br><span class="line">sum_squares(<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># 9 + 16 = 25</span></span><br><span class="line">sum_squares(<span class="number">5</span>, <span class="number">12</span>)  <span class="comment"># 25 + 144 = 169</span></span><br></pre></td></tr></table></figure>

<p>Procedure for calling user-defined functions:</p>
<img src="/2021/07/02/CS61A-SICP/CS61A-2-Expressions-and-Functions/lec2-2.png" class="">



<h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>Functions are organized into <code>modules</code>, which together comprise the Python Library. However, we programmer can define our own functions.</p>
<p><a href="https://docs.python.org/3/library/index.html">The Python Standard Library</a></p>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(3): Control</title>
    <url>/2021/07/02/CS61A-SICP/CS61A-3-Control/</url>
    <content><![CDATA[<h2 id="Print-and-None"><a href="#Print-and-None" class="headerlink" title="Print and None"></a>Print and None</h2><p>A function that does not explicitly return a value will return <code>None</code>. None is not displayed by the interpreter as the value of an expression.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; None</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(None)</span></span><br><span class="line">None</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(<span class="built_in">print</span>(1), <span class="built_in">print</span>(2))</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">None None</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;print is non-pure function, it can generate side effects. The value that print returns is always None&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<img src="/2021/07/02/CS61A-SICP/CS61A-3-Control/lec3-1.png" class="">


<p><strong>Pure functions are essential for writing concurrent programs, in which multiple call expressions may be evaluated simultaneously.</strong></p>
<h2 id="Multiple-Environments"><a href="#Multiple-Environments" class="headerlink" title="Multiple Environments"></a>Multiple Environments</h2><p>When Python execute a program, different expressions can be evaluated in different environments.</p>
<span id="more"></span>

<img src="/2021/07/02/CS61A-SICP/CS61A-3-Control/lec3-2.png" class="">


<h2 id="Miscellaneous-Python-Features"><a href="#Miscellaneous-Python-Features" class="headerlink" title="Miscellaneous Python Features"></a>Miscellaneous Python Features</h2><ul>
<li>division</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Division</span></span><br><span class="line"><span class="number">618</span> / <span class="number">10</span>  <span class="comment"># 61.8</span></span><br><span class="line"><span class="number">618</span> // <span class="number">10</span>  <span class="comment"># 61</span></span><br><span class="line"><span class="number">618</span> % <span class="number">10</span>  <span class="comment"># 8</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> truediv, floordiv, mod</span><br><span class="line">truediv(<span class="number">618</span>, <span class="number">10</span>)</span><br><span class="line">floordiv(<span class="number">618</span>, <span class="number">10</span>)</span><br><span class="line">mod(<span class="number">618</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>multiple return values</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Multiple return values</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide_exact</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n // d, n % d</span><br><span class="line">quotient, remainder = divide_exact(<span class="number">618</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>doctest &amp; default arguments</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dostrings, doctests, &amp; default arguments</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide_exact</span>(<span class="params">n, d=<span class="number">10</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the quotient and remainder of dividing N by D.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; quotient, remainder = divide_exact(618)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; quotient</span></span><br><span class="line"><span class="string">    61</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remainder</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> floordiv(n, d), mod(n, d)</span><br></pre></td></tr></table></figure>

<ul>
<li>useful command line:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;python3 -i&gt; : interactive with Python file</span><br><span class="line">&lt;python3 -m doctest&gt; : run doctest in the file</span><br></pre></td></tr></table></figure>


<h2 id="Conditional-Statements"><a href="#Conditional-Statements" class="headerlink" title="Conditional Statements"></a>Conditional Statements</h2><ul>
<li>False values in Python: False, 0, ‚Äò‚Äô, [], None</li>
<li>True values in Python: anything else</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Conditional expressions</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">absolute_value</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the absolute value of X.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; absolute_value(-3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; absolute_value(0)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; absolute_value(3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>

<p>A conditional expression has the form:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&lt;consequent&gt; <span class="keyword">if</span> &lt;predicate&gt; <span class="keyword">else</span> &lt;alternative&gt;</span><br></pre></td></tr></table></figure>


<h2 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h2><p>Iteration means repeating things.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Summation via while</span></span><br><span class="line">i, total = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">3</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    total = total + i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;i:&#x27;</span>, i, <span class="string">&#x27;total:&#x27;</span>, total)</span><br></pre></td></tr></table></figure>

<h2 id="Control-Expressions"><a href="#Control-Expressions" class="headerlink" title="Control Expressions"></a>Control Expressions</h2><p>To evaluate the expression <code>&lt;left&gt; and &lt;right&gt;</code>:</p>
<ul>
<li>Evaluate the subexpression <code>&lt;left&gt;</code>.</li>
<li>If the result is a false value <strong>v</strong>, then the expression evaluates to <strong>v</strong>.</li>
<li>Otherwise, the expression evaluates to the value of the subexpression <code>&lt;right&gt;</code>.</li>
</ul>
<p>To evaluate the expression <code>&lt;left&gt; or &lt;right&gt;</code>:</p>
<ul>
<li>Evaluate the subexpression <code>&lt;left&gt;</code>.</li>
<li>If the result is a true value <strong>v</strong>, then the expression evaluates to <strong>v</strong>.</li>
<li>Otherwise, the expression evaluates to the value of the subexpression <code>&lt;right&gt;</code>.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_big_sqrt</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether x has a big square root.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(1000)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(100)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(0)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(-1000)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">0</span> <span class="keyword">and</span> sqrt(x) &gt; <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reasonable</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Is N small enough that 1/N can be represented?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(100)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(0)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(-100)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(10 ** 1000)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">0</span> <span class="keyword">or</span> <span class="number">1</span>/n != <span class="number">0.0</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(4): Higher-Order Functions</title>
    <url>/2021/07/03/CS61A-SICP/CS61A-4-Higher-Order-Functions/</url>
    <content><![CDATA[<h2 id="Iteration-Example"><a href="#Iteration-Example" class="headerlink" title="Iteration Example"></a>Iteration Example</h2><p>There are 2 different definitions of <code>fib</code> which can be used to calculate the Fibonacci number. </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the nth Fibonacci number&quot;&quot;&quot;</span></span><br><span class="line">    pred, curr = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; n:</span><br><span class="line">        pred, curr = curr, pred + curr</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> curr</span><br><span class="line"></span><br><span class="line"><span class="comment"># can computer 0th Fibonacci number correctly</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the nth Fibonacci number&quot;&quot;&quot;</span></span><br><span class="line">    pred, curr = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; n:</span><br><span class="line">        pred, curr = curr, pred + curr</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> curr</span><br></pre></td></tr></table></figure>


<h2 id="Designing-Functions"><a href="#Designing-Functions" class="headerlink" title="Designing Functions"></a>Designing Functions</h2><p>There are lots of different functions that can do the same thing, but some are better than other. How to design better function?</p>
<span id="more"></span>

<p><strong>A Guide to Designing Function:</strong></p>
<ul>
<li>Give each function exactly one job.</li>
<li>Don‚Äôt repeat yourself (DRY). Implement a process just once, but execute it many times.</li>
<li>Define functions generally.</li>
</ul>
<p>The following is an example of generalizing patterns with arguments.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Repeating</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi, sqrt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_square</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a square with side length R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> r * r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_circle</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a circle with radius R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> r * r * pi</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_hexagon</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a regular hexagon with side length R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> r * r * <span class="number">3</span> * sqrt(<span class="number">3</span>) / <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>There are lots of repeating things. Let‚Äôs try to do some generalization.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generalization: Generalizing patterns using arguments</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">r, shape_constant</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a shape from length measurement R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> r &gt; <span class="number">0</span>, <span class="string">&#x27;A length must be positive&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> r * r * shape_constant</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_square</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_circle</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, pi)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_hexagon</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, <span class="number">3</span> * sqrt(<span class="number">3</span>) / <span class="number">2</span>)</span><br></pre></td></tr></table></figure>


<h2 id="Higher-Order-Function"><a href="#Higher-Order-Function" class="headerlink" title="Higher-Order Function"></a>Higher-Order Function</h2><p>The common structure among functions may be a computational process, rather than a number.</p>
<img src="/2021/07/03/CS61A-SICP/CS61A-4-Higher-Order-Functions/lec4-1.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_naturals</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N natural numbers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_naturals(5)</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + k, k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_cubes</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N cubes of natural numbers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_cubes(5)</span></span><br><span class="line"><span class="string">    225</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + <span class="built_in">pow</span>(k, <span class="number">3</span>), k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>

<p>We can notice the similar computational process above.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Functions as arguments</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(k, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pi_term</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span> / mul(k * <span class="number">4</span> - <span class="number">3</span>, k * <span class="number">4</span> - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summation</span>(<span class="params">n, term</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N terms of a sequence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation(5, cube)</span></span><br><span class="line"><span class="string">    225</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + term(k), k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_naturals</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> summation(n, identity)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_cubes</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> summation(n, cube)</span><br></pre></td></tr></table></figure>

<p>The function <code>summation(n, term)</code> above is called <code>higher-order function</code> - it takes another function as an argument.</p>
<p>Higher-order functions can also treat functions as return values.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_adder</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function that takes one argument K and returns K + N.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = make_adder(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(4)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adder</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> k + n</span><br><span class="line">    <span class="keyword">return</span> adder</span><br><span class="line"></span><br><span class="line">make_adder(<span class="number">2000</span>)(<span class="number">20</span>)  <span class="comment"># currying</span></span><br></pre></td></tr></table></figure>

<p>The transformation from <code>function(f, g)</code> to <code>function2(f)(g)</code> is called currying.</p>
<p>Higher-order functions :</p>
<ul>
<li>express general methods of computation;</li>
<li>remove repetition from programs;</li>
<li>separate concerns among functions (each function just do one job)</li>
</ul>
<h2 id="Lambda-Expression"><a href="#Lambda-Expression" class="headerlink" title="Lambda Expression"></a>Lambda Expression</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lambda expressions</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">square = x * x</span><br><span class="line"></span><br><span class="line">square = <span class="keyword">lambda</span> x: x * x</span><br><span class="line">square(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>


<h2 id="Function-Return"><a href="#Function-Return" class="headerlink" title="Function Return"></a>Function Return</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the smallest non-negative integer x for which f(x) is a true value.&quot;&quot;&quot;</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> f(x):</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_three</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether x is three.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; search(is_three)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x == <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">positive</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A function that is 0 until square(x)-100 is positive.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    find the smallest non-negative integer x which makes square(x) - 100 is positive:</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; search(positive)  </span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0</span>, square(x) - <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function g(y) that returns x such that f(x) == y.</span></span><br><span class="line"><span class="string">    g(f(x)) -&gt; x</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sqrt = inverse(square)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sqrt(16)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> y: search(<span class="keyword">lambda</span> x: f(x) == y)</span><br></pre></td></tr></table></figure>


<h2 id="Function-Decorators"><a href="#Function-Decorators" class="headerlink" title="Function Decorators"></a>Function Decorators</h2><p>Python provides special syntax to apply higher-order functions as part of executing a def statement, called a <code>decorator</code>.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&gt; &#x27;</span>, fn, <span class="string">&#x27;(&#x27;</span>, x, <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> fn(x)</span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="meta">@trace</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triple</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; triple(12)</span></span><br><span class="line"><span class="string">    -&gt;  &lt;function triple at 0x102a39848&gt; ( 12 )</span></span><br><span class="line"><span class="string">    36</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * x</span><br></pre></td></tr></table></figure>

<p>The annotation <code>@trace</code> affects the execution rule for def.</p>
<p>The function triple is created as usual, however, the name triple is not bound to this function.<br>Instead, it is bound to the returned function value of calling trace on the newly defined triple function, i.e. <code>triple = trace(triple)</code> </p>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(5): Environments</title>
    <url>/2021/07/04/CS61A-SICP/CS61A-5-Environments/</url>
    <content><![CDATA[<h2 id="Environments-for-Higher-Order-Functions"><a href="#Environments-for-Higher-Order-Functions" class="headerlink" title="Environments for Higher-Order Functions"></a>Environments for Higher-Order Functions</h2><p><strong>Higher-order function:</strong> A function that takes a function as an argument value or return a function as a return value.</p>
<img src="/2021/07/04/CS61A-SICP/CS61A-5-Environments/lec5-1.png" class="">


<span id="more"></span>

<h2 id="Environments-for-Nested-Definitions"><a href="#Environments-for-Nested-Definitions" class="headerlink" title="Environments for Nested Definitions"></a>Environments for Nested Definitions</h2><img src="/2021/07/04/CS61A-SICP/CS61A-5-Environments/lec5-2.png" class="">


<h2 id="Self-reference"><a href="#Self-reference" class="headerlink" title="Self-reference"></a>Self-reference</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Self Reference</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_all</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print all arguments of repeated calls.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = print_all(1)(2)(3)(4)(5)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line">    <span class="keyword">return</span> print_all</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sums</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print all sums of arguments of repeated calls.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = print_sums(1)(2)(3)(4)(5)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_sum</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> print_sums(n+k)</span><br><span class="line">    <span class="keyword">return</span> next_sum</span><br></pre></td></tr></table></figure>


<h2 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h2><p><strong>Currying:</strong> Transforming a multi-argument function into a single-argument, higher-order function.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Currying</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">curry2</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Curry a two-argument function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m = curry2(add)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = m(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(4)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m(2)(1)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">y</span>):</span></span><br><span class="line">            <span class="keyword">return</span> f(x, y)</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; Use lambda expression &#x27;&#x27;&#x27;</span></span><br><span class="line">curry2 = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: <span class="keyword">lambda</span> y: f(x, y)</span><br></pre></td></tr></table></figure>


<h2 id="Exercise-Implementing-Functions"><a href="#Exercise-Implementing-Functions" class="headerlink" title="Exercise: Implementing Functions"></a>Exercise: Implementing Functions</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">n, digit</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return all digits of non-negative N </span></span><br><span class="line"><span class="string">    that are not DIGIT, for some non-negative</span></span><br><span class="line"><span class="string">    DIGIT less than 10.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove(231, 3)</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove(243132, 2)</span></span><br><span class="line"><span class="string">    4313</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    kept, digits = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> ______________________:</span><br><span class="line">        n, last = n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> _____________________:</span><br><span class="line">            kept = _____________</span><br><span class="line">            digits = ___________</span><br><span class="line">    <span class="keyword">return</span> _____________________</span><br></pre></td></tr></table></figure>


<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># solution</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">n, digit</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return all digits of non-negative N </span></span><br><span class="line"><span class="string">    that are not DIGIT, for some non-negative</span></span><br><span class="line"><span class="string">    DIGIT less than 10.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove(231, 3)</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove(243132, 2)</span></span><br><span class="line"><span class="string">    4313</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    kept, digits = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n, last = n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> last != digit:</span><br><span class="line">            kept = kept + last * <span class="number">10</span> ** digits</span><br><span class="line">            digits = digits + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> kept</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(6): Recursion</title>
    <url>/2021/07/04/CS61A-SICP/CS61A-6-Recursion/</url>
    <content><![CDATA[<h2 id="Recursive-Function"><a href="#Recursive-Function" class="headerlink" title="Recursive Function"></a>Recursive Function</h2><p>A function is called <code>recursive</code> if the body of that function calls itself, either directly or indirectly.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sum digits</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Split a positive integer into all but its last digit and its last digit.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of the digits of positive integer n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(9)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(18117)</span></span><br><span class="line"><span class="string">    18</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(9437184)</span></span><br><span class="line"><span class="string">    36</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(11408855402054064613470328848384)</span></span><br><span class="line"><span class="string">    126</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># base case</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="comment"># recursive case</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits(all_but_last) + last</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># String reversal</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_string</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Reverse a string s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_string(&#x27;draw&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;ward&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> reverse_string(s[<span class="number">1</span>:]) + s[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>


<h2 id="Recursion-in-Environment-Diagrams"><a href="#Recursion-in-Environment-Diagrams" class="headerlink" title="Recursion in Environment Diagrams"></a>Recursion in Environment Diagrams</h2><img src="/2021/07/04/CS61A-SICP/CS61A-6-Recursion/lec6-1.png" class="">


<h2 id="Recursion-and-Iteration"><a href="#Recursion-and-Iteration" class="headerlink" title="Recursion and Iteration"></a>Recursion and Iteration</h2><p>Iteration is a special case of recursion.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Converting iteration to recursion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits_iter</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum digits iteratively.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits_iter(11408855402054064613470328848384)</span></span><br><span class="line"><span class="string">    126</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    digit_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n, last = split(n)</span><br><span class="line">        digit_sum = digit_sum + last</span><br><span class="line">    <span class="keyword">return</span> digit_sum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits_rec</span>(<span class="params">n, digit_sum</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum digits using recursion, based on iterative version.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits_rec(11408855402054064613470328848384, 0)</span></span><br><span class="line"><span class="string">    126</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> digit_sum</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        n, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits_rec(n, digit_sum + last)</span><br></pre></td></tr></table></figure>


<h2 id="Mutual-Recursion"><a href="#Mutual-Recursion" class="headerlink" title="Mutual Recursion"></a>Mutual Recursion</h2><p>Mutual recursion occurs when two different functions call each other. </p>
<img src="/2021/07/04/CS61A-SICP/CS61A-6-Recursion/lec6-2.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Luhn algorithm: mutual recursion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Split a positive integer into all but its last digit and its last digit.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of the digits of positive integer n.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits(all_but_last) + last</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">luhn_sum</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the digit sum of n computed by the Luhn algorithm.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(2)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(12)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(42)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(138743)</span></span><br><span class="line"><span class="string">    30</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(5105105105105100) # example Mastercard</span></span><br><span class="line"><span class="string">    20</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(4012888888881881) # example Visa</span></span><br><span class="line"><span class="string">    90</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(79927398713) # from Wikipedia</span></span><br><span class="line"><span class="string">    70</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> luhn_sum_double(all_but_last) + last</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">luhn_sum_double</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Luhn sum of n, doubling the last digit.&quot;&quot;&quot;</span></span><br><span class="line">    all_but_last, last = split(n)</span><br><span class="line">    luhn_digit = sum_digits(<span class="number">2</span> * last)</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> luhn_digit</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> luhn_sum(all_but_last) + luhn_digit </span><br></pre></td></tr></table></figure>


<h2 id="Order-of-Recursive-Calls"><a href="#Order-of-Recursive-Calls" class="headerlink" title="Order of Recursive Calls"></a>Order of Recursive Calls</h2><p>When making a function called, you have to wait for <strong>the return</strong> before doing anything else.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ordering</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cascade</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print a cascade of prefixes of n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cascade(1234)</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        cascade(n//<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cascade2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print a cascade of prefixes of n.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">if</span> n &gt;= <span class="number">10</span>:</span><br><span class="line">        cascade(n//<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>

<ul>
<li>If two implementations are equally clear, then shorter is usually better.</li>
<li>In this case, the longer implementation is more clear (at least to me).</li>
<li>When learning to write recursive functions, put the base cases first.</li>
<li>Both are recursive functions, even though only the first has typical structure</li>
</ul>
<p>Exercise : Write a function that prints an inverse cascade.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inverse Cascade</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_cascade</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print an inverse cascade of prefixes of n.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; inverse_cascade(1234)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    grow(n)</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    shrink(n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f_then_g</span>(<span class="params">f, g, n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n:</span><br><span class="line">        f(n)</span><br><span class="line">        g(n)</span><br><span class="line"></span><br><span class="line">grow = <span class="keyword">lambda</span> n: f_then_g(grow, <span class="built_in">print</span>, n//<span class="number">10</span>)</span><br><span class="line">shrink = <span class="keyword">lambda</span> n: f_then_g(<span class="built_in">print</span>, shrink, n//<span class="number">10</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(7): Tree Recursion</title>
    <url>/2021/07/06/CS61A-SICP/CS61A-7-Tree-Recursion/</url>
    <content><![CDATA[<h2 id="Tree-Recursion"><a href="#Tree-Recursion" class="headerlink" title="Tree Recursion"></a>Tree Recursion</h2><p>Tree-shaped processes arise whenever executing the body of a recursive function makes more than one recursive call.</p>
<ul>
<li>Example :</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tree recursion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the nth Fibonacci number.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(8)</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">2</span>) + fib(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<img src="/2021/07/06/CS61A-SICP/CS61A-7-Tree-Recursion/lec7-1.png" class="">

<span id="more"></span>


<h2 id="Hanoi-Tower"><a href="#Hanoi-Tower" class="headerlink" title="Hanoi Tower"></a>Hanoi Tower</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hanoi Tower</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_move</span>(<span class="params">origin, destination</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print instructions to move a disk.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Move the top disk from rod&quot;</span>, origin, <span class="string">&quot;to rod&quot;</span>, destination)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_stack</span>(<span class="params">n, start, end</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the moves required to move n disks on the start pole to the end</span></span><br><span class="line"><span class="string">    pole without violating the rules of Towers of Hanoi.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    n -- number of disks</span></span><br><span class="line"><span class="string">    start -- a pole position, either 1, 2, or 3</span></span><br><span class="line"><span class="string">    end -- a pole position, either 1, 2, or 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    There are exactly three poles, and start and end must be different. Assume</span></span><br><span class="line"><span class="string">    that the start pole has at least n disks of increasing size, and the end</span></span><br><span class="line"><span class="string">    pole is either empty or has a top disk larger than the top n start disks.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(1, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(2, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(3, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 3 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 1</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> &lt;= start &lt;= <span class="number">3</span> <span class="keyword">and</span> <span class="number">1</span> &lt;= end &lt;= <span class="number">3</span> <span class="keyword">and</span> start != end, <span class="string">&quot;Bad start/end&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        print_move(start, end)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        spare_peg = <span class="number">6</span> - start - end</span><br><span class="line">        move_stack(n-<span class="number">1</span>, start, spare_peg)</span><br><span class="line">        print_move(start, end)</span><br><span class="line">        move_stack(n-<span class="number">1</span>, spare_peg, end)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">time complexity: O(2^n)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Demo-Counting-Partitions"><a href="#Demo-Counting-Partitions" class="headerlink" title="Demo: Counting Partitions"></a>Demo: Counting Partitions</h2><img src="/2021/07/06/CS61A-SICP/CS61A-7-Tree-Recursion/lec7-2.png" class="">

<img src="/2021/07/06/CS61A-SICP/CS61A-7-Tree-Recursion/lec7-3.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_partitions</span>(<span class="params">n, m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Count the partitions of n using parts up to size m.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_partitions(6, 4)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_partitions(10, 10)</span></span><br><span class="line"><span class="string">    42</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># base case</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> m == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#recursive case</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        with_m = count_partitions(n-m, m)</span><br><span class="line">        without_m = count_partitions(n, m-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> with_m + without_m</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(8): Diagnostic Review &amp; Debugging</title>
    <url>/2021/07/14/CS61A-SICP/CS61A-8-Diagnostic-Review-Debugging/</url>
    <content><![CDATA[<p>ü¶© Just two things in this lecture:</p>
<ul>
<li>Compare <strong>Iteration</strong> vs <strong>Recursion</strong> vs <strong>Higher Order Functions</strong></li>
<li>Debugging</li>
</ul>
<span id="more"></span>


<h2 id="Iteration-vs-Recursion-vs-Higher-Order-Functions"><a href="#Iteration-vs-Recursion-vs-Higher-Order-Functions" class="headerlink" title="Iteration vs Recursion vs Higher Order Functions"></a>Iteration vs Recursion vs Higher Order Functions</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write a function that adds all the digits</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Iterative</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits_iterative</span>(<span class="params">n</span>):</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        result += n % <span class="number">10</span></span><br><span class="line">        n //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">sum_digits_iterative(<span class="number">1234</span>) == <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Recursive</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits_recursive</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">10</span> + sum_digits_recursive(n // <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">sum_digits_recursive(<span class="number">1234</span>) == <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># HOF</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits_hof</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">total</span>):</span></span><br><span class="line">        <span class="keyword">if</span> total == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">return</span> sum_digits_hof(n + total)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">sum_digits_hof(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(-<span class="number">1</span>) == <span class="number">10</span></span><br></pre></td></tr></table></figure>


<h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><p>To debugging successfully, you should distinguish different kinds of error and know its meanings:</p>
<ul>
<li><strong>SyntaxError:</strong> invalid python syntax</li>
<li><strong>IndentationError/TabError:</strong> indentation inconsistency<ul>
<li><code>cat -A filename.py</code> will show tabs and spaces</li>
</ul>
</li>
<li><strong>TypeError:</strong><ul>
<li>X object is not callable ‚Ä¶ : type X cannot be treated as functions </li>
<li>NoneType ‚Ä¶ : used None in some operation it wasn‚Äôt meant for</li>
</ul>
</li>
<li><strong>NameError:</strong> cannot find the name</li>
<li><strong>UnboundLocalError:</strong> a local to a frame variable is used before it is assigned</li>
</ul>
<img src="/2021/07/14/CS61A-SICP/CS61A-8-Diagnostic-Review-Debugging/1.JPG" class="">

]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(9): Sequences and Data Abstraction</title>
    <url>/2021/07/14/CS61A-SICP/CS61A-9-Sequences-and-Data-Abstraction/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>Python: ÂÖ≥ÈîÆÂ≠óglobalÂíånonlocal</title>
    <url>/2021/07/10/Coding/Python-%E5%85%B3%E9%94%AE%E5%AD%97global%E5%92%8Cnonlocal/</url>
    <content><![CDATA[<h2 id="Âºï‰æã"><a href="#Âºï‰æã" class="headerlink" title="Âºï‰æã"></a>Âºï‰æã</h2><p>ÂÖàÊù•Áúã‰∏Ä‰∏™‰ª£Á†ÅÁâáÊÆµÔºö</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">increment = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater</span>(<span class="params">func, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the function that computes the nth application of func.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeater</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            x = func(x)</span><br><span class="line">            n = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> repeater</span><br><span class="line"></span><br><span class="line">add_three = make_repeater(increment, <span class="number">3</span>)</span><br><span class="line">add_three(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>ÂΩìËøêË°å‰∏äËø∞‰ª£Á†ÅÁâáÊÆµÊó∂Ôºå‰ºö‰∫ßÁîüÂ¶Ç‰∏ãÁöÑÈîôËØØÔºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UnboundLocalError: <span class="built_in">local</span> variable <span class="string">&#x27;n&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure>

<p>Ë¶ÅÁêÜËß£Ëøô‰∏™ÈîôËØØÁöÑÂéüÂõ†ÔºåÈúÄË¶ÅÁü•ÈÅìÂÖ®Â±ÄÂèòÈáèÂíåÂ±ÄÈÉ®ÂèòÈáèÁöÑÊ¶ÇÂøµ„ÄÇ</p>
<h2 id="Â±ÄÈÉ®ÂèòÈáèÂíåÂÖ®Â±ÄÂèòÈáè"><a href="#Â±ÄÈÉ®ÂèòÈáèÂíåÂÖ®Â±ÄÂèòÈáè" class="headerlink" title="Â±ÄÈÉ®ÂèòÈáèÂíåÂÖ®Â±ÄÂèòÈáè"></a>Â±ÄÈÉ®ÂèòÈáèÂíåÂÖ®Â±ÄÂèòÈáè</h2><span id="more"></span>

<h3 id="Â±ÄÈÉ®ÂèòÈáè"><a href="#Â±ÄÈÉ®ÂèòÈáè" class="headerlink" title="Â±ÄÈÉ®ÂèòÈáè"></a>Â±ÄÈÉ®ÂèòÈáè</h3><p>ÂΩìÊàë‰ª¨Âú®ÂáΩÊï∞‰ΩìÂÜÖ„ÄÅÊàñËÄÖÂú®Â±ÄÈÉ®ËåÉÂõ¥ÂÜÖÂÆö‰πâ‰∏Ä‰∏™ÂèòÈáèÊó∂ÔºåËØ•ÂèòÈáèË¢´Áß∞‰∏∫ <code>Â±ÄÈÉ®ÂèòÈáè</code> „ÄÇÂ±ÄÈÉ®ÂèòÈáèÂè™ËÉΩÂú®Â±ÄÈÉ®ËåÉÂõ¥ÂÜÖË¢´ËÆøÈóÆÔºå‰∏çËÉΩÂú®Â±ÄÈÉ®ËåÉÂõ¥Â§ñË¢´ËÆøÈóÆ„ÄÇ</p>
<p><strong>‰æã1ÔºöÂú®ËåÉÂõ¥Â§ñËÆøÈóÆÂ±ÄÈÉ®ÂèòÈáè</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    y = <span class="string">&quot;local&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure>

<p><strong>ËæìÂá∫Ôºö</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span></span><br><span class="line">NameError: name <span class="string">&#x27;y&#x27;</span> is not defined</span><br></pre></td></tr></table></figure>


<h3 id="ÂÖ®Â±ÄÂèòÈáè"><a href="#ÂÖ®Â±ÄÂèòÈáè" class="headerlink" title="ÂÖ®Â±ÄÂèòÈáè"></a>ÂÖ®Â±ÄÂèòÈáè</h3><p>ÂΩìÊàë‰ª¨Âú®ÂáΩÊï∞Â§ñ„ÄÅÊàñËÄÖÂú®ÂÖ®Â±ÄËåÉÂõ¥ÂÜÖÂÆö‰πâ‰∏Ä‰∏™ÂèòÈáèÊó∂ÔºåËØ•ÂèòÈáèË¢´Áß∞‰∏∫ <code>ÂÖ®Â±ÄÂèòÈáè</code> „ÄÇÂÖ®Â±ÄÂèòÈáèÂèØ‰ª•Âú®ÂáΩÊï∞ÂÜÖÈÉ®Ë¢´ËÆøÈóÆÔºå‰πüÂèØ‰ª•Âú®ÂáΩÊï∞Â§ñÈÉ®Ë¢´ËÆøÈóÆ„ÄÇ</p>
<p>ËÆ©Êàë‰ª¨Êù•Áúã‰∏Ä‰∏™ÂÖ®Â±ÄÂèòÈáèÁöÑ‰æãÂ≠êÔºö</p>
<p><strong>‰æã3ÔºöÂÖ®Â±ÄÂèòÈáè</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x inside:&quot;</span>, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x outside:&quot;</span>, x)</span><br></pre></td></tr></table></figure>

<p><strong>ËæìÂá∫Ôºö</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x inside: <span class="keyword">global</span></span><br><span class="line">x outside: <span class="keyword">global</span></span><br></pre></td></tr></table></figure>

<p>Âú®‰∏äËø∞‰ª£Á†Å‰∏≠Ôºå<code>x</code> ÊòØ‰∏Ä‰∏™ÂÖ®Â±ÄÂèòÈáèÔºåÊàë‰ª¨ÂèØ‰ª•Âú®ÂáΩÊï∞ <code>foo</code> ÂÜÖÈÉ®ËÆøÈóÆ <code>x</code> Ôºå‰πüÂèØ‰ª•Âú®ÂáΩÊï∞Â§ñÈÉ®ËÆøÈóÆ <code>x</code> „ÄÇ</p>
<p>ÂÄºÂæóÊ≥®ÊÑèÁöÑÊòØÔºåÂú®‰∏äÈù¢ÁöÑ‰ª£Á†Å‰∏≠ÔºåÊàë‰ª¨‰ªÖ‰ªÖÂè™ÊòØËÆøÈóÆ <code>x</code> „ÄÇ‰ΩÜÂ¶ÇÊûúÊàë‰ª¨ÊÉ≥Ë¶ÅÂÅöÁöÑÊòØ‰øÆÊîπ <code>x</code> ÁöÑÂÄºÂë¢Ôºü</p>
<p><strong>‰æã4: Âú®ÂáΩÊï∞ÂÜÖÈÉ®‰øÆÊîπÂÖ®Â±ÄÂèòÈáè</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    x = x * <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p><strong>Output</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UnboundLocalError: <span class="built_in">local</span> variable <span class="string">&#x27;x&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure>

<p>ËøêË°å‰ºöÂá∫Áé∞ÈîôËØØ„ÄÇ</p>
<p>ËøôÊòØÂõ†‰∏∫ÔºåÂΩìÊàë‰ª¨Âú®ÂáΩÊï∞ÂÜÖÈÉ®ÂØπ <code>x</code> ‰øÆÊîπÈáçÊñ∞ËµãÂÄºÊó∂ÔºåPythonËß£ÈáäÂô®‰ºöËÆ§‰∏∫ <code>x</code> ÊòØÂ±ÄÈÉ®ÂèòÈáèËÄå‰∏çÊòØÂÖ®Â±ÄÂèòÈáèÔºåËÄåËøô‰∏™Â±ÄÈÉ®ÂèòÈáè‰πüÂπ∂Ê≤°ÊúâÂú®ÂáΩÊï∞ÂÜÖÈÉ®ÂÆö‰πâÔºåÊâÄ‰ª•Â∞±‰∫ßÁîü‰∫ÜËøô‰∏™ÈîôËØØ„ÄÇ</p>
<h2 id="ÂÖ≥ÈîÆÂ≠óÔºöglobalÂíånonlocal"><a href="#ÂÖ≥ÈîÆÂ≠óÔºöglobalÂíånonlocal" class="headerlink" title="ÂÖ≥ÈîÆÂ≠óÔºöglobalÂíånonlocal"></a>ÂÖ≥ÈîÆÂ≠óÔºöglobalÂíånonlocal</h2><h3 id="globalÂÖ≥ÈîÆÂ≠ó"><a href="#globalÂÖ≥ÈîÆÂ≠ó" class="headerlink" title="globalÂÖ≥ÈîÆÂ≠ó"></a>globalÂÖ≥ÈîÆÂ≠ó</h3><p>‰∏∫‰∫ÜËß£ÂÜ≥‰æã4ÁöÑÈóÆÈ¢òÔºåÊàë‰ª¨‰ΩøÁî® <code>global</code> ÂÖ≥ÈîÆÂ≠ó„ÄÇÁé∞Âú®ÂáΩÊï∞ÂÜÖÈÉ®Â£∞ÊòéÂèòÈáè <code>x</code> ÊòØÂÖ®Â±ÄÂèòÈáèÔºåÂÜçÂØπÂÖ∂ËøõË°å‰øÆÊîπ„ÄÇ‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x = x * <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<p><strong>ËæìÂá∫Ôºö</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">globalglobal</span><br><span class="line">globalglobal</span><br></pre></td></tr></table></figure>

<h3 id="nonlocalÂÖ≥ÈîÆÂ≠ó"><a href="#nonlocalÂÖ≥ÈîÆÂ≠ó" class="headerlink" title="nonlocalÂÖ≥ÈîÆÂ≠ó"></a>nonlocalÂÖ≥ÈîÆÂ≠ó</h3><p>Êó¢ÁÑ∂ËØ¥Âà∞‰∫ÜlocalÂÖ≥ÈîÆÂ≠óÔºåÂ∞±È°∫‰æøËØ¥‰∏Ä‰∏ã <code>nonlocal</code> ÂÖ≥ÈîÆÂ≠ó„ÄÇ</p>
<p>ÊØîËæÉ‰ª•‰∏ã‰∏§‰∏™‰ª£Á†ÅÔºö</p>
<p><strong>‰æã5Ôºö‰∏ç‰ΩøÁî®nonlocalÂÖ≥ÈîÆÂ≠ó</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;variable 1&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">        name = <span class="string">&#x27;variable 2&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    </span><br><span class="line">func1()</span><br></pre></td></tr></table></figure>

<p><strong>ËæìÂá∫Ôºö</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">variable 2</span><br><span class="line">variable 1</span><br></pre></td></tr></table></figure>

<p><strong>‰æã6Ôºö‰ΩøÁî®nonlocalÂÖ≥ÈîÆÂ≠ó</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;variable 1&#x27;</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> name</span><br><span class="line">        name = <span class="string">&#x27;variable 2&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(name) </span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    </span><br><span class="line">func2()</span><br></pre></td></tr></table></figure>

<p><strong>ËæìÂá∫Ôºö</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">variable 2</span><br><span class="line">variable 2</span><br></pre></td></tr></table></figure>

<p>Ê≥®ÊÑèÂà∞‰æã6ÁöÑÁ¨¨4Ë°å‰ª£Á†ÅÔºåÂµåÂ•óÂáΩÊï∞ <code>foo</code> ‰∏≠ÁöÑÂèòÈáè <code>name</code> ‰ΩøÁî®‰∫ÜÂÖ≥ÈîÆÂ≠ó <code>nonlocal</code> „ÄÇ</p>
<p>Â¶ÇÊûú‰∏Ä‰∏™ÂèòÈáèË¢´ <code>nonlocal</code> ‰øÆÈ•∞ÔºåÂàôÊ†áËØÜ‰∫ÜËØ•ÂèòÈáèÊòØ‰∏ä‰∏ÄÁ∫ßÂáΩÊï∞‰∏≠ÁöÑÂ±ÄÈÉ®ÂèòÈáèÔºåÂú®ËøôÈáåÔºåÊåáÁöÑÊòØÂáΩÊï∞ <code>func2</code> ‰∏≠ÁöÑÂêåÂêçÁöÑÂèòÈáè <code>name</code> (line 2) „ÄÇÂõ†Ê≠§Âú®ÂµåÂ•óÂáΩÊï∞ <code>foo</code> ‰∏≠‰øÆÊîπÂèòÈáè <code>name</code> ÁöÑÂÄº‰πüÂ∞±‰øÆÊîπ‰∫Ü <code>func2</code> ‰∏≠ÂèòÈáè <code>name</code> ÁöÑÂÄº„ÄÇ</p>
<p>ËÄåÂú®‰æã5‰∏≠ÔºåÂµåÂ•óÂáΩÊï∞ <code>foo</code> ‰∏≠ÁöÑÂèòÈáè <code>name</code> Âπ∂Ê≤°ÊúâÁî® <code>nonlocal</code> ‰øÆÈ•∞ÔºåÈÇ£‰πàÂÆÉ‰ªÖ‰ªÖÊòØ <code>foo</code> ‰∏≠ÁöÑ‰∏Ä‰∏™Â±ÄÈÉ®ÂèòÈáè„ÄÇÂú®ÂáΩÊï∞ <code>foo</code> ÁöÑËåÉÂõ¥Â§ñÊòØ‰∏çËÉΩËÆøÈóÆËøô‰∏™ÂèòÈáèÁöÑ„ÄÇÊâÄ‰ª•Á¨¨7Ë°åÊâìÂç∞ÁöÑÊòØÁ¨¨2Ë°åÂÆö‰πâÁöÑÂ±ÄÈÉ®ÂèòÈáè <code>name</code>, ËÄå‰∏çÊòØÁ¨¨4Ë°åÁöÑÂ±ÄÈÉ®ÂèòÈáè„ÄÇ</p>
<h2 id="Â∞æÂ£∞"><a href="#Â∞æÂ£∞" class="headerlink" title="Â∞æÂ£∞"></a>Â∞æÂ£∞</h2><p>ÊúÄÂêéËÆ©Êàë‰ª¨ÈáçÊñ∞Áúã‰∏Ä‰∏ãÂºï‰æã‰∏≠ÁöÑ‰ª£Á†ÅÔºö</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">increment = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater</span>(<span class="params">func, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the function that computes the nth application of func.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeater</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            x = func(x)</span><br><span class="line">            n = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> repeater</span><br><span class="line"></span><br><span class="line">add_three = make_repeater(increment, <span class="number">3</span>)</span><br><span class="line">add_three(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>Ë¶ÅÊÄéÊ†∑‰øÆÊîπÊâçËÉΩ‰Ωø‰ª£Á†ÅÂ∑•‰ΩúÂë¢Ôºü</p>
<p>Á≠îÊ°à‰∏çÂîØ‰∏ÄÔºå‰ΩÜ‰∏Ä‰∏™ÂèØË°åÁöÑÂäûÊ≥ïÊòØ‰ΩøÁî® <code>nonlocal</code> ÂÖ≥ÈîÆÂ≠óÊù•‰øÆÈ•∞ÂèòÈáè <code>n</code> Ôºå Â¶Ç‰∏ãÊâÄÁ§∫Ôºö</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater</span>(<span class="params">func, n</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeater</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> n</span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            x = func(x)</span><br><span class="line">            n = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> repeater</span><br></pre></td></tr></table></figure>

<p>üåº ÂÆåÁªìÔºåÊííËä± ‚úø‚úø„ÉΩ(¬∞‚ñΩ¬∞)„Éé‚úø</p>
]]></content>
      <categories>
        <category>Coding</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Complexity Problems</title>
    <url>/2021/07/14/Data%20Structures%20and%20Algorithms/Complexity-Problems/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Data Structures and Algorithms</category>
      </categories>
      <tags>
        <tag>DSA</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev: A Primer</title>
    <url>/2021/07/13/Web%20Development/Web-Dev-0-A-Primer/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>You can get into web development as long as you knows the basics of programming.</p>
<p>üåº Reminder: <em>Keep learning if you don‚Äôt want to be weeded out.</em></p>
<span id="more"></span>

<h2 id="Networks"><a href="#Networks" class="headerlink" title="Networks"></a>Networks</h2><h3 id="What-is-the-Web"><a href="#What-is-the-Web" class="headerlink" title="What is the Web?"></a>What is the Web?</h3><p>The web is a network spread across the globe that connects a multitude of devices and allows them to communicate with one another. </p>
<p>Websites on the Internet are hosted on devices referred to as <strong>servers</strong> , the device that you‚Äôre accessing the webpage is referred to as the <strong>client</strong>. When you‚Äôre interacting with a webpage on the Internet, what you‚Äôre essentially doing is exchanging data with the server. The web enables the exchange of data between clients and servers.</p>
<hr>
<p>The <strong>World Wide Web (WWW)</strong>, commonly known as the <strong>Web</strong>, is an information system where documents and other web resources are identified by <code>Uniform Resource Locators (URLs, such as https://example.com/)</code>, which may be interlinked by hyperlinks, and are accessible over the Internet. The resources of the Web are transferred via the <code>Hypertext Transfer Protocol (HTTP)</code>, may be accessed by users by a software application called a <code>web browser</code>, and are published by a software application called a <code>web server</code>. The World Wide Web is not synonymous with the Internet, Web can be seen as one of services provided by the Internet.</p>
<hr>
<h4 id="Network-layers"><a href="#Network-layers" class="headerlink" title="Network layers"></a>Network layers</h4><img src="/2021/07/13/Web%20Development/Web-Dev-0-A-Primer/Internet-layer.jpg" class="" title="Network Layers">


<p>The network are typically divided into abstract layers, each of which performs a specific task that aids in the overall communication process:</p>
<p>(from the bottom layer up to the topmost layer)</p>
<ul>
<li><p><strong>Application Layer:</strong> is responsible for process-to-process communication across the Internet. The application itself is built on top of this layer. The application layer provides a communication interface and end-user services to the application for its communication with single processes.</p>
</li>
<li><p><strong>Transport Layer:</strong> is responsible for connecting applications on the Internet. It demultiplexes(Ëß£Â§çÁî®) data coming in from a single source and transmits it to the application it is intended for. The basic purpose of the transport layer in the context of the web is that it provides process-to-process communication; it allows two individual processes on either the same machine or separate machines to send messages to each other. To do so, it uses <strong>sockets(Â•óÊé•Â≠ó)</strong>, which are essentially just the gateway to a process. In other words, sockets are the means through which messages are received and sent out by a process.</p>
</li>
<li><p><strong>Network Layer:</strong> is responsible for connecting any two machines on the Internet, allows for end-systems to commnunicate with each other on a large scale</p>
</li>
<li><p><strong>Data Link Layer:</strong> is responsible for transimitting data from one device to another device that is <strong>exactly one line away</strong></p>
</li>
<li><p><strong>Physical Layer:</strong> physical wiring and circuits that makes the network works</p>
</li>
</ul>
<p>Each layer is built on top of the previous layer. And each layer has <code>protocols</code> that implement specific functionalities that are involved in the data exchange process.</p>
<h3 id="How-does-Web-work"><a href="#How-does-Web-work" class="headerlink" title="How does Web work?"></a>How does Web work?</h3><p>We have already know that clients send messages to servers requesting data, and servers respond with the required data. but how is this data transferred?</p>
<p>To answer this question, first, we will define the structure of the Internet. Then talk about how data is transported across the network.</p>
<img src="/2021/07/13/Web%20Development/Web-Dev-0-A-Primer/internet-structure.png" class="">

<h4 id="1-Switches"><a href="#1-Switches" class="headerlink" title="1. Switches"></a>1. Switches</h4><p>The Internet is comprised of devices known as <strong>switches(‰∫§Êç¢Êú∫)</strong> that facilitate the connection of each device to every other device on the network. The devices themselves are referred to as end-systems. End-systems are connected to switches through <strong>links</strong> and all of the switches are, in turn, connected to each other. Thus ensuring that every end-system on the Internet is implicitly connected to every other end-system.</p>
<p>In addition to connecting end-systems to one another, switches facilitate the communication between any two end-systems by forwarding packets(ËΩ¨ÂèëÊï∞ÊçÆÂåÖ) along the path that they know exists between the packet source and destination. So basically, switches store pre-determined paths between end-systems and forwards packets among them.</p>
<h4 id="2-Routers"><a href="#2-Routers" class="headerlink" title="2. Routers"></a>2. Routers</h4><p><strong>Routers(Ë∑ØÁî±Âô®</strong>) have the same function as switches also connect end systems to the rest of the web. However, routers are actually very different from switches <em>since they have the additional capability of allowing lookups for destination addresses and determining the shortest or the least busy path from the source of a packet to its destination.</em></p>
<h4 id="3-Data-packets"><a href="#3-Data-packets" class="headerlink" title="3. Data packets"></a>3. Data packets</h4><p>The data that needs to be transferred will be divided into several smaller chunks of bits known as <strong>packets(Êï∞ÊçÆÂåÖ)</strong>, and then each packet will be sent to its destination independently. </p>
<p>Compared to sending large amounts of data in a single packet, sending multiple smaller packets will be more efficient and reliable.</p>
<h4 id="4-TCP"><a href="#4-TCP" class="headerlink" title="4. TCP"></a>4. TCP</h4><p>The primarily used protocol for communication between a web application and a browser is referred to as the <code>Transmission Control Protocol (TCP)</code>. TCP is a transport layer protocol that takes the responsibility of transmitting data and ensures reliable data transfer between clients and servers across the web. </p>
<p>The way TCP does is by adding additional information to data packets that allow for packet authentication(ËÆ§ËØÅ), and by allowing the exchange of acknowledgment messages between the client and server to confirm data transmissions.</p>
<p>The TCP protocol starts with a <code>3-way handshake</code>. The handshake allows both ends (server and client) to initiate and maintain several TCP connections at once.</p>
<img src="/2021/07/13/Web%20Development/Web-Dev-0-A-Primer/3-Way-TCP-Handshake.png" class="">


<h4 id="5-HTTP-amp-HTTPS"><a href="#5-HTTP-amp-HTTPS" class="headerlink" title="5. HTTP &amp; HTTPS"></a>5. HTTP &amp; HTTPS</h4><p>After initiating TCP connections, clients and servers communicate with each other by sending messages to one another. Now, we will look into exactly how these messages are structured.</p>
<p><code>HyperText Transfer Protocol(HTTP)</code> is an application layer protocol that dictates the structure of messages exchanged between client and server. It also dictates how messages are exchanged. </p>
<p>HTTP is built on top of TCP. Basically, when you enter a URL in your browser, what actually happens is that an HTTP command gets sent to the server hosting the application to fetch and transmit the requested web page through TCP.</p>
<hr>
<p><code>HTTPS</code> is an acronym for <strong>HyperText Transfer Protocol Secure</strong>, and it is basically just the secure version of HTTP. What this means is that communications between the browser and the hosting server are encrypted so that no third parties on the network can access information that is not intended to be shared.</p>
<hr>
<h4 id="6-Ports"><a href="#6-Ports" class="headerlink" title="6. Ports"></a>6. Ports</h4><p>HTTP and TCP ensure efficient communication between end-systems on the web, but they don‚Äôt determine destination where messages to go. Ports solve this problem.</p>
<p><code>Ports</code> are where messages from the network arrive on an end-system.</p>
<p>We briefly discussed sockets earlier and said they are the gateways to processes. Sockets are opened on ports in order to allow processes to send and receive messages. Ports are designated by numbers, and all ports below 1024 are associated with a specific protocol by default. The port number for HTTP, for instance, is 80, and what this means is that any messages you send or receive on the web come in to and leave your machine on a socket at port 80. Ports above 1024 are open ports available to programmers to use for any process they want to communicate with a network. They can build sockets on these ports, and define the structure and type of messages that this socket can cater to through socket programming. </p>
<p><em>Socket programming</em> is an aspect of Computer Networks, and it is a highly useful skill.</p>
<h3 id="How-Data-Finds-its-Way"><a href="#How-Data-Finds-its-Way" class="headerlink" title="How Data Finds its Way?"></a>How Data Finds its Way?</h3><p>In this part, we will look into how clients and servers know where they want to send their data, and what protocols exist to ensure each end-system on a network has a unique identity that allows it to be reached by other end-systems.</p>
<h4 id="Internet-protocol-amp-IP-addresses"><a href="#Internet-protocol-amp-IP-addresses" class="headerlink" title="Internet protocol &amp; IP addresses"></a>Internet protocol &amp; IP addresses</h4><p><code>Internet Protocol(IP)</code>, is a network layer protocol that is responsible for assigning addresses to devices in order to give them <strong>unique</strong> identities that make them reachable and discoverable. Each device on the Internet has a unique IP address that other devices use to connect with it.</p>
<p>Once you have your website host(ÊâòÁÆ°) on a server, users will be able to connect with it through the <code>IP address</code> of the server and receive data. </p>
<p>You can use the following command line to find your own IP address:</p>
<blockquote>
<p>$ Linux, macOS: ifconfig<br>$ Windows: ipconfig </p>
</blockquote>
<h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>You may be wondering now where the IP address comes in if you reach websites through URLs. Well, that‚Äôs where <code>DNS (Domain Name System)</code> comes in. Routers across the web do not store URLs for every single website hosted on the Internet, they only know IP addresses and forward packets towards their destinations based on them. Users, however, only know URLs, or domain names, for the websites they are visiting. To bridge this clear gap of information, the Internet makes use of <strong>DNS servers</strong>, which serve as translational intermediaries between end-systems and the routers that serve to forward data packets coming from them to their destinations. The process of making a lookup for a domain name on a DNS server and obtaining its corresponding IP address is referred to as a <strong>DNS resolution(Ëß£Êûê)</strong>.</p>
<img src="/2021/07/13/Web%20Development/Web-Dev-0-A-Primer/DNS-work.png" class="">


<h3 id="Vedio-Life-of-a-Packet"><a href="#Vedio-Life-of-a-Packet" class="headerlink" title="Vedio: Life of a Packet"></a>Vedio: Life of a Packet</h3><p>You can watch this vedio: Life of an IP Packet to know exactly how data goes from a client to server. Although some terminology used in it might not exactly be up-to-date, but the underpinnings are essentially the same today. It is a nice overview for beginners.</p>
<p><video src='https://www.youtube.com/watch?v=9BGWrLiT9qs' 
       type='video/mp4' 
       controls='controls'  
       preload="auto"
       width='100%' 
       height='100%'><br></video></p>
<h2 id="Databases"><a href="#Databases" class="headerlink" title="Databases"></a>Databases</h2><h2 id="The-Front-End"><a href="#The-Front-End" class="headerlink" title="The Front End"></a>The Front End</h2><h2 id="The-Back-End"><a href="#The-Back-End" class="headerlink" title="The Back End"></a>The Back End</h2><h2 id="Web-Development-Frameworks"><a href="#Web-Development-Frameworks" class="headerlink" title="Web Development Frameworks"></a>Web Development Frameworks</h2><h2 id="Version-Control-with-Git"><a href="#Version-Control-with-Git" class="headerlink" title="Version Control with Git"></a>Version Control with Git</h2><h2 id="Principles-of-Software-Engineering"><a href="#Principles-of-Software-Engineering" class="headerlink" title="Principles of Software Engineering"></a>Principles of Software Engineering</h2><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2>]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(1): SQL and Data Modelding(II)</title>
    <url>/2021/07/13/Web%20Development/Web-Dev-1-SQL-and-Data-Modelding-II/</url>
    <content><![CDATA[<p>As said previously, using <code>psycopg2</code> still requires us to write SQL, and writing SQL directly is a fairly clunky way. </p>
<p>In this blog, I will introduce a powerful Python libraries called <code>SQLAlchemy</code> which is for interacting with databases.</p>
<h2 id="SQLAlchemy-Basics"><a href="#SQLAlchemy-Basics" class="headerlink" title="SQLAlchemy Basics"></a>SQLAlchemy Basics</h2><p><code>SQLAlchemy</code> is the most popular open-source library for working with relational databases from Python. It is one type of <strong>ORM</strong> library, a.k.a an <strong>Object-Relational Mapping</strong> library, which provides an interface for using object oriented programming to interact with a database.</p>
<h2 id="SQLAlchemy-ORM-in-Depth"><a href="#SQLAlchemy-ORM-in-Depth" class="headerlink" title="SQLAlchemy ORM in Depth"></a>SQLAlchemy ORM in Depth</h2>]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(1): SQL and Data Modelding(III)</title>
    <url>/2021/07/13/Web%20Development/Web-Dev-1-SQL-and-Data-Modelding-III/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(1): SQL and Data Modeling(I)</title>
    <url>/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/</url>
    <content><![CDATA[<p>üòÉ <strong>Content of this serial blogs:</strong></p>
<ol>
<li><a href="">Web Dev(1): SQL and Data Modeling(I)</a></li>
<li><a href="">Web Dev(2): SQL and Data Modeling(II)</a></li>
<li><a href="">Web Dev(2): SQL and Data Modeling(III)</a></li>
</ol>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>In this serials, I will talk about skills needed to develop an entire database-backed web application.</p>
<p>You will learn:</p>
<ul>
<li>How to do <code>CRUD</code> operations?</li>
<li>How to apply these operations across both databases and web applications?</li>
<li>How to set up relationships between elements of an application?</li>
<li>How to think about important principles and patterns in building data models for a web application?</li>
</ul>
<p>We take ‚ÄúLearn by doing‚Äù strategy to acquire these skills. The tech stack is:</p>
<ul>
<li>programming language: Python 3<ul>
<li>use <code>pip</code> to install specific Python packages from <code>Python Package Index (PyPI)</code></li>
</ul>
</li>
<li>web server framework: <code>Flask</code></li>
<li>database: <code>PostgresSQL</code></li>
<li>Python libraries:<ul>
<li><code>psycopg2</code></li>
<li><code>SQLAlchemy</code></li>
<li><code>Flask-SQLAlchemy</code></li>
</ul>
</li>
</ul>
<span id="more"></span>


<h2 id="Interacting-with-Databases"><a href="#Interacting-with-Databases" class="headerlink" title="Interacting with Databases"></a>Interacting with Databases</h2><p>In this blog, we focus on 3 core topics.</p>
<p><strong>1. Interacting with a (remote) database</strong></p>
<p>Backend developers need to interact with databases regularly in order to manipulate and maintain the models behind their web applications.</p>
<p><em>DefÔºö</em></p>
<p>A <code>Database Management System (DBMS)</code> is simply software that allows you to interact with a database (e.g.to access or modify the data in that database).</p>
<hr>
<p><strong>2. Database Application Programming Interfaces (DBAPIs)</strong></p>
<p>We need to interact with database from a sepicific language or web server framework (such as Python, NodeJS, Ruby on Rails, etc.). This is where <code>DBAPIs</code> come in.</p>
<hr>
<p><strong>3. psycopg2</strong></p>
<p>We use <code>psycopg2 library</code> to interact with a database from Python.</p>
<p><strong>psycopg2</strong> is the most popular PostgreSQL database adapter(ÈÄÇÈÖçÂô®), which allows us to interact with database from Python.</p>
<p><em>Anything that implements the DB-API to connect to an external database can be reasonably called a database driver or database adapter.</em></p>
<hr>
<h3 id="Relational-Databases"><a href="#Relational-Databases" class="headerlink" title="Relational Databases"></a>Relational Databases</h3><ul>
<li>key characteristics of database:</li>
</ul>
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/key-characteristic-of-database.JPG" class="">

<ul>
<li>qualities of relational DBMS:</li>
</ul>
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/qualities-of-relational-dbms.JPG" class="">

<p>Next, let us review concepts of <code>primary key</code> and <code>foreign key</code> .</p>
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/primary-key.JPG" class="">
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/foreign-key.JPG" class="">


<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/SQL.JPG" class="">

<p>‚ú® Read <a href="https://www.postgresqltutorial.com/">PostgreSQL Tutorial</a> to learn more about PostgreSQL.</p>
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/execution-plan.JPG" class="">

<p>The <code>execution plan</code> gives important insight into the performance of the query. Since there can multiple ways of performing queries against a database with various performance tradeoffs, it‚Äôs important to choose the one with the best execution plan for quickly and efficiently returning the results that you need.</p>
<p>ü§† You can also register this <a href="https://www.udemy.com/course/complete-sql-databases-bootcamp-zero-to-mastery/">database bootcamp course</a> to learn more SQL.</p>
<p>üî• Supplyment: </p>
<ul>
<li><a href="https://www.winwire.com/25-tips-to-improve-sql-query-performance/">techniques for improving the performance of SQL queries</a></li>
<li><a href="https://www.postgresqltutorial.com/postgresql-indexes/postgresql-create-index/">use critical indexes to speed up information lookups</a></li>
<li><a href="https://db.grussell.org/sql3.html#_myauto10">SQL views</a></li>
<li><a href="https://use-the-index-luke.com/">optimize SQL queries: Use the Index, Luke!</a></li>
</ul>
<h3 id="Client-Server-Model"><a href="#Client-Server-Model" class="headerlink" title="Client-Server Model"></a>Client-Server Model</h3><p>In order to build database-backed web applications, we first need to understand how servers, clients, and databases interact. A major part of this is the <code>client-server model</code>, and the basic idea is very simple:</p>
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/basic-idea-of-client-server-model.JPG" class="">

<ul>
<li>Servers and clients are programs that run on a <strong>host</strong>.<ul>
<li>A <strong>host</strong> is a computer connected over the network.</li>
<li>A <strong>client</strong> is a program (like the web browser on your computer) that sends a <code>request</code> to the server.</li>
<li>A <strong>server</strong> is a centralized program that communicates over a network (such as the Internet) to serve many clients. It sends back a <code>response</code> to the client.</li>
<li>The client and server use a common language (a <strong>communication protocol</strong>, such as <strong>TCP/IP</strong>) for communicating with each other.</li>
</ul>
</li>
</ul>
<p>Now, adding a relational databases to this basic client-server model. This modern-day database systems also follow the client-server model.</p>
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/db-web-server-with-client.JPG" class="">

<p><em>Basically, we call things clients when they are making a request and servers when they are fulfilling a request with a repsonse. Since a web server can do both, it sometimes acts as a server and sometimes acts as a client.</em></p>
<h4 id="Client-Server-Model-Example-Onlinr-Store"><a href="#Client-Server-Model-Example-Onlinr-Store" class="headerlink" title="Client-Server Model Example: Onlinr Store"></a>Client-Server Model Example: Onlinr Store</h4><hr>
<p><strong>Background</strong></p>
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/ex-jane-online-store.JPG" class="">

<p>Click the Polo product and show a product detail page as follows :</p>
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/ex-jane-online-store2.JPG" class="">

<hr>
<p>Let‚Äôs look the steps under the hood :</p>
<ul>
<li>Clicking on the Polo product leads to a <strong>click event</strong> being registered by the browser, on the client computer.</li>
<li>A <strong>click handler(‰∫ã‰ª∂Â§ÑÁêÜÂô®)</strong> in the <code>view</code> would send a request, including information about the request type and any user input data, to the server (in Javascript) from the client browser.</li>
<li>A client could request more data and a different view to be rendered (with that data).</li>
<li>A server process listens to the request sent from the view, and uses the user input data to determine how to shape its request to the database, and sends a request to the database.</li>
<li>The database processes this request, and sends a response back to the web server.</li>
<li>The web server receives the response from the database, and uses it to determine the view + powers the view template with the fetched data, sending it back to the client‚Äôs browser.</li>
<li>The client is responsible for rendering something to the user, that represents both the data and its representation.</li>
</ul>
<p><code>MVC: model-view-controller</code></p>
<p>Let‚Äôs use some pseudocode to illustrate this process.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frontend</span></span><br><span class="line"></span><br><span class="line">&lt;!-- view.html --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;polo&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;1&quot;</span>&gt;</span> Polo <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;polo&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = <span class="keyword">new</span> Request();</span><br><span class="line">  request.send(<span class="string">&#x27;GET product detail on product with id &#x27;</span>, <span class="number">1</span>);  <span class="comment">// send request</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">request 2 things:</span></span><br><span class="line"><span class="comment">1. request more data;</span></span><br><span class="line"><span class="comment">2. reder a different page to the client web app</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># backend (web server)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; server.py &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">result = application.listen_on(request)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result.<span class="built_in">id</span>)  <span class="comment"># --&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">server does:</span></span><br><span class="line"><span class="string">1. send request to the database, about info about object with result.id;</span></span><br><span class="line"><span class="string">2. receives the response and sends back info about the view and the data;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">application.render_view(<span class="string">&#x27;product_details.html&#x27;</span>, data)</span><br></pre></td></tr></table></figure>


<h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><ul>
<li>Transmission Control Protocol (TCP)</li>
<li>Internet Protocol (IP)</li>
</ul>
<p><code>TCP/IP</code> is a suite of communication protocols that is used to connect devices and transfer data over the Internet.</p>
<p>TCP/IP uses:</p>
<ul>
<li><strong>IP addresses</strong>: An IP address identifies the location of a computer on a network.</li>
<li><strong>Ports</strong>: A port is a location on the recipient computer, where data is received.<ul>
<li><code>Port 80</code>: The port number most commonly used for HTTP requests. For example, when a client makes a request to a web server, this request is usually sent through port 80.</li>
<li><code>Port 5432</code>: The port number used by most database systems; also the default port for PostgreSQL.</li>
</ul>
</li>
</ul>
<hr>
<p>Q: Why are ports used?</p>
<p>While an IP address tells you where to find a particular computer, it doesn‚Äôt tell you specifically where on that computer a particular connection should be made‚Äîthat‚Äôs what port numbers are for.</p>
<p>Ports allow multiple types of traffic being received at the same time on a given device, to be tracked and routed to where they need to go.</p>
<p>Ports are much like the different terminals(Ëà™Á´ôÊ•º) of an airport, tracking and receiving different airplanes at the same time, allowing for the effective receipt of multiple types of traffic at the same IP address.</p>
<p>üåø Additional Resource: <a href="https://opensource.com/article/18/10/common-network-ports">14 of the most common ports</a></p>
<hr>
<p><strong>TCP/IP is connection-based.</strong> Over TCP/IP, we‚Äôll always need to establish a <code>connection</code> between clients and servers in order to enable communications.</p>
<ul>
<li>Establish a connection enables communications.</li>
<li>Close a connection to end communications. </li>
<li>Deliveries over the connection are <code>error-checked</code>: if packets arrive damaged or lost, then they are resent (known as retransmission).</li>
</ul>
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/session1.JPG" class="">
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/session2.JPG" class="">


<hr>
<p><em>Supplement: TCP vs UDP</em></p>
<p>The internet also offers the UDP protocol.</p>
<p>UDP is much simpler than TCP: hosts on the network send data (in units called datagrams) without any connections needing to be established.</p>
<p>If TCP is like building highways between houses before sending packages between them, then UDP is much like sending over a carrier pigeon from one house to another in order to deliver packages: you don‚Äôt know whether the pigeon will head in the right way, drop your package along the way, or encounter an issue mid-travel. On the other hand, there is less overhead to use UDP than managing a connection over TCP / building a highway.</p>
<p>When speed is more important than reliability, especially when applications need to stream very small amounts of information quickly (smaller packages of information means less issues with reliability), then UDP is preferred. A lot of real time streaming applications, (e.g. live TV streaming, Voice over IP (VoIP)) prefer UDP over TCP. Since UDP does not need to retransmit lost datagrams, nor does it do any connection setup, there are fewer delays over UDP than TCP. TCP‚Äôs continuous connection is more reliable but has more latency(Êó∂Âª∂).</p>
<hr>
<h3 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h3><p><code>Transactions(‰∫ãÂä°)</code> are atomic units of work for the database to perform as a whole.</p>
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/transaction.JPG" class="">
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/transaction2.JPG" class="">
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/transaction3.JPG" class="">


<p><strong>Transactions capture logical bundles of work.</strong> Work is bundled into transactions, so that in case of system failures, data in your database is still kept in a valid state (by rolling back the entire transaction if any part of it fails). To ensure a database is consistent before and after work is done to it, databases uses atomic transactions, and actions like <code>commits</code> and <code>rollbacks</code> to handle failures appropriately. Transactions are, in other words, <a href="https://www.geeksforgeeks.org/acid-properties-in-dbms/">ACID</a> .</p>
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/bundle-work.JPG" class="">


<h3 id="DBAPIs-and-psycopg2"><a href="#DBAPIs-and-psycopg2" class="headerlink" title="DBAPIs and psycopg2"></a>DBAPIs and psycopg2</h3><h4 id="psql"><a href="#psql" class="headerlink" title="psql"></a>psql</h4><p><code>psql</code> is an interactive terminal application for connecting and interacting with your local postgres server on your machine. It lets you type and execute SQL commands to your database directly.</p>
<p>üêπ If you don‚Äôt like psql, you can use GUI cilent to inspect and interact with your PostgreSQL server.</p>
<hr>
<p>üçÅ <strong>Useful basic psql commands</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># connect</span></span><br><span class="line">$ psql -U postgres</span><br><span class="line"></span><br><span class="line">$ psql &lt;dbname&gt; [&lt;username&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># connection information</span></span><br><span class="line">$ postgres=<span class="comment"># \c </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># connect to a specific db</span></span><br><span class="line">$ postgres=<span class="comment"># \c &lt;dbname&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list all db on the server</span></span><br><span class="line">$ postgres=<span class="comment"># \l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show db tables</span></span><br><span class="line">$ postgres=<span class="comment"># \dt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># describe table schema</span></span><br><span class="line">$ postgres=<span class="comment"># \d &lt;tablename&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># quit psql</span></span><br><span class="line">$ postgres=<span class="comment"># \q</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># helper</span></span><br><span class="line">$ postgres=<span class="comment"># \?</span></span><br></pre></td></tr></table></figure>

<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/psql.JPG" class="">

<hr>
<h4 id="DBAPIs"><a href="#DBAPIs" class="headerlink" title="DBAPIs"></a>DBAPIs</h4><p>We will sometimes want to interact with our database and use its results in a specific programming language. E.g. to build web applications or data pipelines in a specific language (Ruby, Python, Javascript, etc.). That‚Äôs where <code>DBAPIs</code> come in.</p>
<p><code>DBAPI:</code></p>
<ul>
<li>provides a standard interface for one programming language (like Python) to talk to a relational database server;</li>
<li>is a low level library for writing SQL statements that connect to a database;</li>
</ul>
<p>Different DBAPIs exist for different server framework or language + database system. Database adapters define a standard for using a database (with SQL) and using the results of database queries as input data in the given language.</p>
<p>Example: <code>SELCET * FROM &lt;table&gt;</code> will</p>
<ul>
<li>list of rows into an array of objects in Javascript for a NodeJS adapter;</li>
<li>or a list of tuples in Python for a Python adapter</li>
</ul>
<img src="/2021/07/12/Web%20Development/Web-Dev-1-SQL-and-Data-Modeling-I/dbapis.jpg" class="">

<p>In this blog, I will use <code>psycopg2</code> to establish a connection to PostgreSQL server, and interact with it in python.</p>
<h4 id="psycopg2"><a href="#psycopg2" class="headerlink" title="psycopg2"></a>psycopg2</h4><p>Intall psycopg2: <a href="https://pypi.org/project/psycopg2/">ref</a></p>
<p>üåà üåà üåà <strong>Demos:</strong> üåà  üåà  üåà </p>
<ol>
<li>psycopg2:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"></span><br><span class="line">conn = psycopg2.connect(<span class="string">&#x27;dbname=example user=postgres password=xxxxxxxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open a cursor to perform database operations</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># create table</span></span><br><span class="line"><span class="comment"># (note: triple quotes allow multiline text in python)</span></span><br><span class="line">cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  CREATE TABLE table1 (</span></span><br><span class="line"><span class="string">    id INTEGER PRIMARY KEY,</span></span><br><span class="line"><span class="string">    completed BOOLEAN NOT NULL DEFAULT False</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">&#x27;INSERT INTO table1 (id, completed) VALUES (1, true);&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit, so it does the executions on the db and persists in the db</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>psycopg2: string composition</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"></span><br><span class="line">conn = psycopg2.connect(<span class="string">&#x27;dbname=example user=postgres password=xxxxxxxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open a cursor to perform database operations</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Drop table if it already exited</span></span><br><span class="line">cur.execute(<span class="string">&#x27;DROP TABLE IF EXISTS table2;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (re)create table</span></span><br><span class="line"><span class="comment"># (note: triple quotes allow multiline text in python)</span></span><br><span class="line">cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  CREATE TABLE table2 (</span></span><br><span class="line"><span class="string">    id INTEGER PRIMARY KEY,</span></span><br><span class="line"><span class="string">    completed BOOLEAN NOT NULL DEFAULT False</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 ways to compose SQL query using strings:</span></span><br><span class="line"><span class="comment"># 1. use tuple</span></span><br><span class="line">cur.execute(<span class="string">&#x27;INSERT INTO table2 (id, completed) VALUES (%s, %s);&#x27;</span>, (<span class="number">1</span>, <span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. use dictionary</span></span><br><span class="line">SQL = <span class="string">&#x27;INSERT INTO table2 (id, completed) VALUES (%(id)s, %(completed)s);&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="number">2</span>, </span><br><span class="line">    <span class="string">&#x27;completed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">&#125;</span><br><span class="line">cur.execute(SQL, data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit, so it does the executions on the db and persists in the db</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>psycopg2: fetching results</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Establish a connection, starting a session, begins a transaction</span></span><br><span class="line">conn = psycopg2.connect(<span class="string">&#x27;dbname=example user=postgres password=xxxxxxxx&#x27;</span>)</span><br><span class="line"><span class="comment"># Set a cursor to begin executing commands</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open a cursor to perform database operations</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Drop to table if it already exited</span></span><br><span class="line">cur.execute(<span class="string">&#x27;DROP TABLE IF EXISTS table2;&#x27;</span>)</span><br><span class="line"><span class="comment"># cur.rollback()</span></span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  CREATE TABLE table2 (</span></span><br><span class="line"><span class="string">    id INTEGER PRIMARY KEY,</span></span><br><span class="line"><span class="string">    completed BOOLEAN NOT NULL DEFAULT False</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 ways to compose SQL query using strings:</span></span><br><span class="line"><span class="comment"># 1. use tuple</span></span><br><span class="line">cur.execute(<span class="string">&#x27;INSERT INTO table2 (id, completed) VALUES (%s, %s);&#x27;</span>, (<span class="number">1</span>, <span class="literal">True</span>))</span><br><span class="line"><span class="comment"># 2. use dictionary</span></span><br><span class="line">SQL = <span class="string">&#x27;INSERT INTO table2 (id, completed) VALUES (%(id)s, %(completed)s);&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="number">2</span>, </span><br><span class="line">    <span class="string">&#x27;completed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">&#125;</span><br><span class="line">cur.execute(SQL, data)</span><br><span class="line"></span><br><span class="line">cursor.execute(<span class="string">&#x27;SELECT * FROM table2;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line"><span class="comment">## How to fetch the result? ##</span></span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">result = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># --&gt; [(1, True), (2, False)]</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(cursor.fetchmany(<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(cursor.fetchone())  <span class="comment"># fetches the first result in the result sets</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># commit, so it does the executions on the db and persists in the db</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Until now, we have learnt how to use <code>psycopg2 library</code> to interact with a database from Python. </p>
<p>However, writing SQL directly is a fairly clunky way of doing web development. It‚Äôs useful to learn some higher level libraries that let us interact with a database, using Python classes and expressions.</p>
<p>In the next blog, I will talk about one of the most powerful Python libraries for interacting with databases: SQLAlchemy.</p>
]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
</search>
