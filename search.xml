<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>15213(1): Overview</title>
    <url>/2021/07/07/15213-CSAPP/15213-1-Overview/</url>
    <content><![CDATA[<p>This is the lecture note of 15213 - Lecture 1.</p>
<p>You must have used the idea of abstraction many times, such as abstract data types or asymptotic analysis since CS courses emphasize abstraction. </p>
<p>However, abstractions have limits, especially in the presence of bugs. Most of time, in order to fix bugs, you need to understand details of underlying implementations. To help you understand these underlying implementations, we provide this course - <code>15-213: Intro to Computer Systems</code> .</p>
<p>In this course, you will be taught a lot of useful knowledge, skills and tools, which will make you become a more effective programmer. You will understand how programs run, how machines support programs, and will understand why sometimes programs work while sometimes they don‚Äôt. These knowledge is the preparation of later systems courses, such as Compilers, OS, Networks etc. </p>
<span id="more"></span>


<h2 id="Crazy-Reality"><a href="#Crazy-Reality" class="headerlink" title="Crazy Reality"></a>Crazy Reality</h2><p>In this section, we will look at some interesting examples. You will find that they have different results as you thought.</p>
<h3 id="Reality-1-Ints-are-not-Integers-Floats-are-not-Reals"><a href="#Reality-1-Ints-are-not-Integers-Floats-are-not-Reals" class="headerlink" title="Reality #1: Ints are not Integers, Floats are not Reals"></a>Reality #1: Ints are not Integers, Floats are not Reals</h3><img src="/2021/07/07/15213-CSAPP/15213-1-Overview/reality-1.JPG" class="">


<h3 id="Reality-2-You-have-Got-to-Know-Assembly-Ê±áÁºñ"><a href="#Reality-2-You-have-Got-to-Know-Assembly-Ê±áÁºñ" class="headerlink" title="Reality #2: You have Got to Know Assembly(Ê±áÁºñ)"></a>Reality #2: You have Got to Know Assembly(Ê±áÁºñ)</h3><img src="/2021/07/07/15213-CSAPP/15213-1-Overview/reality-2.JPG" class="">

<h3 id="Reality-3-Random-Access-Memory-Is-an-Unphysical-Abstraction"><a href="#Reality-3-Random-Access-Memory-Is-an-Unphysical-Abstraction" class="headerlink" title="Reality #3: Random Access Memory Is an Unphysical Abstraction"></a>Reality #3: Random Access Memory Is an Unphysical Abstraction</h3><ul>
<li>Memory is not unbounded<ul>
<li>It must be allocated and managed</li>
<li>Many applications are memory dominated</li>
</ul>
</li>
<li>Memory referencing bugs especially pernicious<ul>
<li>Effects are distant in both time and space</li>
</ul>
</li>
<li>Memory performance is not uniform<ul>
<li>Cache and virtual memory effects can greatly affect program performance</li>
<li>Adapting program to characteristics of memory system can lead to major speed improvements</li>
</ul>
</li>
</ul>
<p>Let‚Äôs see an example of Memory Referencing Bug.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> a[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">double</span> d;</span><br><span class="line">&#125; <span class="keyword">struct_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">struct_t</span> s;</span><br><span class="line">  s.d = <span class="number">3.14</span>;</span><br><span class="line">  s.a[i] = <span class="number">1073741824</span>; <span class="comment">/* Possibly out of bounds */</span></span><br><span class="line">  <span class="keyword">return</span> s.d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fun(0) =&gt; 	3.14</span></span><br><span class="line"><span class="comment">// fun(1) =&gt; 	3.14</span></span><br><span class="line"><span class="comment">// fun(2) =&gt; 	3.1399998664856</span></span><br><span class="line"><span class="comment">// fun(3) =&gt; 	2.00000061035156</span></span><br><span class="line"><span class="comment">// fun(4) =&gt; 	3.14</span></span><br><span class="line"><span class="comment">// fun(6) =&gt; 	Segmentation fault</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// * Result is system specific</span></span><br></pre></td></tr></table></figure>

<p>Explanation:</p>
<img src="/2021/07/07/15213-CSAPP/15213-1-Overview/reality-3.JPG" class="">

<p>C/C++ do not provide any memory protection, so you can access memory at will. And sometimes, this will lead nasty bugs because of out of bounds array references, invalid pointer values, or abuses of malloc/free etc. Whether or not bug jumps out depends on your system and compiler, sometimes, effect of bug may be first observed long after it is generated.</p>
<p>To deal with this problem, you can 1) choose another programming language; 2) use or develop tools to detect referencing errors (e.g. Valgrind)</p>
<h3 id="Reality-4-There‚Äôs-more-to-performance-than-asymptotic-complexity"><a href="#Reality-4-There‚Äôs-more-to-performance-than-asymptotic-complexity" class="headerlink" title="Reality #4: There‚Äôs more to performance than asymptotic complexity"></a>Reality #4: There‚Äôs more to performance than asymptotic complexity</h3><p>In asymptotic analysis, constant factors have been ignored.</p>
<p>However, Constant factors matter too! And even exact operation count does not predict performance. Depending on how code written, performance will vary in a large range. Let‚Äôs look at an example.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyij</span><span class="params">(<span class="keyword">int</span> src[<span class="number">2048</span>][<span class="number">2048</span>], <span class="keyword">int</span> dst[<span class="number">2048</span>][<span class="number">2048</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2048</span>; j++)</span><br><span class="line">            dst[i][j] = src[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runtime cost: 4.3ms</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyji</span><span class="params">(<span class="keyword">int</span> src[<span class="number">2048</span>][<span class="number">2048</span>], <span class="keyword">int</span> dst[<span class="number">2048</span>][<span class="number">2048</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">2048</span>; j++)</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2048</span>; i++)</span><br><span class="line">            dst[i][j] = src[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runtime cost: 81.8ms</span></span><br></pre></td></tr></table></figure>

<p>Two code snippests do the same thing. However, their performance are very different. This is in connection with hierarchical memory organization.</p>
<img src="/2021/07/07/15213-CSAPP/15213-1-Overview/reality-4.JPG" class="">

<p>In reality, to optimize the code, you must optimize at multiple levels: <code>algorithm</code>, <code>data representations</code>, <code>procedures</code>, and <code>loops</code> .To do this, you must understand system:</p>
<ul>
<li>How programs compiled and executed</li>
<li>How to measure program performance and identify bottlenecks</li>
<li>How to improve performance without destroying code modularity and generality</li>
</ul>
<h3 id="Reality-5-Computers-do-more-than-execute-programs"><a href="#Reality-5-Computers-do-more-than-execute-programs" class="headerlink" title="Reality #5: Computers do more than execute programs"></a>Reality #5: Computers do more than execute programs</h3><img src="/2021/07/07/15213-CSAPP/15213-1-Overview/reality-5.JPG" class="">

<p>This course will covers these topics as well.</p>
<ul>
<li>Of course, you need to learn a specific course if you want to be topic-centric, but this course can serve as a good prerequiste.</li>
</ul>
<img src="/2021/07/07/15213-CSAPP/15213-1-Overview/role.JPG" class="">


<h2 id="Labs"><a href="#Labs" class="headerlink" title="Labs"></a>Labs</h2><p>Labs are the heart of this course. There are 7 labs.</p>
<hr>
<p><strong>Part I. Programs and Data</strong></p>
<p>üåª topics:</p>
<ul>
<li>Bits operations, arithmetic, assembly language programs</li>
<li>Representation of C control and data structures</li>
<li>Includes aspects of architecture and compilers </li>
</ul>
<p>üë©‚Äçüíª labs:</p>
<ul>
<li>L1 (datalab): Manipulating bits</li>
<li>L2 (bomblab): Defusing a binary bomb</li>
<li>L3 (attacklab): The basics of code injection attacks</li>
</ul>
<hr>
<p><strong>Part II. The Memory Hierarchy</strong></p>
<p>üåª topics:</p>
<ul>
<li>Memory technology, memory hierarchy, caches, disks, locality</li>
<li>Includes aspects of architecture and OS</li>
</ul>
<p>üë©‚Äçüíª labs:</p>
<ul>
<li>L4 (cachelab): Building a cache simulator and optimizing for locality.<br>Learn how to exploit locality in your programs. </li>
</ul>
<hr>
<p><strong>Part III. Exceptional  Control Flow</strong></p>
<p>üåª topics:</p>
<ul>
<li>Hardware exceptions, processes, process control, Unix signals, nonlocal jumps</li>
<li>Includes aspects of compilers, OS, and architecture</li>
</ul>
<p>üë©‚Äçüíª labs:</p>
<ul>
<li>L5 (tshlab): Writing your own Unix shell.<br>A first introduction to concurrency</li>
</ul>
<hr>
<p><strong>Part IV. Virtual Memory</strong></p>
<p>üåª topics:</p>
<ul>
<li>Virtual memory, address translation, dynamic storage allocation</li>
<li>Includes aspects of architecture and OS</li>
</ul>
<p>üë©‚Äçüíª labs:</p>
<ul>
<li>L6 (malloclab): Writing your own malloc package. <ul>
<li>Get a real feel for systems-level programming</li>
</ul>
</li>
</ul>
<hr>
<p><strong>Part V. Networking, and Concurrency</strong></p>
<p>üåª topics:</p>
<ul>
<li>High level and low-level I/O, network programming</li>
<li>Internet services, Web servers</li>
<li>concurrency, concurrent server design, threads</li>
<li>I/O multiplexing with select</li>
<li>Includes aspects of networking, OS, and architecture</li>
</ul>
<p>üë©‚Äçüíª labs:</p>
<ul>
<li>L7 (proxylab): Writing your own Web proxy.<ul>
<li>Learn network programming and more about concurrency and synchronization. </li>
</ul>
</li>
</ul>
<h2 id="Reminder"><a href="#Reminder" class="headerlink" title="Reminder"></a>Reminder</h2><p>üìö Do not forget to read the textbook! You should read chapter 1.</p>
]]></content>
      <categories>
        <category>15213-Intro to Computer Systems</category>
      </categories>
      <tags>
        <tag>15213</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/06/22/Blog/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><span id="more"></span>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>ÊïôÁ®ãÔºö‰ΩøÁî®GithubÂíåHexoÊê≠Âª∫‰∏™‰∫∫ÂçöÂÆ¢</title>
    <url>/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/</url>
    <content><![CDATA[<h2 id="ÂâçË®Ä"><a href="#ÂâçË®Ä" class="headerlink" title="ÂâçË®Ä"></a>ÂâçË®Ä</h2><p>Âú®ËøôÁØáÂçöÂÆ¢ÈáåÔºåÊàëËØ¶ÁªÜËÆ∞ÂΩï‰∫ÜËá™Â∑±‰ΩøÁî® <code>Github + Hexo</code> Êê≠Âª∫‰∏™‰∫∫ÂçöÂÆ¢ÁöÑÂÖ®ËøáÁ®ãÔºå‰ª•ÂèäËá™Â∑±ÈÅáÂà∞ÁöÑÈóÆÈ¢òÁöÑËß£ÂÜ≥ÊñπÊ°àÔºåÂ∏åÊúõÂèØ‰ª•Â∏ÆÂà∞Ê≠£Âú®ÈòÖËØªËØ•ÂçöÊñáÁöÑ‰Ω†„ÄÇüòÄ</p>
<p>Â¶ÇÊûú‰Ω†Êúâ‰ªª‰ΩïÈóÆÈ¢òÔºåÊ¨¢ËøéÂú®ÁïôË®ÄÊùøÈáåÂÜô‰∏ã‰Ω†ÁöÑÈóÆÈ¢ò„ÄÇ</p>
<span id="more"></span>

<h2 id="ÂºÄÂßã‰πãÂâç"><a href="#ÂºÄÂßã‰πãÂâç" class="headerlink" title="ÂºÄÂßã‰πãÂâç"></a>ÂºÄÂßã‰πãÂâç</h2><p>Âú®ÂºÄÂßãÊê≠Âª∫ÂçöÂÆ¢‰πãÂâçÔºåËØ∑ÂÖàÁ°ÆËÆ§‰Ω†ÊòØÂê¶ÂÆåÊàê‰∫Ü‰ª•‰∏ãÁöÑÂáÜÂ§áÂ∑•‰ΩúÔºö</p>
<ul>
<li>Êã•Êúâ<strong>Github</strong>Ë¥¶Âè∑Ôºõ</li>
<li>ÂÆâË£Ö‰∫Ü<strong>node.js„ÄÅnpm</strong>;</li>
<li>ÂÆâË£Ö‰∫Ü<strong>git</strong> (git for macOS/Windows/Linux/Unix);</li>
</ul>
<h3 id="1-Github"><a href="#1-Github" class="headerlink" title="1. Github"></a>1. Github</h3><p>ËøõÂÖ•<a href="https://github.com/">GithubÂÆòÁΩë</a>Ê≥®ÂÜåÔºåËØ∑ËÆ∞‰Ωè‰Ω†Ê≥®ÂÜåÊó∂‰ΩøÁî®ÁöÑË¥¶Âè∑ÂíåÈÇÆÁÆ±„ÄÇ</p>
<h3 id="2-node-js-amp-npm"><a href="#2-node-js-amp-npm" class="headerlink" title="2. node.js &amp; npm"></a>2. node.js &amp; npm</h3><p>ËøõÂÖ•<a href="https://nodejs.org/en/download/">NodeÂÆòÁΩë</a>‰∏ãËΩΩ‰∏é‰Ω†Ê≠£Âú®‰ΩøÁî®ÁöÑÊìç‰ΩúÁ≥ªÁªüÁõ∏ÂØπÂ∫îÁöÑÁâàÊú¨ÔºåÂπ∂ÂÆâË£Ö„ÄÇÂÆâË£ÖÊàêÂäüÂêéÔºåÊâìÂºÄ <code>terminal(macOS/Linux)„ÄÅCMD/Powershell(Windows)Á≠â</code>, ËæìÂÖ•‰ª•‰∏ãÂëΩ‰ª§Ê£ÄÊü•ÊòØÂê¶ÂÆâË£ÖÊàêÂäü„ÄÇ</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node --version  <span class="comment"># Êü•ÁúãnodeÁâàÊú¨Âè∑</span></span><br><span class="line">$ npm --version  <span class="comment"># Êü•ÁúãnpmÁâàÊú¨Âè∑</span></span><br></pre></td></tr></table></figure>

<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/1.JPG" class="">

<p>‚ùó Â¶ÇÊûúÊòØWindowsÁ≥ªÁªüÔºåËØ∑Âä°ÂøÖÂ∞ÜË∑ØÂæÑÊ≠£Á°ÆÊ∑ªÂä†Âà∞ <code>PATH</code> ÁéØÂ¢ÉÂèòÈáè‰∏≠„ÄÇ</p>
<h3 id="3-Git"><a href="#3-Git" class="headerlink" title="3. Git"></a>3. Git</h3><p>ËøõÂÖ•<a href="https://git-scm.com/">GitÂÆòÁΩë</a>‰∏ãËΩΩ„ÄÅÂÆâË£ÖÊúÄÊñ∞ÁâàÊú¨ÁöÑGit„ÄÇ</p>
<p>Â¶ÇÊûú‰Ω†ÂØπÂÆâË£ÖGitÊÑüÂà∞‰∏çÂÆâÔºåÂèØ‰ª•ÂèÇËÄÉ‰∏ãÈù¢ÁöÑÈìæÊé•„ÄÇ</p>
<ul>
<li>Linux: <a href="https://sp21.datastructur.es/materials/lab/lab1setup/linux.html">Link</a></li>
<li>maxOS: <a href="https://sp21.datastructur.es/materials/lab/lab1setup/mac.html">Link</a></li>
<li>WindowsÔºö<a href="https://sp21.datastructur.es/materials/lab/lab1setup/windows.html#b-install-git">Link</a></li>
</ul>
<hr>
<p>PS: Â¶ÇÊûú‰Ω†‰ΩøÁî®WindowsÁ≥ªÁªüÔºåÂº∫ÁÉàÂª∫ËÆÆ‰Ω†ÂÆâË£Ö <code>Windows Terminal</code> , ÂÆâË£ÖÊñπÊ≥ïÂèØ‰ª•ÂèÇËÄÉ‰∏äËø∞WindowsÈìæÊé•ÁöÑPart C.</p>
<hr>
<p>Âú®ÁªàÁ´ØËæìÂÖ• <code>git --version</code> Ê£ÄÊü•ÊòØÂê¶ÂÆâË£ÖÊàêÂäü„ÄÇ</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/2.JPG" class="">

<ul>
<li>ÂèØÈÄâÊìç‰Ωú(ÈùûÂøÖÈ°ª)Ôºö</li>
</ul>
<p>Âú®ÁªàÁ´ØËæìÂÖ•Â¶Ç‰∏ãÂëΩ‰ª§Êù•ËÆæÁΩÆÁî®Êà∑ÂêçÂíåÈÇÆÁÆ±„ÄÇ</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;user_name&quot;</span> <span class="comment"># user_nameÂ°´ÂÖ•GitHubÁî®Êà∑Âêç</span></span><br><span class="line"></span><br><span class="line">$ git config --global user.email <span class="string">&quot;user_email&quot;</span> <span class="comment"># user_emailÂ°´ÂÖ•GitHubÊ≥®ÂÜåÁöÑÈÇÆÁÆ±</span></span><br></pre></td></tr></table></figure>

<p>Êü•ÁúãÂ∑≤ËÆæÁΩÆÁöÑÁî®Êà∑ÂêçÂíåÈÇÆÁÆ±Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line"></span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure>

<h2 id="Êê≠Âª∫GithubÂçöÂÆ¢"><a href="#Êê≠Âª∫GithubÂçöÂÆ¢" class="headerlink" title="Êê≠Âª∫GithubÂçöÂÆ¢"></a>Êê≠Âª∫GithubÂçöÂÆ¢</h2><h3 id="1-ÂàõÂª∫‰ªìÂ∫ì"><a href="#1-ÂàõÂª∫‰ªìÂ∫ì" class="headerlink" title="1. ÂàõÂª∫‰ªìÂ∫ì"></a>1. ÂàõÂª∫‰ªìÂ∫ì</h3><p>ÁôªÂΩïGithubÔºåÊñ∞ÂàõÂª∫‰∏Ä‰∏™‰ªìÂ∫ì„ÄÇ‰ªìÂ∫ìÂêç‰∏∫Ôºö<code>username.github.io</code> ÔºåÂÖ∂‰ªñÁöÑ‰∏∫ÈªòËÆ§ÈÄâÈ°πÂç≥ÂèØ„ÄÇ</p>
<p>‚ùó ‰∏ÄÂÆöÊòØusernameËÄå‰∏çÊòØname„ÄÇ</p>
<h3 id="2-ÈÖçÁΩÆSSH-key"><a href="#2-ÈÖçÁΩÆSSH-key" class="headerlink" title="2. ÈÖçÁΩÆSSH key"></a>2. ÈÖçÁΩÆSSH key</h3><p>ÊâìÂºÄ terminal/Git BashÁ≠â, ËæìÂÖ•‰ª•‰∏ãÂëΩ‰ª§Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;user.email&quot;</span> <span class="comment"># user.email‰∏∫GitHub‰∏äÊ≥®ÂÜåÁöÑÈÇÆÁÆ±</span></span><br></pre></td></tr></table></figure>

<p>ÈªòËÆ§‰∏çÈúÄË¶ÅËÆæÁΩÆÂØÜÁ†ÅÔºåËøûÁª≠ÊåâÂõûËΩ¶ÈîÆÂç≥ÂèØ„ÄÇÁªìÊùüÂêéÔºåÊâìÂºÄÁî®Êà∑‰∏ªÁõÆÂΩïÊü•ÁúãÊòØÂê¶ÊàêÂäüÁîüÊàê‰∫Ü<strong>ssh-key</strong>„ÄÇ</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Áî®Êà∑‰∏ªÁõÆÂΩïÊâÄÂú®‰ΩçÁΩÆÔºö</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> macOS/Linux: ~/.ssh</span><br><span class="line"><span class="bullet">-</span> Windows: C:\Users\<span class="xml"><span class="tag">&lt;<span class="name">XX</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/3.JPG" class="">

<p>ËøõÂÖ• <code>.ssh</code> Êñá‰ª∂Â§πÔºå‰Ω†‰ºöÁúãÂà∞‰∏äËø∞Êìç‰Ωú‰∏∫Êàë‰ª¨ÁîüÊàê‰∫Ü‰∏Ä‰∏™keyÔºåÂåÖÊã¨‰∏Ä‰∏™Âêç‰∏∫ <code>id_rsa.pub</code> ÁöÑÂÖ¨Èí•ÔºåÂíå‰∏Ä‰∏™Âêç‰∏∫ <code>id_rsa</code> ÁöÑÁßÅÈí•„ÄÇ(‚ö†Ô∏èÊ≥®ÊÑèÔºöÁßÅÈí•Áªù‰∏çÂèØ‰ª•Ê≥ÑÈú≤ÔºåËÄåÂÖ¨Èí•ÂèØ‰ª•ÊîæÂøÉÂëäËØâÂà´‰∫∫„ÄÇ)</p>
<p>ÊâìÂºÄ<a href="https://github.com/settings/keys">SSH and GPG keys</a>ÔºåÁÇπÂáª <code>new SSH Key</code> Ôºå‰Ω†Â∞Ü‰ºöÁúãÂà∞Â¶Ç‰∏ãÁ™óÂè£Ôºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/4.jpg" class="">

<p>ÂÖ∂‰∏≠ <code>Title</code> ‰∏∫Ê†áÈ¢òÔºåÂèØ‰ª•ÈöèÊÑèÂ°´ÂÜô„ÄÇÂ∞ÜÂàöÊâçÁîüÊàêÁöÑÂÖ¨Èí• <code>id_rsa.pub</code> ‰∏≠ÁöÑÂÜÖÂÆπÂ§çÂà∂Âà∞KeyÁ™óÂè£‰∏≠ÔºåÊúÄÂêéÁÇπÂáª <code>Add SSH key</code>„ÄÇ</p>
<p>Âú®ÁªàÁ´ØËæìÂÖ•Â¶Ç‰∏ãÂëΩ‰ª§‰ª•Ê£ÄÊü•GithubÂÖ¨Èí•ËÆæÁΩÆÊòØÂê¶ÊàêÂäüÔºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># Â¶ÇÊûú‰Ω†ÁúãÂà∞Á±ª‰ººÂ¶Ç‰∏ãÁöÑ‰ø°ÊÅØÔºåÂàôËØ¥ÊòéËÆæÁΩÆÊàêÂäü„ÄÇ</span></span><br><span class="line"></span><br><span class="line">Hi XXX! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p><strong>Ë°•ÂÖÖ</strong>ÔºöÂÖ≥‰∫éÈÖçÁΩÆSSHÁöÑÁî®ÈÄîÔºåÂèØ‰ª•ÂèÇËÄÉ<a href="https://segmentfault.com/a/1190000008509620">ËøôÁØáÊñáÁ´†</a></p>
<h2 id="‰ΩøÁî®HexoÂçöÂÆ¢Ê°ÜÊû∂"><a href="#‰ΩøÁî®HexoÂçöÂÆ¢Ê°ÜÊû∂" class="headerlink" title="‰ΩøÁî®HexoÂçöÂÆ¢Ê°ÜÊû∂"></a>‰ΩøÁî®HexoÂçöÂÆ¢Ê°ÜÊû∂</h2><h3 id="1-‰ªÄ‰πàÊòØHexo"><a href="#1-‰ªÄ‰πàÊòØHexo" class="headerlink" title="1. ‰ªÄ‰πàÊòØHexo"></a>1. ‰ªÄ‰πàÊòØHexo</h3><p><code>Hexo</code> ÊòØ‰∏Ä‰∏™ÁÆÄÂçï„ÄÅÂø´ÈÄü„ÄÅÂº∫Â§ßÁöÑÂü∫‰∫é <code>Github Pages</code> ÁöÑÂçöÂÆ¢Ê°ÜÊû∂ÔºåÊîØÊåÅ <code>Markdown</code> Ê†ºÂºèÔºåÊúâ‰ºóÂ§ö‰ºòÁßÄÊèí‰ª∂Âíå‰∏ªÈ¢ò„ÄÇ</p>
<p><strong>ÈìæÊé•Ôºö</strong><a href="https://hexo.io/zh-cn/docs/">ÂÆòÊñπÊñáÊ°£</a></p>
<h3 id="2-‰∏∫‰ªÄ‰πàË¶ÅÁî®Hexo"><a href="#2-‰∏∫‰ªÄ‰πàË¶ÅÁî®Hexo" class="headerlink" title="2. ‰∏∫‰ªÄ‰πàË¶ÅÁî®Hexo"></a>2. ‰∏∫‰ªÄ‰πàË¶ÅÁî®Hexo</h3><p>Áî±‰∫é <code>Github Pages</code> Â≠òÊîæÁöÑÈÉΩÊòØÈùôÊÄÅÊñá‰ª∂ÔºåÂçöÂÆ¢Â≠òÊîæÁöÑ‰∏çÂè™ÊòØÊñáÁ´†ÂÜÖÂÆπÔºåËøòÊúâÊñáÁ´†ÂàóË°®„ÄÅÂàÜÁ±ª„ÄÅÊ†áÁ≠æ„ÄÅÁøªÈ°µÁ≠âÂä®ÊÄÅÂÜÖÂÆπÔºåÂÅáÂ¶ÇÊØèÊ¨°ÂÜôÂÆå‰∏ÄÁØáÊñáÁ´†ÈÉΩË¶ÅÊâãÂä®Êõ¥Êñ∞ÂçöÊñáÁõÆÂΩïÂíåÁõ∏ÂÖ≥ÈìæÊé•‰ø°ÊÅØÔºåÁõ∏‰ø°Ë∞ÅÈÉΩ‰ºöÁñØÊéâÔºåÊâÄ‰ª• <code>Hexo</code> ÊâÄÂÅöÁöÑÂ∞±ÊòØÂ∞ÜËøô‰∫õ <code>.md</code> Êñá‰ª∂ÈÉΩÊîæÂú®Êú¨Âú∞ÔºåÊØèÊ¨°ÂÜôÂÆåÊñáÁ´†ÂêéË∞ÉÁî®ÂÜôÂ•ΩÁöÑÂëΩ‰ª§Êù•ÊâπÈáèÂÆåÊàêÁõ∏ÂÖ≥È°µÈù¢ÁöÑÁîüÊàêÔºåÁÑ∂ÂêéÂÜçÂ∞ÜÊúâÊîπÂä®ÁöÑÈ°µÈù¢Êèê‰∫§Âà∞ <code>GitHub</code> „ÄÇ</p>
<h3 id="3-ÂÆâË£Ö‰∏éÈÖçÁΩÆ"><a href="#3-ÂÆâË£Ö‰∏éÈÖçÁΩÆ" class="headerlink" title="3. ÂÆâË£Ö‰∏éÈÖçÁΩÆ"></a>3. ÂÆâË£Ö‰∏éÈÖçÁΩÆ</h3><p>ËØ¥ÊòéÔºöÊàë‰ΩøÁî®ÁöÑÊòØWindowsÊìç‰ΩúÁ≥ªÁªüÔºåÊâÄÊúâÁöÑÂëΩ‰ª§ÊàëÈÉΩÊòØÂú® <code>Windows Terminal</code> ‰∏≠ÁöÑ <code>bash shell</code> ‰∏≠ÂÆåÊàêÁöÑÔºåÊ≤°ÊúâÈÅáÂà∞‰ªª‰ΩïÈóÆÈ¢ò„ÄÇ</p>
<p>Ê†πÊçÆÁΩë‰∏äÁöÑÁªèÈ™åÔºåÂ¶ÇÊûú‰Ω†‰ΩøÁî® <code>git bash</code> , ÈÇ£‰πàÂú®hexoÂàùÂßãÂåñÁöÑËøáÁ®ã‰∏≠‰Ω†ÂèØËÉΩ‰ºöÈÅáÂà∞ <code>node_modules</code> Êñá‰ª∂Â§πÊó†Ê≥ïÁîüÊàêÁöÑÈóÆÈ¢òÔºåÂèØ‰ª•ÈÖçÂêà <code>cmd</code> Ëß£ÂÜ≥ËØ•ÈóÆÈ¢ò(ÂêéÈù¢‰ºöËØ¥Êòé)„ÄÇ</p>
<h4 id="1-ÂÆâË£Ö‰∏éÂàùÂßãÂåñ"><a href="#1-ÂÆâË£Ö‰∏éÂàùÂßãÂåñ" class="headerlink" title="1. ÂÆâË£Ö‰∏éÂàùÂßãÂåñ"></a>1. ÂÆâË£Ö‰∏éÂàùÂßãÂåñ</h4><p>ËæìÂÖ•‰ª•‰∏ãÂëΩ‰ª§Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli <span class="comment"># ËØ•ÂëΩ‰ª§ÂÆåÊàêhexoÁöÑÂÆâË£Ö</span></span><br></pre></td></tr></table></figure>

<p>ÂÆâË£ÖÂÆåÊàêÂêéÔºåËØ∑Ê†πÊçÆ‰∏™‰∫∫ÂñúÂ•ΩÂú®ËÆ°ÁÆóÊú∫ÂÜÖÂàõÂª∫‰∏Ä‰∏™Á©∫Êñá‰ª∂Â§πÔºà‰∏çÈôêÂà∂ÂêçÁß∞ÔºâÔºåÁî®‰∫éÂ≠òÊîæÂçöÂÆ¢ÂÜÖÁöÑÊâÄÊúâÂÜÖÂÆπÂíåÁ¥†Êùê„ÄÇ</p>
<p>‰ΩøÁî®ÂëΩ‰ª§Ë°åËøõÂÖ•ÂàöÊâçÂàõÂª∫ÁöÑÊñá‰ª∂Â§πÂÜÖÔºåËæìÂÖ•Â¶Ç‰∏ãÂëΩ‰ª§Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init <span class="comment"># ËØ•ÂëΩ‰ª§ÂÆåÊàêhexoÂú®Êú¨Âú∞ÂçöÂÆ¢ÁõÆÂΩïÁöÑÂàùÂßãÂåñ</span></span><br></pre></td></tr></table></figure>

<p>ÂÆåÊàêÂêéËØ∑Ê£ÄÊü•Êñá‰ª∂Â§πÂÜÖÁöÑÂÜÖÂÆπÔºåÂ¶Ç‰∏ãÂõæÔºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/5.jpg" class="">


<hr>
<p>Â¶ÇÊûú‰Ω†‰ΩøÁî®ÁöÑÊòØ <code>git bash</code> ÔºåÂπ∂‰∏îÈÅáÂà∞‰∫Ü <code>node_modules</code> Êñá‰ª∂Â§πÊó†Ê≥ïÁîüÊàêÁöÑÈóÆÈ¢òÔºåÂèØ‰ª•ÂèÇËÄÉ‰ª•‰∏ãËß£ÂÜ≥ÊñπÊ°à„ÄÇ</p>
<p>‚ùó Ê≥®ÊÑèÔºöÂõ†‰∏∫ÊàëÂπ∂Ê≤°ÊúâÈÅáÂà∞Ëøô‰∏™ÈóÆÈ¢òÔºåÊâÄ‰ª•Êó†Ê≥ï‰øùËØÅËØ•Ëß£ÂÜ≥ÊñπÊ°à‰∏ÄÂÆöÊúâÊïà„ÄÇ‰ªÖ‰æõÂèÇËÄÉ„ÄÇ</p>
<p>‰∫ßÁîüËØ•ÈóÆÈ¢òÁöÑÂéüÂõ†‰∏∫ÔºåÂú®Ëá™Â∑±ÁöÑÂçöÂÆ¢Êñá‰ª∂Â§π‰∏≠ <code>.gitignore</code> Êñá‰ª∂‰∏≠Ê∑ªÂä†‰∫Ü <code>node_modules/</code> ÔºåÂØºËá¥Êõ¥Êñ∞ÁöÑÊó∂ÂÄôÔºåËøô‰∏™Êñá‰ª∂Â§πË¢´ÂøΩÁï•ÔºåÊ≤°ÊúâË¢´Êõ¥Êñ∞‰∏äÂéª„ÄÇ</p>
<p>Ëß£ÂÜ≥ÊñπÊ°àÔºö</p>
<ol>
<li>cmdËøõÂÖ•ÂçöÂÆ¢ÂΩìÂâçÊñá‰ª∂Â§πË∑ØÂæÑ</li>
<li>ÊâßË°å npm install</li>
<li>ÊâßË°å hexo server</li>
</ol>
<hr>
<h4 id="2-ÁîüÊàêÈùôÊÄÅÊñá‰ª∂"><a href="#2-ÁîüÊàêÈùôÊÄÅÊñá‰ª∂" class="headerlink" title="2. ÁîüÊàêÈùôÊÄÅÊñá‰ª∂"></a>2. ÁîüÊàêÈùôÊÄÅÊñá‰ª∂</h4><p>Âú®ÁªàÁ´ØËæìÂÖ•ÂëΩ‰ª§Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g <span class="comment"># ÁîüÊàêÈùôÊÄÅÊñá‰ª∂</span></span><br></pre></td></tr></table></figure>

<p>ÊâßË°å‰ª•‰∏äÂëΩ‰ª§‰πãÂêéÔºåHexo Â∞±‰ºöÂú® <code>public</code> Êñá‰ª∂Â§πÁîüÊàêÁõ∏ÂÖ≥ <code>HTML</code> Êñá‰ª∂ÔºåËøô‰∫õÊñá‰ª∂Âú®‰πãÂêé‰ºöË¢´Êèê‰∫§Âà∞ GitHub ‰∏ä <code>username.github.io</code> ÁöÑ‰ªìÂ∫ì‰∏≠„ÄÇ</p>
<h4 id="3-Êú¨Âú∞È¢ÑËßà"><a href="#3-Êú¨Âú∞È¢ÑËßà" class="headerlink" title="3. Êú¨Âú∞È¢ÑËßà"></a>3. Êú¨Âú∞È¢ÑËßà</h4><p>ËæìÂÖ•‰ª•‰∏ãÂëΩ‰ª§Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s <span class="comment"># ÂºÄÂêØÊú¨Âú∞È¢ÑËßà</span></span><br></pre></td></tr></table></figure>

<p>Êú¨Âú∞È¢ÑËßàÊúçÂä°ÂºÄÂêØÂêéÔºåÊâìÂºÄÊµèËßàÂô®ËÆøÈóÆ <code>http://localhost:4000</code> ÊàñÁõ¥Êé•ÁÇπÂáªÁªàÁ´ØÁöÑÈìæÊé•Âç≥ÂèØ„ÄÇ‰Ω†Â∫îËØ•ÂèØ‰ª•ÁúãÂà∞Â¶Ç‰∏ãÁöÑÈ°µÈù¢Ôºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/6.jpg" class="">



<p>ÈÄöËøáÊú¨Âú∞È¢ÑËßàÔºå‰Ω†ÂèØ‰ª•ÂÆûÊó∂Êü•ÁúãÂçöÂÆ¢ÁöÑÁºñËæëÊÉÖÂÜµÔºåÁ≠âÂçöÂÆ¢ÂÆåÊàêÂêéÂÜçÈÉ®ÁΩ≤Âà∞ <code>GitHub</code> ‰∏ä„ÄÇ</p>
<h3 id="4-‰∏ä‰º†Âà∞Github"><a href="#4-‰∏ä‰º†Âà∞Github" class="headerlink" title="4. ‰∏ä‰º†Âà∞Github"></a>4. ‰∏ä‰º†Âà∞Github</h3><h4 id="1-ÈÖçÁΩÆÁ´ôÁÇπÈÖçÁΩÆÊñá‰ª∂"><a href="#1-ÈÖçÁΩÆÁ´ôÁÇπÈÖçÁΩÆÊñá‰ª∂" class="headerlink" title="1. ÈÖçÁΩÆÁ´ôÁÇπÈÖçÁΩÆÊñá‰ª∂"></a>1. ÈÖçÁΩÆÁ´ôÁÇπÈÖçÁΩÆÊñá‰ª∂</h4><p>hexo Êúâ2Áßç <code>_config.yml</code> Êñá‰ª∂Ôºå‰∏Ä‰∏™ÊòØÊ†πÁõÆÂΩï‰∏ãÁöÑÂÖ®Â±ÄÁöÑ <code>_config.yml</code> ,Âú®ÂçöÂÆ¢Êñá‰ª∂Â§πÁöÑÊ†πÁõÆÂΩï‰∏ãÔºõÂè¶‰∏Ä‰∏™ÊòØÂêÑ‰∏™‰∏ªÈ¢ò <code>theme</code> ‰∏ãÁöÑ <code>_config.yml</code> „ÄÇÂâçËÄÖË¢´Áß∞‰∏∫<strong>Á´ôÁÇπÈÖçÁΩÆÊñá‰ª∂</strong>Ôºå ÂêéËÄÖË¢´Áß∞‰∏∫<strong>‰∏ªÈ¢òÈÖçÁΩÆÊñá‰ª∂</strong>„ÄÇ</p>
<p>ÊâìÂºÄ(Êé®ËçêÁî® <code>VS Code</code> )Ê†πÁõÆÂΩï‰∏ãÁ´ôÁÇπÈÖçÁΩÆÊñá‰ª∂ <code>_config.yml</code> ÔºåÈÖçÁΩÆÊúâÂÖ≥ <code>deploy</code> ÁöÑÈÉ®ÂàÜÔºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/7.JPG" class="">


<h4 id="2-ÂÆâË£ÖÈÉ®ÁΩ≤Êèí‰ª∂"><a href="#2-ÂÆâË£ÖÈÉ®ÁΩ≤Êèí‰ª∂" class="headerlink" title="2. ÂÆâË£ÖÈÉ®ÁΩ≤Êèí‰ª∂"></a>2. ÂÆâË£ÖÈÉ®ÁΩ≤Êèí‰ª∂</h4><p>Âú®ÁªàÁ´ØËæìÂÖ•‰ª•‰∏ãÂëΩ‰ª§Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save <span class="comment"># ÂÆâË£ÖÈÉ®ÁΩ≤Êèí‰ª∂</span></span><br></pre></td></tr></table></figure>

<p>Â¶ÇÊûú‰∏çËøõË°å‰∏äËø∞Êìç‰ΩúÔºåÁõ¥Êé•‰ΩøÁî® <code>hexo d</code> ÈÉ®ÁΩ≤Âà∞ <code>GitHub</code>ÔºåÂ∞Ü‰ºöÊä•Èîô„ÄÇ</p>
<h4 id="3-ÈÉ®ÁΩ≤Âà∞-GitHub"><a href="#3-ÈÉ®ÁΩ≤Âà∞-GitHub" class="headerlink" title="3. ÈÉ®ÁΩ≤Âà∞ GitHub"></a>3. ÈÉ®ÁΩ≤Âà∞ GitHub</h4><p>ËæìÂÖ•‰ª•‰∏ãÂëΩ‰ª§Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p>PS: ÂØπ‰∫éWindowsÁî®Êà∑Ôºå‰∏çË¶ÅÂú® <code>cmd</code> ‰∏≠ËæìÂÖ•ËØ•ÂëΩ‰ª§„ÄÇËØ∑‰ΩøÁî® <code>git bash</code> or <code>bash shell</code> ÔºåÂê¶Âàô‰ºöÊèêÁ§∫ <code>Permission denied (publickey)</code> „ÄÇ</p>
<p>ÈÉ®ÁΩ≤ÊàêÂäüÂêéÔºåÂú®ÊµèËßàÂô®ËæìÂÖ• <code>https://&lt;username&gt;.github.io/</code> ÔºåÂ¶ÇÊûúÂá∫Áé∞‰∏ãÂõæÔºåÂàôË°®Á§∫ÈÉ®ÁΩ≤ÊàêÂäü„ÄÇ</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/8.jpg" class="">

<p>Âà∞Ê≠§ÔºåÊàë‰ª¨Â∞±ÂÆåÊàê‰∫ÜÂçöÂÆ¢ÁöÑÊê≠Âª∫Â∑•‰ΩúÔºåÂâ©‰∏ãÁöÑÂ∞±ÊòØÂ≠¶‰π†Â¶Ç‰ΩïÂÜôÂçöÂÆ¢ÔºåÂ¶Ç‰ΩïÂ¢ûÊ∑ª‰Ω†ÊÉ≥Ë¶ÅÁöÑÂäüËÉΩÔºå‰ª•ÂèäÂ¶Ç‰ΩïÁæéÂåñÂçöÂÆ¢„ÄÇ‰Ω†ÂèØ‰ª•Ëá™Áî±Êé¢Á¥¢Ôºå‰πüÂèØ‰ª•ÂèÇËÄÉÊàë‰ΩøÁî®ÁöÑÊñπÊ°à„ÄÇ</p>
<h2 id="HexoÂçöÂÆ¢ÊïÖÈöúËÆ∞ÂΩïÂèäÁæéÂåñÊñπÊ°àÔºàÊåÅÁª≠Êõ¥Êñ∞Ôºâ"><a href="#HexoÂçöÂÆ¢ÊïÖÈöúËÆ∞ÂΩïÂèäÁæéÂåñÊñπÊ°àÔºàÊåÅÁª≠Êõ¥Êñ∞Ôºâ" class="headerlink" title="HexoÂçöÂÆ¢ÊïÖÈöúËÆ∞ÂΩïÂèäÁæéÂåñÊñπÊ°àÔºàÊåÅÁª≠Êõ¥Êñ∞Ôºâ"></a>HexoÂçöÂÆ¢ÊïÖÈöúËÆ∞ÂΩïÂèäÁæéÂåñÊñπÊ°àÔºàÊåÅÁª≠Êõ¥Êñ∞Ôºâ</h2><h3 id="HexoÂ∏∏Áî®ÂëΩ‰ª§"><a href="#HexoÂ∏∏Áî®ÂëΩ‰ª§" class="headerlink" title="HexoÂ∏∏Áî®ÂëΩ‰ª§"></a>HexoÂ∏∏Áî®ÂëΩ‰ª§</h3><ol>
<li>hexo new ‚ÄúpostName‚Äù # Êñ∞Âª∫ÊñáÁ´†</li>
<li>hexo clean # Ê∏ÖÈô§ÁºìÂ≠ò</li>
<li>hexo generate # ÁîüÊàêÈùôÊÄÅÈ°µÈù¢Ëá≥ public ÁõÆÂΩï</li>
<li>hexo server # ÂºÄÂêØÈ¢ÑËßàËÆøÈóÆÁ´ØÂè£ÔºàÈªòËÆ§Á´ØÂè£ 4000Ôºå‚Äôctrl + c‚ÄôÂÖ≥Èó≠ serverÔºâ</li>
<li>hexo deploy # ÈÉ®ÁΩ≤Âà∞ GitHub</li>
<li>hexo help # Êü•ÁúãÂ∏ÆÂä©</li>
<li>hexo version # Êü•Áúã Hexo ÁöÑÁâàÊú¨</li>
<li>hexo s -g # ÁîüÊàêÂπ∂Êú¨Âú∞È¢ÑËßà</li>
<li>hexo d -g # ÁîüÊàêÂπ∂‰∏ä‰º†</li>
</ol>
<p>PS: HexoÊîØÊåÅÁº©ÂÜôÂëΩ‰ª§ÔºåÂç≥Ôºö<br>    - hexo n == hexo new<br>    - hexo g == hexo generate<br>    - hexo s == hexo server<br>    - hexo d == hexo deploy</p>
<h3 id="Êõ¥Êîπ‰∏ªÈ¢ò"><a href="#Êõ¥Êîπ‰∏ªÈ¢ò" class="headerlink" title="Êõ¥Êîπ‰∏ªÈ¢ò"></a>Êõ¥Êîπ‰∏ªÈ¢ò</h3><p>Â¶ÇÊûú‰Ω†‰∏çÊÉ≥‰ΩøÁî®ÈªòËÆ§‰∏ªÈ¢òÔºå‰Ω†ÂèØ‰ª•Ëá™Áî±Êé¢Á¥¢ÂÖ∂‰ªñÁöÑHexo‰∏ªÈ¢ò„ÄÇ</p>
<blockquote>
<p><a href="https://hexo.io/themes/">ÂÆòÊñπ‰∏ªÈ¢ò</a><br><a href="https://www.zhihu.com/question/24422335">Áü•‰πé</a><br><a href="https://github.com/hexojs/hexo/wiki/Themes">Github</a></p>
</blockquote>
<p>ËøôÈáå‰ª•NexT<a href="http://theme-next.iissnan.com/"> (Doc)</a> ‰∏ªÈ¢ò‰∏∫‰æãÔºåËØ¥Êòé‰∏Ä‰∏ãÊõ¥Êîπ‰∏ªÈ¢òÁöÑÊñπÊ≥ï„ÄÇ</p>
<ul>
<li>‰∏ãËΩΩ‰∏ªÈ¢òÔºö</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Âú®ÁªàÁ´ØÁ™óÂè£‰∏ãÔºåÂÆö‰ΩçÂà∞ Hexo Á´ôÁÇπÁõÆÂΩï‰∏ã„ÄÇ‰ΩøÁî® Git checkout ‰ª£Á†ÅÔºö</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<ul>
<li>ÂêØÁî®‰∏ªÈ¢òÔºö</li>
</ul>
<p>‰∏éÊâÄÊúâ Hexo ‰∏ªÈ¢òÂêØÁî®ÁöÑÊ®°Âºè‰∏ÄÊ†∑„ÄÇ ÂΩì ÂÖãÈöÜ/‰∏ãËΩΩ ÂÆåÊàêÂêéÔºåÊâìÂºÄ Á´ôÁÇπÈÖçÁΩÆÊñá‰ª∂(Ê†πÁõÆÂΩï‰∏ãÁöÑ <code>_config.yml</code>)Ôºå ÊâæÂà∞ theme Â≠óÊÆµÔºåÂπ∂Â∞ÜÂÖ∂ÂÄºÊõ¥Êîπ‰∏∫ next„ÄÇ</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/9.jpg" class="">

<p>Âà∞Ê≠§ÔºåNexT ‰∏ªÈ¢òÂÆâË£ÖÂÆåÊàê„ÄÇ‰∏ã‰∏ÄÊ≠•Êàë‰ª¨Â∞ÜÈ™åËØÅ‰∏ªÈ¢òÊòØÂê¶Ê≠£Á°ÆÂêØÁî®„ÄÇÂú®ÂàáÊç¢‰∏ªÈ¢ò‰πãÂêé„ÄÅÈ™åËØÅ‰πãÂâçÔºå Êàë‰ª¨ÊúÄÂ•Ω‰ΩøÁî® <code>hexo clean</code> Êù•Ê∏ÖÈô§ Hexo ÁöÑÁºìÂ≠ò„ÄÇÈ¶ñÂÖàÂêØÂä® Hexo Êú¨Âú∞Á´ôÁÇπÔºåÂπ∂ÂºÄÂêØË∞ÉËØïÊ®°ÂºèÔºàÂç≥Âä†‰∏ä ‚ÄìdebugÔºâÔºåÊï¥‰∏™ÂëΩ‰ª§ÊòØ <code>hexo s --debug</code>„ÄÇ Âú®ÊúçÂä°ÂêØÂä®ÁöÑËøáÁ®ãÔºåÊ≥®ÊÑèËßÇÂØüÂëΩ‰ª§Ë°åËæìÂá∫ÊòØÂê¶Êúâ‰ªª‰ΩïÂºÇÂ∏∏‰ø°ÊÅØÔºåÂ¶ÇÊûú‰Ω†Á¢∞Âà∞ÈóÆÈ¢òÔºåËøô‰∫õ‰ø°ÊÅØÂ∞ÜÂ∏ÆÂä©‰ªñ‰∫∫Êõ¥Â•ΩÁöÑÂÆö‰ΩçÈîôËØØ„ÄÇ ÂΩìÂëΩ‰ª§Ë°åËæìÂá∫‰∏≠ÊèêÁ§∫Âá∫Ôºö</p>
<blockquote>
<p>INFO  Hexo is running at <a href="http://0.0.0.0:4000/">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p>
</blockquote>
<p>Ê≠§Êó∂Âç≥ÂèØ‰ΩøÁî®ÊµèËßàÂô®ËÆøÈóÆ <code>http://localhost:4000</code>ÔºåÊ£ÄÊü•Á´ôÁÇπÊòØÂê¶Ê≠£Á°ÆËøêË°å„ÄÇÂΩì‰Ω†ÁúãÂà∞Á´ôÁÇπÁöÑÂ§ñËßÇ‰∏é‰∏ãÂõæÊâÄÁ§∫Á±ª‰ººÊó∂Âç≥ËØ¥Êòé‰Ω†Â∑≤ÊàêÂäüÂÆâË£Ö NexT ‰∏ªÈ¢ò„ÄÇËøôÊòØ NexT ÈªòËÆ§ÁöÑ Scheme ‚Äî‚Äî Muse„ÄÇ</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/10.png" class="">

<p><strong>TroubleShooting:</strong> ÊâßË°å <code>hexo s</code> Êó∂Ôºå<a href="https://github.com/iissnan/hexo-theme-next/issues/2253">location:4000ÊòæÁ§∫‰∏çÂØπÁöÑÊïÖÈöú</a></p>
<p>NexT‰∏ªÈ¢òÊúâ4‰∏≠Scheme„ÄÇÂ¶ÇÊûú‰Ω†ÊÉ≥Ë¶ÅÊõ¥Êç¢SchemeÔºåÊâìÂºÄ ‰∏ªÈ¢òÈÖçÁΩÆÊñá‰ª∂(theme Êñá‰ª∂Â§π -&gt; NexTÊñá‰ª∂Â§π -&gt; <code>_config.yml</code>), ‰øÆÊîπSchemeÔºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/11.JPG" class="">


<h3 id="ÈÖçÁΩÆÁ´ôÁÇπ‰ø°ÊÅØ"><a href="#ÈÖçÁΩÆÁ´ôÁÇπ‰ø°ÊÅØ" class="headerlink" title="ÈÖçÁΩÆÁ´ôÁÇπ‰ø°ÊÅØ"></a>ÈÖçÁΩÆÁ´ôÁÇπ‰ø°ÊÅØ</h3><p>ÊâìÂºÄÊ†πÁõÆÂΩï‰∏ãÁ´ôÁÇπÈÖçÁΩÆÊñá‰ª∂ <code>_config.yml</code> Ôºå‰Ω†ÂèØ‰ª•ËÆæÁΩÆÁ´ôÁÇπÁöÑ‰∏Ä‰∫õÂü∫Êú¨‰ø°ÊÅØÔºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/12.JPG" class="">

<ul>
<li>titleÔºöÁΩëÁ´ôÊ†áÈ¢ò</li>
<li>subtitleÔºöÁΩëÁ´ôÂâØÊ†áÈ¢ò</li>
<li>descriptionÔºöÁΩëÁ´ôÊèèËø∞</li>
<li>keywordsÔºöÂÖ≥ÈîÆÂ≠ó</li>
<li>authorÔºö‰ΩúËÄÖ</li>
<li>languageÔºöÁΩëÁ´ô‰ΩøÁî®ÁöÑËØ≠Ë®ÄÔºàÊ≥®ÊÑèÔºö‰∏ÄÂÆöË¶ÅËÆæÁΩÆ‰∏∫‰∏ª‰ΩìËÉΩÂ§üËØÜÂà´ÁöÑËØ≠Ë®ÄÔºåÂê¶Âàô‰ºöÂá∫Áé∞‰π±Á†ÅÔºâ<ul>
<li>‰Ω†ÂèØ‰ª•Âú® ‚Äú\themes\next\languages&quot; ‰∏≠ÊâæÂà∞‰∏ªÈ¢òÊîØÊåÅÁöÑËØ≠Ë®Ä</li>
</ul>
</li>
<li>timezoneÔºöÁΩëÁ´ôÊó∂Âå∫„ÄÇHexo ÈªòËÆ§‰ΩøÁî®ÊÇ®ÁîµËÑëÁöÑÊó∂Âå∫</li>
</ul>
<h3 id="ÂàõÂª∫ÂçöÊñá"><a href="#ÂàõÂª∫ÂçöÊñá" class="headerlink" title="ÂàõÂª∫ÂçöÊñá"></a>ÂàõÂª∫ÂçöÊñá</h3><p>ü¶ù HexoÁöÑÂçöÊñá‰ΩøÁî®MarkdownËØ≠Ë®Ä„ÄÇÂ¶ÇÊûú‰Ω†‰ªéÊù•Ê≤°Áî®ËøáÔºåÂèØ‰ª•ÂèÇËÄÉÊïôÁ®ãÔºö<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown ËèúÈ∏üÊïôÁ®ã</a> or <a href="https://www.appinn.com/markdown/#%E4%BB%A3%E7%A0%81">MarkdownËØ≠Ê≥ïËØ¥Êòé(‰∏≠ÊñáÁâà)</a></p>
<p>ËæìÂÖ•Â¶Ç‰∏ãÂëΩ‰ª§ÂàõÂª∫ÂçöÊñáÔºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&#x27;name of the blog&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Hexo‰ºöÂú® <code>source\_posts</code> ‰∏ãÁîüÊàêÁõ∏ÂÖ≥ <code>.md</code> Êñá‰ª∂ÔºåÊØè‰∏ÄÁØáÂçöÂÆ¢ÂØπÂ∫î‰∏Ä‰∏™ <code>.md</code> Êñá‰ª∂ÔºåÁõ¥Êé•ÁºñËæëÂçöÊñáÂØπÂ∫îÁöÑÊñá‰ª∂Âç≥ÂèØ„ÄÇ</p>
<p>Â¶ÇÊûú‰Ω†ÊÉ≥Ë¶ÅÊõ¥ÊîπÂçöÊñáÁöÑÊ®°ÊùøÔºåÊâìÂºÄ <code>scaffolds</code> Êñá‰ª∂Â§πÔºå‰Ω†ÂèØ‰ª•ÁúãÂà∞3‰∏™ÈªòËÆ§ÁöÑÊ®°Êùø <code>draft.md</code> , <code>page.md</code> Âíå <code>post.md</code> ÔºåÈô§Ê≠§‰πãÂ§ñÔºå‰Ω†ËøòÂèØ‰ª•ÂàõÂª∫Ëá™Â∑±ÂÆöÂà∂ÁöÑÊ®°Êùø„ÄÇ</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="ÊùÇ‰∏ÉÊùÇÂÖ´"><a href="#ÊùÇ‰∏ÉÊùÇÂÖ´" class="headerlink" title="ÊùÇ‰∏ÉÊùÇÂÖ´"></a>ÊùÇ‰∏ÉÊùÇÂÖ´</h3><p>Q1ÔºöHexoÊõ¥Êîπ‰∏ªÈ¢òÂêéËøúÁ®ãÁΩëÁ´ô‰∏çÊõ¥Êñ∞Ôºü</p>
<p>AÔºöÊõ¥Êîπ‰∏ªÈ¢òÂêéÔºåÂÖàÊâßË°å <code>hexo clean</code>ÔºåÂÜçÊâßË°å <code>hexo g</code> Âíå <code>hexo d</code>„ÄÇÂ¶ÇÊûú‰ªçÁÑ∂Ê≤°ÊúâÂèòÂåñÔºåÂèØËÉΩÊòØÊµèËßàÂô®ÁºìÂ≠òÁöÑÂéüÂõ†„ÄÇÊåâ F12 ÊàñËÄÖÈº†Ê†áÂè≥ÈîÆÊâìÂºÄ <code>Ê£ÄÊü•</code> , ÈÄâÊã© Network ‰πãÂêéÈÄâ‰∏≠ <code>Disable cache</code> .</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/13.JPG" class="">

<hr>
<p>Q2: Â¶Ç‰ΩïÂú®ÂçöÊñá‰∏≠ÊèíÂÖ•ÂõæÁâá„ÄÅËßÜÈ¢ëÔºü</p>
<p>AÔºöÂèØ‰ª•ÂèÇËÄÉ<a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/">ËøôÁØáÂçöÊñá</a>„ÄÇÂõ†‰∏∫ÊàëÂú®ÂÜôÂçöÂÆ¢ÁöÑÊó∂ÂÄôÁªèÂ∏∏ÈúÄË¶ÅÊèíÂÖ•ÂæàÂ§öÂõæÁâáÂíåËßÜÈ¢ëÔºåÊâÄ‰ª•ÊàëÈááÂèñ‰∏∫ÊØèÁØáÂçöÊñáÂª∫Á´ãËá™Â∑±ÁõÆÂΩïÁöÑÊñπÊ≥ï„ÄÇÊâìÂºÄÁ´ôÁÇπÈÖçÁΩÆÊñá <code>_config.yml</code> Ôºå‰øÆÊîπ <code>post_asset_folder</code> ‰∏∫ <code>true</code> Âπ∂‰øùÂ≠òÈÄÄÂá∫„ÄÇ</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/14.JPG" class="">

<p>‰πãÂêéÊØèÊ¨°ÂàõÂª∫ÂçöÊñáÁöÑÊó∂ÂÄô‰ºöÂêåÊó∂ÁîüÊàêÂêåÂêçÁöÑÊñá‰ª∂Â§πÔºå‰Ω†ÂèØ‰ª•Â∞ÜÂêÑÁßçËµÑÊ∫êÔºàÂõæÁâá„ÄÅÈü≥È¢ëÁ≠âÔºâÊîæÂà∞Ëøô‰∏™Êñá‰ª∂Â§πÈáå„ÄÇÂú®ÂçöÊñá‰∏≠ÂºïÁî®ÁöÑÊó∂ÂÄôÔºå‰ΩøÁî®‰ª•‰∏ãÁöÑËØ≠Ê≥ïÂç≥ÂèØÔºö</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ÊèíÂÖ•ÂõæÁâá: &#123;% asset_img &lt;image name&gt; &lt;title&gt; %&#125;</span><br><span class="line"></span><br><span class="line">ÊèíÂÖ•ËßÜÈ¢ëÔºö</span><br><span class="line">    &lt;video src=&#x27;vedio source&#x27; </span><br><span class="line">       type=&#x27;video/mp4&#x27; </span><br><span class="line">       controls=&#x27;controls&#x27;  </span><br><span class="line">       preload=&quot;auto&quot;</span><br><span class="line">       width=&#x27;100%&#x27; </span><br><span class="line">       height=&#x27;100%&#x27;&gt;</span><br><span class="line">    &lt;/video&gt;</span><br><span class="line"></span><br><span class="line">ÈÉ®ÂàÜÂèÇÊï∞Ôºö</span><br><span class="line">- autoplay ÂàôËßÜÈ¢ëÂú®Â∞±Áª™ÂêéÈ©¨‰∏äÊí≠Êîæ„ÄÇ</span><br><span class="line">- controls Áî®Êà∑ÊòæÁ§∫Êéß‰ª∂ÔºåÊØîÂ¶ÇÊí≠ÊîæÊåâÈíÆ„ÄÇ</span><br><span class="line">- width È¢ëÊí≠ÊîæÂô®ÁöÑÂÆΩÂ∫¶„ÄÇ</span><br><span class="line">- height ËÆæÁΩÆËßÜÈ¢ëÊí≠ÊîæÂô®ÁöÑÈ´òÂ∫¶</span><br><span class="line">- loop Êñá‰ª∂ÂÆåÊàêÊí≠ÊîæÂêéÂÜçÊ¨°ÂºÄÂßãÊí≠Êîæ„ÄÇ loop=&quot;loop&quot;</span><br><span class="line">- preload ËßÜÈ¢ëÂú®È°µÈù¢Âä†ËΩΩÊó∂ËøõË°åÂä†ËΩΩÔºåÂπ∂È¢ÑÂ§áÊí≠Êîæ preload=&quot;auto&quot;</span><br><span class="line">- src Ë¶ÅÊí≠ÊîæÁöÑËßÜÈ¢ëÁöÑ URL„ÄÇ</span><br></pre></td></tr></table></figure>

<hr>
<p>Q3: ÂçöÂÆ¢‰∏ªÈ°µÊñáÁ´†‰∏∫ÂÖ®ÊñáÊòæÁ§∫ÔºåÂ•Ω‰∏ëÔºåÊÄé‰πàÂäûÔºü</p>
<p>AÔºö‰Ω†ÂèØ‰ª•ÂèÇËÄÉ<a href="https://jiangding1990.github.io/2017/04/25/Hexo%E4%BD%BF%E7%94%A8NexT%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E6%96%B9%E6%B3%95/">ËøôÁØáÂçöÊñá</a>Ëß£ÂÜ≥„ÄÇ ÊàëÁî®ÁöÑÊòØÁ¨¨‰∏ÄÁßçÊñπÊ≥ïÔºåÂç≥Âú®ÂçöÊñá‰∏≠‰ΩøÁî® <code>&lt;!--more--&gt;</code> ÊâãÂä®Êà™Êñ≠„ÄÇ</p>
<hr>
<p>Q4. ÊÉ≥ÁªôÂçöÊñáËÆæÁΩÆÊùÉÈôêÔºü</p>
<p>AÔºöÊâìÂºÄ‰∏ªÈ¢òÈÖçÁΩÆÊñá‰ª∂ÔºåÂ£∞ÊòéÂçöÊñáÊùÉÈôêÔºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/15.JPG" class="">

<hr>
<p>Q5. ÂàÜÈ°µÊòæÁ§∫ÊúâÈóÆÈ¢òÔºü</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/16.JPG" class="">

<p>AÔºöÂèÇËÄÉ<a href="https://github.com/hexojs/hexo/issues/3794">ËØ•ÈóÆÈ¢ò‰∏ãÁöÑËÆ®ËÆ∫</a></p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/17.JPG" class="">

<hr>
<p>Q6. NexT‰∏ªÈ¢ò‰∏ãÔºå‰∏≠ÊñáÂçöÂÆ¢ÁõÆÂΩïÂ§±Êïà„ÄÇ</p>
<p>AÔºöÁÇπÂáª‰∏≠ÊñáÁõÆÂΩïÈîöÁÇπÔºåÂèëÁé∞Êó†Ê≥ïÊ≠£Â∏∏Ë∑≥ËΩ¨„ÄÇÂêåÊó∂ÔºåÊâìÂºÄ <code>ÊéßÂà∂Âè∞</code> Âêé‰ºöÂèëÁé∞Êä•ÈîôÔºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/18.JPG" class="">

<p>Ê†πÊçÆÊä•Èîô‰ø°ÊÅØÔºåÊâìÂºÄ <code>themes/next/source/js/src/post-details.js</code> Êñá‰ª∂Ôºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/19.JPG" class="">

<p>ÂéüÂõ†ÊòØUTF-8Ëß£ÊûêÊúâÈóÆÈ¢òÔºåÊåâÁÖßÂ¶ÇÂõæ‰øÆÊîπ <code>post-details.js</code> Êñá‰ª∂Ôºö</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/20.JPG" class="">

<hr>
<p>Q7. ÁÇπÂáªÁõÆÂΩïÊ†èÈáåÁöÑ <code>Tags</code> or <code>Categories</code> or <code>Archives</code> 404Ôºü</p>
<p>ËØ∑ÂèÇËÄÉ<a href="http://theme-next.iissnan.com/theme-settings.html">ÂÆòÊñπÊñáÊ°£:‰∏ªÈ¢òÈÖçÁΩÆ</a></p>
<p>‰ΩÜÊ≥®ÊÑè‰∏ÄÁÇπÔºåÁîüÊàêÁõ∏ÂÖ≥ÁöÑÈ°µÈù¢ÂêéÔºåÂú®‰∏ªÈ¢òÈÖçÁΩÆÊñá‰ª∂ <code>_config.yml</code> ‰∏≠ÔºåmenuÊ†èËØ∑ÊåâÁÖß‰∏ãÈù¢ËøõË°å‰øÆÊîπ„ÄÇ</p>
<img src="/2021/06/22/Blog/Build-Your-Own-Blog-with-GitHub-Pages-Hexo/21.JPG" class="">

<p>‰∏ÄÂÆö‰∏çËÉΩÊúâÁ©∫Ê†ºÔºåÂê¶Âàô‰ºö404ÔºÅÔºÅÔºÅ</p>
<h2 id="ÂèÇËÄÉÈìæÊé•"><a href="#ÂèÇËÄÉÈìæÊé•" class="headerlink" title="ÂèÇËÄÉÈìæÊé•"></a>ÂèÇËÄÉÈìæÊé•</h2><p>ü§ó Âú®Êê≠Âª∫‰∏™‰∫∫ÂçöÂÆ¢ÁöÑËøáÁ®ãÔºåÊàëÂèÇËÄÉ‰∫ÜÁΩë‰∏äÁöÑÂ§öÁßçËß£ÂÜ≥ÊñπÊ°àÔºåÂú®Ê≠§Â∞±‰∏ç‰∏Ä‰∏ÄÂàóÂá∫‰∫Ü„ÄÇÊÑüË∞¢Ââç‰∫∫ÊÄªÁªìÁöÑÁªèÈ™åÔºåËÆ©ÊàëÂ∞ëËµ∞‰∫ÜÂæàÂ§öÂºØË∑Ø„ÄÇ</p>
<p>‰∏ãÈù¢ÊòØÊàëËßâÂæóÊØîËæÉÊúâÁî®ÁöÑÂá†‰∏™ÈìæÊé•ÔºåÂ∏åÊúõÂèØ‰ª•Â∏ÆÂä©Âà∞‰Ω†„ÄÇ</p>
<p>[1] <a href="https://hexo.io/zh-cn/docs/">Hexo Docs</a></p>
<p>[2] <a href="http://theme-next.iissnan.com/theme-settings.html">NexT‰∏ªÈ¢òÈÖçÁΩÆ</a></p>
<p>[3] <a href="https://github.com/iissnan/hexo-theme-next/issues">GithubÔºöNexT‰∏ªÈ¢òÂ∏∏ËßÅÈóÆÈ¢òÊ±áÊÄª</a></p>
<p>[4] <a href="http://yearito.cn/posts/hexo-advanced-settings.html">Hexo Êê≠Âª∫‰∏™‰∫∫ÂçöÂÆ¢Á≥ªÂàóÔºöËøõÈò∂ËÆæÁΩÆÁØá</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(1): Introduction</title>
    <url>/2021/07/02/CS61A-SICP/CS61A-1-Introduction/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 1.</p>
<span id="more"></span>

<h2 id="What-is-Computer-Science"><a href="#What-is-Computer-Science" class="headerlink" title="What is Computer Science?"></a>What is Computer Science?</h2><p>Computer Science has many subfields, and each subfield has its own sub-subfield.</p>
<img src="/2021/07/02/CS61A-SICP/CS61A-1-Introduction/lec1-1.png" class="">

<h2 id="What-is-this-course-about"><a href="#What-is-this-course-about" class="headerlink" title="What is this course about?"></a>What is this course about?</h2><ul>
<li>A course about <code>managing complexity</code>:<ul>
<li>mastering abstraction</li>
<li>programming paradigms</li>
</ul>
</li>
<li>An introduction to programming:<ul>
<li>full understanding of Python fundamentals</li>
<li>combining multiple ideas in large projects</li>
<li>how computer interpret programming languages</li>
</ul>
</li>
<li>Different types of languages:<ul>
<li>Python</li>
<li>Scheme</li>
<li>SQL</li>
</ul>
</li>
</ul>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Numeric expressions</span></span><br><span class="line"><span class="number">2020</span></span><br><span class="line"><span class="number">2000</span> + <span class="number">20</span></span><br><span class="line">-<span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> * ((<span class="number">5</span> // <span class="number">6</span>) + <span class="number">7</span> * <span class="number">8</span> * <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="built_in">abs</span>(-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">abs</span>(<span class="number">2301</span> - <span class="number">4321</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Values</span></span><br><span class="line"><span class="string">&quot;Go Bears&quot;</span></span><br><span class="line"><span class="string">&quot;Gob&quot;</span> + <span class="string">&quot;ears&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Objects</span></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">shakes = urlopen(<span class="string">&#x27;http://composingprograms.com/shakespeare.txt&#x27;</span>)</span><br><span class="line">text = shakes.read().decode().split()</span><br><span class="line"><span class="built_in">len</span>(text)</span><br><span class="line">text[:<span class="number">25</span>]</span><br><span class="line">text.count(<span class="string">&#x27;the&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;thou&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;you&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;forsooth&#x27;</span>)</span><br><span class="line">text.count(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets</span></span><br><span class="line">words = <span class="built_in">set</span>(text)</span><br><span class="line"><span class="built_in">len</span>(words)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Combinations </span></span><br><span class="line"><span class="string">&#x27;draw&#x27;</span></span><br><span class="line"><span class="string">&#x27;draw&#x27;</span>[<span class="number">0</span>]  <span class="comment"># &#x27;d&#x27;</span></span><br><span class="line">&#123;w[<span class="number">0</span>] <span class="keyword">for</span> w <span class="keyword">in</span> words&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Data</span></span><br><span class="line"><span class="string">&#x27;draw&#x27;</span>[::-<span class="number">1</span>]  <span class="comment"># &#x27;ward&#x27;</span></span><br><span class="line">&#123;w <span class="keyword">for</span> w <span class="keyword">in</span> words <span class="keyword">if</span> w == w[::-<span class="number">1</span>] <span class="keyword">and</span> <span class="built_in">len</span>(w)&gt;<span class="number">4</span>&#125;</span><br><span class="line">&#123;w <span class="keyword">for</span> w <span class="keyword">in</span> words <span class="keyword">if</span> w[::-<span class="number">1</span>] <span class="keyword">in</span> words <span class="keyword">and</span> <span class="built_in">len</span>(w) == <span class="number">4</span>&#125;</span><br><span class="line">&#123;w <span class="keyword">for</span> w <span class="keyword">in</span> words <span class="keyword">if</span> w[::-<span class="number">1</span>] <span class="keyword">in</span> words <span class="keyword">and</span> <span class="built_in">len</span>(w) &gt; <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(10): Trees</title>
    <url>/2021/07/14/CS61A-SICP/CS61A-10-Trees/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 10.</p>
<span id="more"></span>

<h2 id="Processing-Container-Values"><a href="#Processing-Container-Values" class="headerlink" title="Processing Container Values"></a>Processing Container Values</h2><ul>
<li>sum(iterable[, start]) -&gt; value</li>
<li>max(iterable[, key=func]) -&gt; value</li>
<li>all(iterable) -&gt; bool</li>
<li>any(iterable) -&gt; bool</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Aggregation</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>) </span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="comment"># Hint: If you sum a list of lists, you get a list containing the elements of those lists.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>]], [])  <span class="comment"># ==&gt; [2, 3] + [4]</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>([ [[<span class="number">1</span>]], [<span class="number">2</span>] ], [])</span><br><span class="line">[[<span class="number">1</span>], <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sum</span>(&#123;<span class="number">3</span>:<span class="number">9</span>, <span class="number">5</span>:<span class="number">25</span>&#125;)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">max</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="built_in">range</span>(<span class="number">10</span>), key=<span class="keyword">lambda</span> x: <span class="number">7</span> - (x-<span class="number">2</span>)*(x-<span class="number">4</span>))</span><br><span class="line"><span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([x &lt; <span class="number">5</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)])</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>perfect_square = <span class="keyword">lambda</span> x: x == <span class="built_in">round</span>(x ** <span class="number">0.5</span>) ** <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>([perfect_square(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>, <span class="number">60</span>)])  <span class="comment"># Try ,65)</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h2><img src="/2021/07/14/CS61A-SICP/CS61A-10-Trees/1.JPG" class="">

<img src="/2021/07/14/CS61A-SICP/CS61A-10-Trees/2.JPG" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Trees: recursive implementation</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tree</span>(<span class="params">label, branches=[]</span>):</span></span><br><span class="line">    <span class="comment"># verifies the tree def</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches: </span><br><span class="line">        <span class="keyword">assert</span> is_tree(branch), <span class="string">&#x27;branches must be trees&#x27;</span></span><br><span class="line">    <span class="comment"># list(branches): create a list from a sequence branches</span></span><br><span class="line">    <span class="keyword">return</span> [label] + <span class="built_in">list</span>(branches)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">label</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">branches</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_tree</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(tree) != <span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">len</span>(tree) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>t = tree(1, [tree(5, [tree(7)]), tree(6)])</span></span><br><span class="line"><span class="string">[1, [5, [7]], [6]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Tree-Processing"><a href="#Tree-Processing" class="headerlink" title="Tree Processing"></a>Tree Processing</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### +++ === ABSTRACTION BARRIER === +++ ###</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># construct fibonacci tree</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_tree</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct a Fibonacci tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib_tree(1)</span></span><br><span class="line"><span class="string">    [1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib_tree(3)</span></span><br><span class="line"><span class="string">    [2, [1], [1, [0], [1]]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib_tree(5)</span></span><br><span class="line"><span class="string">    [5, [2, [1], [1, [0], [1]]], [3, [1, [0], [1]], [2, [1], [1, [0], [1]]]]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left = fib_tree(n-<span class="number">2</span>)</span><br><span class="line">        right = fib_tree(n-<span class="number">1</span>)</span><br><span class="line">        fib_n = label(left) + label(right)</span><br><span class="line">        <span class="keyword">return</span> tree(fib_n, [left, right])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_leaves</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The number of leaves in tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_leaves(fib_tree(5))</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([count_leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leaves</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a list containing the leaf labels of tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; leaves(fib_tree(5))</span></span><br><span class="line"><span class="string">    [1, 0, 1, 0, 1, 1, 0, 1]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(tree):</span><br><span class="line">        <span class="keyword">return</span> [label(tree)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(tree)], [])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment_leaves</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree like t but with leaf labels incremented.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(increment_leaves(fib_tree(4)))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> tree(label(t) + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bs = [increment_leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)]</span><br><span class="line">        <span class="keyword">return</span> tree(label(t), bs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree like t but with all labels incremented.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(increment(fib_tree(4)))</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> tree(label(t) + <span class="number">1</span>, [increment(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_tree</span>(<span class="params">t, indent=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print a representation of this tree in which each label is</span></span><br><span class="line"><span class="string">    indented by two spaces times its depth from the root.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(tree(1))</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(tree(1, [tree(2)]))</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(fib_tree(4))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">        0</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">          0</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;  &#x27;</span> * indent + <span class="built_in">str</span>(label(t)))</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        print_tree(b, indent + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Demo-Summing-Paths"><a href="#Demo-Summing-Paths" class="headerlink" title="Demo: Summing Paths"></a>Demo: Summing Paths</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Order</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return n * n-1 * ... * 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact(4)</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  ÈùûÂ∞æÈÄíÂΩí: ‰∏ã‰∏Ä‰∏™ÂáΩÊï∞ÁªìÊùü‰ª•ÂêéÊ≠§ÂáΩÊï∞ËøòÊúâÂêéÁª≠ÔºåÊâÄ‰ª•ÂøÖÈ°ª‰øùÂ≠òÊú¨Ë∫´ÁöÑÁéØÂ¢É‰ª•‰æõÂ§ÑÁêÜËøîÂõûÂÄº„ÄÇ</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact_tail</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return n * n-1 * ... * 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact_tail(4)</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> fact_times(n, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact_times</span>(<span class="params">n, k</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return k * n * n-1 * ... * 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact_times(4, 3)</span></span><br><span class="line"><span class="string">    72</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> k</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fact_times(n - <span class="number">1</span>, k * n)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># Â∞æÈÄíÂΩí: ËøõÂÖ•‰∏ã‰∏Ä‰∏™ÂáΩÊï∞‰∏çÂÜçÈúÄË¶Å‰∏ä‰∏Ä‰∏™ÂáΩÊï∞ÁöÑÁéØÂ¢É‰∫ÜÔºåÂæóÂá∫ÁªìÊûú‰ª•ÂêéÁõ¥Êé•ËøîÂõû„ÄÇ</span></span><br><span class="line"><span class="comment"># Â∞æÈÄíÂΩíÊòØ‰∏ÄÁßçÁºñÁ®ãÊäÄÂ∑ß„ÄÇ</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ordinary recursion: we need call stack to record; if too many recursive calls, sometimes stack overflow occurs.</span></span><br><span class="line"><span class="comment"># tail recursion: in tail recursion, the recursive call is the last thing logically, and there is nothing left in the current function. And the compiler will optimize tail recursion. (we don&#x27;t need stack frame anymore, and tail recursion can be optimized as ordinary loop)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tree <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">numbers = tree(<span class="number">3</span>, [tree(<span class="number">4</span>), tree(<span class="number">5</span>, [tree(<span class="number">6</span>)])])</span><br><span class="line">haste = tree(<span class="string">&#x27;h&#x27;</span>, [tree(<span class="string">&#x27;a&#x27;</span>, [tree(<span class="string">&#x27;s&#x27;</span>), tree(<span class="string">&#x27;t&#x27;</span>)]), tree(<span class="string">&#x27;e&#x27;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sums</span>(<span class="params">t, so_far</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the sum of labels along the path from the root to each leaf.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_sums(tree(3, [tree(4), tree(5, [tree(6)])]), 0)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    14</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_sums(haste, &#x27;&#x27;)</span></span><br><span class="line"><span class="string">    has</span></span><br><span class="line"><span class="string">    hat</span></span><br><span class="line"><span class="string">    he</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    so_far = so_far + label(t)</span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="built_in">print</span>(so_far)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> branch <span class="keyword">in</span> branches(t):</span><br><span class="line">            print_sums(branch, so_far)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(11): Mutable Sequences</title>
    <url>/2021/07/14/CS61A-SICP/CS61A-11-Mutable-Sequences/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 11.</p>
<span id="more"></span>]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(12): Complexity</title>
    <url>/2021/07/15/CS61A-SICP/CS61A-12-Complexity/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CS61A(13): Iterators and Generators</title>
    <url>/2021/07/15/CS61A-SICP/CS61A-13-Iterators-and-Generators/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CS61A(2): Expressions and Functions</title>
    <url>/2021/07/02/CS61A-SICP/CS61A-2-Expressions-and-Functions/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 2.</p>
<span id="more"></span>

<h2 id="Expression"><a href="#Expression" class="headerlink" title="Expression"></a>Expression</h2><p>An <code>expression</code> describes a computation and evaluates to a value. All expressions can use function call notation.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># primitive expression</span></span><br><span class="line"><span class="number">2000</span> + <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># call expressions</span></span><br><span class="line"><span class="built_in">max</span>(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">min</span>(<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">pow</span>(<span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul</span><br><span class="line">mul(add(<span class="number">4</span>, mul(<span class="number">4</span>, <span class="number">6</span>)), add(<span class="number">3</span>, <span class="number">5</span>))  <span class="comment"># 224</span></span><br></pre></td></tr></table></figure>

<h3 id="Anatomy-of-a-call-expression"><a href="#Anatomy-of-a-call-expression" class="headerlink" title="Anatomy of a call expression"></a>Anatomy of a call expression</h3><p>Operators and operands can also be expression. An expression tree is as follows:</p>
<img src="/2021/07/02/CS61A-SICP/CS61A-2-Expressions-and-Functions/lec2-1.png" class="">

<p>Evaluation procedure for call expressions:</p>
<ul>
<li>Evaluate the operator</li>
<li>Evaluate the operands from left to right</li>
<li>Apply the operator (a function) to the evaluated operands (arguments)</li>
</ul>
<h2 id="Names-Assignment-and-User-defined-Functions"><a href="#Names-Assignment-and-User-defined-Functions" class="headerlink" title="Names, Assignment, and User-defined Functions"></a>Names, Assignment, and User-defined Functions</h2><p>Assignment is a simple means of abstraction: binds names to values.</p>
<p>Function definition is a more powerful means of abstraction: binds names to expressions.</p>
<h3 id="Defining-Functions"><a href="#Defining-Functions" class="headerlink" title="Defining Functions"></a>Defining Functions</h3><p>We programmers can build our own functions.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">def <span class="xml"><span class="tag">&lt;<span class="name">name</span>&gt;</span></span>(<span class="xml"><span class="tag">&lt;<span class="name">formal</span> <span class="attr">parameters</span>&gt;</span></span>):</span><br><span class="line"><span class="code">    return &lt;return expression&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># User-defined functions</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> mul(x, x)</span><br><span class="line"></span><br><span class="line">square(<span class="number">21</span>)  <span class="comment"># 441</span></span><br><span class="line">square(add(<span class="number">2</span>, <span class="number">5</span>))  <span class="comment"># 49</span></span><br><span class="line">square(square(<span class="number">3</span>))  <span class="comment"># 81</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_squares</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> add(square(x), square(y))</span><br><span class="line"></span><br><span class="line">sum_squares(<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># 9 + 16 = 25</span></span><br><span class="line">sum_squares(<span class="number">5</span>, <span class="number">12</span>)  <span class="comment"># 25 + 144 = 169</span></span><br></pre></td></tr></table></figure>

<p>Procedure for calling user-defined functions:</p>
<img src="/2021/07/02/CS61A-SICP/CS61A-2-Expressions-and-Functions/lec2-2.png" class="">



<h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>Functions are organized into <strong>modules</strong>, which together comprise the Python <strong>library</strong>. We programmer can define our own functions modules or libraries.</p>
<p>ü¶Ñ External Resource: <a href="https://docs.python.org/3/library/index.html">Python Standard Library Ref</a></p>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(3): Control</title>
    <url>/2021/07/02/CS61A-SICP/CS61A-3-Control/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 3.</p>
<span id="more"></span>


<h2 id="Print-and-None"><a href="#Print-and-None" class="headerlink" title="Print and None"></a>Print and None</h2><p>A function that does not explicitly return a value will return <code>None</code>. None is not displayed by the interpreter as the value of an expression.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; None</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(None)</span></span><br><span class="line">None</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(<span class="built_in">print</span>(1), <span class="built_in">print</span>(2))</span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">None None</span><br></pre></td></tr></table></figure>

<p><code>print</code> is non-pure function, it can generate side effects. The value that print returns is always None.</p>
<img src="/2021/07/02/CS61A-SICP/CS61A-3-Control/lec3-1.png" class="">


<p><strong>Pure functions are essential for writing concurrent programs, in which multiple call expressions may be evaluated simultaneously.</strong></p>
<h2 id="Multiple-Environments"><a href="#Multiple-Environments" class="headerlink" title="Multiple Environments"></a>Multiple Environments</h2><p>When Python execute a program, different expressions can be evaluated in different environments.</p>
<img src="/2021/07/02/CS61A-SICP/CS61A-3-Control/lec3-2.png" class="">


<h2 id="Miscellaneous-Python-Features"><a href="#Miscellaneous-Python-Features" class="headerlink" title="Miscellaneous Python Features"></a>Miscellaneous Python Features</h2><ul>
<li>division</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Division</span></span><br><span class="line"><span class="number">618</span> / <span class="number">10</span>  <span class="comment"># 61.8</span></span><br><span class="line"><span class="number">618</span> // <span class="number">10</span>  <span class="comment"># 61</span></span><br><span class="line"><span class="number">618</span> % <span class="number">10</span>  <span class="comment"># 8</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> truediv, floordiv, mod</span><br><span class="line">truediv(<span class="number">618</span>, <span class="number">10</span>)</span><br><span class="line">floordiv(<span class="number">618</span>, <span class="number">10</span>)</span><br><span class="line">mod(<span class="number">618</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>multiple return values</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Multiple return values</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide_exact</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n // d, n % d</span><br><span class="line">quotient, remainder = divide_exact(<span class="number">618</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>doctest &amp; default arguments</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docstrings, doctests, and default arguments</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide_exact</span>(<span class="params">n, d=<span class="number">10</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the quotient and remainder of dividing N by D.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; quotient, remainder = divide_exact(618)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; quotient</span></span><br><span class="line"><span class="string">    61</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remainder</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> floordiv(n, d), mod(n, d)</span><br></pre></td></tr></table></figure>

<ul>
<li>useful command line:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># interactive with Python file</span></span><br><span class="line">~$ python3 -i filename.py :</span><br><span class="line"></span><br><span class="line"><span class="comment"># run doctest in the file</span></span><br><span class="line">~$ python3 -m doctest filename.py</span><br></pre></td></tr></table></figure>


<h2 id="Conditional-Statements"><a href="#Conditional-Statements" class="headerlink" title="Conditional Statements"></a>Conditional Statements</h2><ul>
<li>False values in Python: False, 0, ‚Äò ‚Äò, [ ], None</li>
<li>True values in Python: anything else</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Conditional expressions</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">absolute_value</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the absolute value of X.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; absolute_value(-3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; absolute_value(0)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; absolute_value(3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>

<p>A conditional expression has the form:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&lt;consequent&gt; <span class="keyword">if</span> &lt;predicate&gt; <span class="keyword">else</span> &lt;alternative&gt;</span><br></pre></td></tr></table></figure>


<h2 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h2><p>Iteration means repeating things.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Summation via while</span></span><br><span class="line">i, total = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">3</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    total = total + i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i: &#123;&#125; total: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i, total))</span><br></pre></td></tr></table></figure>

<h2 id="Control-Expressions"><a href="#Control-Expressions" class="headerlink" title="Control Expressions"></a>Control Expressions</h2><p>To evaluate the expression <code>&lt;left&gt; and &lt;right&gt;</code>:</p>
<ul>
<li>Evaluate the subexpression <code>&lt;left&gt;</code>.</li>
<li>If the result is a false value <strong>v</strong>, then the expression evaluates to <strong>v</strong>.</li>
<li>Otherwise, the expression evaluates to the value of the subexpression <code>&lt;right&gt;</code>.</li>
</ul>
<p>To evaluate the expression <code>&lt;left&gt; or &lt;right&gt;</code>:</p>
<ul>
<li>Evaluate the subexpression <code>&lt;left&gt;</code>.</li>
<li>If the result is a true value <strong>v</strong>, then the expression evaluates to <strong>v</strong>.</li>
<li>Otherwise, the expression evaluates to the value of the subexpression <code>&lt;right&gt;</code>.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_big_sqrt</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether x has a big square root.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(1000)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(100)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(0)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_big_sqrt(-1000)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">0</span> <span class="keyword">and</span> sqrt(x) &gt; <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reasonable</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Is N small enough that 1/N can be represented?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(100)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(0)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(-100)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reasonable(10 ** 1000)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">0</span> <span class="keyword">or</span> <span class="number">1</span>/n != <span class="number">0.0</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(4): Higher-Order Functions</title>
    <url>/2021/07/03/CS61A-SICP/CS61A-4-Higher-Order-Functions/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 4.</p>
<span id="more"></span>

<h2 id="Iteration-Example"><a href="#Iteration-Example" class="headerlink" title="Iteration Example"></a>Iteration Example</h2><p>There are 2 different definitions of <code>fib</code> which can be used to calculate the Fibonacci number. </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the nth Fibonacci number&quot;&quot;&quot;</span></span><br><span class="line">    pred, curr = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; n:</span><br><span class="line">        pred, curr = curr, pred + curr</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> curr</span><br><span class="line"></span><br><span class="line"><span class="comment"># can computer 0th Fibonacci number correctly</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the nth Fibonacci number&quot;&quot;&quot;</span></span><br><span class="line">    pred, curr = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; n:</span><br><span class="line">        pred, curr = curr, pred + curr</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> curr</span><br></pre></td></tr></table></figure>


<h2 id="Designing-Functions"><a href="#Designing-Functions" class="headerlink" title="Designing Functions"></a>Designing Functions</h2><p>There are lots of different functions that can do the same thing, but some are better than other. How to design better function?</p>
<p>üèúÔ∏è <strong>A Guide to Designing Function:</strong></p>
<ul>
<li>Give each function exactly one job.</li>
<li>Don‚Äôt repeat yourself (DRY). Implement a process just once, but execute it many times.</li>
<li>Define functions generally.</li>
</ul>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>The following is an example of generalizing patterns with arguments.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Repeating</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi, sqrt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_square</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a square with side length R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> r * r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_circle</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a circle with radius R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> r * r * pi</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_hexagon</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a regular hexagon with side length R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> r * r * <span class="number">3</span> * sqrt(<span class="number">3</span>) / <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>There are lots of repeating things. Let‚Äôs try to do some generalization.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generalization: Generalizing patterns using arguments</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">r, shape_constant</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a shape from length measurement R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> r &gt; <span class="number">0</span>, <span class="string">&#x27;A length must be positive&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> r * r * shape_constant</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_square</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_circle</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, pi)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_hexagon</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, <span class="number">3</span> * sqrt(<span class="number">3</span>) / <span class="number">2</span>)</span><br></pre></td></tr></table></figure>


<h2 id="Higher-Order-Function"><a href="#Higher-Order-Function" class="headerlink" title="Higher-Order Function"></a>Higher-Order Function</h2><p>The common structure among functions may be a computational process, rather than a number.</p>
<img src="/2021/07/03/CS61A-SICP/CS61A-4-Higher-Order-Functions/lec4-1.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_naturals</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N natural numbers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_naturals(5)</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + k, k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_cubes</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N cubes of natural numbers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_cubes(5)</span></span><br><span class="line"><span class="string">    225</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + <span class="built_in">pow</span>(k, <span class="number">3</span>), k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>

<p>We can notice the similar computational process above.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Functions as arguments</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(k, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pi_term</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span> / mul(k * <span class="number">4</span> - <span class="number">3</span>, k * <span class="number">4</span> - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summation</span>(<span class="params">n, term</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N terms of a sequence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation(5, cube)</span></span><br><span class="line"><span class="string">    225</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + term(k), k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_naturals</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> summation(n, identity)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_cubes</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> summation(n, cube)</span><br></pre></td></tr></table></figure>

<p>The function <code>summation(n, term)</code> above is called <strong>higher-order function</strong> - it takes another function as an argument.</p>
<p>Higher-order functions can also treat functions as return values.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_adder</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function that takes one argument K and returns K + N.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = make_adder(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(4)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adder</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> k + n</span><br><span class="line">    <span class="keyword">return</span> adder</span><br><span class="line"></span><br><span class="line">make_adder(<span class="number">2000</span>)(<span class="number">20</span>)  <span class="comment"># currying</span></span><br></pre></td></tr></table></figure>

<p>The transformation from <code>function(f, g)</code> to <code>function2(f)(g)</code> is called currying.</p>
<p>Higher-order functions :</p>
<ul>
<li>express general methods of computation;</li>
<li>remove repetition from programs;</li>
<li>separate concerns among functions (each function just do one job)</li>
</ul>
<h2 id="Lambda-Expression"><a href="#Lambda-Expression" class="headerlink" title="Lambda Expression"></a>Lambda Expression</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lambda expressions</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">square = x * x</span><br><span class="line"></span><br><span class="line">square = <span class="keyword">lambda</span> x: x * x</span><br><span class="line">square(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>


<h2 id="Function-Return"><a href="#Function-Return" class="headerlink" title="Function Return"></a>Function Return</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the smallest non-negative integer x for which f(x) is a true value.&quot;&quot;&quot;</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> f(x):</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_three</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether x is three.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; search(is_three)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x == <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">positive</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A function that is 0 until square(x)-100 is positive.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    find the smallest non-negative integer x which makes square(x) - 100 is positive:</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; search(positive)  </span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0</span>, square(x) - <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function g(y) that returns x such that f(x) == y.</span></span><br><span class="line"><span class="string">    g(f(x)) -&gt; x</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sqrt = inverse(square)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sqrt(16)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> y: search(<span class="keyword">lambda</span> x: f(x) == y)</span><br></pre></td></tr></table></figure>


<h2 id="Function-Decorators"><a href="#Function-Decorators" class="headerlink" title="Function Decorators"></a>Function Decorators</h2><p>Python provides special syntax to apply higher-order functions as part of executing a def statement, called a <code>decorator</code>.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&gt; &#x27;</span>, fn, <span class="string">&#x27;(&#x27;</span>, x, <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> fn(x)</span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="meta">@trace</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triple</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; triple(12)</span></span><br><span class="line"><span class="string">    -&gt;  &lt;function triple at 0x102a39848&gt; ( 12 )</span></span><br><span class="line"><span class="string">    36</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * x</span><br></pre></td></tr></table></figure>

<p>The annotation <code>@trace</code> affects the execution rule for def.</p>
<p>The function triple is created as usual, however, the name triple is not bound to this function.<br>Instead, it is bound to the returned function value of calling trace on the newly defined triple function, i.e. <code>triple = trace(triple)</code> </p>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(5): Environments</title>
    <url>/2021/07/04/CS61A-SICP/CS61A-5-Environments/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 5.</p>
<span id="more"></span>

<h2 id="Environments-for-Higher-Order-Functions"><a href="#Environments-for-Higher-Order-Functions" class="headerlink" title="Environments for Higher-Order Functions"></a>Environments for Higher-Order Functions</h2><p><strong>Higher-order function:</strong> A function that takes a function as an argument value or return a function as a return value.</p>
<img src="/2021/07/04/CS61A-SICP/CS61A-5-Environments/lec5-1.png" class="">


<h2 id="Environments-for-Nested-Definitions"><a href="#Environments-for-Nested-Definitions" class="headerlink" title="Environments for Nested Definitions"></a>Environments for Nested Definitions</h2><img src="/2021/07/04/CS61A-SICP/CS61A-5-Environments/lec5-2.png" class="">


<h2 id="Self-reference"><a href="#Self-reference" class="headerlink" title="Self-reference"></a>Self-reference</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Self Reference</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_all</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print all arguments of repeated calls.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = print_all(1)(2)(3)(4)(5)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line">    <span class="keyword">return</span> print_all</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sums</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print all sums of arguments of repeated calls.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = print_sums(1)(2)(3)(4)(5)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_sum</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> print_sums(n+k)</span><br><span class="line">    <span class="keyword">return</span> next_sum</span><br></pre></td></tr></table></figure>


<h2 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h2><p><strong>Currying:</strong> Transforming a multi-argument function into a single-argument, higher-order function.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Currying</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">curry2</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Curry a two-argument function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m = curry2(add)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = m(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(4)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m(2)(1)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">y</span>):</span></span><br><span class="line">            <span class="keyword">return</span> f(x, y)</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; Use lambda expression &#x27;&#x27;&#x27;</span></span><br><span class="line">curry2 = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: <span class="keyword">lambda</span> y: f(x, y)</span><br></pre></td></tr></table></figure>


<h2 id="Exercise-Implementing-Functions"><a href="#Exercise-Implementing-Functions" class="headerlink" title="Exercise: Implementing Functions"></a>Exercise: Implementing Functions</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">n, digit</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return all digits of non-negative N </span></span><br><span class="line"><span class="string">    that are not DIGIT, for some non-negative</span></span><br><span class="line"><span class="string">    DIGIT less than 10.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove(231, 3)</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove(243132, 2)</span></span><br><span class="line"><span class="string">    4313</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    kept, digits = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> ______________________:</span><br><span class="line">        n, last = n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> _____________________:</span><br><span class="line">            kept = _____________</span><br><span class="line">            digits = ___________</span><br><span class="line">    <span class="keyword">return</span> _____________________</span><br></pre></td></tr></table></figure>


<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># solution</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">n, digit</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return all digits of non-negative N </span></span><br><span class="line"><span class="string">    that are not DIGIT, for some non-negative</span></span><br><span class="line"><span class="string">    DIGIT less than 10.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove(231, 3)</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove(243132, 2)</span></span><br><span class="line"><span class="string">    4313</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    kept, digits = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n, last = n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> last != digit:</span><br><span class="line">            kept = kept + last * <span class="number">10</span> ** digits</span><br><span class="line">            digits = digits + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> kept</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(7): Tree Recursion</title>
    <url>/2021/07/06/CS61A-SICP/CS61A-7-Tree-Recursion/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 7.</p>
<span id="more"></span>


<h2 id="Tree-Recursion"><a href="#Tree-Recursion" class="headerlink" title="Tree Recursion"></a>Tree Recursion</h2><p>Tree-shaped processes arise whenever executing the body of a recursive function makes more than one recursive call.</p>
<ul>
<li>Example :</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tree recursion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the nth Fibonacci number.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fib(8)</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">2</span>) + fib(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<img src="/2021/07/06/CS61A-SICP/CS61A-7-Tree-Recursion/lec7-1.png" class="">


<h2 id="Hanoi-Tower"><a href="#Hanoi-Tower" class="headerlink" title="Hanoi Tower"></a>Hanoi Tower</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hanoi Tower</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_move</span>(<span class="params">origin, destination</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print instructions to move a disk.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Move the top disk from rod&quot;</span>, origin, <span class="string">&quot;to rod&quot;</span>, destination)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_stack</span>(<span class="params">n, start, end</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the moves required to move n disks on the start pole to the end</span></span><br><span class="line"><span class="string">    pole without violating the rules of Towers of Hanoi.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    n -- number of disks</span></span><br><span class="line"><span class="string">    start -- a pole position, either 1, 2, or 3</span></span><br><span class="line"><span class="string">    end -- a pole position, either 1, 2, or 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    There are exactly three poles, and start and end must be different. Assume</span></span><br><span class="line"><span class="string">    that the start pole has at least n disks of increasing size, and the end</span></span><br><span class="line"><span class="string">    pole is either empty or has a top disk larger than the top n start disks.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(1, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(2, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(3, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 3 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 1</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> &lt;= start &lt;= <span class="number">3</span> <span class="keyword">and</span> <span class="number">1</span> &lt;= end &lt;= <span class="number">3</span> <span class="keyword">and</span> start != end, <span class="string">&quot;Bad start/end&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        print_move(start, end)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        spare_peg = <span class="number">6</span> - start - end</span><br><span class="line">        move_stack(n-<span class="number">1</span>, start, spare_peg)</span><br><span class="line">        print_move(start, end)</span><br><span class="line">        move_stack(n-<span class="number">1</span>, spare_peg, end)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">time complexity: O(2^n)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Demo-Counting-Partitions"><a href="#Demo-Counting-Partitions" class="headerlink" title="Demo: Counting Partitions"></a>Demo: Counting Partitions</h2><img src="/2021/07/06/CS61A-SICP/CS61A-7-Tree-Recursion/lec7-2.png" class="">

<img src="/2021/07/06/CS61A-SICP/CS61A-7-Tree-Recursion/lec7-3.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_partitions</span>(<span class="params">n, m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Count the partitions of n using parts up to size m.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_partitions(6, 4)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_partitions(10, 10)</span></span><br><span class="line"><span class="string">    42</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># base case</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> m == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#recursive case</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        with_m = count_partitions(n-m, m)</span><br><span class="line">        without_m = count_partitions(n, m-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> with_m + without_m</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(6): Recursion</title>
    <url>/2021/07/04/CS61A-SICP/CS61A-6-Recursion/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 6.</p>
<span id="more"></span>


<h2 id="Recursive-Function"><a href="#Recursive-Function" class="headerlink" title="Recursive Function"></a>Recursive Function</h2><p>A function is called <code>recursive</code> if the body of that function calls itself, either directly or indirectly.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sum digits</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Split a positive integer into all but its last digit and its last digit.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of the digits of positive integer n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(9)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(18117)</span></span><br><span class="line"><span class="string">    18</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(9437184)</span></span><br><span class="line"><span class="string">    36</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(11408855402054064613470328848384)</span></span><br><span class="line"><span class="string">    126</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># base case</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="comment"># recursive case</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits(all_but_last) + last</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># String reversal</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_string</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Reverse a string s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_string(&#x27;draw&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;ward&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> reverse_string(s[<span class="number">1</span>:]) + s[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>


<h2 id="Recursion-in-Environment-Diagrams"><a href="#Recursion-in-Environment-Diagrams" class="headerlink" title="Recursion in Environment Diagrams"></a>Recursion in Environment Diagrams</h2><img src="/2021/07/04/CS61A-SICP/CS61A-6-Recursion/lec6-1.png" class="">


<h2 id="Recursion-and-Iteration"><a href="#Recursion-and-Iteration" class="headerlink" title="Recursion and Iteration"></a>Recursion and Iteration</h2><p>Iteration is a special case of recursion.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Converting iteration to recursion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits_iter</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum digits iteratively.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits_iter(11408855402054064613470328848384)</span></span><br><span class="line"><span class="string">    126</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    digit_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n, last = split(n)</span><br><span class="line">        digit_sum = digit_sum + last</span><br><span class="line">    <span class="keyword">return</span> digit_sum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits_rec</span>(<span class="params">n, digit_sum</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum digits using recursion, based on iterative version.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits_rec(11408855402054064613470328848384, 0)</span></span><br><span class="line"><span class="string">    126</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> digit_sum</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        n, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits_rec(n, digit_sum + last)</span><br></pre></td></tr></table></figure>


<h2 id="Mutual-Recursion"><a href="#Mutual-Recursion" class="headerlink" title="Mutual Recursion"></a>Mutual Recursion</h2><p>Mutual recursion occurs when two different functions call each other. </p>
<img src="/2021/07/04/CS61A-SICP/CS61A-6-Recursion/lec6-2.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Luhn algorithm: mutual recursion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Split a positive integer into all but its last digit and its last digit.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n // <span class="number">10</span>, n % <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of the digits of positive integer n.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits(all_but_last) + last</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">luhn_sum</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the digit sum of n computed by the Luhn algorithm.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(2)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(12)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(42)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(138743)</span></span><br><span class="line"><span class="string">    30</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(5105105105105100) # example Mastercard</span></span><br><span class="line"><span class="string">    20</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(4012888888881881) # example Visa</span></span><br><span class="line"><span class="string">    90</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; luhn_sum(79927398713) # from Wikipedia</span></span><br><span class="line"><span class="string">    70</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last, last = split(n)</span><br><span class="line">        <span class="keyword">return</span> luhn_sum_double(all_but_last) + last</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">luhn_sum_double</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Luhn sum of n, doubling the last digit.&quot;&quot;&quot;</span></span><br><span class="line">    all_but_last, last = split(n)</span><br><span class="line">    luhn_digit = sum_digits(<span class="number">2</span> * last)</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> luhn_digit</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> luhn_sum(all_but_last) + luhn_digit </span><br></pre></td></tr></table></figure>


<h2 id="Order-of-Recursive-Calls"><a href="#Order-of-Recursive-Calls" class="headerlink" title="Order of Recursive Calls"></a>Order of Recursive Calls</h2><p>When making a function called, you have to wait for <strong>the return</strong> before doing anything else.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ordering</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cascade</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print a cascade of prefixes of n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cascade(1234)</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        cascade(n//<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cascade2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print a cascade of prefixes of n.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">if</span> n &gt;= <span class="number">10</span>:</span><br><span class="line">        cascade(n//<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>

<ul>
<li>If two implementations are equally clear, then shorter is usually better.</li>
<li>In this case, the longer implementation is more clear (at least to me).</li>
<li>When learning to write recursive functions, put the base cases first.</li>
<li>Both are recursive functions, even though only the first has typical structure</li>
</ul>
<p>Exercise : Write a function that prints an inverse cascade.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inverse Cascade</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse_cascade</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print an inverse cascade of prefixes of n.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; inverse_cascade(1234)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    123</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    grow(n)</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    shrink(n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f_then_g</span>(<span class="params">f, g, n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n:</span><br><span class="line">        f(n)</span><br><span class="line">        g(n)</span><br><span class="line"></span><br><span class="line">grow = <span class="keyword">lambda</span> n: f_then_g(grow, <span class="built_in">print</span>, n//<span class="number">10</span>)</span><br><span class="line">shrink = <span class="keyword">lambda</span> n: f_then_g(<span class="built_in">print</span>, shrink, n//<span class="number">10</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(8): Diagnostic Review &amp; Debugging</title>
    <url>/2021/07/14/CS61A-SICP/CS61A-8-Diagnostic-Review-Debugging/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 8.</p>
<p>ü¶© Just two things in this lecture:</p>
<ul>
<li>Compare <strong>Iteration</strong> vs <strong>Recursion</strong> vs <strong>Higher Order Functions</strong></li>
<li>Debugging</li>
</ul>
<span id="more"></span>


<h2 id="Iteration-vs-Recursion-vs-Higher-Order-Functions"><a href="#Iteration-vs-Recursion-vs-Higher-Order-Functions" class="headerlink" title="Iteration vs Recursion vs Higher Order Functions"></a>Iteration vs Recursion vs Higher Order Functions</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Write a function that adds all the digits</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Iterative</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits_iterative</span>(<span class="params">n</span>):</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        result += n % <span class="number">10</span></span><br><span class="line">        n //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">sum_digits_iterative(<span class="number">1234</span>) == <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Recursive</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits_recursive</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">10</span> + sum_digits_recursive(n // <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">sum_digits_recursive(<span class="number">1234</span>) == <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># HOF</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits_hof</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">total</span>):</span></span><br><span class="line">        <span class="keyword">if</span> total == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">return</span> sum_digits_hof(n + total)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">sum_digits_hof(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(-<span class="number">1</span>) == <span class="number">10</span></span><br></pre></td></tr></table></figure>


<h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><p>To debugging successfully, you should distinguish different kinds of error and know its meanings:</p>
<ul>
<li><strong>SyntaxError:</strong> invalid python syntax</li>
<li><strong>IndentationError/TabError:</strong> indentation inconsistency<ul>
<li><code>cat -A filename.py</code> will show tabs and spaces</li>
</ul>
</li>
<li><strong>TypeError:</strong><ul>
<li>X object is not callable ‚Ä¶ : type X cannot be treated as functions </li>
<li>NoneType ‚Ä¶ : used None in some operation it wasn‚Äôt meant for</li>
</ul>
</li>
<li><strong>NameError:</strong> cannot find the name</li>
<li><strong>UnboundLocalError:</strong> a local to a frame variable is used before it is assigned</li>
</ul>
<img src="/2021/07/14/CS61A-SICP/CS61A-8-Diagnostic-Review-Debugging/1.JPG" class="">

]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A(9): Sequences and Data Abstraction</title>
    <url>/2021/07/14/CS61A-SICP/CS61A-9-Sequences-and-Data-Abstraction/</url>
    <content><![CDATA[<p>This is the lecture note of CS61A - Lecture 9.</p>
<span id="more"></span>

<h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><p>List is a built-in data type in Python.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lists</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; odds = [41, 43, 47, 49]</span><br><span class="line">[41, 43, 47, 49]</span><br><span class="line">&gt;&gt;&gt; len(odds)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; odds[1]</span><br><span class="line">43</span><br><span class="line">&gt;&gt;&gt; odds[0] - odds[3] + len(odds)</span><br><span class="line">-4</span><br><span class="line">&gt;&gt;&gt; odds[odds[3]-odds[2]]</span><br><span class="line">47</span><br><span class="line">&gt;&gt;&gt; from operator import getitem</span><br><span class="line">&gt;&gt;&gt; getitem(odds, 2)</span><br><span class="line">47</span><br><span class="line">&gt;&gt;&gt; [2, 7] + odds * 2</span><br><span class="line">[2, 7, 41, 43, 47, 49, 41, 43, 47, 49]</span><br><span class="line">&gt;&gt;&gt; pairs = [[10, 20], 30]</span><br><span class="line">&gt;&gt;&gt; pairs[0]</span><br><span class="line">[10, 20]</span><br><span class="line">&gt;&gt;&gt; pairs[0][0]</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<h2 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h2><p>Lists can contain other values, and their values can represent collections of other values.</p>
<p>You can use built-in operators <code>in</code> to test whether an element appears in a compound value. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Containers</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; digits = [1, 8, 2, 8]</span><br><span class="line">&gt;&gt;&gt; 1 <span class="keyword">in</span> digits</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 5 <span class="keyword">in</span> digits</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; <span class="string">&#x27;1&#x27;</span> not <span class="keyword">in</span> digits</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; [1, 8] <span class="keyword">in</span> digits</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; [1, 2] <span class="keyword">in</span> [[1, 2], 3]</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; [1, 2] <span class="keyword">in</span> [[[1, 2]], 3, 4]</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<h2 id="For-Statements"><a href="#For-Statements" class="headerlink" title="For Statements"></a>For Statements</h2><p>We‚Äôve written lots of code using <strong>while loops</strong>. Now, it‚Äôs time to turn to learn an alternative way of iteration structure - <strong>for loops</strong>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># while statement</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_while</span>(<span class="params">s, value</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Count the number of occurrences of value in sequence s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_while(digits, 8)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total, index = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index &lt; <span class="built_in">len</span>(s):</span><br><span class="line">        <span class="keyword">if</span> s[index] == value:</span><br><span class="line">            total = total + <span class="number">1</span></span><br><span class="line">        index = index + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for statement</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_for</span>(<span class="params">s, value</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Count the number of occurrences of value in sequence s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_for(digits, 8)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> elem == value:</span><br><span class="line">            total = total + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>

<p>There is a cool feature in Python‚Äôs for statement: <strong>sequence unpacking</strong>. Here is an example: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_same</span>(<span class="params">pairs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return how many pairs have the same element repeated.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pairs = [[1, 2], [2, 2], [2, 3], [4, 4]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_same(pairs)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    same_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> pairs:</span><br><span class="line">        <span class="keyword">if</span> x == y:</span><br><span class="line">            same_count = same_count + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> same_count</span><br></pre></td></tr></table></figure>

<p>‚ùó Attention: This feature only works for a sequence of fixed length sequences, such as sequence pairs.</p>
<h2 id="Ranges"><a href="#Ranges" class="headerlink" title="Ranges"></a>Ranges</h2><p><strong>Range</strong> is another sequence type.</p>
<img src="/2021/07/14/CS61A-SICP/CS61A-9-Sequences-and-Data-Abstraction/1.JPG" class="">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; range(5, 8)</span><br><span class="line">range(5, 8)</span><br><span class="line">&gt;&gt;&gt; list(range(5, 8))</span><br><span class="line">[5, 6, 7]</span><br><span class="line">&gt;&gt;&gt; list(range(4))</span><br><span class="line">[0, 1, 2, 3]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cheer</span>():</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Go Bears!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># here, we use _ instead of x/i to hightlight the fact that we don&#x27;t care what is it.</span></span><br></pre></td></tr></table></figure>

<h2 id="List-Comprehensions"><a href="#List-Comprehensions" class="headerlink" title="List Comprehensions"></a>List Comprehensions</h2><p>List comprehensions are a powerful form of combination in the Python language.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># List comprehensions</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odds = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x+<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> odds]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> odds <span class="keyword">if</span> <span class="number">25</span> % x == <span class="number">0</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divisors</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the integers that evenly divide n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; divisors(1)</span></span><br><span class="line"><span class="string">    [1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; divisors(4)</span></span><br><span class="line"><span class="string">    [1, 2]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; divisors(12)</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; [n for n in range(1, 1000) if sum(divisors(n)) == n]</span></span><br><span class="line"><span class="string">    [1, 6, 28, 496]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>] + [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n) <span class="keyword">if</span> n % x == <span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><img src="/2021/07/14/CS61A-SICP/CS61A-9-Sequences-and-Data-Abstraction/2.JPG" class="">

<p>For String, you can use either single quotation mark or double quotation mark. The only difference is that double quoted String can have multiple lines, while single quoted String can only have one line.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="string">&#x27;curry = lambda f: lambda x: lambda y: f(x, y)&#x27;</span></span><br><span class="line"><span class="string">&#x27;curry = lambda f: lambda x: lambda y: f(x, y)&#x27;</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exec</span>(<span class="string">&#x27;curry = lambda f: lambda x: lambda y: f(x, y)&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; curry</span><br><span class="line">&lt;<span class="keyword">function</span> &lt;lambda&gt; at 0x000001FF95D32EA0&gt;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; city = <span class="string">&#x27;Beijing&#x27;</span></span><br><span class="line">&gt;&gt;&gt; len(city)</span><br><span class="line">7</span><br><span class="line">&gt;&gt;&gt; city[2]</span><br><span class="line"><span class="string">&#x27;i&#x27;</span></span><br><span class="line">&gt;&gt;&gt; <span class="string">&#x27;iji&#x27;</span> <span class="keyword">in</span> city</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; <span class="string">&#x27;B &#x27;</span> not <span class="keyword">in</span> city</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<h2 id="Dictionaries"><a href="#Dictionaries" class="headerlink" title="Dictionaries"></a>Dictionaries</h2><p>A dictionary allows you to associate values with keys.</p>
<p>PS: Dictionary doesn‚Äôt have order inheritantly.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; numerals = &#123;<span class="string">&#x27;I&#x27;</span>: 1, <span class="string">&#x27;V&#x27;</span>: 5, <span class="string">&#x27;X&#x27;</span>: 10&#125;</span><br><span class="line">&gt;&gt;&gt; numerals[<span class="string">&#x27;X&#x27;</span>]  <span class="comment"># lookup through keys</span></span><br><span class="line">10</span><br><span class="line">&gt;&gt;&gt; numerals[10]  <span class="comment"># cannot through values</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: 10</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; numerals.keys()</span><br><span class="line">dict_keys([<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;X&#x27;</span>])</span><br><span class="line">&gt;&gt;&gt; numerals.values()</span><br><span class="line">dict_values([1, 5, 10])</span><br><span class="line">&gt;&gt;&gt; items = numerals.items()</span><br><span class="line">&gt;&gt;&gt; items</span><br><span class="line">dict_items([(<span class="string">&#x27;I&#x27;</span>, 1), (<span class="string">&#x27;V&#x27;</span>, 5), (<span class="string">&#x27;X&#x27;</span>, 10)])</span><br><span class="line">&gt;&gt;&gt; dict(items)</span><br><span class="line">&#123;<span class="string">&#x27;I&#x27;</span>: 1, <span class="string">&#x27;V&#x27;</span>: 5, <span class="string">&#x27;X&#x27;</span>: 10&#125;</span><br><span class="line">&gt;&gt;&gt; dict(items)[<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="string">&#x27;X&#x27;</span> <span class="keyword">in</span> numerals</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; numerals.get(<span class="string">&#x27;X&#x27;</span>, 0)  <span class="comment"># if &#x27;X&#x27; is the key of dictionary, return it&#x27;s value</span></span><br><span class="line">10</span><br><span class="line">&gt;&gt;&gt; numerals.get(<span class="string">&#x27;X-ray&#x27;</span>, 0)  <span class="comment"># otherwise, return 0</span></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"><span class="comment"># dictionary comprehension</span></span><br><span class="line">&gt;&gt;&gt; &#123;x: x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(5)&#125;</span><br><span class="line">&#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/07/14/CS61A-SICP/CS61A-9-Sequences-and-Data-Abstraction/3.JPG" class="">


<h2 id="Data-Abstraction"><a href="#Data-Abstraction" class="headerlink" title="Data Abstraction"></a>Data Abstraction</h2><img src="/2021/07/14/CS61A-SICP/CS61A-9-Sequences-and-Data-Abstraction/4.JPG" class="">
<img src="/2021/07/14/CS61A-SICP/CS61A-9-Sequences-and-Data-Abstraction/5.JPG" class="">
<img src="/2021/07/14/CS61A-SICP/CS61A-9-Sequences-and-Data-Abstraction/6.JPG" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Rational arithmetic</span></span><br><span class="line"><span class="comment"># How to use data?</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_rational</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The sum of rational numbers X and Y.&quot;&quot;&quot;</span></span><br><span class="line">    nx, dx = numer(x), denom(x)</span><br><span class="line">    ny, dy = numer(y), denom(y)</span><br><span class="line">    <span class="keyword">return</span> rational(nx * dy + ny * dx, dx * dy)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul_rational</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The product of rational numbers X and Y.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> rational(numer(x) * numer(y), denom(x) * denom(y))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rationals_are_equal</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;True iff rational numbers X and Y are equal.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> numer(x) * denom(y) == numer(y) * denom(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_rational</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print rational X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(numer(x), <span class="string">&quot;/&quot;</span>, denom(x))</span><br></pre></td></tr></table></figure>

<ul>
<li>rational(n, d): returns a rational number</li>
<li>numer(x): returns the numerator</li>
<li>denom(x):returns the denominator</li>
</ul>
<p>These functions implement an abstract data type for rational numbers.</p>
<p>Q: How to implement these functions?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Constructor and selectors</span></span><br><span class="line"><span class="comment"># How to represent data?</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A representation of the rational number N/D.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [n, d]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the numerator of rational number X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the denominator of rational number X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>However think about the examples as follows:</p>
<ul>
<li>3/2 * 5/3 = 15/6 = 5/2</li>
<li>2/5 + 1/10 = 25/50 = 1/2</li>
</ul>
<p>The implementation of functions need to be improved.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Improved specification</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> gcd</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A representation of the rational number N/D.</span></span><br><span class="line"><span class="string">       gcd: ÊúÄÂ§ßÂÖ¨Á∫¶Êï∞</span></span><br><span class="line"><span class="string">       from math import gcd</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    g = gcd(n, d)</span><br><span class="line">    <span class="keyword">return</span> [n//g, d//g]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the numerator of rational number X in lowest terms and having</span></span><br><span class="line"><span class="string">    the sign of X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the denominator of rational number X in lowest terms and positive.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h2 id="Abstraction-Barriers"><a href="#Abstraction-Barriers" class="headerlink" title="Abstraction Barriers"></a>Abstraction Barriers</h2><img src="/2021/07/14/CS61A-SICP/CS61A-9-Sequences-and-Data-Abstraction/7.JPG" class="">
<img src="/2021/07/14/CS61A-SICP/CS61A-9-Sequences-and-Data-Abstraction/8.JPG" class="">

<p>Âú®ËÆ°ÁÆórational numberÁöÑÂáΩÊï∞‰∏≠ÔºåÊàë‰ª¨‰∏çÈúÄË¶ÅÁü•ÈÅìÊÄé‰πàË°®Á§∫Êï∞Â≠óÔºåÊàë‰ª¨Âè™ÂÖ≥Ê≥®ËøêÁÆóÈÄªËæë„ÄÇËÄåÂú®Êï∞Â≠óË°®Á§∫ÂáΩÊï∞‰∏≠ÔºåÊàë‰ª¨Âè™ÊòØÂÖ≥Ê≥®ÊÄéÊ†∑Ë°®Á§∫Êï∞Â≠óÔºå‰ª•ÂèäÊîπËøõË°®Á§∫rational numberÁöÑÂáΩÊï∞ÔºàÈÄöËøáÂ∞ÜÂàÜÂ≠ê„ÄÅÂàÜÊØçÂàÜÂà´Èô§‰ª•ÂÆÉ‰ª¨ÁöÑÊúÄÂ§ßÂÖ¨Á∫¶Êï∞Ôºå‰ΩøÂæóÂÆÉ‰ª¨‰πãÈó¥ÊòØ‰∫íË¥®ÁöÑÔºårelative-primeÔºâËÄå‰∏çÂøÖÊîπÂèòÊ∂âÂèäÂà∞rational numberËøêÁÆóÁöÑÂáΩÔºàadd_rational„ÄÅmul_rationalÁ≠âÔºâ„ÄÇËøôÂ∞±ÊòØÊäΩË±°ÁöÑÈ≠ÖÂäõ„ÄÇ</p>
<p>Let‚Äôs take a look at another demo.</p>
<p>Here, we use function instead of built-in list to implement rational data. We only change data representation whereas keep data useage. The outcome is still correct!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Functional implementation</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rational</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A representation of the rational number N/D.&quot;&quot;&quot;</span></span><br><span class="line">    g = gcd(n, d)</span><br><span class="line">    n, d = n//g, d//g</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span>(<span class="params">name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">return</span> select</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numer</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the numerator of rational number X in lowest terms and having</span></span><br><span class="line"><span class="string">    the sign of X.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denom</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the denominator of rational number X in lowest terms and positive.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>x, y = rational(1, 2), rational(3, 8)</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>x</span></span><br><span class="line"><span class="string">&lt;function select&gt;</span></span><br><span class="line"><span class="string">print_rational(mul_rational(x, y))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<img src="/2021/07/14/CS61A-SICP/CS61A-9-Sequences-and-Data-Abstraction/9.JPG" class="">


]]></content>
      <categories>
        <category>CS61A-SICP</category>
      </categories>
      <tags>
        <tag>CS61A</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaÈõÜÂêàËØ¶Ëß£(CollectionÂíåMapÊé•Âè£)</title>
    <url>/2021/07/19/Coding/Java-Collection-Interface/</url>
    <content><![CDATA[<p>JavaÁöÑ <code>util</code> ÂåÖ‰∏≠Êúâ‰∏§‰∏™ÈáçË¶ÅÁöÑÁà∂Êé•Âè£Ôºö<code>Collection</code> Âíå <code>Map</code> „ÄÇËøô‰∏§‰∏™Êé•Âè£Êèê‰æõ‰∫ÜËØ∏Â§öÊï∞ÊçÆÁªìÊûÑÁöÑÂÆûÁé∞Ôºå‰ΩøÊàë‰ª¨ÂèØ‰ª•‰∏ìÊ≥®‰∫éÁ®ãÂ∫èÁöÑÈÄªËæëËÄå‰∏çÂøÖÂÖ≥ÂøÉÂ∫ïÂ±ÇÁªÜËäÇ„ÄÇ</p>
<p>Âú®ËøôÁØáÂçöÊñá‰∏≠ÔºåÊàë‰ª¨Â∞ÜËÆ®ËÆ∫‰ª•‰∏ãÂá†ÁßçÊé•Âè£Ôºå‰ª•ÂèäÂÆÉ‰ª¨ÂàÜÂà´ÁöÑÂÆûÁé∞Á±ª„ÄÇ</p>
<span id="more"></span>

<ul>
<li>java.util package<ul>
<li>Collection interface<ul>
<li>List interface<ul>
<li>ArrayList class</li>
<li>LinkedList class</li>
<li>Vector class<ul>
<li>Stack </li>
</ul>
</li>
</ul>
</li>
<li>Queue interface<ul>
<li>PriorityQueue class</li>
</ul>
</li>
<li>Set interface<ul>
<li>HashSet class</li>
<li>LinkedHashSet class</li>
<li>SortedSet interface<ul>
<li>TreeSet class</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Map interface<ul>
<li>Hashtable class</li>
<li>HashMap class</li>
<li>LinkedHashMap class</li>
<li>SortedMap interface<ul>
<li>TreeMap class</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<img src="/2021/07/19/Coding/Java-Collection-Interface/Collection-Interface-in-Java.png" class="">


<h2 id="ListÊé•Âè£"><a href="#ListÊé•Âè£" class="headerlink" title="ListÊé•Âè£"></a>ListÊé•Âè£</h2><p>ListÊé•Âè£ÂØπÂ∫î‰∫é List ÊäΩË±°Êï∞ÊçÆÁ±ªÂûã„ÄÇ</p>
<h3 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h3><p>ListÊé•Âè£Êúâ3ÁßçÂÖ∑‰ΩìÁöÑÂÆûÁé∞Ôºö</p>
<ul>
<li>ArrayListÁ±ªÔºöÂ∫ïÂ±ÇÊï∞ÊçÆÁªìÊûÑ‰∏∫ <code>Âä®ÊÄÅÊï∞ÁªÑ(array)</code> Ôºå ÂÖ∂‰∏≠Êâ©Â±ïÂõ†Â≠ê‰∏∫0.5„ÄÇ</li>
<li>LinkedListÁ±ªÔºöÂ∫ïÂ±ÇÊï∞ÊçÆÁªìÊûÑ‰∏∫ <code>ÂèåÂêëÈìæË°®(doubly linked list)</code> „ÄÇ</li>
<li>VectorÁ±ªÔºöÂ∫ïÂ±ÇÊï∞ÊçÆÁªìÊûÑ‰∏∫ <code>Âä®ÊÄÅÊï∞ÁªÑ(array)</code>Ôºå ÂÖ∂‰∏≠Êâ©Â±ïÂõ†Â≠ê‰∏∫1„ÄÇ</li>
</ul>
<p>Ê†πÊçÆÊï∞ÊçÆÁªìÊûÑÁöÑÁü•ËØÜÔºåÂ¶ÇÊûú‰Ω†ÈúÄË¶ÅËøõË°åÂæàÂ§öÁöÑ <code>insertion</code> Êàñ <code>deletion</code> Êìç‰ΩúÔºåÈÇ£‰πàÈÄâÁî® <code>LinkedList class</code> ‰ºöÊØîËæÉÂ•ΩÔºõËÄåÂ¶ÇÊûúÂ§ßÈáèÁöÑÊìç‰ΩúÈÉΩÊòØ <code>access</code> Êìç‰ΩúÔºåÈÇ£‰πà <code>ArrayList class</code> ÊòØÊõ¥Â•ΩÁöÑÈÄâÊã©„ÄÇ</p>
<hr>
<p>‚õ±Ô∏è <strong>ArrayList</strong> vs. <strong>Vector</strong></p>
<p>Vector  Âíå ArrayList ÁöÑÂ∫ïÂ±ÇÊï∞ÊçÆÁªìÊûÑÈÉΩÊòØÊï∞ÁªÑ„ÄÇ‰∏§ËÄÖÂîØ‰∏ÄÁöÑÂå∫Âà´Âú®‰∫éÔºöArrayList‰∏≠ÁöÑÊñπÊ≥ï‰∏çÊòØÁ∫øÁ®ãÂÆâÂÖ®ÁöÑÔºåËÄåVector‰∏≠ÁöÑÊñπÊ≥ïÊòØÂêåÊ≠•ÁöÑÔºåÊÑèÂë≥ÁùÄÁ∫øÁ®ãÂÆâÂÖ®„ÄÇÊâÄ‰ª•ÔºåÂ¶ÇÊûú‰Ω†ÈúÄË¶ÅÁ∫øÁ®ãÂÆâÂÖ®ÔºåÈÇ£‰πàÂ∫îËØ•‰ΩøÁî®Vector„ÄÇ‰ΩÜÂØπ‰∫éÂçïÁ∫øÁ®ãÁéØÂ¢ÉÔºå‰ΩøÁî®‰ΩøÁî®Vector‰ºöËä±Ë¥πÊõ¥Â§öÁöÑËµÑÊ∫êÔºåÊâÄ‰ª•Áî®ArrayListÊõ¥Â•Ω„ÄÇ</p>
<p>Â¶ÇÊûú‰Ω†Êü•ÁúãÂ∫ïÂ±Ç‰ª£Á†ÅÔºå‰Ω†‰ºöÂèëÁé∞ÔºåVecotr‰∏≠ÁöÑÈáçË¶ÅÊìç‰ΩúÔºåÂ¶Çadd, remove, getÁ≠âÔºåËøô‰∫õÊñπÊ≥ïÈÉΩË¢´ <code>synchronized</code> ÂÖ≥ÈîÆÂ≠óÊâÄ‰øÆÈ•∞ÔºåÊù•‰øùËØÅÁ∫øÁ®ãÁöÑÂÆâÂÖ®ÊÄß„ÄÇ</p>
<hr>
<p>Êé•‰∏ãÊù•ÔºåËÆ©Êàë‰ª¨Êù•Âá†‰∏™ListÁöÑ‰ª£Á†ÅÁâáÊÆµ„ÄÇ</p>
<h3 id="Demos"><a href="#Demos" class="headerlink" title="Demos"></a>Demos</h3><h4 id="‰∏§ÁßçÂÆû‰æãÂåñÊñπÊ≥ï"><a href="#‰∏§ÁßçÂÆû‰æãÂåñÊñπÊ≥ï" class="headerlink" title="‰∏§ÁßçÂÆû‰æãÂåñÊñπÊ≥ï"></a>‰∏§ÁßçÂÆû‰æãÂåñÊñπÊ≥ï</h4><p>È¶ñÂÖàÈúÄË¶ÅËØ¥ÊòéÁöÑÊòØÔºåÂú®ÂÆû‰æãÂåñ‰∏Ä‰∏™ListÁöÑÊó∂ÂÄôÔºåÈô§‰∫ÜÊàë‰ª¨ÂæàÁÜüÊÇâÁöÑ <code>List&lt;Integer&gt; L = new ArrayList&lt;&gt;();</code> ÊñπÊ≥ï‰πãÂ§ñÔºåJava9Â¢ûÂä†ÁöÑÈùôÊÄÅÂ∑•ÂéÇÊñπÊ≥ï <code>.of()</code> ‰πüÂèØ‰ª•ÂàõÂª∫ÂÆû‰æãÔºå‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; L = List.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">//		L.add(5);    // Exception, because L is immutable.</span></span><br><span class="line">		System.out.println(L);  <span class="comment">// [0, 1, 2, 3, 4]</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>‰∏çËøáÈúÄË¶ÅÊ≥®ÊÑèÁöÑÊòØÔºå‰ΩøÁî®‰∏äËø∞ÊñπÊ≥ïÂàõÂª∫ÁöÑListÊòØ**‰∏çÂèØÂèòÁöÑ(immutable)**Ôºå‰πüÂ∞±ÊòØËØ¥‰∏ÄÊó¶ÂàõÂª∫Â•Ω‰∏Ä‰∏™ListÔºåÈÇ£‰πàÂÆÉÁöÑÂÄºÔºåÂÆÉÁöÑÂ§ßÂ∞èÈÉΩÊòØ‰∏çÂèØÂèòÁöÑ„ÄÇÂêéÈù¢ÁöÑ <code>Set/Map/Queue</code> ‰πüÊòØ‰∏ÄÊ†∑ÁöÑÔºåÂ∞±‰∏çÂÜçËµòËø∞‰∫Ü„ÄÇ</p>
<h4 id="ListÁöÑÂü∫Êú¨Áî®Ê≥ï"><a href="#ListÁöÑÂü∫Êú¨Áî®Ê≥ï" class="headerlink" title="ListÁöÑÂü∫Êú¨Áî®Ê≥ï"></a>ListÁöÑÂü∫Êú¨Áî®Ê≥ï</h4><p>ËÆ©Êàë‰ª¨Êù•Áúã‰∏Ä‰∏™ <code>ArrayList</code> ÁöÑ‰ª£Á†ÅÁâáÊÆµÔºö</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;String&gt; words = List.of(<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Peach&quot;</span>);</span><br><span class="line">		List&lt;String&gt; wordsArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(words);</span><br><span class="line">		System.out.println(<span class="string">&quot;Original list: &quot;</span> + wordsArrayList);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Appends an item at the end of list. */</span></span><br><span class="line">		wordsArrayList.add(<span class="number">0</span>, <span class="string">&quot;Dog&quot;</span>);  <span class="comment">// position is optional</span></span><br><span class="line">		System.out.println(<span class="string">&quot;after adding Dog at index 0: &quot;</span> + wordsArrayList);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Appends all items at the end of list. */</span></span><br><span class="line">		List&lt;String&gt; newList = List.of(<span class="string">&quot;Mouse&quot;</span>, <span class="string">&quot;Cat&quot;</span>, <span class="string">&quot;Zebra&quot;</span>);</span><br><span class="line">		wordsArrayList.addAll(<span class="number">0</span>, newList);  <span class="comment">// position is optional</span></span><br><span class="line">		System.out.println(<span class="string">&quot;after adding a list: &quot;</span> + wordsArrayList);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Removes a specific item. */</span></span><br><span class="line">		wordsArrayList.remove(<span class="number">0</span>);   <span class="comment">//  == wordsArrayList.remove(&quot;Dog&quot;);</span></span><br><span class="line">		System.out.println(<span class="string">&quot;after removing item at index 0: &quot;</span> + wordsArrayList);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Replaces the item at the specified position. */</span></span><br><span class="line">		wordsArrayList.set(<span class="number">3</span>, <span class="string">&quot;Fish&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;after changing element at index 3: &quot;</span> + wordsArrayList);</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ËæìÂá∫Ôºö</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Original list: [Apple, Peach]</span><br><span class="line">after adding Dog at index 0: [Dog, Apple, Peach]</span><br><span class="line">after adding a list: [Mouse, Cat, Zebra, Dog, Apple, Peach]</span><br><span class="line">after removing item at index 0: [Cat, Zebra, Dog, Apple, Peach]</span><br><span class="line">after changing element at index 3: [Cat, Zebra, Dog, Fish, Peach]</span><br></pre></td></tr></table></figure>

<p>Êó†ËÆ∫ÊòØArrayListÔºåËøòÊòØLinkedListÔºåÊàñÊòØVectorÈÉΩÁ¨¶Âêà‰∏äËø∞Â±ïÁ§∫ÁöÑListÁöÑ‰ΩøÁî®ÊñπÊ≥ïÔºåÂú®Ê≠§Â∞±‰∏çÂú®ÂÜô <code>LinkedList</code> Âíå <code>Vector</code> ÁöÑ‰ª£Á†Å‰∫Ü„ÄÇ</p>
<h4 id="ÈÅçÂéÜList"><a href="#ÈÅçÂéÜList" class="headerlink" title="ÈÅçÂéÜList"></a>ÈÅçÂéÜList</h4><p>Êé•‰∏ãÊù•ËÆ©Êàë‰ª¨Êù•Áúã‰∏Ä‰∏ãÂ¶Ç‰ΩïÈÅçÂéÜÂàóË°®ÂÖÉÁ¥†„ÄÇËøôÈáåÊàë‰ª¨Â±ïÁ§∫3Áßç‰∏çÂêåÈÅçÂéÜÊñπÊ≥ïÔºåÊ≥®ÊÑèÂÆÉ‰ª¨ÁöÑ‰ΩøÁî®„ÄÇ</p>
<ol>
<li>Á¨¨1ÁßçÊñπÊ≥ïÔºå‰πüÊòØÊúÄÂü∫Êú¨ÁöÑÊñπÊ≥ïÔºö</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; L0 = List.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;(L0);</span><br><span class="line">        System.out.println(<span class="string">&quot;original list: &quot;</span> + L);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* Removes the odd item */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = L.get(i);</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            	L.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;even list: &quot;</span> + L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ËæìÂá∫Ôºö</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">original list: [0, 1, 2, 3, 4]</span><br><span class="line">even list: [0, 2, 4]</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Á¨¨2ÁßçÊñπÊ≥ïÔºåÊàë‰ª¨‰ΩøÁî® <code>foreach</code> Âæ™ÁéØÔºö</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; L0 = List.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;(L0);</span><br><span class="line">        System.out.println(<span class="string">&quot;original list: &quot;</span> + L);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Integer num: L) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                L.remove(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;even list: &quot;</span> + L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ËæìÂá∫Ôºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">original list: [0, 1, 2, 3, 4]</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.util.ConcurrentModificationException</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>‰Ω†ÂèØ‰ª•ÁúãÂà∞ÔºåÂΩì‰ΩøÁî®foreachÂæ™ÁéØÊó∂ÔºåÂ¶ÇÊûú‰Ω†Âú®Âæ™ÁéØ‰ΩìÂÜÖÊÉ≥Ë¶ÅËøõË°å <code>remove/add</code> Êìç‰Ωú‰ºöÊä•Èîô„ÄÇÂú®ËøôÁßçÊÉÖÂÜµ‰∏ãÔºå‰Ω†ÂèØ‰ª•‰ΩøÁî®Á¨¨1ÁßçÊñπÊ≥ïÔºå‰πüÂèØ‰ª•‰ΩøÁî®‰∏ãÈù¢ËÆ≤ÁöÑÁ¨¨3ÁßçÊñπÊ≥ï„ÄÇ</p>
<ol start="3">
<li>Á¨¨3ÁßçÊñπÊ≥ïÔºå‰ΩøÁî® <code>.iterator()</code> ÊñπÊ≥ï</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;Integer&gt; L0 = List.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">		List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;(L0);</span><br><span class="line">		System.out.println(<span class="string">&quot;original list: &quot;</span> + L);</span><br><span class="line"></span><br><span class="line">		<span class="comment">/** .iterator() method:  // in List interface</span></span><br><span class="line"><span class="comment">		 * Returns an iterator over the elements in this list in proper sequence.</span></span><br><span class="line"><span class="comment">		 *</span></span><br><span class="line"><span class="comment">		 * .hasNext() method:  // in Iterator interface</span></span><br><span class="line"><span class="comment">		 * Returns &#123;<span class="doctag">@code</span> true&#125; if the iteration has more elements.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		Iterator&lt;Integer&gt; iterator = L.iterator();</span><br><span class="line">		<span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">			<span class="keyword">int</span> num = iterator.next();</span><br><span class="line">			<span class="keyword">if</span> (num % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">				iterator.remove();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;even list: &quot;</span> + L);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>












<p>(Âå∫Âà´Ôºö<code>java.util.Collection</code> ÊòØ‰∏Ä‰∏™ÈõÜÂêàÊé•Âè£; <code>java.util.Collections</code> ÊòØ‰∏Ä‰∏™ÂåÖË£ÖÁ±ª, ÂåÖÂê´ÊúâÂêÑÁßçÊúâÂÖ≥ÈõÜÂêàÊìç‰ΩúÁöÑÈùôÊÄÅÂ§öÊÄÅÊñπÊ≥ï„ÄÇ)</p>
<h2 id="Set-Interface"><a href="#Set-Interface" class="headerlink" title="Set Interface"></a>Set Interface</h2><h2 id="Queue-Interface"><a href="#Queue-Interface" class="headerlink" title="Queue Interface"></a>Queue Interface</h2><h2 id="Map-Interface"><a href="#Map-Interface" class="headerlink" title="Map Interface"></a>Map Interface</h2>]]></content>
      <categories>
        <category>Coding</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Python: ÂÖ≥ÈîÆÂ≠óglobalÂíånonlocal</title>
    <url>/2021/07/10/Coding/Python-%E5%85%B3%E9%94%AE%E5%AD%97global%E5%92%8Cnonlocal/</url>
    <content><![CDATA[<p>Â≠¶‰π†ÂÖ≥ÈîÆÂ≠ó <code>global</code> Âíå <code>nonlocal</code> ÁöÑÁî®Ê≥ï„ÄÇ</p>
<span id="more"></span>

<h2 id="Âºï‰æã"><a href="#Âºï‰æã" class="headerlink" title="Âºï‰æã"></a>Âºï‰æã</h2><p>ÂÖàÊù•Áúã‰∏Ä‰∏™‰ª£Á†ÅÁâáÊÆµÔºö</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">increment = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater</span>(<span class="params">func, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the function that computes the nth application of func.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeater</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            x = func(x)</span><br><span class="line">            n = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> repeater</span><br><span class="line"></span><br><span class="line">add_three = make_repeater(increment, <span class="number">3</span>)</span><br><span class="line">add_three(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>ÂΩìËøêË°å‰∏äËø∞‰ª£Á†ÅÁâáÊÆµÊó∂Ôºå‰ºö‰∫ßÁîüÂ¶Ç‰∏ãÁöÑÈîôËØØÔºö</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UnboundLocalError: <span class="built_in">local</span> variable <span class="string">&#x27;n&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure>

<p>Ë¶ÅÁêÜËß£Ëøô‰∏™ÈîôËØØÁöÑÂéüÂõ†ÔºåÈúÄË¶ÅÁü•ÈÅìÂÖ®Â±ÄÂèòÈáèÂíåÂ±ÄÈÉ®ÂèòÈáèÁöÑÊ¶ÇÂøµ„ÄÇ</p>
<h2 id="Â±ÄÈÉ®ÂèòÈáèÂíåÂÖ®Â±ÄÂèòÈáè"><a href="#Â±ÄÈÉ®ÂèòÈáèÂíåÂÖ®Â±ÄÂèòÈáè" class="headerlink" title="Â±ÄÈÉ®ÂèòÈáèÂíåÂÖ®Â±ÄÂèòÈáè"></a>Â±ÄÈÉ®ÂèòÈáèÂíåÂÖ®Â±ÄÂèòÈáè</h2><h3 id="Â±ÄÈÉ®ÂèòÈáè"><a href="#Â±ÄÈÉ®ÂèòÈáè" class="headerlink" title="Â±ÄÈÉ®ÂèòÈáè"></a>Â±ÄÈÉ®ÂèòÈáè</h3><p>ÂΩìÊàë‰ª¨Âú®ÂáΩÊï∞‰ΩìÂÜÖ„ÄÅÊàñËÄÖÂú®Â±ÄÈÉ®ËåÉÂõ¥ÂÜÖÂÆö‰πâ‰∏Ä‰∏™ÂèòÈáèÊó∂ÔºåËØ•ÂèòÈáèË¢´Áß∞‰∏∫ <code>Â±ÄÈÉ®ÂèòÈáè</code> „ÄÇÂ±ÄÈÉ®ÂèòÈáèÂè™ËÉΩÂú®Â±ÄÈÉ®ËåÉÂõ¥ÂÜÖË¢´ËÆøÈóÆÔºå‰∏çËÉΩÂú®Â±ÄÈÉ®ËåÉÂõ¥Â§ñË¢´ËÆøÈóÆ„ÄÇ</p>
<p><strong>‰æã1ÔºöÂú®ËåÉÂõ¥Â§ñËÆøÈóÆÂ±ÄÈÉ®ÂèòÈáè</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    y = <span class="string">&quot;local&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure>

<p><strong>ËæìÂá∫Ôºö</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span></span><br><span class="line">NameError: name <span class="string">&#x27;y&#x27;</span> is not defined</span><br></pre></td></tr></table></figure>

<h3 id="ÂÖ®Â±ÄÂèòÈáè"><a href="#ÂÖ®Â±ÄÂèòÈáè" class="headerlink" title="ÂÖ®Â±ÄÂèòÈáè"></a>ÂÖ®Â±ÄÂèòÈáè</h3><p>ÂΩìÊàë‰ª¨Âú®ÂáΩÊï∞Â§ñ„ÄÅÊàñËÄÖÂú®ÂÖ®Â±ÄËåÉÂõ¥ÂÜÖÂÆö‰πâ‰∏Ä‰∏™ÂèòÈáèÊó∂ÔºåËØ•ÂèòÈáèË¢´Áß∞‰∏∫ <code>ÂÖ®Â±ÄÂèòÈáè</code> „ÄÇÂÖ®Â±ÄÂèòÈáèÂèØ‰ª•Âú®ÂáΩÊï∞ÂÜÖÈÉ®Ë¢´ËÆøÈóÆÔºå‰πüÂèØ‰ª•Âú®ÂáΩÊï∞Â§ñÈÉ®Ë¢´ËÆøÈóÆ„ÄÇ</p>
<p>ËÆ©Êàë‰ª¨Êù•Áúã‰∏Ä‰∏™ÂÖ®Â±ÄÂèòÈáèÁöÑ‰æãÂ≠êÔºö</p>
<p><strong>‰æã3ÔºöÂÖ®Â±ÄÂèòÈáè</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x inside:&quot;</span>, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x outside:&quot;</span>, x)</span><br></pre></td></tr></table></figure>

<p><strong>ËæìÂá∫Ôºö</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x inside: <span class="keyword">global</span></span><br><span class="line">x outside: <span class="keyword">global</span></span><br></pre></td></tr></table></figure>

<p>Âú®‰∏äËø∞‰ª£Á†Å‰∏≠Ôºå<code>x</code> ÊòØ‰∏Ä‰∏™ÂÖ®Â±ÄÂèòÈáèÔºåÊàë‰ª¨ÂèØ‰ª•Âú®ÂáΩÊï∞ <code>foo</code> ÂÜÖÈÉ®ËÆøÈóÆ <code>x</code> Ôºå‰πüÂèØ‰ª•Âú®ÂáΩÊï∞Â§ñÈÉ®ËÆøÈóÆ <code>x</code> „ÄÇ</p>
<p>ÂÄºÂæóÊ≥®ÊÑèÁöÑÊòØÔºåÂú®‰∏äÈù¢ÁöÑ‰ª£Á†Å‰∏≠ÔºåÊàë‰ª¨‰ªÖ‰ªÖÂè™ÊòØËÆøÈóÆ <code>x</code> „ÄÇ‰ΩÜÂ¶ÇÊûúÊàë‰ª¨ÊÉ≥Ë¶ÅÂÅöÁöÑÊòØ‰øÆÊîπ <code>x</code> ÁöÑÂÄºÂë¢Ôºü</p>
<p><strong>‰æã4: Âú®ÂáΩÊï∞ÂÜÖÈÉ®‰øÆÊîπÂÖ®Â±ÄÂèòÈáè</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    x = x * <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p><strong>Output</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UnboundLocalError: <span class="built_in">local</span> variable <span class="string">&#x27;x&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure>

<p>ËøêË°å‰ºöÂá∫Áé∞ÈîôËØØ„ÄÇ</p>
<p>ËøôÊòØÂõ†‰∏∫ÔºåÂΩìÊàë‰ª¨Âú®ÂáΩÊï∞ÂÜÖÈÉ®ÂØπ <code>x</code> ‰øÆÊîπÈáçÊñ∞ËµãÂÄºÊó∂ÔºåPythonËß£ÈáäÂô®‰ºöËÆ§‰∏∫ <code>x</code> ÊòØÂ±ÄÈÉ®ÂèòÈáèËÄå‰∏çÊòØÂÖ®Â±ÄÂèòÈáèÔºåËÄåËøô‰∏™Â±ÄÈÉ®ÂèòÈáè‰πüÂπ∂Ê≤°ÊúâÂú®ÂáΩÊï∞ÂÜÖÈÉ®ÂÆö‰πâÔºåÊâÄ‰ª•Â∞±‰∫ßÁîü‰∫ÜËøô‰∏™ÈîôËØØ„ÄÇ</p>
<h2 id="ÂÖ≥ÈîÆÂ≠óÔºöglobalÂíånonlocal"><a href="#ÂÖ≥ÈîÆÂ≠óÔºöglobalÂíånonlocal" class="headerlink" title="ÂÖ≥ÈîÆÂ≠óÔºöglobalÂíånonlocal"></a>ÂÖ≥ÈîÆÂ≠óÔºöglobalÂíånonlocal</h2><h3 id="globalÂÖ≥ÈîÆÂ≠ó"><a href="#globalÂÖ≥ÈîÆÂ≠ó" class="headerlink" title="globalÂÖ≥ÈîÆÂ≠ó"></a>globalÂÖ≥ÈîÆÂ≠ó</h3><p>‰∏∫‰∫ÜËß£ÂÜ≥‰æã4ÁöÑÈóÆÈ¢òÔºåÊàë‰ª¨‰ΩøÁî® <code>global</code> ÂÖ≥ÈîÆÂ≠ó„ÄÇÁé∞Âú®ÂáΩÊï∞ÂÜÖÈÉ®Â£∞ÊòéÂèòÈáè <code>x</code> ÊòØÂÖ®Â±ÄÂèòÈáèÔºåÂÜçÂØπÂÖ∂ËøõË°å‰øÆÊîπ„ÄÇ‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x = x * <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<p><strong>ËæìÂá∫Ôºö</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">globalglobal</span><br><span class="line">globalglobal</span><br></pre></td></tr></table></figure>

<h3 id="nonlocalÂÖ≥ÈîÆÂ≠ó"><a href="#nonlocalÂÖ≥ÈîÆÂ≠ó" class="headerlink" title="nonlocalÂÖ≥ÈîÆÂ≠ó"></a>nonlocalÂÖ≥ÈîÆÂ≠ó</h3><p>Êó¢ÁÑ∂ËØ¥Âà∞‰∫ÜlocalÂÖ≥ÈîÆÂ≠óÔºåÂ∞±È°∫‰æøËØ¥‰∏Ä‰∏ã <code>nonlocal</code> ÂÖ≥ÈîÆÂ≠ó„ÄÇ</p>
<p>ÊØîËæÉ‰ª•‰∏ã‰∏§‰∏™‰ª£Á†ÅÔºö</p>
<p><strong>‰æã5Ôºö‰∏ç‰ΩøÁî®nonlocalÂÖ≥ÈîÆÂ≠ó</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;variable 1&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">        name = <span class="string">&#x27;variable 2&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    </span><br><span class="line">func1()</span><br></pre></td></tr></table></figure>

<p><strong>ËæìÂá∫Ôºö</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">variable 2</span><br><span class="line">variable 1</span><br></pre></td></tr></table></figure>

<p><strong>‰æã6Ôºö‰ΩøÁî®nonlocalÂÖ≥ÈîÆÂ≠ó</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;variable 1&#x27;</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> name</span><br><span class="line">        name = <span class="string">&#x27;variable 2&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(name) </span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    </span><br><span class="line">func2()</span><br></pre></td></tr></table></figure>

<p><strong>ËæìÂá∫Ôºö</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">variable 2</span><br><span class="line">variable 2</span><br></pre></td></tr></table></figure>

<p>Ê≥®ÊÑèÂà∞‰æã6ÁöÑÁ¨¨4Ë°å‰ª£Á†ÅÔºåÂµåÂ•óÂáΩÊï∞ <code>foo</code> ‰∏≠ÁöÑÂèòÈáè <code>name</code> ‰ΩøÁî®‰∫ÜÂÖ≥ÈîÆÂ≠ó <code>nonlocal</code> „ÄÇ</p>
<p>Â¶ÇÊûú‰∏Ä‰∏™ÂèòÈáèË¢´ <code>nonlocal</code> ‰øÆÈ•∞ÔºåÂàôÊ†áËØÜ‰∫ÜËØ•ÂèòÈáèÊòØ‰∏ä‰∏ÄÁ∫ßÂáΩÊï∞‰∏≠ÁöÑÂ±ÄÈÉ®ÂèòÈáèÔºåÂú®ËøôÈáåÔºåÊåáÁöÑÊòØÂáΩÊï∞ <code>func2</code> ‰∏≠ÁöÑÂêåÂêçÁöÑÂèòÈáè <code>name</code> (line 2) „ÄÇÂõ†Ê≠§Âú®ÂµåÂ•óÂáΩÊï∞ <code>foo</code> ‰∏≠‰øÆÊîπÂèòÈáè <code>name</code> ÁöÑÂÄº‰πüÂ∞±‰øÆÊîπ‰∫Ü <code>func2</code> ‰∏≠ÂèòÈáè <code>name</code> ÁöÑÂÄº„ÄÇ</p>
<p>ËÄåÂú®‰æã5‰∏≠ÔºåÂµåÂ•óÂáΩÊï∞ <code>foo</code> ‰∏≠ÁöÑÂèòÈáè <code>name</code> Âπ∂Ê≤°ÊúâÁî® <code>nonlocal</code> ‰øÆÈ•∞ÔºåÈÇ£‰πàÂÆÉ‰ªÖ‰ªÖÊòØ <code>foo</code> ‰∏≠ÁöÑ‰∏Ä‰∏™Â±ÄÈÉ®ÂèòÈáè„ÄÇÂú®ÂáΩÊï∞ <code>foo</code> ÁöÑËåÉÂõ¥Â§ñÊòØ‰∏çËÉΩËÆøÈóÆËøô‰∏™ÂèòÈáèÁöÑ„ÄÇÊâÄ‰ª•Á¨¨7Ë°åÊâìÂç∞ÁöÑÊòØÁ¨¨2Ë°åÂÆö‰πâÁöÑÂ±ÄÈÉ®ÂèòÈáè <code>name</code>, ËÄå‰∏çÊòØÁ¨¨4Ë°åÁöÑÂ±ÄÈÉ®ÂèòÈáè„ÄÇ</p>
<h2 id="Â∞æÂ£∞"><a href="#Â∞æÂ£∞" class="headerlink" title="Â∞æÂ£∞"></a>Â∞æÂ£∞</h2><p>ÊúÄÂêéËÆ©Êàë‰ª¨ÈáçÊñ∞Áúã‰∏Ä‰∏ãÂºï‰æã‰∏≠ÁöÑ‰ª£Á†ÅÔºö</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">increment = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater</span>(<span class="params">func, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the function that computes the nth application of func.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeater</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            x = func(x)</span><br><span class="line">            n = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> repeater</span><br><span class="line"></span><br><span class="line">add_three = make_repeater(increment, <span class="number">3</span>)</span><br><span class="line">add_three(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>Ë¶ÅÊÄéÊ†∑‰øÆÊîπÊâçËÉΩ‰Ωø‰ª£Á†ÅÂ∑•‰ΩúÂë¢Ôºü</p>
<p>Á≠îÊ°à‰∏çÂîØ‰∏ÄÔºå‰ΩÜ‰∏Ä‰∏™ÂèØË°åÁöÑÂäûÊ≥ïÊòØ‰ΩøÁî® <code>nonlocal</code> ÂÖ≥ÈîÆÂ≠óÊù•‰øÆÈ•∞ÂèòÈáè <code>n</code> Ôºå Â¶Ç‰∏ãÊâÄÁ§∫Ôºö</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_repeater</span>(<span class="params">func, n</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeater</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> n</span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            x = func(x)</span><br><span class="line">            n = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> repeater</span><br></pre></td></tr></table></figure>

<p>üåº ÂÆåÁªìÔºåÊííËä± ‚úø‚úø„ÉΩ(¬∞‚ñΩ¬∞)„Éé‚úø</p>
]]></content>
      <categories>
        <category>Coding</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(1): Hello Java World</title>
    <url>/2021/06/23/CS61B-DSA/CS61B-1-Hello-Java-World/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 1.</p>
<span id="more"></span>

<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Let‚Äôs start learning CS61B! Firstly, let‚Äôs make sure what is this course about:</p>
<ul>
<li>Writing code that runs efficiently.<ul>
<li>Good <code>algorithms</code>.</li>
<li>Good <code>data structures</code>.</li>
</ul>
</li>
<li>Writing code efficiently.<ul>
<li>Designing, building, testing, and debugging large programs.</li>
<li>Use of programming tools.<ul>
<li>git, IntelliJ, JUnit, and various command line tools.</li>
</ul>
</li>
<li>Java (not the focus of the course!)</li>
</ul>
</li>
</ul>
<p>This course assumes you have a solid foundation in programming fundamentals, including OOP, recursion, lists and trees. You can access <a href="https://inst.eecs.berkeley.edu/~cs61a/archives.html">CS61A</a> if you do not have these concepts.  </p>
<h2 id="Hello-Java-World"><a href="#Hello-Java-World" class="headerlink" title="Hello Java World"></a>Hello Java World</h2><p>Take a look at <em>hello world</em> programs implemented in Python and Java separately.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># in Python</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in Java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> lec1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arrgs)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">1. All code in Java must be part of a class.</span></span><br><span class="line"><span class="comment">2. We delimit the beginnging and end of segments of code using &#123; and &#125;.</span></span><br><span class="line"><span class="comment">3. All statements in Java must end in a semi-colon.</span></span><br><span class="line"><span class="comment">4. For code to run we need &quot;public static void main(String[] arrgs)&quot;.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Static-Typing"><a href="#Static-Typing" class="headerlink" title="Static Typing"></a>Static Typing</h2><p>Let‚Äôs compare two pieces of code, you should notice that the usages of variable x between Python and Java are different.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;horse&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> + <span class="string">&quot;horse&quot;</span>)  <span class="comment"># error</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lec1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloNumbers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">            x += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// x = &quot;horse&quot;;  // error: cannot convert from String to int</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. Before Java variables can be used, they must be declared.</span></span><br><span class="line"><span class="comment">2. Java variables must have a specific type.</span></span><br><span class="line"><span class="comment">3. Java varialbe types can never change.</span></span><br><span class="line"><span class="comment">4. Types are verified (by compiler) before the code even runs!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Declaring-Functions"><a href="#Declaring-Functions" class="headerlink" title="Declaring Functions"></a>Declaring Functions</h2><p>Finally, let‚Äôs learn how to define and use functions in Java. You should notice the way of adding comment in Java.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">larger</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Returns the larger of x and y. &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(larger(-<span class="number">5</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lec1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LargerDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Returns the larger of x and y. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">larger</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(larger(-<span class="number">5</span>, <span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. Function must be declared as part of a class in Java.</span></span><br><span class="line"><span class="comment">    A function that is part of a class is called a &quot;method&quot;.</span></span><br><span class="line"><span class="comment">    So in Java, all functions are methods.</span></span><br><span class="line"><span class="comment">2. To define a function a Java, we use &quot;public static&quot;.</span></span><br><span class="line"><span class="comment">    We will see alternate ways of defining functions later.</span></span><br><span class="line"><span class="comment">3. All parameters of a function must have a declared type,</span></span><br><span class="line"><span class="comment">    and the return value of the function must have a declared type.</span></span><br><span class="line"><span class="comment">    Functions in Java return only one value!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(10): Subtype Polymorphism vs. HoFs</title>
    <url>/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 10.</p>
<p>‚õ±Ô∏è In this lecture, we will talk about <code>Polymorphism(Â§öÊÄÅÊÄß)</code> of Java, and continue discussing <code>HoFs</code> deeply.</p>
<span id="more"></span>

<p>But before starting this lecture, first, we will review concepts of the previous lecture with a puzzle.</p>
<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/1.JPG" class="">
<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/2.JPG" class="">


<h2 id="Subtype-Polymorphism"><a href="#Subtype-Polymorphism" class="headerlink" title="Subtype Polymorphism"></a>Subtype Polymorphism</h2><img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/3.JPG" class="">
<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/4.JPG" class="">

<p>In the rest of this lecture, we will think about how to code the second approach in Java.</p>
<h2 id="DIY-Comparison"><a href="#DIY-Comparison" class="headerlink" title="DIY Comparison"></a>DIY Comparison</h2><p>Suppose we want to write a function <code>max()</code> that returns the max of any array, regardless of type.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">max</span><span class="params">(Object[] items)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxDex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (items[i] &gt; items[maxDex]) &#123;    <span class="comment">// this line is wrong!</span></span><br><span class="line">            maxDex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> items[maxDex];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Dog[] dogs = &#123;<span class="keyword">new</span> Dog(<span class="string">&quot;Elyse&quot;</span>, <span class="number">3</span>), <span class="keyword">new</span> Dog(<span class="string">&quot;Sture&quot;</span>, <span class="number">9</span>),</span><br><span class="line">                    <span class="keyword">new</span> Dog(<span class="string">&quot;Benjamin&quot;</span>, <span class="number">15</span>)&#125;;</span><br><span class="line">    Dog maxDog = (Dog) max(dogs);</span><br><span class="line">    maxDog.bark();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To fix the error above, one way is to write a max method is Dog class:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title">maxDog</span><span class="params">(Dog[] dogs)</span> </span>&#123;</span><br><span class="line">   	<span class="keyword">if</span> (dogs == <span class="keyword">null</span> || dogs.length == <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   	Dog maxDog = dogs[<span class="number">0</span>];</span><br><span class="line">   	<span class="keyword">for</span> (Dog d : dogs) &#123;</span><br><span class="line">       <span class="keyword">if</span> (d.size &gt; maxDog.size) &#123;</span><br><span class="line">        	maxDog = d;        	</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> maxDog;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>But this is a bad way, what if we want to compare apples instead of dogs? So we need to find another way. </p>
<p>We have already know that objects cannot be compared to other objects with <code>&gt;</code>, <code>&lt;</code>, <code>==</code> etc. , can inheritance/HoFs help us?</p>
<hr>
<p><strong>Solution:</strong></p>
<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/5.JPG" class="">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OurComparable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Returns </span></span><br><span class="line"><span class="comment">     * 1) negative number if this &lt; o;</span></span><br><span class="line"><span class="comment">     * 2) 0 if this equals o;</span></span><br><span class="line"><span class="comment">     * 3) positive number if this &gt; o</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">OurComparable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String n, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        size = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        Dog uddaDog = (Dog) o;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size - uddaDog.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; says: bark&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Maximizer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OurComparable <span class="title">max</span><span class="params">(OurComparable[] items)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> maxDex = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">		    <span class="keyword">int</span> cmp = items[i].compareTo(items[maxDex]);</span><br><span class="line">                <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    maxDex = i;</span><br><span class="line">                &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> items[maxDex];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog[] dogs = &#123;<span class="keyword">new</span> Dog(<span class="string">&quot;Elyse&quot;</span>, <span class="number">3</span>), <span class="keyword">new</span> Dog(<span class="string">&quot;Sture&quot;</span>, <span class="number">9</span>), </span><br><span class="line">                    <span class="keyword">new</span> Dog(<span class="string">&quot;Benjamin&quot;</span>, <span class="number">15</span>)&#125;;</span><br><span class="line">        Dog maxDog = (Dog) max(dogs);</span><br><span class="line">        maxDog.bark();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<hr>
<p>Now, try to answer 2 quizzes. Hope you can finish them correctly.</p>
<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/6.JPG" class="">
<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/7.JPG" class="">


<blockquote>
<p>Answer:<br>quiz 1: B<br>quiz 2: A</p>
</blockquote>
<h2 id="built-in-Comparable-Interface"><a href="#built-in-Comparable-Interface" class="headerlink" title="built-in Comparable Interface"></a>built-in Comparable Interface</h2><p>Although the built <code>OurComparable</code> works, it is not perfect. In the real world, we use a built-in interface named <code>Comparable</code> .</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T obj)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Rewrite the previous problem:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String n, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        size = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Dog o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size - o.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; says: bark&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Comparators"><a href="#Comparators" class="headerlink" title="Comparators"></a>Comparators</h2><p>We do not always want to compare objects in the same way every time, that is where <code>Comparator</code> comes in.</p>
<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/9.JPG" class="">

<p>Sometimes, maybe you actually want to sort them in a different way, like sorting them alphabetically.</p>
<img src="/2021/07/12/CS61B-DSA/CS61B-10-Subtype-Polymorphism-vs-HoFs/8.JPG" class="">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String n, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        size = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Dog o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size - o.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; says: bark&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NameComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Dog</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog a, Dog b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.name.compareTo(b.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Comparator&lt;Dog&gt; <span class="title">getNameComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NameComparator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Dog d1 = <span class="keyword">new</span> Dog(<span class="string">&quot;Elyse&quot;</span>, <span class="number">3</span>);</span><br><span class="line">		Dog d2 = <span class="keyword">new</span> Dog(<span class="string">&quot;Sture&quot;</span>, <span class="number">9</span>);</span><br><span class="line">		Dog d3 = <span class="keyword">new</span> Dog(<span class="string">&quot;Benjamin&quot;</span>, <span class="number">15</span>);</span><br><span class="line">        Dog[] dogs = &#123;d1, d2, d3&#125;;</span><br><span class="line">        Dog maxDog = (Dog) max(dogs);</span><br><span class="line">        maxDog.bark();</span><br><span class="line"></span><br><span class="line">	    Comparator&lt;Dog&gt; nc = Dog.getNameComparator();</span><br><span class="line">        <span class="keyword">if</span> (nc.compare(d1, d2) &gt; <span class="number">0</span>) &#123;  <span class="comment">// id d1 comes later than d2 in the alphabet</span></span><br><span class="line">        	d1.bark();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        	d2.bark();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>The only difference between <code>Comparable</code> and <code>Comparator</code> is that <code>Comparable</code> says ‚ÄúI wanna compare myself to other object‚Äù, while <code>Comparator</code> compares two other objects.</p>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(11): Libraries, Abstract Classes, Packages</title>
    <url>/2021/07/12/CS61B-DSA/CS61B-11-Libraries-Abstract-Classes-Packages/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 11.</p>
<p>From here, we are going to move from the classes to the real world, that is, we will talk about Java Libraries.</p>
<span id="more"></span>

<h2 id="Java-Libraries"><a href="#Java-Libraries" class="headerlink" title="Java Libraries"></a>Java Libraries</h2><img src="/2021/07/12/CS61B-DSA/CS61B-11-Libraries-Abstract-Classes-Packages/1.JPG" class="">
<img src="/2021/07/12/CS61B-DSA/CS61B-11-Libraries-Abstract-Classes-Packages/2.JPG" class="">

<p><strong>Abstract Data Types</strong> : An Abstract Data Type (ADT) is defined only by its operations, not by its implementation.</p>
<blockquote>
<p><code>ArrayDeque</code> and <code>LinkedList Deque</code> are implementations of the Deque ADT.</p>
</blockquote>
<p>Deque ADT:</p>
<ul>
<li>addFirst(Item x);</li>
<li>addLast(Item x);</li>
<li>boolean isEmpty();</li>
<li>int size();</li>
<li>printDeque();</li>
<li>Item removeFirst();</li>
<li>Item removeLast();</li>
<li>Item get(int index);</li>
</ul>
<p>There are some other ADTs, such as <strong>Stack(Ê†à)</strong>, and we will learn them in the future.</p>
<img src="/2021/07/12/CS61B-DSA/CS61B-11-Libraries-Abstract-Classes-Packages/3.JPG" class="">

<img src="/2021/07/12/CS61B-DSA/CS61B-11-Libraries-Abstract-Classes-Packages/4.JPG" class="">
<img src="/2021/07/12/CS61B-DSA/CS61B-11-Libraries-Abstract-Classes-Packages/5.JPG" class="">

<p>In Java, programmer can decide which implementation of an ADT that they want to use.</p>
<ul>
<li>Allows power user to explicitly handle engineering tradeoffs.</li>
<li>Example: Basic <em>Hashmaps</em> ops are faster than <em>TreeMaps</em>, but TreeMaps provide efficient operations that involve order (e.g. get all keys less than).</li>
</ul>
<img src="/2021/07/12/CS61B-DSA/CS61B-11-Libraries-Abstract-Classes-Packages/6.JPG" class="">


<h2 id="Demos-of-Collection"><a href="#Demos-of-Collection" class="headerlink" title="Demos of Collection"></a>Demos of Collection</h2><p>Now, let‚Äôs look at examples of <strong>java.util.Colloction</strong> interface.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Given the text of a book. Try to complete 3 tasks using</span></span><br><span class="line"><span class="comment"> * List, Set and Map interface that extend the Collection interface.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Task 1: Create a list of all words in the book.</span></span><br><span class="line"><span class="comment"> * Task 2: Count the number of unique words.</span></span><br><span class="line"><span class="comment"> * Task 3: Keep track of the number of times that specific words are mentioned.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoCollection</span> </span>&#123;</span><br><span class="line">	<span class="comment">// task1</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getWords</span><span class="params">(String inputFile)</span> </span>&#123;</span><br><span class="line">		List&lt;String&gt; words = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		In in = <span class="keyword">new</span> In(inputFile);</span><br><span class="line">		<span class="keyword">while</span> (!in.empty()) &#123;</span><br><span class="line">			String nextWord = cleanString(in.readString());</span><br><span class="line">			words.add(nextWord);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> words;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// task2</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countUniqueWord</span><span class="params">(List&lt;String&gt; words)</span> </span>&#123;</span><br><span class="line">		Set&lt;String&gt; wordSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">		<span class="keyword">for</span> (String word: words) &#123;</span><br><span class="line">			wordSet.add(word);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> count = wordSet.size();</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// task3</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; <span class="title">collectWordCount</span><span class="params">(List&lt;String&gt; words, List&lt;String&gt; targets)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Integer&gt; counts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		<span class="keyword">for</span> (String t: targets) &#123;</span><br><span class="line">			counts.put(t, <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (String s: words) &#123;</span><br><span class="line">			<span class="keyword">if</span> (counts.containsKey(s)) &#123;</span><br><span class="line">				<span class="keyword">int</span> oldCount = counts.get(s);</span><br><span class="line">				counts.put(s, oldCount + <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> counts;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Interfaces-and-Abstract-Classes"><a href="#Interfaces-and-Abstract-Classes" class="headerlink" title="Interfaces and Abstract Classes"></a>Interfaces and Abstract Classes</h2><h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><img src="/2021/07/12/CS61B-DSA/CS61B-11-Libraries-Abstract-Classes-Packages/7.JPG" class="">
<img src="/2021/07/12/CS61B-DSA/CS61B-11-Libraries-Abstract-Classes-Packages/8.JPG" class="">

<p>So, in summary, interfaces:</p>
<ul>
<li>Cannot be instantiated.</li>
<li>Can provide either <strong>abstract</strong> or <strong>concrete</strong> methods.<ul>
<li>Use no keyword for abstract methods.</li>
<li>Use default keyword for concrete methods.</li>
</ul>
</li>
<li>Can provide only public static final variables.</li>
<li>Can provide only public methods.<ul>
<li>Java 9 added private methods to interfaces. *</li>
</ul>
</li>
</ul>
<h3 id="Abstract-Classes"><a href="#Abstract-Classes" class="headerlink" title="Abstract Classes"></a>Abstract Classes</h3><img src="/2021/07/12/CS61B-DSA/CS61B-11-Libraries-Abstract-Classes-Packages/9.JPG" class="">

<p>Implementations must override ALL abstract methods.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">GraphicObject</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h2><p>A package is a namespace that organizes classes and interfaces. </p>
<p>We can use <strong>import</strong> statement to provide shorthand notation for usage of a single class in a package.</p>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(12): Command Line, Git(2021sp)</title>
    <url>/2021/07/14/CS61B-DSA/CS61B-12-Command-Line-Git-2021sp/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 12.</p>
<span id="more"></span>]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(13): Generics, Autoboxing</title>
    <url>/2021/07/14/CS61B-DSA/CS61B-13-Generics-Autoboxing/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 13.</p>
<span id="more"></span>


]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(2): Define and Use Classes</title>
    <url>/2021/06/23/CS61B-DSA/CS61B-2-Define-and-Use-Classes/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 2.</p>
<span id="more"></span>

<h2 id="Compilation"><a href="#Compilation" class="headerlink" title="Compilation"></a>Compilation</h2><p>If you use an IDE, you can just click <code>run</code> button and the program will be executed directly. But let‚Äôs see the process of executing Java code under the hood.</p>
<img src="/2021/06/23/CS61B-DSA/CS61B-2-Define-and-Use-Classes/2-1.JPG" class="">

<h2 id="Defining-and-Instantiating-Classes"><a href="#Defining-and-Instantiating-Classes" class="headerlink" title="Defining and Instantiating Classes"></a>Defining and Instantiating Classes</h2><p>Let‚Äôs define a Dog class without main method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bark!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Since there is no main method, we cannot run this class directly. To run it, we use another class called DogLauncher.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** The DogLauncher class will test drive the Dog class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog.makeNoise();  <span class="comment">// Bark!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>However, in the real world, different dog yells differently. How to deal with it? </p>
<p>To make it more natural to represent the entire universe of dogs, we use the key feature of Java - <strong>classes can contain not just functions (a.k.a. methods), but also data; and classes can be instantiated as objects.</strong></p>
<p>The Dog class provides a bludeprint that all Dog objects will follow.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> weightInPounds;  <span class="comment">// instance variables</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** constructor: determines how to instantiate the class */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        weightInPounds = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// instance method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (weightInPounds &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yip!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (weightInPounds &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;bark!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;wooof!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** The DogLauncher class will test drive the Dog class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog(<span class="number">50</span>);  <span class="comment">// create instances of Dog</span></span><br><span class="line">        d.makeNoise();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Notice the method <code>makeNoise</code> above is non-static now, it should be invoked by an instance of the class.</p>
<p>Key differences between static and non-static (a.k.a. instance) methods:</p>
<ul>
<li>Static methods are invoked using the class name, e.g. Dog.makeNoise();</li>
<li>Instance methods are invoked using an instance name, e.g. maya.makeNoise();</li>
<li>Static methods can‚Äôt access ‚Äúmy‚Äù instance variables, because there is no ‚Äúme‚Äù.</li>
</ul>
<p>Class can have a mix of static and non-static memebers (methods and variables), just like follows.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> weightInPounds;  <span class="comment">// instance variables</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String binomen = <span class="string">&quot;Canis familiaris&quot;</span>;  <span class="comment">// static variable</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** constructor: determines how to instantiate the class */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        weightInPounds = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeNoise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (weightInPounds &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;yip!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (weightInPounds &lt; <span class="number">30</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;bark!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;wooof!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title">maxDog</span><span class="params">(Dog d1, Dog d2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (d1.weightInPounds &gt; d2.weightInPounds) &#123;</span><br><span class="line">            <span class="keyword">return</span> d1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// non-static method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">maxDog</span><span class="params">(Dog d2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.weightInPounds &gt; d2.weightInPounds) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Although you can use <code>System.out.println(d.binomen)</code>, but it‚Äôs a bad style. Remeber, if you declare a static member, use class instead of instance to access it.</p>
<h2 id="Arrays-of-Objects"><a href="#Arrays-of-Objects" class="headerlink" title="Arrays of Objects"></a>Arrays of Objects</h2><p>To create an array of objects, you need 2 steps:</p>
<ul>
<li>First use the <code>new</code> keyword to create the array.</li>
<li>Then use <code>new</code> again for each object that you want to put in the array.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dogs[] dogs = <span class="keyword">new</span> Dog[<span class="number">2</span>];</span><br><span class="line">dogs[<span class="number">0</span>] = <span class="keyword">new</span> Dog(<span class="number">8</span>);</span><br><span class="line">dogs[<span class="number">1</span>] = <span class="keyword">new</span> Dog(<span class="number">20</span>);</span><br><span class="line">dogs[<span class="number">0</span>].makeNoise();</span><br></pre></td></tr></table></figure>

<h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p>Finally, let‚Äôs see an exercise. Will the following program compile? If so, what will it print?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogLoop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   		Dog smallDog = <span class="keyword">new</span> Dog(<span class="number">5</span>);</span><br><span class="line">   		Dog mediumDog = <span class="keyword">new</span> Dog(<span class="number">25</span>);</span><br><span class="line">   		Dog hugeDog = <span class="keyword">new</span> Dog(<span class="number">150</span>);</span><br><span class="line"> </span><br><span class="line">   		Dog[] manyDogs = <span class="keyword">new</span> Dog[<span class="number">4</span>];  </span><br><span class="line">        manyDogs[<span class="number">0</span>] = smallDog;</span><br><span class="line">   		manyDogs[<span class="number">1</span>] = hugeDog;    	   </span><br><span class="line">        manyDogs[<span class="number">2</span>] = <span class="keyword">new</span> Dog(<span class="number">130</span>);</span><br><span class="line"> </span><br><span class="line">   		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">   		<span class="keyword">while</span> (i &lt; manyDogs.length) &#123;</span><br><span class="line">       		Dog.maxDog(manyDogs[i], mediumDog).makeNoise();</span><br><span class="line">       		i = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The answer is:</p>
<ul>
<li>Yes, it can pass the compilation.</li>
<li>It‚Äôll print<ul>
<li>bark!</li>
<li>wooof!</li>
<li>wooof!</li>
<li>NullPointerException</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(29): Shortest Paths</title>
    <url>/2021/08/01/CS61B-DSA/CS61B-29-Shortest-Paths/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CS61B(3): References, Recursion and Lists</title>
    <url>/2021/06/23/CS61B-DSA/CS61B-3-References-Recursion-and-Lists/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 3.</p>
<p>Let‚Äôs learn about primitive types and reference types in Java, and use these concepts to learn our first data strucure - <code>Linked Data Structures</code></p>
<span id="more"></span>

<p>What‚Äôs your answer of the following question? Will the change to b affect a?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class Walrus &#123;</span></span><br><span class="line"><span class="comment">//     int weight;</span></span><br><span class="line"><span class="comment">//     double tuskSize;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     public Walrus(int w, double t) &#123;</span></span><br><span class="line"><span class="comment">//         weight = w;</span></span><br><span class="line"><span class="comment">//         tuskSize = t;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">Walrus a = <span class="keyword">new</span> Walrus(<span class="number">1000</span>, <span class="number">8.3</span>);</span><br><span class="line">Walrus b;</span><br><span class="line">b = a;</span><br><span class="line">b.weight = <span class="number">5</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>

<p>The answer is yes, and the output is as follows.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">weight: 5, tusk size: 8.30</span><br><span class="line">weight: 5, tusk size: 8.30</span><br></pre></td></tr></table></figure>

<p>Think about another question, will the change to x affect y?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">y = x;</span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;x is: &quot;</span> + x);</span><br><span class="line">System.out.println(<span class="string">&quot;y is: &quot;</span> + y);</span><br></pre></td></tr></table></figure>

<p>The answer is no, and now x is 2 and y is 5.</p>
<p>You may wonder why. To clear up your confusion, let‚Äôs explore data types in Java world.</p>
<h2 id="Primitive-Types"><a href="#Primitive-Types" class="headerlink" title="Primitive Types"></a>Primitive Types</h2><p>Anything you want to store on a computer is stored in so-called <code>memory</code>. And whatever the information you want to store, ultimately it will be encoded as a sequence of ones and zeros.</p>
<p>Actually, sometimes, two different things will be stored as the same bits sequence. For example, number 72 stored as 01001000, and letter H stored as 01001000, too. So how computer interprets them correctly?</p>
<p>The answer is <strong>the data type tells Java interpreter how to interpret it.</strong></p>
<p>There are 8 <code>primitive types</code> in Java: <strong>byte, short, int, long, float, double, boolean, char.</strong></p>
<img src="/2021/06/23/CS61B-DSA/CS61B-3-References-Recursion-and-Lists/3-1.JPG" class="">

<h2 id="Reference-Types"><a href="#Reference-Types" class="headerlink" title="Reference Types"></a>Reference Types</h2><p>We already know that there are 8 primitive types in Java. Everything else, including <code>array</code> and <code>string</code>, is a <code>reference type</code>.</p>
<img src="/2021/06/23/CS61B-DSA/CS61B-3-References-Recursion-and-Lists/3-2.JPG" class="">
<img src="/2021/06/23/CS61B-DSA/CS61B-3-References-Recursion-and-Lists/3-3.JPG" class="">
<img src="/2021/06/23/CS61B-DSA/CS61B-3-References-Recursion-and-Lists/3-4.JPG" class="">

<h2 id="The-Golden-Rule-of-Equals"><a href="#The-Golden-Rule-of-Equals" class="headerlink" title="The Golden Rule of Equals"></a>The Golden Rule of Equals</h2><p>This is a very important rule and it helps us answer the above questions.</p>
<p>Given variables x and y : y = x <code>copies all bits from x into y</code></p>
<p>If x and y are reference types, after <code>y = x</code>, x and y will refer to the same object.</p>
<img src="/2021/06/23/CS61B-DSA/CS61B-3-References-Recursion-and-Lists/3-5.JPG" class="">

<h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p>Let‚Äôs use an exercise to make sure you understand everyting.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Does the call to doStuff(walrus, x) have an affect on walrus and/or main‚Äôs x?</span></span><br><span class="line"><span class="comment">// hint: passing parameters obeys the same rule - simply copy the bits to the new scope.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Walrus walrus = <span class="keyword">new</span> Walrus(<span class="number">3500</span>, <span class="number">10.5</span>);</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">9</span>;</span><br><span class="line">    doStuff(walrus, x);</span><br><span class="line">    System.out.println(walrus);</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doStuff</span><span class="params">(Walrus W, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    W.weight = W.weight - <span class="number">100</span>;</span><br><span class="line">    x = x - <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The answer is ‚Äúwalrus will lose 100 lbs, but main‚Äôs x will not change‚Äù.</p>
<h2 id="Linked-Data-Structures"><a href="#Linked-Data-Structures" class="headerlink" title="Linked Data Structures"></a>Linked Data Structures</h2><p>If you have used Python before, you must be familiar with <code>list</code>. Java has list too. </p>
<p>A list is going to be able to grow arbitrarily large, which is different from array. But you may wonder why list can have arbitrary size. To answer this question, you need to know the its data structure, i.e. <code>Linked List(ÈìæË°®)</code>, under the hood. We learn it by building it from scratch.</p>
<p>Our goal is to build a linked list as follows.</p>
<img src="/2021/06/23/CS61B-DSA/CS61B-3-References-Recursion-and-Lists/3-6.JPG" class="">

<h3 id="Create-Linked-List"><a href="#Create-Linked-List" class="headerlink" title="Create Linked List"></a>Create Linked List</h3><p>You can build it intuitively, even though it is awkward.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntList L = <span class="keyword">new</span> IntList();</span><br><span class="line">        L.first = <span class="number">5</span>;</span><br><span class="line">        L.rest = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        L.rest = <span class="keyword">new</span> IntList();</span><br><span class="line">        L.rest.first = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">        L.rest.rest = <span class="keyword">new</span> IntList();</span><br><span class="line">        L.rest.rest.first = <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We can make things slightly better by using constructor.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntList</span><span class="params">(<span class="keyword">int</span> f, IntList r)</span> </span>&#123;</span><br><span class="line">        first = f;</span><br><span class="line">        rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntList L = <span class="keyword">new</span> IntList(<span class="number">15</span>, <span class="keyword">null</span>);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">10</span>, L);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">5</span>, L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Define-size-Method"><a href="#Define-size-Method" class="headerlink" title="Define size Method"></a>Define size Method</h3><p>In Python, we use <code>len(list)</code> to get the size of list. In Java, we use <code>L.size()</code>. How can we implement it?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Return the size of the list using ... recursion! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rest == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="keyword">this</span>.rest.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Return the size of the list using ... iteration! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    IntList p = <span class="keyword">this</span>;   <span class="comment">// p: pointer</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">        p = p.rest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Define-get-Method"><a href="#Define-get-Method" class="headerlink" title="Define get Method"></a>Define get Method</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Return the i-th item of the list using ... recursion! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rest.get(id - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Return the i-th item of the list using ... iteration! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeGet</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    IntList p = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">while</span> (id != <span class="number">0</span>) &#123;</span><br><span class="line">        p = p.rest;</span><br><span class="line">        id -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p.first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntList</span><span class="params">(<span class="keyword">int</span> f, IntList r)</span> </span>&#123;</span><br><span class="line">        first = f;</span><br><span class="line">        rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the size of the list using ... recursion! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rest == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="keyword">this</span>.rest.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the size of the list using ... iteration! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">        IntList p = <span class="keyword">this</span>;   <span class="comment">// p: pointer</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            size += <span class="number">1</span>;</span><br><span class="line">            p = p.rest;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the i-th item of the list using ... recursion! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rest.get(id - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Return the i-th item of the list using ... iteration! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeGet</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        IntList p = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">while</span> (id != <span class="number">0</span>) &#123;</span><br><span class="line">            p = p.rest;</span><br><span class="line">            id -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntList L = <span class="keyword">new</span> IntList(<span class="number">15</span>, <span class="keyword">null</span>);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">10</span>, L);</span><br><span class="line">        L = <span class="keyword">new</span> IntList(<span class="number">5</span>, L);</span><br><span class="line"></span><br><span class="line">        System.out.println(L.size());</span><br><span class="line">        System.out.println(L.iterativeSize());</span><br><span class="line"></span><br><span class="line">        System.out.println(L.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(L.iterativeGet(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(4): SLLists with Sentinel Nodes</title>
    <url>/2021/06/23/CS61B-DSA/CS61B-4-SLLists-with-Sentinel-Nodes/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 4.</p>
<p>Review the <code>IntList</code> we implemented in lecture 3. We call it ‚Äúnaked linked list‚Äù.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">public</span> IntList rest;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntList</span><span class="params">(<span class="keyword">int</span> f, IntList r)</span> </span>&#123;</span><br><span class="line">        first = f;</span><br><span class="line">        rest = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>While functional, ‚Äúnaked‚Äù linked lists like the one above are hard to use.</p>
<p>Inspired by our experience with the IntList, we‚Äôll now build a new class <code>SLList</code>, which much more closely resembles the list implementations that programmers use in modern languages. We‚Äôll do so by iteratively adding a sequence of improvements.</p>
<span id="more"></span>

<h2 id="Introducing-the-SLList-Bureaucracy"><a href="#Introducing-the-SLList-Bureaucracy" class="headerlink" title="Introducing the SLList Bureaucracy"></a>Introducing the SLList Bureaucracy</h2><p>Firstly, rename the IntList class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">    <span class="keyword">public</span> IntNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">        item = i;</span><br><span class="line">        next = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then, create another class called <code>SLList</code>. Let IntNode be its instance variable, and add ‚ÄúaaddFirst‚Äù and ‚ÄúgetFirst‚Äù methods to it.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** An SLList is a list of integers, which hides the terrible</span></span><br><span class="line"><span class="comment"> * truth of the nakedness within.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> IntNode first;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** Creates a list of one integer, namely 15 */</span></span><br><span class="line">        SLList L = <span class="keyword">new</span> SLList(<span class="number">15</span>);</span><br><span class="line">        L.addFirst(<span class="number">10</span>);</span><br><span class="line">        L.addFirst(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(L.getFirst());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Until now, I bet you have already realize what‚Äôs the strength of SLList - it is easier to instantiate and to use. It is the data structure that makes it is easier to use.</p>
<img src="/2021/06/23/CS61B-DSA/CS61B-4-SLLists-with-Sentinel-Nodes/4-1.JPG" class="">

<h2 id="The-private-Keyword"><a href="#The-private-Keyword" class="headerlink" title="The private Keyword"></a>The private Keyword</h2><p>However, the above implementation has some flaws. One of them is the abuse of <code>public</code>. For example, users of this class might to do some unexpected operations, like</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SLList L = <span class="keyword">new</span> SLList(<span class="number">15</span>);</span><br><span class="line">L.addFirst(<span class="number">10</span>);</span><br><span class="line">L.first.next.next = L.first.next;</span><br></pre></td></tr></table></figure>

<img src="/2021/06/23/CS61B-DSA/CS61B-4-SLLists-with-Sentinel-Nodes/4-2.JPG" class="">

<p>We can prevent programmers from making such mistakes with the <code>private</code> keyword. The private keyword restricts access, it prevents code in other classes from using members (or constructors) of a class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntNode first;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Nested-Classes"><a href="#Nested-Classes" class="headerlink" title="Nested Classes"></a>Nested Classes</h2><p>The IntNode class provides nothing but just be subordinate to SLList. We can make it as a nested class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> IntNode first; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">      first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">   &#125; </span><br><span class="line">   </span><br><span class="line">   <span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>Here, we use <code>private</code> and <code>static</code> modifier.</p>
<ul>
<li>private: if other external classes never use the nested class, declare it private</li>
<li>static: if the nested class never uses any instance variables or methods of the outer class, declare it static (results in a minor savings of memory)</li>
</ul>
<h2 id="Recursive-private-helper-Methods"><a href="#Recursive-private-helper-Methods" class="headerlink" title="Recursive private helper Methods"></a>Recursive private helper Methods</h2><p>To motivate our remaining improvements, and to give more functionality to our SLList class, let‚Äôs add <code>addLast</code> and <code>size</code> methods.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    IntNode p = first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns the size of list using ... recursion! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    IntNode p = first;</span></span><br><span class="line"><span class="comment">    if (p == null) &#123;</span></span><br><span class="line"><span class="comment">        return 0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return 1 + p.next.size(); */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// IntNode does not the size method, so you need a helper method</span></span><br><span class="line">    <span class="keyword">return</span> size(first);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// helper method</span></span><br><span class="line"><span class="comment">/** Returns the size of the list starting at p. */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(IntNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + size(p.next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns the size of list using ... iteration! */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">iterativeSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> totalSize = <span class="number">0</span>;</span><br><span class="line">    IntNode p = first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        totalSize += <span class="number">1</span>;</span><br><span class="line">            p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> totalSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You may notice we have two size methods, one has formal parmater while another does not have it. We call it <code>overload(ÈáçËΩΩ)</code>.</p>
<h2 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h2><p>There are some issues of addLast and size methods - <strong>both of them are pretty slow.</strong> Can you figure out why?</p>
<p>I think it is because of the need of traversing the whole linked-list. In this lecture, wewill focus on modifying size method so that the execution time of it always fast, and in the next lecture, we will get inspiration for quick addLast method.</p>
<p>Our solution is maintaining a special size variable that <code>caches</code> the size of the list. </p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Caching(ÁºìÂ≠ò): putting aside data to speed up retrieval.</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> IntNode first;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> IntNode(x, first);</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        IntNode p = first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the size of list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/06/23/CS61B-DSA/CS61B-4-SLLists-with-Sentinel-Nodes/4-3.JPG" class="">

<h2 id="Sentinel-Nodes"><a href="#Sentinel-Nodes" class="headerlink" title="Sentinel Nodes"></a>Sentinel Nodes</h2><img src="/2021/06/23/CS61B-DSA/CS61B-4-SLLists-with-Sentinel-Nodes/4-4.JPG" class="">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add a new constructor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Creates an empty SLList. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    first = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Seems pretty good, right? Well actually there is a subtle bug, can you find it? </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// If you create an empty SLList, then using addLast will cause crash.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    IntNode p = first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Let‚Äôs do last modification of SLList to fix this bug.</p>
<p>One possible solution is adding a special case for the empty list.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  size += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (first == <span class="keyword">null</span>) &#123;</span><br><span class="line">    first = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  IntNode p = first;</span><br><span class="line">  <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">    p = p.next;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this case, it‚Äôs ok, but in some other complex cases, such as tree data structure, it will cause vast amount of complexity. There are better ways!</p>
<p><strong>We avoid special cases by making all SLLists the same!</strong></p>
<img src="/2021/06/23/CS61B-DSA/CS61B-4-SLLists-with-Sentinel-Nodes/4-5.JPG" class="">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** An SLList is a list of integers, which hides the terrible</span></span><br><span class="line"><span class="comment"> * truth of the nakedness within.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* The first item (if it exits) is at sentinel.next */</span></span><br><span class="line">    <span class="keyword">private</span> IntNode sentinel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates an empty SLList. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sentinel node‚Äôs item needs to be some integer, </span></span><br><span class="line">        <span class="comment">// but doesn‚Äôt matter what value we pick.</span></span><br><span class="line">        sentinel = <span class="keyword">new</span> IntNode(-<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> IntNode(-<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> IntNode(x, sentinel.next);</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sentinel.next.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        IntNode p = sentinel;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the size of list using ... recursion! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(5): DLLists, Arrays</title>
    <url>/2021/06/24/CS61B-DSA/CS61B-5-DLLists-Arrays/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 5.</p>
<p>In the previous lecture, we built <code>SLLit</code> by adding a extra layer on the naked data structure <code>IntNode</code>.</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** An SLList is a list of integers, which hides the terrible</span></span><br><span class="line"><span class="comment"> * truth of the nakedness within.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IntNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> item;</span><br><span class="line">        <span class="keyword">public</span> IntNode next;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntNode</span><span class="params">(<span class="keyword">int</span> i, IntNode n)</span> </span>&#123;</span><br><span class="line">            item = i;</span><br><span class="line">            next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* The first item (if it exits) is at sentinel.next */</span></span><br><span class="line">    <span class="keyword">private</span> IntNode sentinel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates an empty SLList. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sentinel node‚Äôs item needs to be some integer, </span></span><br><span class="line">        <span class="comment">// but doesn‚Äôt matter what value we pick.</span></span><br><span class="line">        sentinel = <span class="keyword">new</span> IntNode(-<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sentinel = <span class="keyword">new</span> IntNode(-<span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sentinel.next = <span class="keyword">new</span> IntNode(x, sentinel.next);</span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sentinel.next.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        IntNode p = sentinel;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = <span class="keyword">new</span> IntNode(x, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        size += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the size of list using ... recursion! */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>However, SLList has some limitations, one of them is <strong>inserting at the back of an SLList is much slower than the front</strong>. This is because under the hood, to add an item at the end of the SLList, it needs to iterate through all of the items.</p>
<p>How could we modify our list data structure so that addLast is also fast?</p>
<h2 id="DLList-Doubly-Linked-List"><a href="#DLList-Doubly-Linked-List" class="headerlink" title="DLList: Doubly Linked List"></a>DLList: Doubly Linked List</h2><img src="/2021/06/24/CS61B-DSA/CS61B-5-DLLists-Arrays/5-1.JPG" class="">

<img src="/2021/06/24/CS61B-DSA/CS61B-5-DLLists-Arrays/5-2.JPG" class="">

<p>While fast, adding <code>.last</code> and <code>.prev</code> introduces lots of special cases. To avoid these, either:</p>
<ul>
<li>Add an additional sentBack sentinel at the end of the list.</li>
<li>Make your linked list circular (highly recommened for project 1), with a single sentinel in the middle.</li>
</ul>
<img src="/2021/06/24/CS61B-DSA/CS61B-5-DLLists-Arrays/5-3.JPG" class="">

<img src="/2021/06/24/CS61B-DSA/CS61B-5-DLLists-Arrays/5-4.JPG" class="">

<p>The implementation process of DLList will be completed in <code>proj1a</code>.</p>
<p><strong>Link:</strong> <a href="Project1A-Data-Structures.md">click here</a></p>
<h2 id="Generic-Lists"><a href="#Generic-Lists" class="headerlink" title="Generic Lists"></a>Generic Lists</h2><p>Until now, our SLList or DLList only support Integers. To make our list better, one important task it to make it <code>generic</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Generic SLList */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLList</span>&lt;<span class="title">Type</span>&gt; </span>&#123;	</span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">StuffNode</span> </span>&#123;</span><br><span class="line">		<span class="keyword">public</span> Type item;</span><br><span class="line">		<span class="keyword">public</span> StuffNode next;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">StuffNode</span><span class="params">(Type i, StuffNode n)</span> </span>&#123;</span><br><span class="line">			item = i;</span><br><span class="line">			next = n;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> StuffNode first;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SLList</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line">		first = <span class="keyword">new</span> StuffNode(x, <span class="keyword">null</span>);</span><br><span class="line">		size = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">/** Adds x to the front of the list. */</span></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line"> 		first = <span class="keyword">new</span> StuffNode(x, first);</span><br><span class="line"> 		size += <span class="number">1</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">/** Returns the first item in the list. */</span></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> Type <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> 		<span class="keyword">return</span> first.item; 		</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">/** Adds an item to the end of the list. */</span></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line"> 		size += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"> 		StuffNode p = first;</span><br><span class="line"></span><br><span class="line"> 		<span class="comment">/* Move p until it reaches the end of the list. */</span></span><br><span class="line"> 		<span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line"> 			p = p.next;</span><br><span class="line"> 		&#125;</span><br><span class="line"></span><br><span class="line"> 		p.next = <span class="keyword">new</span> StuffNode(x, <span class="keyword">null</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> 		<span class="keyword">return</span> size;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SLListLauncher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SLList&lt;String&gt; L = <span class="keyword">new</span> SLList&lt;&gt;(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        L.addFirst(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SLList&lt;Integer&gt; L2 = <span class="keyword">new</span> SLList&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        L.addFirst(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">When declaring or instantiating your data structure, use the reference type.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. int: Integer</span></span><br><span class="line"><span class="comment">2. double: Double</span></span><br><span class="line"><span class="comment">3. char: Character</span></span><br><span class="line"><span class="comment">4. boolean: Boolean</span></span><br><span class="line"><span class="comment">4. long: Long</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p>Try to understand the following code. I think it is easy for you except the last line.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] z = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span>[] x, y;</span><br><span class="line"> </span><br><span class="line">x = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">y = x;</span><br><span class="line">x = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">99</span>&#125;;</span><br><span class="line">y = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">z = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> xL = x.length;</span><br><span class="line"> </span><br><span class="line">String[] s = <span class="keyword">new</span> String[<span class="number">6</span>];</span><br><span class="line">s[<span class="number">4</span>] = <span class="string">&quot;ketchup&quot;</span>;</span><br><span class="line">s[x[<span class="number">3</span>] - x[<span class="number">1</span>]] = <span class="string">&quot;muffins&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[] b = &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;;</span><br><span class="line">System.arraycopy(b, <span class="number">0</span>, x, <span class="number">3</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<img src="/2021/06/24/CS61B-DSA/CS61B-5-DLLists-Arrays/5-5.JPG" class="">

<p>To understand array deeper, let‚Äôs take a look at 2-dimensional arrays in Java. Try to understand the following code.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] pascalsTriangle;</span><br><span class="line">pascalsTriangle = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line"><span class="keyword">int</span>[] rowZero = pascalsTriangle[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">pascalsTriangle[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;;</span><br><span class="line">pascalsTriangle[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">pascalsTriangle[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">pascalsTriangle[<span class="number">3</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] rowTwo = pascalsTriangle[<span class="number">2</span>];</span><br><span class="line">rowTwo[<span class="number">1</span>] = -<span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] matrix;</span><br><span class="line">matrix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line">matrix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] pascalAgain = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">                              	&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>

<p>This is the result.</p>
<img src="/2021/06/24/CS61B-DSA/CS61B-5-DLLists-Arrays/5-6.JPG" class="">

<h2 id="Exercise-2D-Arrays"><a href="#Exercise-2D-Arrays" class="headerlink" title="Exercise: 2D Arrays"></a>Exercise: 2D Arrays</h2><p>What will be the value of <code>x[0][0]</code> and <code>w[0][0]</code> when the code shown completes?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] x = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] z = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">z[<span class="number">0</span>] = x[<span class="number">0</span>];</span><br><span class="line">z[<span class="number">0</span>][<span class="number">0</span>] = -z[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>[][] w = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">System.arraycopy(x[<span class="number">0</span>], <span class="number">0</span>, w[<span class="number">0</span>], <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">w[<span class="number">0</span>][<span class="number">0</span>] = -w[<span class="number">0</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p>Solution:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x[0][0]: -1</span><br><span class="line">w[0][0]: 1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(6): ALists vs SLists, Resizing</title>
    <url>/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 6.</p>
<p>We have already seen how we can harness recursive class definition to build an expandable list, i.e. the <code>IntList</code>, the <code>SLList</code>, and the <code>DLList</code>. </p>
<p>Now let us stop continuing it and try to use another basic data structure, i.e. array, to build list, which is called <code>AList</code>. You will find these two kinds of lists have differnet pros and cons.</p>
<span id="more"></span>

<h2 id="AList-Array-based-List"><a href="#AList-Array-based-List" class="headerlink" title="AList: Array-based List"></a>AList: Array-based List</h2><p>The data structure of DLList we have talked in the last lecture is pretty beautiful. And it also has fast operations like addFirst, addLast etc. Then why should we try to build AList?</p>
<p>Let‚Äôs talk about a limitation to lists.</p>
<img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-1.JPG" class="">

<p>The reason why we use array to prove the limitation is that <strong>retrieval from any position of any array is very fast, and it is independent of array size.</strong></p>
<h3 id="1-Naive-AList"><a href="#1-Naive-AList" class="headerlink" title="1. Naive AList"></a>1. Naive AList</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Invariants:</span></span><br><span class="line"><span class="comment"> addLast: The next item we want to add, will go into position size</span></span><br><span class="line"><span class="comment"> getLast: The item we want to return is in position size - 1</span></span><br><span class="line"><span class="comment"> size: The number of items in the list should be size.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates an empty list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Inserts X into the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        items[size] = x;</span><br><span class="line">        size = size + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the item from the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Gets the ith item in the list (0 is the front). */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the number of items in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<h3 id="2-removeLast-method"><a href="#2-removeLast-method" class="headerlink" title="2. removeLast() method"></a>2. removeLast() method</h3><img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-2.JPG" class="">

<p>The answer is we only need to change size.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Deletes item from back of the list and returns deleted item. */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = getLast();</span><br><span class="line">    <span class="comment">// items[size - 1] = null;   can but unnecessary</span></span><br><span class="line">    size = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<h3 id="3-Resizing-Arrays"><a href="#3-Resizing-Arrays" class="headerlink" title="3. Resizing Arrays"></a>3. Resizing Arrays</h3><img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-3.JPG" class="">

<p>When the array gets too full, just make a new array!</p>
<p><strong>Resizing process:</strong></p>
<ul>
<li>int[] a = new int[newSize]</li>
<li>System.arraycopy()</li>
<li>a[size] = targetNum</li>
<li>items = a</li>
<li>size += 1</li>
</ul>
<p>Let‚Äôs implement this process.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];</span><br><span class="line">    System.arraycopy(items, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">    items = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">        resize(size + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The big issue here is that <strong>how to set a proper capacity as the parameter of resize method</strong>?</p>
<p>Do an experiment to test the speed of resizing when using two different strategies.</p>
<ul>
<li>one is <strong>resize(size + 10)</strong></li>
<li>another is <strong>resize(2 * size)</strong></li>
</ul>
<img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-5.JPG" class="">

<img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-4.JPG" class="">

<p>There is another performance problem. Suppose we have a very rare situation occur which causes us to:</p>
<ul>
<li>Insert 1,000,000,000 items.</li>
<li>Then remove 990,000,000 items.</li>
</ul>
<p>Our data structure will handle this spike of events as well as it could, but afterwards there is a problem - a waste of space!</p>
<img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-6.JPG" class="">


<h2 id="Final-Code"><a href="#Final-Code" class="headerlink" title="Final Code"></a>Final Code</h2><p>Finally, let‚Äôs make AList generic, and we will get the following code.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Item[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Creates an empty list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = (Item[]) <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Resizes the underlying array to the target capacity. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        Item[] a = (Item[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        System.arraycopy(items, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        items = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Inserts X into the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == items.length) &#123;</span><br><span class="line">            resize(size + <span class="number">10</span>);</span><br><span class="line">            <span class="comment">// resize(size * 2);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        items[size] = x;</span><br><span class="line">        size = size + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the item from the back of the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Gets the ith item in the list (0 is the front). */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the number of items in the list. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Deletes item from back of the list and</span></span><br><span class="line"><span class="comment">      * returns deleted item. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item x = getLast();</span><br><span class="line">        items[size - <span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        size = size - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<h2 id="Loitering"><a href="#Loitering" class="headerlink" title="Loitering"></a>Loitering</h2><img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-7.JPG" class="">

<img src="/2021/06/24/CS61B-DSA/CS61B-6-ALists-vs-SLists-Resizing/6-8.JPG" class="">
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(7): Testing</title>
    <url>/2021/06/24/CS61B-DSA/CS61B-7-Testing/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 7.</p>
<p>In this lecture, we will discuss an important and realistic issue ‚Äì <code>Testing</code> .</p>
<span id="more"></span>

<p>How do you know that your code works correctly?</p>
<ul>
<li>Pass Autograder. (in this lecture)</li>
<li>Run to see if the code works as your expect.</li>
<li><strong>Pass tests.</strong></li>
</ul>
<p>The last one is the most important one. In the real world, programmers believe their code works because of <strong>tests they write themselves.</strong></p>
<h2 id="Ad-Hoc-Testing-vs-JUnit"><a href="#Ad-Hoc-Testing-vs-JUnit" class="headerlink" title="Ad Hoc Testing vs. JUnit"></a>Ad Hoc Testing vs. JUnit</h2><p>Let‚Äôs try to write a method that sorts arrays of Strings and promise its correctness.</p>
<img src="/2021/06/24/CS61B-DSA/CS61B-7-Testing/1.JPG" class="">

<p>With the old way, we will write sort method, and use Autograder to verify its correctness. But with the new way which will be taught in this lecture, <strong>we will write sort, as well as our own test for sort.</strong></p>
<h3 id="Ad-Hoc-Testing"><a href="#Ad-Hoc-Testing" class="headerlink" title="Ad Hoc Testing"></a>Ad Hoc Testing</h3><p>We will start by writing <code>testSort</code> first!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Tests the Sort class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Tests the Sort.sort method */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;;</span><br><span class="line">        Sort.sort(input);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!input[i].equals(expected[i])) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Mismatch in position &quot;</span> + i +</span><br><span class="line">                    <span class="string">&quot;, expected: &quot;</span> + expected[i] + <span class="string">&quot;, but got: &quot;</span> + input[i]);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testSort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h3><img src="/2021/06/24/CS61B-DSA/CS61B-7-Testing/2.JPG" class="">

<p>Next, we will do test by <code>JUnit</code> , and write tests and sort method simultaneously.</p>
<p>The following is the final code. If you are curious about the process, please watch <a href="https://www.youtube.com/playlist?list=PL8FaHk7qbOD4ZxWDcuItnUElH2Pnneamc">lecture videos</a>.</p>
<img src="/2021/06/24/CS61B-DSA/CS61B-7-Testing/3.JPG" class="">


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Tests the Sort class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSort</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** If you want to have your tests timeout after a certain amount of time </span></span><br><span class="line"><span class="comment">     * (to prevent infinite loops), you can declare your test like the following: */</span></span><br><span class="line">    <span class="meta">@Test(timeout = 1000)</span></span><br><span class="line">    <span class="comment">/** Tests the Sort.findSmallest method. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindSmallest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> expected = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> actual = Sort.findSmallest(input, <span class="number">0</span>);</span><br><span class="line">        assertEquals(expected, actual);</span><br><span class="line"></span><br><span class="line">        String[] input2 = &#123;<span class="string">&quot;there&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;many&quot;</span>, <span class="string">&quot;pigs&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> expected2 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> actual2 = Sort.findSmallest(input2, <span class="number">2</span>);</span><br><span class="line">        org.junit.Assert.assertEquals(expected2, actual2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">/** Tests the Sort.swap method. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSwap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        Sort.swap(input, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        org.junit.Assert.assertArrayEquals(expected, input);</span><br><span class="line"></span><br><span class="line">        String[] input2 = &#123;<span class="string">&quot;there&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;many&quot;</span>, <span class="string">&quot;pigs&quot;</span>&#125;;</span><br><span class="line">        String[] expected2 = &#123;<span class="string">&quot;there&quot;</span>, <span class="string">&quot;pigs&quot;</span>, <span class="string">&quot;many&quot;</span>, <span class="string">&quot;are&quot;</span>&#125;;</span><br><span class="line">        Sort.swap(input2, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        assertArrayEquals(expected2, input2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">/** Tests the Sort.sort method */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] input = &#123;<span class="string">&quot;i&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>&#125;;</span><br><span class="line">        String[] expected = &#123;<span class="string">&quot;an&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;have&quot;</span>, <span class="string">&quot;i&quot;</span>&#125;;</span><br><span class="line">        Sort.sort(input);</span><br><span class="line"></span><br><span class="line">        assertArrayEquals(expected, input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Sorts strings destructively. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] x)</span> </span>&#123;</span><br><span class="line">        sort(x, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Sorts x starting at position start. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(String[] x, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == x.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Find the smallest item</span></span><br><span class="line">        <span class="keyword">int</span> smallestId = Sort.findSmallest(x, start);</span><br><span class="line">        <span class="comment">// Swap</span></span><br><span class="line">        swap(x, start, smallestId);</span><br><span class="line">        <span class="comment">// Selection sort the rest</span></span><br><span class="line">        sort(x, start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the index of the smallest String in x, starting at start. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findSmallest</span><span class="params">(String[] x, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> smallestId = start;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; x.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = x[i].compareTo(x[smallestId]);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                smallestId = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> smallestId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Swaps item at position a with item at position b. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(String[] x, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        String temp = x[a];</span><br><span class="line">        x[a] = x[b];</span><br><span class="line">        x[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Unit-Testing"><a href="#Unit-Testing" class="headerlink" title="Unit Testing"></a>Unit Testing</h2><p>Unit Testing is a great way to rigorously test each method of your code and ultimately ensure that you have a working project.</p>
<p>The ‚ÄúUnit‚Äù part of Unit Testing comes from the idea that you can break your program down into units, or the smallest testable part of an application. Therefore, Unit Testing enforces good code structure <strong>(each method should only do ‚ÄúOne Thing‚Äù)</strong>, and allows you to consider all of the edge cases for each method and test for them individually.</p>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(8): Inheritance, Implements</title>
    <url>/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 8.</p>
<span id="more"></span>

<p>Recall <code>SLList</code> and <code>AList</code> we have implemented before. They have many same methods althoug their data structures under the hood are different.</p>
<p>Now, suppose we‚Äôre writing a library to manipulate lists of words. Might want to write a function that finds the longest word from a list of words. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longest</span><span class="params">(SLList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list.get(maxId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SLList&lt;String&gt; L = <span class="keyword">new</span> SLList&lt;&gt;();</span><br><span class="line">        L.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L));   <span class="comment">// watching</span></span><br><span class="line"></span><br><span class="line">        AList&lt;String&gt; L2 = <span class="keyword">new</span> AList&lt;&gt;();</span><br><span class="line">        L2.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L2));   <span class="comment">// Error: we can&#x27;t give AList to longest method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Read the code above, I thinkg you should understand why there is an error when calling <code>longest</code> method on AList.</p>
<p>Now, we want the longest method can handle AList. What should we do? To sovle this problem, you should know knowledge of <code>interface</code> and <code>inheritance</code>.</p>
<h2 id="Hypernyms-Hyponyms-and-Interface-Inheritance"><a href="#Hypernyms-Hyponyms-and-Interface-Inheritance" class="headerlink" title="Hypernyms, Hyponyms, and Interface Inheritance"></a>Hypernyms, Hyponyms, and Interface Inheritance</h2><ul>
<li>Hypernyms(‰∏ä‰ΩçËØç) represents abstraction.</li>
<li>Hyponyms(‰∏ã‰ΩçËØç) represents details.</li>
</ul>
<img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/1.JPG" class="">

<p>Java can help us capture this hierarchy.</p>
<img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/2.JPG" class="">

<img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/3.JPG" class="">

<img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/4.JPG" class="">

<p>Now, turn back to the previous problem. We can solve it now.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longest</span><span class="params">(List61B&lt;String&gt; list)</span> </span>&#123;  <span class="comment">// &lt;-- change here</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list.get(maxId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SLList&lt;String&gt; L = <span class="keyword">new</span> SLList&lt;&gt;();</span><br><span class="line">        L.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L));   <span class="comment">// watching</span></span><br><span class="line"></span><br><span class="line">        AList&lt;String&gt; L2 = <span class="keyword">new</span> AList&lt;&gt;();</span><br><span class="line">        L2.addLast(<span class="string">&quot;elk&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;are&quot;</span>);</span><br><span class="line">        L2.addLast(<span class="string">&quot;watching&quot;</span>);</span><br><span class="line">        System.out.println(longest(L2));   <span class="comment">// watching</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Overriding-vs-Overloading"><a href="#Overriding-vs-Overloading" class="headerlink" title="Overriding vs. Overloading"></a>Overriding vs. Overloading</h2><ul>
<li>Overriding: ÈáçÂÜô</li>
<li>Overloading: ÈáçËΩΩ</li>
</ul>
<p>Java allows multiple methods with same name, but different parameters. This is called method <code>overloading</code>.</p>
<img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/5.JPG" class="">



<h2 id="Once-Again-Interface-Inheritance"><a href="#Once-Again-Interface-Inheritance" class="headerlink" title="Once Again: Interface Inheritance"></a>Once Again: Interface Inheritance</h2><img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/6.JPG" class="">

<p>In the last section, we said that subclass must override all methods of interface, otherwise it will fail to compile. In fact, this is not accurate.</p>
<img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/7.JPG" class="">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List61B</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item x)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item y)</span></span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Item <span class="title">getFirst</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Item <span class="title">getLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Item <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item x, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i += <span class="number">1</span>) &#123;</span><br><span class="line">         System.out.print(get(i) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If you don‚Äôt like a default method, you can override it. For example, the default <code>print</code> method is inefficient for <code>SLList</code>, so we override it:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">List61B</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Node p = sentinel.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">   	      System.out.print(p.item + <span class="string">&quot; &quot;</span>);     	</span><br><span class="line">	   &#125;</span><br><span class="line"> </span><br><span class="line">	   System.out.println();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Static-and-Dynamic-Type-Dynamic-Method-Selection"><a href="#Static-and-Dynamic-Type-Dynamic-Method-Selection" class="headerlink" title="Static and Dynamic Type, Dynamic Method Selection"></a>Static and Dynamic Type, Dynamic Method Selection</h2><img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/8.JPG" class="">

<img src="/2021/06/24/CS61B-DSA/CS61B-8-Inheritance-Implements/9.JPG" class="">

<p>To wrap up above materials, let‚Äôs do a puzzle. Suppose we have classes defined below. Try to predict the results.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;hello animal&quot;</span>); &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;sniff animal&quot;</span>); &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">flatter</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool animal&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;dog sniff animal&quot;</span>); &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flatter</span><span class="params">(Dog a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool dog&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">        a.greet(d);</span><br><span class="line">        a.sniff(d);</span><br><span class="line">        d.flatter(d);</span><br><span class="line">        a.flatter(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Add annotation to the above code, and also give the answer.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">(Animal a)</span> </span>&#123; </span><br><span class="line">        print(<span class="string">&quot;hello animal&quot;</span>); &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;sniff animal&quot;</span>); &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">flatter</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool animal&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sniff</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;dog sniff animal&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Overload</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flatter</span><span class="params">(Dog a)</span> </span>&#123;</span><br><span class="line">        print(<span class="string">&quot;u r cool dog&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Dog();  <span class="comment">// static type:Animal; dynamic type: Dog</span></span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog();  <span class="comment">// static type &amp; dynamic type: Dog</span></span><br><span class="line">        </span><br><span class="line">        a.greet(d);  <span class="comment">// hello animal</span></span><br><span class="line">        a.sniff(d);  <span class="comment">// dog sniff animal</span></span><br><span class="line">        d.flatter(d);  <span class="comment">// u r cool dog</span></span><br><span class="line">        a.flatter(d);  <span class="comment">// u r cool animal</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The shocking answer is the last one, i.e. <code>a.flatter(d);</code> . Why?</p>
<p>Look at the above slide, if a variable has different compile-time type and run-time type, if and only if run-time type <strong>overrides</strong> the method, run-time type‚Äôs method will be used instead. Otherwise, it still use  compile-time type‚Äôs method.</p>
<p><em>It try to use dynamic type‚Äôs method. However, since the method is not overwritten in dynamic type, it will just go one step higher in the hierarchy, i.e. jump into static type and find the method, then use it.</em></p>
<p>In the above code, flatter method in Dog class does not override, it is just overload!</p>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B(9): Extends, Casting, HoFs</title>
    <url>/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/</url>
    <content><![CDATA[<p>This is the lecture note of CS61B - Lecture 9.</p>
<p>üå≥ In this lecture, we will talk more about implementation inheritance.</p>
<span id="more"></span>

<h2 id="Implementation-Inheritance-Extends"><a href="#Implementation-Inheritance-Extends" class="headerlink" title="Implementation Inheritance: Extends"></a>Implementation Inheritance: Extends</h2><p>In the last lecture, we talked about <code>implements</code> keyword. When a class is a hyponym of an interface, we used implements.</p>
<p>If you want one class to be a hyponym of another <em>class</em>, you use <code>extends</code>.</p>
<img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/1.JPG" class="">


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* SLList, but with additional rotateRight operation. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotatingSLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">extends</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Todo: Implement RotatingSLList such that code compiles </span></span><br><span class="line"><span class="comment">     * and outputs correct result.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Rotates list to the right. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item x = removeLast();</span><br><span class="line">        addFirst(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RotatingSLList&lt;Integer&gt; rel = <span class="keyword">new</span> RotatingSLList&lt;&gt;();</span><br><span class="line">        rel.addLast(<span class="number">10</span>);</span><br><span class="line">        rel.addLast(<span class="number">11</span>);</span><br><span class="line">        rel.addLast(<span class="number">12</span>);</span><br><span class="line">        rel.addLast(<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Should be: [13, 10, 11, 12] */</span></span><br><span class="line">        rel.rotateRight();</span><br><span class="line">        rel.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/2.JPG" class="">

<p>Then, take a look another example. Suppose we want to build an SLList called <code>VengefulSLList</code> that:</p>
<ul>
<li>Remembers all Items that have been destroyed by removeLast.</li>
<li>Has an additional method <code>printLostItems()</code>, which prints all deleted items.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VengefulSLList</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	VengefulSLList&lt;Integer&gt; vs1 = <span class="keyword">new</span> VengefulSLList&lt;Integer&gt;();</span><br><span class="line">    	vs1.addLast(<span class="number">1</span>);</span><br><span class="line">    	vs1.addLast(<span class="number">5</span>);</span><br><span class="line">    	vs1.addLast(<span class="number">10</span>);</span><br><span class="line">    	vs1.addLast(<span class="number">13</span>);      <span class="comment">/* [1, 5, 10, 13] */</span></span><br><span class="line">    	vs1.removeLast();     <span class="comment">/* 13 gets deleted. */</span></span><br><span class="line">    	vs1.removeLast();     <span class="comment">/* 10 gets deleted. */</span></span><br><span class="line">    	System.out.print(<span class="string">&quot;The fallen are: &quot;</span>);</span><br><span class="line">    	vs1.printLostItems(); <span class="comment">/* Should print 10 and 13. */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>What should we do?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** SList with additional operation printLostItems() which prints all items</span></span><br><span class="line"><span class="comment">  * that have ever been deleted. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VengefulSLList</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">extends</span> <span class="title">SLList</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    SLList&lt;Item&gt; deletedItems;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VengefulSLList</span><span class="params">(Item x)</span> </span>&#123;</span><br><span class="line">        deletedItems = <span class="keyword">new</span> SLList&lt;Item&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item x = <span class="keyword">super</span>.removeLast();</span><br><span class="line">        deletedItems.addLast(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Prints deleted items. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLostItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        deletedItems.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="Constructor-Behavior"><a href="#Constructor-Behavior" class="headerlink" title="Constructor Behavior"></a>Constructor Behavior</h2><img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/3.JPG" class=""> 

<img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/4.JPG" class=""> 

<img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/5.JPG" class="">

<p>‚ùó‚ùó‚ùó Important Note: both <code>implements</code> and <code>extends</code> should only be used for <strong>is-a</strong> relationship instead of <strong>has-a</strong> relationship.</p>
<h2 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h2><p>üíä</p>
<img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/6.JPG" class="">

<p><strong>Module:</strong> A set of methods that work together as a whole to perform some task or set of related tasks. </p>
<p>A module is said to be <strong>encapsulated</strong> if its implementation is completely hidden, and it can be accessed only through a documented interface.</p>
<p>üå¥ Reminder: You should use the idea of encapsulation to guide yourself when completing project1b, and other large project.</p>
<h2 id="Type-Checking-and-Casting"><a href="#Type-Checking-and-Casting" class="headerlink" title="Type Checking and Casting"></a>Type Checking and Casting</h2><img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/7.JPG" class="">

<img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/8.JPG" class="">


<h2 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher Order Functions"></a>Higher Order Functions</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example of HoF</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tenX</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> * x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_twice</span>(<span class="params">f, x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f(f(x))</span><br><span class="line"></span><br><span class="line">do_twice(tenX, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>HoFs is powerful and useful. However, in Java7 and earlier, there is a fundamental issue that <strong>memory boxes(variable) cannot contain pointers to functions.</strong> So if you want to define HoFs in Java7 or earlier, you should use interface instead.</p>
<img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/9.JPG" class="">


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Represent a function that takes in an integer, and returns an integer. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IntUnaryFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TenX</span> <span class="keyword">implements</span> <span class="title">IntUnaryFunction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/** Returns ten times its argument. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> * x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HoFDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_twice</span><span class="params">(IntUnaryFunction f, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f.apply(f.apply(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IntUnaryFunction tenX = <span class="keyword">new</span> TenX();</span><br><span class="line">        System.out.println(do_twice(tenX, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><img src="/2021/07/12/CS61B-DSA/CS61B-9-Extends-Casting-HoFs/10.JPG" class="">

]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>Project0: NBody</title>
    <url>/2021/06/24/CS61B-DSA/CS61B-Project0-Summary/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>This is the first project of CS61B, 2018sp version. </p>
<p>The goal for this project is to write a program simulating the motion of N objects in a plane, accounting for the gravitational forces mutually affecting each object as demonstrated by Sir Isaac Newton‚Äôs Law of Universal Gravitation. Ultimately, a program <code>NBody.java</code> that draws an animation of bodies floating around in space tugging on each other with the power of gravity will be created.</p>
<p>All prerequisite of this assignment is basic Java knowledge. Since this is an easy project with a great deal of scaffolding, I recommend using text editor, such as VS Code, to finish it. But it is fine if you prefer to use IDE. </p>
<p>Try it, you can finish this project quickly üöÄ</p>
<span id="more"></span>

<h2 id="Live-Demo"><a href="#Live-Demo" class="headerlink" title="Live Demo"></a>Live Demo</h2><p>I create a simulation which looks like below. You can add audio files to make the project cooler.</p>
<p><video src='5bodies_simulation_Trim.mp4' 
       type='video/mp4' 
       controls='controls'  
       preload="auto"
       width='60%' 
       height='60%'><br></video></p>
<h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><p>Â¶ÇÊûú‰Ω†ÁöÑÊìç‰ΩúÁ≥ªÁªü‰∏∫‰∏≠ÊñáÔºåÂΩì‰Ω†‰ΩøÁî®<code>javac fileName.java</code>ÁºñËØëNBody.javaÊó∂Ôºå‰Ω†ÂèØËÉΩ‰ºöÈÅáÂà∞Â¶Ç‰∏ãÈîôËØØÔºö</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ÈîôËØØÔºöÁºñÁ†ÅGBKÁöÑ‰∏çÂèØÊò†Â∞ÑÂ≠óÁ¨¶</span><br></pre></td></tr></table></figure>

<p>ÂéüÂõ†ÂàÜÊûêÔºö</p>
<p>Áî±‰∫éJDKÊòØÂõΩÈôÖÁâàÁöÑÔºåÊàë‰ª¨Âú®Áî®<code>javac</code>ÁºñËØëÊó∂ÔºåÁºñËØëÁ®ãÂ∫èÈ¶ñÂÖà‰ºöËé∑ÂæóÊàë‰ª¨Êìç‰ΩúÁ≥ªÁªüÈªòËÆ§ÈááÁî®ÁöÑÁºñÁ†ÅÊ†ºÂºèÔºà<code>GBK</code>ÔºâÔºåÁÑ∂ÂêéJDKÂ∞±ÊääJavaÊ∫êÊñá‰ª∂‰ªéGBKÁºñÁ†ÅÊ†ºÂºèËΩ¨Êç¢‰∏∫JavaÂÜÖÈÉ®ÈªòËÆ§ÁöÑ<code>Unicode</code>Ê†ºÂºèÊîæÂÖ•ÂÜÖÂ≠ò‰∏≠ÔºåÁÑ∂ÂêéjavacÊääËΩ¨Êç¢ÂêéÁöÑUnicodeÊ†ºÂºèÁöÑÊñá‰ª∂ÁºñËØëÊàêclassÁ±ªÊñá‰ª∂„ÄÇ</p>
<p>Ê≠§Êó∂ÔºåclassÊñá‰ª∂ÊòØUnicodeÁºñÁ†ÅÁöÑÔºåÂÆÉÊöÇÂ≠òÂú®ÂÜÖÂ≠ò‰∏≠ÔºåÁ¥ßÊé•ÁùÄÔºåJDKÂ∞ÜÊ≠§‰ª•UnicodeÊ†ºÂºèÁºñÁ†ÅÁöÑclassÊñá‰ª∂‰øùÂ≠òÂà∞Êìç‰ΩúÁ≥ªÁªü‰∏≠ÂΩ¢ÊàêÊàë‰ª¨ËßÅÂà∞ÁöÑclassÊñá‰ª∂„ÄÇÂΩìÊàë‰ª¨‰∏çÂä†ËÆæÁΩÆÂ∞±ÁºñËØëÊó∂ÔºåÁõ∏ÂΩì‰∫é‰ΩøÁî®‰∫ÜÂèÇÊï∞Ôºö<code>javac -encoding GBK Test.java</code>ÔºåÂ∞±‰ºöÂá∫Áé∞‰∏çÂÖºÂÆπÁöÑÊÉÖÂÜµ„ÄÇ</p>
<p>Ëß£ÂÜ≥ÊñπÊ≥ïÔºö</p>
<p>Âú®terminal‰∏≠ËæìÂÖ•<code>javac -encoding utf-8 fileName.java</code>Âç≥ÂèØ„ÄÇ</p>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>Project1Gold: Autograding</title>
    <url>/2021/07/11/CS61B-DSA/Project1-Gold-Autograding/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>Project1A: Data Structures</title>
    <url>/2021/07/08/CS61B-DSA/Project1A-Data-Structures/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>This is the first part of the second project of CS61B (2018sp version). üê∑</p>
<p>The goal for this project is to build data structures by yourself. You are required to implement the Deque (Double Ended Queue, ÂèåÁ´ØÈòüÂàó) API which support various operations listed as the followings.</p>
<ul>
<li><code>public void addFirst(T item)</code>: Adds an item of type T to the front of the deque.</li>
<li><code>public void addLast(T item)</code>: Adds an item of type T to the back of the deque.</li>
<li><code>public boolean isEmpty()</code>: Returns true if deque is empty, false otherwise.</li>
<li><code>public int size()</code>: Returns the number of items in the deque.</li>
<li><code>public void printDeque()</code>: Prints the items in the deque from first to last, separated by a space.</li>
<li><code>public T removeFirst()</code>: Removes and returns the item at the front of the deque. If no such item exists, returns null.</li>
<li><code>public T removeLast()</code>: Removes and returns the item at the back of the deque. If no such item exists, returns null.</li>
<li><code>public T get(int index)</code>: Gets the item at the given index, where 0 is the front, 1 is the next item, and so forth. If no such item exists, returns null. Must not alter the deque!</li>
</ul>
<p>Prerequisite of this project is the knowledge of array and linked-list (singly linked list and doubly linked list). Compared to the first project, this one will be more challenging since there is no scaffolding and there are many design issues to consider.But it is a good chance to practice everything you learned in lectures.</p>
<p>Hope you can enjoy this project. ü§≠</p>
<span id="more"></span>


<h2 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h2><h3 id="provided-LinkedListDequeTest-java"><a href="#provided-LinkedListDequeTest-java" class="headerlink" title="provided LinkedListDequeTest.java"></a>provided LinkedListDequeTest.java</h3><p>Firstly, use the provided class <code>LinkedListDequeTest.java</code> to test my implementation.</p>
<p><video src='LinkedListDequeTest1.mp4' 
       type='video/mp4' 
       controls='controls'  
       preload="auto"
       width='60%' 
       height='60%'><br></video></p>
<h3 id="LinkedListDeque-Visualization"><a href="#LinkedListDeque-Visualization" class="headerlink" title="LinkedListDeque Visualization"></a>LinkedListDeque Visualization</h3><p>Visualizing the LinkedListDeque.</p>
<p><video src='LinkedListDequeTest2.mp4' 
       type='video/mp4' 
       controls='controls'  
       preload="auto"
       width='60%' 
       height='60%'><br></video></p>
<h3 id="ArrayDeque-Visualization"><a href="#ArrayDeque-Visualization" class="headerlink" title="ArrayDeque Visualization"></a>ArrayDeque Visualization</h3><p><video src='ArrayDeque.mp4' 
       type='video/mp4' 
       controls='controls'  
       preload="auto"
       width='60%' 
       height='60%'><br></video></p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>üíÅ‚Äç‚ôÄÔ∏è</p>
<ol>
<li>The first thing you should do is understanding <code>Deque</code> thoroughly. </li>
</ol>
<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/1.png" class="">


<ol start="2">
<li>Although you are required to build a Deque which can accept any generic type, it will be a good choice to start with integer type.</li>
</ol>
<ol start="3">
<li><strong>Circular!</strong> It is recommended that you design your data structure circularly. That is, when implementing <code>LinkedListDeque</code>, concult the circular sentinel topology; and when implementing <code>ArrayDeque</code>, treat the array as circular.</li>
</ol>
<p>a) Circular sentinel topology in LinkedListDeque:</p>
<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/2.JPG" class="">

<p>b) Circular array in ArrayDeque:</p>
<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/3.JPG" class="">

<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/4.JPG" class="">

<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/5.JPG" class="">

<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/6.JPG" class="">

<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/7.JPG" class="">

<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/8.JPG" class="">

<img src="/2021/07/08/CS61B-DSA/Project1A-Data-Structures/9.JPG" class="">

<ol start="4">
<li>When building <code>ArrayDeque</code>, considering not doing resizing at all until your code works without it.</li>
</ol>
<ol start="5">
<li>Resizing in ArrayDeque is the most tricky task. The following is my implementation, you can refer to it if you like.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDeque</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> T[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nextFirst, nextLast;  <span class="comment">// position of insertion</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the previous id of the given id in the array.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id given id, i.e. the current id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrLength length of array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">minusOne</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> arrLength)</span> </span>&#123;</span><br><span class="line">        id = (id - <span class="number">1</span>) % arrLength;</span><br><span class="line">        <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            id = id + arrLength;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns the next id of the given id in the array. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">plusOne</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> arrayLength)</span> </span>&#123;</span><br><span class="line">        id = (id + <span class="number">1</span>) % arrayLength;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Resizes the underlying array to the target capacity.</span></span><br><span class="line"><span class="comment">     * The amount of memory used at any given time must be proportional to the number of items.</span></span><br><span class="line"><span class="comment">     * For arrays of length 16 or more, usage factor should always be at least 25%.</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        T[] newItems = (T[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        copy(<span class="keyword">this</span>, newItems);</span><br><span class="line">        nextFirst = minusOne(<span class="number">0</span>, newItems.length);</span><br><span class="line">        nextLast = size;</span><br><span class="line">        items = newItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Copies the items from the source to the destination array.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src source deque</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest destination array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(ArrayDeque&lt;T&gt; src, T[] dest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; size) &#123;</span><br><span class="line">            dest[i] = src.get(i);</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>Take full advantage of the methods you have completed!</li>
</ol>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>Project1B: Applying and Testing Data Structures</title>
    <url>/2021/07/09/CS61B-DSA/Project1B-Applying-and-Testing-Data-Structures/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>This is the second part of the second project of CS61B (2018sp version). ü¶Ñ</p>
<p>The goal for this project is to using deque, which is implemented in project 1A, to solove a real world problem, and also, writing tests by yourself to make sure that everything works correctly.</p>
<span id="more"></span>


<h2 id="Deliverables"><a href="#Deliverables" class="headerlink" title="Deliverables"></a>Deliverables</h2><p>This project has nothing to display but lots of JUnit tests, so no deliverables.</p>
<h2 id="Project-Structure"><a href="#Project-Structure" class="headerlink" title="Project Structure"></a>Project Structure</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‚îú‚îÄ‚îÄ PalindromeFinder.java  *** class that helps identify generalized Palindromes</span><br><span class="line">‚îú‚îÄ‚îÄ CharacterComparator.java  *** interface used for comparing characters</span><br><span class="line">‚îú‚îÄ‚îÄ Palindrome.java  *** class for palindrome operations</span><br><span class="line">‚îú‚îÄ‚îÄ OffByOne.java  *** class for off-by-1 comparators</span><br><span class="line">‚îú‚îÄ‚îÄ OffByN.java  *** class for off-by-N comparators</span><br><span class="line">‚îú‚îÄ‚îÄ TestPalindrome.java  ** class of JUnit tests for Palindrome</span><br><span class="line">‚îú‚îÄ‚îÄ TestOffByOne.java  *** class for JUnit tests for OffByOne</span><br></pre></td></tr></table></figure>


<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>üíÅ‚Äç‚ôÄÔ∏è</p>
<ol>
<li>In ‚ÄúTask 3B: isPalindrome‚Äù, there are many ways to implement <code>isPalindrome</code> method. I use <code>ArrayDeuqe</code> in my solution, as follows,</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** A class for palindrome operations. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Palindrome</span> </span>&#123;</span><br><span class="line">	<span class="comment">/** Returns a characters deque, where the order of characters</span></span><br><span class="line"><span class="comment">	 * is the same as the given string.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> word the given string, should be separated into characters.</span></span><br><span class="line"><span class="comment">	 * */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Deque&lt;Character&gt; <span class="title">wordToDeque</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Returns true if the given word is a palindrome, otherwise false. */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">		Deque&lt;Character&gt; wordDeque = wordToDeque(word);</span><br><span class="line">		<span class="keyword">return</span> isPalindrome(wordDeque);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(Deque deque)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (deque.size() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!deque.removeFirst().equals(deque.removeLast())) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> isPalindrome(deque);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>The following is my implementation of <code>equalChars</code> method in <code>OffByOne.java</code> :</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OffByOne</span> <span class="keyword">implements</span> <span class="title">CharacterComparator</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalChars</span><span class="params">(<span class="keyword">char</span> x, <span class="keyword">char</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Math.abs(x - y) == <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>I met a strange scene when completing the project. When I try to create the <code>OffByOne</code> class, IntelliJ tells me that ‚ÄúOffByOne cannot access CharacterComparator‚Äù,</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* The following line will be marked with red wavy line. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OffByOne</span> <span class="keyword">implements</span> <span class="title">CharacterComparator</span> </span>&#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>According to <a href="https://stackoverflow.com/questions/38549649/java-cannot-access-class-class-file-not-found">this answer</a>, it seems that it is the problem of IntelliJ.</p>
<p>The following solution works for me.</p>
<ul>
<li>click <strong>File</strong></li>
<li>choose <strong>Invalidate Caches/Restart</strong></li>
<li>click only <strong>Invalidate and restart</strong>, and reopen the project</li>
</ul>
]]></content>
      <categories>
        <category>CS61B-Data Strucutes</category>
      </categories>
      <tags>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>A Brief History of the Internet</title>
    <url>/2021/08/11/Computer-Networking/A-Brief-History-of-the-Internet/</url>
    <content><![CDATA[<p>Much like the industrial revolution, the Internet revolution has changed the way people live, shop, socialize and work, and the way companies operate.</p>
<p>In this blog, let‚Äôs review the history of the Internet quickly.</p>
<span id="more"></span>

<h2 id="The-‚Äò50s-The-Cold-War"><a href="#The-‚Äò50s-The-Cold-War" class="headerlink" title="The ‚Äò50s: The Cold War"></a>The ‚Äò50s: The Cold War</h2><ul>
<li>Back to the middle of the last century, the U.S. was in the midst of a cold war with The Soviet Union.</li>
<li>In 1957, the Soviets launched Sputnik, the world‚Äôs first satellite, propelling us into the space age.</li>
<li>This caught the US off-guard, and in response the U.S. government created ARPA (Advanced Research Projects Agency) which was mandated with the responsibility of the technological and scientific advancement of the country.</li>
</ul>
<blockquote>
<p> The Advanced Research Projects Agency (ARPA) is now known as Defense Advanced Research Projects Agency (DARPA) to emphasize the its focus on defense.</p>
</blockquote>
<h2 id="The-‚Äò60s-‚Äò70s-ARPANET"><a href="#The-‚Äò60s-‚Äò70s-ARPANET" class="headerlink" title="The ‚Äò60s-‚Äò70s: ARPANET"></a>The ‚Äò60s-‚Äò70s: ARPANET</h2><ul>
<li>ARPA was meant to facilitate research. But their computers <strong>could not talk to each other</strong>.</li>
<li>ARPA sent out a request for the design of a network that would allow computers across the entire country to talk to each other.</li>
<li>A network called the <strong>ARPANET</strong> was developed over the course of a year. In September 1969, the ARPANET was turned on. The first four nodes were at UCLA, Stanford, MIT, and the University of Utah. Over the ‚Äò70s, other computer networks just like ARPANET sprang up.</li>
<li>While the computers on one network could communicate via a default way to communicate set by the network administrator of each network, the computers on different networks could not communicate since every network had its own language or - more formally ‚Äì <strong>protocol</strong>.</li>
<li>Then, a standardized protocol called the <strong>Transmission Control Protocol</strong> was invented (RFC 675).</li>
<li>It was also in RFC 675 that the term ‚ÄúInternet‚Äù was first used. Later RFCs continued the use.</li>
</ul>
<hr>
<p><strong>Protocals</strong></p>
<p>A protocol is a set of rules that computers use to communicate with each other.</p>
<hr>
<h2 id="The-‚Äò80s-Protocols"><a href="#The-‚Äò80s-Protocols" class="headerlink" title="The ‚Äò80s: Protocols"></a>The ‚Äò80s: Protocols</h2><ul>
<li>ARPANET was fully migrated to TCP/IP.</li>
<li>As we moved into the 1980s, computers were added to the Internet at an increasing rate. These computers were primarily from government, academic, and research organizations. Much to the surprise of the engineers, the early popularity of the Internet was driven by the use of electronic mail.</li>
</ul>
<img src="/2021/08/11/Computer-Networking/A-Brief-History-of-the-Internet/arpanet-evolution.JPG" class="">

<h2 id="The-‚Äò90s-The-World-Wide-Web"><a href="#The-‚Äò90s-The-World-Wide-Web" class="headerlink" title="The ‚Äò90s: The World Wide Web"></a>The ‚Äò90s: The World Wide Web</h2><ul>
<li>During the 90‚Äôs, the researchers at the European Council for Nuclear Research (CERN) felt the need for automated sharing of their findings between their computers. CERN had documents that cross-referenced other documents. So, there were these (hyper) links between documents.</li>
<li>In 1990 Tim Berners-Lee introduced his World Wide Web project to store and retrieve these inter-connected documents.</li>
<li>Later, educational, commercial and so many other applications were realized.</li>
<li>The World Wide Web got even more popular with the advent of browsers such as Mosaic and Netscape which allowed combining graphics with web navigation!</li>
</ul>
<hr>
<p><strong>Search Engines</strong></p>
<p>A fun fact that initially, there were no search engines.</p>
<p>So how would you find a website? Well, you couldn‚Äôt. Either you knew it or you didn‚Äôt. Of course, you could land on a website by accident or by following a link from another website that you knew.</p>
<p>Then, people started creating static indices of the web - a categorized listing of websites. People would sit and randomly click on links to find web pages and add links to their index. But this couldn‚Äôt scale. So, eventually, search engines were ‚Äúinvented.‚Äù</p>
<p>Altavista and Yahoo! were among the earlier search engines. According to this Wikipedia article, the first automated web index was World Wide Web Wanderer. Soon afterward, the first web search engine, the W3Catalog was invented.</p>
<hr>
<h2 id="The-21st-Century-The-Age-of-the-Internet"><a href="#The-21st-Century-The-Age-of-the-Internet" class="headerlink" title="The 21st Century: The Age of the Internet"></a>The 21st Century: The Age of the Internet</h2><p>Now, we are in an age in which all our devices run on the Internet, even toasters for some ‚Äì the era of <strong>the Internet of Things</strong>.</p>
]]></content>
      <categories>
        <category>Computer Networking</category>
        <category>notes</category>
      </categories>
      <tags>
        <tag>computer networking</tag>
      </tags>
  </entry>
  <entry>
    <title>Computer Networking(I)</title>
    <url>/2021/08/11/Computer-Networking/Computer-Networking-I/</url>
    <content><![CDATA[<p>This is the notes of computer networking, just for self-study purpose.</p>
<span id="more"></span>

<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="What-is-the-Internet"><a href="#What-is-the-Internet" class="headerlink" title="What is the Internet"></a>What is the Internet</h3><p>The Internet permeates our very existence, and has become almost like a utility.</p>
<p>The Internet is essentially a global network of computer networks. So your personal computer is connected to other computers at your house or workplace to create a small computer network, which is in turn connected to other computer networks. And so the global Internet encompasses a complex network of interconnected computer networks.</p>
<hr>
<p>Computer Network:</p>
<p>A network is officially defined as a group or system of interconnected people or items. So computers connected to each other with cable or wireless radio make up a <strong>computer network</strong>.</p>
<p>There are two main purposes of computer networks: <em>Communication using computers</em> and <em>sharing of resources</em>. An ‚Äúinternet‚Äù allows doing these two things across different computer networks.</p>
<p>üçâ An internet with a lowercase ‚Äúi‚Äù is any interconnection of computer networks. Whereas the global Internet is always spelled with a capital ‚ÄúI‚Äù.</p>
<hr>
<p>Internet vs. World Wide Web</p>
<p>The world wide web is information based on HTTP protocals, which can be accessed via the Internet.</p>
<h3 id="Quick-history-of-the-Internet"><a href="#Quick-history-of-the-Internet" class="headerlink" title="Quick history of the Internet"></a>Quick history of the Internet</h3><p>You can read <a href="">this article</a> to know it.</p>
]]></content>
      <categories>
        <category>Computer Networking</category>
        <category>notes</category>
      </categories>
      <tags>
        <tag>computer networking</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(1): SQL and Data Modelding(II)</title>
    <url>/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/</url>
    <content><![CDATA[<p>As said previously, using <code>psycopg2</code> still requires us to write SQL, and writing SQL directly is a fairly clunky way. </p>
<p>In this blog, I will introduce a powerful Python libraries called <code>SQLAlchemy</code> which is for interacting with databases.</p>
<span id="more"></span>

<h2 id="SQLAlchemy-Basics"><a href="#SQLAlchemy-Basics" class="headerlink" title="SQLAlchemy Basics"></a>SQLAlchemy Basics</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p><code>SQLAlchemy</code> is the most popular open-source library for working with relational databases from Python.</p>
<ul>
<li>It is an end-to-end tool for working with relational databases without writing raw SQL (avoid SQL‚Äôs dialect).</li>
<li>It allows SQL clauses to be built via Python functions and expressions.</li>
<li>It avoids sending SQL to the database on every call. The SQLAlchemy ORM library features <strong>automatic caching</strong>, caching collections and references between objects once initially loaded..</li>
<li>It allows us be able to switch database systems without rewriting code.</li>
</ul>
<p>It is one type of <strong>ORM</strong> library, a.k.a an <strong>Object-Relational Mapping</strong> library, which provides an interface for using object oriented programming to interact with a database.</p>
<ul>
<li>ORM library will map tables and columnsto class objects and attributes.</li>
</ul>
<hr>
<p>Notes on ORMs</p>
<p>Using an ORM to interact with your database is simply one of many valid approaches for how you can add additional layers of abstraction to your web application to interact with a database more easily. </p>
<p>There are other kinds of <strong>query builder libraries</strong> you can use that are between talking to a database directly (with a database driver library like pyscopg2), and using an ORM. </p>
<p>An ORM is considered to be the highest level of abstraction you can add to a web application for database management. Query Builder libraries are somewhere in the middle. There are many mixed opinions about whether ORMs are a best practice approach in all cases, such as this opinion on <a href="https://blog.logrocket.com/why-you-should-avoid-orms-with-examples-in-node-js-e0baab73fa5/">‚ÄúWhy you should avoid ORMs‚Äù</a>.</p>
<p>Thankfully, <code>SQLAlchemy</code> happens to offer multiple levels of abstraction you can prefer, between the database driver(È©±Âä®) and the ORM, so you can customize the development of your web application to your own liking. The many granular levels of abstraction that SQLAlchemy offers is one of the reasons that has led to its widespread popularity and diverse ways of using the library and approaching your database programming.</p>
<hr>
<h3 id="SQLAlchemy‚Äôs-Layers-of-Abstraction"><a href="#SQLAlchemy‚Äôs-Layers-of-Abstraction" class="headerlink" title="SQLAlchemy‚Äôs Layers of Abstraction"></a>SQLAlchemy‚Äôs Layers of Abstraction</h3><h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/sqlalchemy-abstract.JPG" class="">
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/sqlalchemy-abstract.JPG" class="">

<p>SQLAlchemy vs psycopg2 :</p>
<ul>
<li>SQLAlchemy <strong>generates</strong> SQL statements.</li>
<li>psycopg2 directly <strong>sends</strong> SQL statements to the database.</li>
<li>SQLAlchemy depends on psycopg2 or other database drivers to communicate with the database, under the hood.</li>
</ul>
<p>SQLALchemy lets you traverse through all 3 layers of abstraction to interact with your database.</p>
<ul>
<li>Can stay on the <strong>ORM level</strong></li>
<li>Can dive into database operations to run customized SQL code specific to the database, on the <strong>Expressions level</strong>.</li>
<li>Can write raw SQL to execute, when needed, on the <strong>Engine level</strong>.<ul>
<li>Can more simply use psycopg2 in this case</li>
</ul>
</li>
</ul>
<p>Next, let‚Äôs go over every layer of abstraction in SQLAlchemy and see what they offer.</p>
<h4 id="1-The-Dialect"><a href="#1-The-Dialect" class="headerlink" title="1) The Dialect"></a>1) The Dialect</h4><p>SQLAlchemy uses the <strong>dialect</strong> to communicate with various types of DBAPI implementations and databases. The dialect layer allows us to forget about the database system we‚Äôre using</p>
<p>üåû Resources: <a href="https://docs.sqlalchemy.org/en/14/dialects/">SQLAlchemy Docs on the Dialect</a></p>
<h4 id="2-The-Connection-Pool"><a href="#2-The-Connection-Pool" class="headerlink" title="2) The Connection Pool"></a>2) The Connection Pool</h4><p>A connection pool is a standard technique used to maintain long running connections in memory for efficient re-use. It lets us avoid open and close connection manually using DBAPI alone.</p>
<p>Also, a connection pool provides management for the total number of connections an application might use simultaneously.</p>
<p>With connection pool, the opening and closing of connections and which connection you are using when you‚Äôre executing statements within a session is completely abstracted.</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/connecting-pool.JPG" class="">

<p>üåû Resources: <a href="https://docs.sqlalchemy.org/en/14/core/pooling.html">SQLAlchemy Docs on its Connection Pooling</a></p>
<h4 id="3-The-Engine"><a href="#3-The-Engine" class="headerlink" title="3) The Engine"></a>3) The Engine</h4><img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/sqlalchemy-engine1.JPG" class="">

<p>You should notice that,</p>
<ul>
<li>The Engine in SQLAlchemy refers to both itself, the Dialect and the Connection Pool, which all work together to interface with our database.</li>
<li>A connection pool gets automatically created when we create a SQLAlchemy engine.</li>
</ul>
<p>üåû Resources: <a href="https://docs.sqlalchemy.org/en/14/core/engines.html">SQLAlchemy Docs on the Engine</a></p>
<h4 id="4-SQL-Expressions"><a href="#4-SQL-Expressions" class="headerlink" title="4) SQL Expressions"></a>4) SQL Expressions</h4><p>Instead of sending raw SQL (using the Engine), we can compose SQL statements by building Python objects.</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/sqlalchemy-sql-expression.JPG" class="">

<p>You still need to know how to use SQL to interact with databse.</p>
<h4 id="5-SQLAlchemy-ORM"><a href="#5-SQLAlchemy-ORM" class="headerlink" title="5) SQLAlchemy ORM"></a>5) SQLAlchemy ORM</h4><p>SQLAlchemy ORM is the highest layer of abstraction in SQLALchemy. With it, you can compose SQL expressions by mapping python classes of objects to tables in the database ‚Äì&gt; <strong>Maps classes to tables</strong>. It wraps the SQL Expressions and Engine to work together to interact with the database.</p>
<p>In fact, SQLAlchemy is split into two libraries:</p>
<ul>
<li>SQLAlchemy Core: Expressions &amp; Engine</li>
<li>SQLAlchemy ORM: SQLALchemy ORM is offered as an optional library, so you don‚Äôt have to use the ORM in order to use the rest of SQLAlchemy.<ul>
<li>The ORM uses the Core library</li>
<li>The ORM lets you map from the database schema to the application‚Äôs Python objects</li>
<li>The ORM persists objects into corresponding database tables.</li>
</ul>
</li>
</ul>
<p><strong>SQLAlchemy Layers of Abstraction Overview (Diagram)</strong></p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/sqlalchemy-layers-of-abstraction.JPG" class="">


<h3 id="Mapping-Between-Tables-and-Classes"><a href="#Mapping-Between-Tables-and-Classes" class="headerlink" title="Mapping Between Tables and Classes"></a>Mapping Between Tables and Classes</h3><img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/map-class-table.JPG" class="">



<h3 id="Demo-Hello-APP-with-Flask-SQLAlchemy"><a href="#Demo-Hello-APP-with-Flask-SQLAlchemy" class="headerlink" title="Demo: Hello APP with Flask-SQLAlchemy"></a>Demo: Hello APP with Flask-SQLAlchemy</h3><p>üåû Resources: </p>
<ol>
<li><a href="https://flask.palletsprojects.com/en/2.0.x/">Flask Docs</a></li>
<li><a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/">Flask-SQLAlchemy Docs</a></li>
</ol>
<p><strong>Flask</strong> is a very simple web framework for serving web pages with data</p>
<p><strong>Flask-SQLAlchemy</strong> is a Flask extension that supports the usage of SQLAlchemy underneath.</p>
<h4 id="Initialize-amp-Run-the-Flask-app"><a href="#Initialize-amp-Run-the-Flask-app" class="headerlink" title="Initialize &amp; Run the Flask app"></a>Initialize &amp; Run the Flask app</h4><p>Initialize app:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flask_hello_app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Run app:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start the server</span></span><br><span class="line"><span class="comment"># specify the location of the flask app</span></span><br><span class="line">$ FLASK_APP=flask-hello-app.py flask run</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable live reload</span></span><br><span class="line">$ FLASK_APP=flask-hello-app.py FLASK_DEBUG=<span class="literal">true</span> flask run</span><br></pre></td></tr></table></figure>

<p>There is an alternative approach to run app:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flask-hello-app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add these two lines</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>Run with the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># alternative way:</span></span><br><span class="line">$ python flask_hello_app.py</span><br></pre></td></tr></table></figure>


<h4 id="Connect-App-to-DB"><a href="#Connect-App-to-DB" class="headerlink" title="Connect App to DB"></a>Connect App to DB</h4><p>Database Connection URI Parts:</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/database-connection-uri-parts.JPG" class="">

<p>By default, SQLAlchemy will automatically choose which DBAPI you use underneath. You can also optionally specify it. For Python application, psycopg2 is the default database adpater).</p>
<blockquote>
<p>‚Äòpostgresql+psycopg2://username:password‚Ä¶‚Äô where ‚Äòpsycopg2‚Äô is optional</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="comment"># standard way for creating a flask application</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># connect to database from the Flask application by setting configuration</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/example&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)  <span class="comment"># db: instance of database</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Map-classes-to-tables"><a href="#Map-classes-to-tables" class="headerlink" title="Map classes to tables"></a>Map classes to tables</h4><ul>
<li><code>db.Model</code> lets us create and manipulate data <code>models</code><ul>
<li>Map classes to tables via SQLAlchemy ORM.</li>
<li>By default, SQLAlchemy will pick the name of the table for you, setting it equal to the lower-case version of your class‚Äôs name. You can also set the name of the table by yourself.</li>
</ul>
</li>
<li><code>db.session</code> lets us create and manipulate database transactions</li>
<li><code>db.create_all()</code> will detect models and creates tables for them (if they don‚Äôt exist)</li>
</ul>
<hr>
<p><em>NOTE</em></p>
<p>SQLAlchemy names the table by the name of the class, all lower cased, by default. Then, if it finds a table with that name already, regardless of whether the schema matches the class, it will skip creating another table by that same name, and do nothing.</p>
<hr>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="comment"># standard way for creating a flask application</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># connect to database from the Flask application by setting configuration</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/example&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)  <span class="comment"># db: instance of database</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;persons&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create table</span></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<h4 id="Interact-with-DB"><a href="#Interact-with-DB" class="headerlink" title="Interact with DB"></a>Interact with DB</h4><ol>
<li>Create records with psql</li>
</ol>
<blockquote>
<p>(in psql)<br>INSERT INTO persons(name) VALUES (‚ÄòAmy‚Äô);</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="comment"># standard way for creating a flask application</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># connect to database from the Flask application by setting configuration</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/example&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)  <span class="comment"># db: instance of database</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;persons&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create table</span></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    person = Person.query.first()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello &#x27;</span> + person.name + <span class="string">&#x27;!&#x27;</span>  <span class="comment"># Hello Amy!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Create records with Python interpreter</li>
</ol>
<p>You can also experiment the app using interactive mode of the Python interpreter.</p>
<p>First, create records in Python‚Äôs interactive mode using <code>db.session.add()</code> :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; from flask_hello_app import db, Person</span><br><span class="line">&gt;&gt;&gt; person = Person(name=<span class="string">&#x27;Emma&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; db.session.add(person)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure>

<p>Then, revise the <code>flask_hello_app.py</code>,</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="comment"># standard way for creating a flask application</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># connect to database from the Flask application by setting configuration</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/example&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)  <span class="comment"># db: instance of database</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;persons&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># useful for debugging: customized show</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Person ID: <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span>, name: <span class="subst">&#123;self.name&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create table</span></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    person = Person.query.first()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello &#x27;</span> + person.name + <span class="string">&#x27;!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>Finally run as the following in Python‚Äôs interpreter,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; import flask_hello_app</span><br><span class="line">&gt;&gt;&gt; from flask_hello_app import Person</span><br><span class="line">&gt;&gt;&gt; Person.query.first()</span><br><span class="line">&lt;Person ID: 1, name: Amy&gt;</span><br><span class="line">&gt;&gt;&gt; Person.query.all()</span><br><span class="line">[&lt;Person ID: 1, name: Amy&gt;, &lt;Person ID: 2, name: Emma&gt;]</span><br></pre></td></tr></table></figure>

<h4 id="SQLALchemy-Data-Type"><a href="#SQLALchemy-Data-Type" class="headerlink" title="SQLALchemy Data Type"></a>SQLALchemy Data Type</h4><img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/screen-shot-2019-08-18-at-11.36.57-pm.JPG" class="">

<p>üåû Resources: </p>
<ol>
<li><a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/models/">Flask-SQLAlchemy: Declaring Models</a></li>
<li><a href="https://docs.sqlalchemy.org/en/14/core/types.html">Column and Data Types</a></li>
</ol>
<h4 id="SQLAlchemy-Constraints"><a href="#SQLAlchemy-Constraints" class="headerlink" title="SQLAlchemy Constraints"></a>SQLAlchemy Constraints</h4><ul>
<li>Column constraints ensure data integrity across our database, allowing for database accuracy and consistency.</li>
<li>Constraints are conditions on your column, that provide checks on the data‚Äôs validity. It does not allow data that violates constraints to be inserted into the database (it will raise an error if you attempt to).</li>
<li>In SQLAlchemy, constraints are set in db.Column() after setting the data type.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># column contraint demo</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">  name = db.Column(db.String(), nullable=<span class="literal">False</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># check constraint</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">  <span class="string">&quot;&quot;&quot;ensures that no product goes into the table with a nonpositive price value&quot;&quot;&quot;</span></span><br><span class="line">  price = db.Column(db.Float, db.CheckConstraint(<span class="string">&#x27;price&gt;0&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>üêµüêµüêµ <strong>Resource:</strong> <a href="https://github.com/crazyguitar/pysheeet/blob/master/docs/notes/python-sqlalchemy.rst#set-a-database-url">SQLAlchemy Cheat Sheet</a></p>
<h2 id="SQLAlchemy-ORM-in-Depth"><a href="#SQLAlchemy-ORM-in-Depth" class="headerlink" title="SQLAlchemy ORM in Depth"></a>SQLAlchemy ORM in Depth</h2><h3 id="Model-query"><a href="#Model-query" class="headerlink" title="Model.query"></a>Model.query</h3><ul>
<li><code>db.Model.query</code> offers us the <strong>Query</strong> object. This object lets us generate SELECT statements that let us query and return slices of data from our database.</li>
<li>The Query object can be accessed on a model using either:<ul>
<li><strong>MyModel.query</strong></li>
<li><strong>db.session.query(MyModel)</strong></li>
</ul>
</li>
</ul>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/model-query-2-ways.JPG" class="">

<p>ü¶ú <strong>Resource:</strong> <a href="https://github.com/rileywang0819/demo-todoapp/blob/master/query-cheat-sheet.pdf">SQLAlchemy Query methods Cheat Sheet</a></p>
<h3 id="SQLAlchemy-Object-Lifecycle"><a href="#SQLAlchemy-Object-Lifecycle" class="headerlink" title="SQLAlchemy Object Lifecycle"></a>SQLAlchemy Object Lifecycle</h3><p>We can insert new records into the database by writing the raw SQL. We can also use SQLAlchemy by running the following code, which will build a <em>transaction</em> for inserting in a person instance in our model/table, and persist it to the database upon calling <code>commit()</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person = Person(name=<span class="string">&#x27;Amy&#x27;</span>)</span><br><span class="line">db.session.add(person)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure>

<p>Let‚Äôs dive into the process, learn how an object goes from pending tp persistent, i.e. <strong>the SQLAlchemy object life cycle</strong>.</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/session2.JPG" class="">

<p>It isn‚Äôt until we execute <code>db.session.commit()</code> that we commit anything to the database.</p>
<ul>
<li>Within a session, we create transactions every time we want to commit work to the database.</li>
<li>Proposed changes are not immediately committed to the database and instead go through stages to allow for ‚Äúundos‚Äù.</li>
<li>The ability to undo is allowed via <code>db.session.rollback()</code></li>
</ul>
<p>Let‚Äôs look at different stages of object lifecycle.</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/life-cycle.JPG" class="">
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/life-cycle2.JPG" class="">
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/life-cycle3.JPG" class="">

<p>Let‚Äôs dive into <code>Flush</code> stage.</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/flush.JPG" class="">
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/life-cycle4.JPG" class="">

<p>Especially, when a statement has been flushed already, SQLAlchemy knows not to do the work again of translating actions to SQL statements (caching).</p>
<p>Look at the original table, there are 8 records,</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/flushed1.JPG" class="" title="original table">

<p>Then we use SQLAlchemy to add a new record, and look at the table once again. Since we still don;t do commit operation, so the database has no changes. </p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/flushed2.JPG" class="" title="terminal">
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/flushed3.JPG" class="">

<p>However, if we do some queries, meaning the statements have been flushed, we can that the action has already been translated into SQL commands though database is not persisted.</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/flushed4.JPG" class="">
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/flushed3.JPG" class="">

<p>Finally, make commit to change the database permanetly.</p>
<blockquote>
<p>db.session.commit()</p>
</blockquote>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-II/flushed5.JPG" class="">


]]></content>
      <categories>
        <category>Web Development</category>
        <category>Full Stack Web Dev Program</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(1): SQL and Data Modeling(I)</title>
    <url>/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>In this serials, I will talk about skills needed to develop an entire database-backed web application.</p>
<p>You will learn:</p>
<ul>
<li>How to do <code>CRUD</code> operations?</li>
<li>How to apply these operations across both databases and web applications?</li>
<li>How to set up relationships between elements of an application?</li>
<li>How to think about important principles and patterns in building data models for a web application?</li>
</ul>
<p>We take ‚ÄúLearn by doing‚Äù strategy to acquire these skills. The tech stack is:</p>
<ul>
<li>programming language: Python 3<ul>
<li>use <code>pip</code> to install specific Python packages from <code>Python Package Index (PyPI)</code></li>
</ul>
</li>
<li>web server framework: <code>Flask</code></li>
<li>database: <code>PostgresSQL</code></li>
<li>Python libraries:<ul>
<li><code>psycopg2</code></li>
<li><code>SQLAlchemy</code></li>
<li><code>Flask-SQLAlchemy</code></li>
</ul>
</li>
</ul>
<span id="more"></span>


<h2 id="Interacting-with-Databases"><a href="#Interacting-with-Databases" class="headerlink" title="Interacting with Databases"></a>Interacting with Databases</h2><p>In this blog, we focus on 3 core topics.</p>
<p><strong>1. Interacting with a (remote) database</strong></p>
<p>Backend developers need to interact with databases regularly in order to manipulate and maintain the models behind their web applications. In working with a database, we‚Äôll need to use a <code>Database Management System (DBMS)</code>.</p>
<p>A <code>Database Management System (DBMS)</code> is simply software that allows you to interact with a database (e.g.to access or modify the data in that database).</p>
<hr>
<p><strong>2. Database Application Programming Interfaces (DBAPIs)</strong></p>
<p>We need to interact with database from a sepicific language or web server framework (such as Python, NodeJS, Ruby on Rails, etc.). This is where <code>DBAPIs</code> come in.</p>
<hr>
<p><strong>3. psycopg2</strong></p>
<p>We use <code>psycopg2 library</code> to interact with a database from Python.</p>
<p><strong>psycopg2</strong> is the most popular PostgreSQL database adapter(ÈÄÇÈÖçÂô®), which allows us to interact with database from Python.</p>
<p><em>Anything that implements the DB-API to connect to an external database can be reasonably called a database driver or database adapter.</em></p>
<hr>
<h3 id="Relational-Databases"><a href="#Relational-Databases" class="headerlink" title="Relational Databases"></a>Relational Databases</h3><ul>
<li>key characteristics of database:</li>
</ul>
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/key-characteristic-of-database.JPG" class="">

<ul>
<li>qualities of relational DBMS:</li>
</ul>
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/qualities-of-relational-dbms.JPG" class="">

<p>Next, let us review concepts of <code>primary key</code> and <code>foreign key</code> .</p>
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/primary-key.JPG" class="">
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/foreign-key.JPG" class="">


<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/SQL.JPG" class="">

<p>‚ú® Read <a href="https://www.postgresqltutorial.com/">PostgreSQL Tutorial</a> to learn more about PostgreSQL.</p>
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/execution-plan.JPG" class="">

<p>The <code>execution plan</code> gives important insight into the performance of the query. Since there can multiple ways of performing queries against a database with various performance tradeoffs, it‚Äôs important to choose the one with the best execution plan for quickly and efficiently returning the results that you need.</p>
<p>ü§† You can also register this <a href="https://www.udemy.com/course/complete-sql-databases-bootcamp-zero-to-mastery/">database bootcamp course</a> to learn more SQL.</p>
<p>üî• Supplyment: </p>
<ul>
<li><a href="https://www.winwire.com/25-tips-to-improve-sql-query-performance/">techniques for improving the performance of SQL queries</a></li>
<li><a href="https://www.postgresqltutorial.com/postgresql-indexes/postgresql-create-index/">use critical indexes to speed up information lookups</a></li>
<li><a href="https://db.grussell.org/sql3.html#_myauto10">SQL views</a></li>
<li><a href="https://use-the-index-luke.com/">optimize SQL queries: Use the Index, Luke!</a></li>
</ul>
<h3 id="Client-Server-Model"><a href="#Client-Server-Model" class="headerlink" title="Client-Server Model"></a>Client-Server Model</h3><p>In order to build database-backed web applications, we first need to understand how servers, clients, and databases interact. A major part of this is the <code>client-server model</code>, and the basic idea is very simple:</p>
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/basic-idea-of-client-server-model.JPG" class="">

<ul>
<li>Servers and clients are programs that run on a <strong>host</strong>.<ul>
<li>A <strong>host</strong> is a computer connected over the network.</li>
<li>A <strong>client</strong> is a program (like the web browser on your computer) that sends a <code>request</code> to the server.</li>
<li>A <strong>server</strong> is a centralized program that communicates over a network (such as the Internet) to serve many clients. It sends back a <code>response</code> to the client.</li>
<li>The client and server use a common language (a <strong>communication protocol</strong>, such as <strong>TCP/IP</strong>) for communicating with each other.</li>
</ul>
</li>
</ul>
<p>Now, adding a relational databases to this basic client-server model. This modern-day database systems also follow the client-server model.</p>
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/db-web-server-with-client.JPG" class="">

<p><em>Basically, we call things clients when they are making a request and servers when they are fulfilling a request with a repsonse. Since a web server can do both, it sometimes acts as a server and sometimes acts as a client.</em></p>
<h4 id="Client-Server-Model-Example-Onlinr-Store"><a href="#Client-Server-Model-Example-Onlinr-Store" class="headerlink" title="Client-Server Model Example: Onlinr Store"></a>Client-Server Model Example: Onlinr Store</h4><hr>
<p><strong>Background</strong></p>
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/ex-jane-online-store.JPG" class="">

<p>Click the Polo product and show a product detail page as follows :</p>
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/ex-jane-online-store2.JPG" class="">

<hr>
<p>Let‚Äôs look the steps under the hood :</p>
<ul>
<li>Clicking on the Polo product leads to a <strong>click event</strong> being registered by the browser, on the client computer.</li>
<li>A <strong>click handler(‰∫ã‰ª∂Â§ÑÁêÜÂô®)</strong> in the <code>view</code> would send a request, including information about the request type and any user input data, to the server (in Javascript) from the client browser.</li>
<li>A client could request more data and a different view to be rendered (with that data).</li>
<li>A server process listens to the request sent from the view, and uses the user input data to determine how to shape its request to the database, and sends a request to the database.</li>
<li>The database processes this request, and sends a response back to the web server.</li>
<li>The web server receives the response from the database, and uses it to determine the view + powers the view template with the fetched data, sending it back to the client‚Äôs browser.</li>
<li>The client is responsible for rendering something to the user, that represents both the data and its representation.</li>
</ul>
<p><code>MVC: model-view-controller</code></p>
<p>Let‚Äôs use some pseudocode to illustrate this process.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frontend</span></span><br><span class="line"></span><br><span class="line">&lt;!-- view.html --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;polo&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;1&quot;</span>&gt;</span> Polo <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;polo&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = <span class="keyword">new</span> Request();</span><br><span class="line">  request.send(<span class="string">&#x27;GET product detail on product with id &#x27;</span>, <span class="number">1</span>);  <span class="comment">// send request</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">request 2 things:</span></span><br><span class="line"><span class="comment">1. request more data;</span></span><br><span class="line"><span class="comment">2. reder a different page to the client web app</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># backend (web server)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; server.py &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">result = application.listen_on(request)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result.<span class="built_in">id</span>)  <span class="comment"># --&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">server does:</span></span><br><span class="line"><span class="string">1. send request to the database, about info about object with result.id;</span></span><br><span class="line"><span class="string">2. receives the response and sends back info about the view and the data;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">application.render_view(<span class="string">&#x27;product_details.html&#x27;</span>, data)</span><br></pre></td></tr></table></figure>


<h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><ul>
<li>Transmission Control Protocol (TCP)</li>
<li>Internet Protocol (IP)</li>
</ul>
<p><code>TCP/IP</code> is a suite of communication protocols that is used to connect devices and transfer data over the Internet.</p>
<p>TCP/IP uses:</p>
<ul>
<li><strong>IP addresses</strong>: An IP address identifies the location of a computer on a network.</li>
<li><strong>Ports</strong>: A port is a location on the recipient computer, where data is received.<ul>
<li><code>Port 80</code>: The port number most commonly used for HTTP requests. For example, when a client makes a request to a web server, this request is usually sent through port 80.</li>
<li><code>Port 5432</code>: The port number used by most database systems; also the default port for PostgreSQL.</li>
</ul>
</li>
</ul>
<hr>
<p>Q: Why are ports used?</p>
<p>While an IP address tells you where to find a particular computer, it doesn‚Äôt tell you specifically where on that computer a particular connection should be made‚Äîthat‚Äôs what port numbers are for.</p>
<p>Ports allow multiple types of traffic being received at the same time on a given device, to be tracked and routed to where they need to go.</p>
<p>Ports are much like the different terminals(Ëà™Á´ôÊ•º) of an airport, tracking and receiving different airplanes at the same time, allowing for the effective receipt of multiple types of traffic at the same IP address.</p>
<p>üåø Additional Resource: <a href="https://opensource.com/article/18/10/common-network-ports">14 of the most common ports</a></p>
<hr>
<p><strong>TCP/IP is connection-based.</strong> Over TCP/IP, we‚Äôll always need to establish a <code>connection</code> between clients and servers in order to enable communications.</p>
<ul>
<li>Establish a connection enables communications.</li>
<li>Close a connection to end communications. </li>
<li>Deliveries over the connection are <code>error-checked</code>: if packets arrive damaged or lost, then they are resent (known as retransmission).</li>
</ul>
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/session1.JPG" class="">
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/session2.JPG" class="">


<hr>
<p><em>Supplement: TCP vs UDP</em></p>
<p>The internet also offers the UDP protocol.</p>
<p>UDP is much simpler than TCP: hosts on the network send data (in units called datagrams) without any connections needing to be established.</p>
<p>If TCP is like building highways between houses before sending packages between them, then UDP is much like sending over a carrier pigeon from one house to another in order to deliver packages: you don‚Äôt know whether the pigeon will head in the right way, drop your package along the way, or encounter an issue mid-travel. On the other hand, there is less overhead to use UDP than managing a connection over TCP / building a highway.</p>
<p>When speed is more important than reliability, especially when applications need to stream very small amounts of information quickly (smaller packages of information means less issues with reliability), then UDP is preferred. A lot of real time streaming applications, (e.g. live TV streaming, Voice over IP (VoIP)) prefer UDP over TCP. Since UDP does not need to retransmit lost datagrams, nor does it do any connection setup, there are fewer delays over UDP than TCP. TCP‚Äôs continuous connection is more reliable but has more latency(Êó∂Âª∂).</p>
<hr>
<h3 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h3><p><code>Transactions(‰∫ãÂä°)</code> are atomic units of work for the database to perform as a whole.</p>
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/transaction.JPG" class="">
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/transaction2.JPG" class="">
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/transaction3.JPG" class="">


<p><strong>Transactions capture logical bundles of work.</strong> Work is bundled into transactions, so that in case of system failures, data in your database is still kept in a valid state (by rolling back the entire transaction if any part of it fails). To ensure a database is consistent before and after work is done to it, databases uses atomic transactions, and actions like <code>commits</code> and <code>rollbacks</code> to handle failures appropriately. Transactions are, in other words, <a href="https://www.geeksforgeeks.org/acid-properties-in-dbms/">ACID</a> .</p>
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/bundle-work.JPG" class="">


<h3 id="DBAPIs-and-psycopg2"><a href="#DBAPIs-and-psycopg2" class="headerlink" title="DBAPIs and psycopg2"></a>DBAPIs and psycopg2</h3><h4 id="psql"><a href="#psql" class="headerlink" title="psql"></a>psql</h4><p><code>psql</code> is an interactive terminal application for connecting and interacting with your local postgres server on your machine. It lets you type and execute SQL commands to your database directly.</p>
<p>üêπ If you don‚Äôt like psql, you can use GUI cilent to inspect and interact with your PostgreSQL server.</p>
<hr>
<p>üçÅ <strong>Useful basic psql commands</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># connect</span></span><br><span class="line">$ psql -U postgres</span><br><span class="line"></span><br><span class="line">$ psql &lt;dbname&gt; [&lt;username&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># connection information</span></span><br><span class="line">$ postgres=<span class="comment"># \c </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># connect to a specific db</span></span><br><span class="line">$ postgres=<span class="comment"># \c &lt;dbname&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list all db on the server</span></span><br><span class="line">$ postgres=<span class="comment"># \l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># show db tables</span></span><br><span class="line">$ postgres=<span class="comment"># \dt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># describe table schema</span></span><br><span class="line">$ postgres=<span class="comment"># \d &lt;tablename&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># quit psql</span></span><br><span class="line">$ postgres=<span class="comment"># \q</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># helper</span></span><br><span class="line">$ postgres=<span class="comment"># \?</span></span><br></pre></td></tr></table></figure>

<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/psql.JPG" class="">

<hr>
<h4 id="DBAPIs"><a href="#DBAPIs" class="headerlink" title="DBAPIs"></a>DBAPIs</h4><p>We will sometimes want to interact with our database and use its results in a specific programming language. E.g. to build web applications or data pipelines in a specific language (Ruby, Python, Javascript, etc.). That‚Äôs where <code>DBAPIs</code> come in.</p>
<p><code>DBAPI:</code></p>
<ul>
<li>provides a standard interface for one programming language (like Python) to talk to a relational database server;</li>
<li>is a low level library for writing SQL statements that connect to a database;</li>
</ul>
<p>Different DBAPIs exist for different server framework or language + database system. Database adapters define a standard for using a database (with SQL) and using the results of database queries as input data in the given language.</p>
<p>Example: <code>SELCET * FROM &lt;table&gt;</code> will</p>
<ul>
<li>list of rows into an array of objects in Javascript for a NodeJS adapter;</li>
<li>or a list of tuples in Python for a Python adapter</li>
</ul>
<img src="/2021/07/12/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-I/dbapis.jpg" class="">

<p>In this blog, I will use <code>psycopg2</code> to establish a connection to PostgreSQL server, and interact with it in python.</p>
<h4 id="psycopg2"><a href="#psycopg2" class="headerlink" title="psycopg2"></a>psycopg2</h4><p>Intall psycopg2: <a href="https://pypi.org/project/psycopg2/">ref</a></p>
<p>üåà üåà üåà <strong>Demos:</strong> üåà  üåà  üåà </p>
<ol>
<li>psycopg2:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"></span><br><span class="line">conn = psycopg2.connect(<span class="string">&#x27;dbname=example user=postgres password=xxxxxxxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open a cursor to perform database operations</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># create table</span></span><br><span class="line"><span class="comment"># (note: triple quotes allow multiline text in python)</span></span><br><span class="line">cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  CREATE TABLE table1 (</span></span><br><span class="line"><span class="string">    id INTEGER PRIMARY KEY,</span></span><br><span class="line"><span class="string">    completed BOOLEAN NOT NULL DEFAULT False</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">&#x27;INSERT INTO table1 (id, completed) VALUES (1, true);&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit, so it does the executions on the db and persists in the db</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>psycopg2: string composition</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"></span><br><span class="line">conn = psycopg2.connect(<span class="string">&#x27;dbname=example user=postgres password=xxxxxxxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open a cursor to perform database operations</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Drop table if it already exited</span></span><br><span class="line">cur.execute(<span class="string">&#x27;DROP TABLE IF EXISTS table2;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (re)create table</span></span><br><span class="line"><span class="comment"># (note: triple quotes allow multiline text in python)</span></span><br><span class="line">cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  CREATE TABLE table2 (</span></span><br><span class="line"><span class="string">    id INTEGER PRIMARY KEY,</span></span><br><span class="line"><span class="string">    completed BOOLEAN NOT NULL DEFAULT False</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 ways to compose SQL query using strings:</span></span><br><span class="line"><span class="comment"># 1. use tuple</span></span><br><span class="line">cur.execute(<span class="string">&#x27;INSERT INTO table2 (id, completed) VALUES (%s, %s);&#x27;</span>, (<span class="number">1</span>, <span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. use dictionary</span></span><br><span class="line">SQL = <span class="string">&#x27;INSERT INTO table2 (id, completed) VALUES (%(id)s, %(completed)s);&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="number">2</span>, </span><br><span class="line">    <span class="string">&#x27;completed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">&#125;</span><br><span class="line">cur.execute(SQL, data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit, so it does the executions on the db and persists in the db</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>psycopg2: fetching results</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Establish a connection, starting a session, begins a transaction</span></span><br><span class="line">conn = psycopg2.connect(<span class="string">&#x27;dbname=example user=postgres password=xxxxxxxx&#x27;</span>)</span><br><span class="line"><span class="comment"># Set a cursor to begin executing commands</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open a cursor to perform database operations</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Drop to table if it already exited</span></span><br><span class="line">cur.execute(<span class="string">&#x27;DROP TABLE IF EXISTS table2;&#x27;</span>)</span><br><span class="line"><span class="comment"># cur.rollback()</span></span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  CREATE TABLE table2 (</span></span><br><span class="line"><span class="string">    id INTEGER PRIMARY KEY,</span></span><br><span class="line"><span class="string">    completed BOOLEAN NOT NULL DEFAULT False</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 ways to compose SQL query using strings:</span></span><br><span class="line"><span class="comment"># 1. use tuple</span></span><br><span class="line">cur.execute(<span class="string">&#x27;INSERT INTO table2 (id, completed) VALUES (%s, %s);&#x27;</span>, (<span class="number">1</span>, <span class="literal">True</span>))</span><br><span class="line"><span class="comment"># 2. use dictionary</span></span><br><span class="line">SQL = <span class="string">&#x27;INSERT INTO table2 (id, completed) VALUES (%(id)s, %(completed)s);&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="number">2</span>, </span><br><span class="line">    <span class="string">&#x27;completed&#x27;</span>: <span class="literal">False</span></span><br><span class="line">&#125;</span><br><span class="line">cur.execute(SQL, data)</span><br><span class="line"></span><br><span class="line">cursor.execute(<span class="string">&#x27;SELECT * FROM table2;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line"><span class="comment">## How to fetch the result? ##</span></span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">result = cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># --&gt; [(1, True), (2, False)]</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(cursor.fetchmany(<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(cursor.fetchone())  <span class="comment"># fetches the first result in the result sets</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># commit, so it does the executions on the db and persists in the db</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Until now, we have learnt how to use <code>psycopg2 library</code> to interact with a database from Python. </p>
<p>However, writing SQL directly is a fairly clunky way of doing web development. It‚Äôs useful to learn some higher level libraries that let us interact with a database, using Python classes and expressions.</p>
<p>In the next blog, I will talk about one of the most powerful Python libraries for interacting with databases: SQLAlchemy.</p>
]]></content>
      <categories>
        <category>Web Development</category>
        <category>Full Stack Web Dev Program</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(1): SQL and Data Modeling(V)</title>
    <url>/2021/07/15/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-V/</url>
    <content><![CDATA[<p>We‚Äôve completed built CRUD for a single model (todo item). However, in the real world, we often implement web apps with multiple models that have relationships with one another.</p>
<p>The relationships between models can determine if certain actions on one model should happen on other models, so that when something happens to one model, related model objects should also be affected (by being CRUD).</p>
<p>Examples are:</p>
<ul>
<li>Removing a User‚Äôs account should remove all of that user‚Äôs photos, documents, etc.</li>
<li>Deleting a Discussion Thread should delete all of its comments.</li>
<li>Accessing a Blog Post should also access all of its comments.</li>
<li>Accessing an Airbnb host‚Äôs profile should also access all of their listings.</li>
</ul>
<p>So, in the rest of this blog, I‚Äôll talk about how to build our todo app further to make it more pratical.</p>
<span id="more"></span>

<img src="/2021/07/15/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-V/todo-app.png" class="">


<h2 id="Model-Relationships"><a href="#Model-Relationships" class="headerlink" title="Model Relationships"></a>Model Relationships</h2><p>In order to handle CRUD across related models which have relationships with one another, we‚Äôll need to learn about how to map relationships between models.</p>
<h3 id="Relationship-amp-Join"><a href="#Relationship-amp-Join" class="headerlink" title="Relationship &amp; Join"></a>Relationship &amp; Join</h3><p>Relational databases can map relationships that occur between tables and bwetween rows across tables.</p>
<img src="/2021/07/15/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-V/relational-mapping.JPG" class="" title="Figure 1.">

<p>Query: What‚Äôs the make, model and year of vehicles that driver Sarah have?</p>
<p>You can use the following SQL command to query, </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> make, model, <span class="keyword">year</span> <span class="keyword">FROM</span> vehicles</span><br><span class="line"><span class="keyword">JOIN</span> drivers</span><br><span class="line"><span class="keyword">ON</span> vehicles.driver_id <span class="operator">=</span> drivers.id</span><br><span class="line"><span class="keyword">WHERE</span> drivers.name <span class="operator">=</span> <span class="string">&#x27;Sarah&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- default JOIN is INNER JOIN</span></span><br></pre></td></tr></table></figure>

<h3 id="db-relationship"><a href="#db-relationship" class="headerlink" title="db.relationship"></a>db.relationship</h3><p>SQLAlchemy configures the settings between model relationships once, and generates <code>JOIN</code> statements for us whenever we need them.</p>
<p>We use an interface named <code>db.relationship</code>, which is provided by SQLAlchemy, to configure a mapped relationship between two models.</p>
<p><code>db.relationship</code> is defined on the <strong>parent</strong> model.</p>
<img src="/2021/07/15/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-V/db-relationship.JPG" class="">

<h3 id="Configure-Relationships"><a href="#Configure-Relationships" class="headerlink" title="Configure Relationships"></a>Configure Relationships</h3><p>So when do we load <code>child1.some_parent</code> from the database?</p>


<p>There are two different ways that we can optimize the loading of joined data: <strong>Lazy loading</strong> &amp; <strong>Eager loading</strong>.</p>
<h4 id="Lazy-loading"><a href="#Lazy-loading" class="headerlink" title="Lazy loading"></a>Lazy loading</h4><p>With Lazy loading, we only load these joined data only when needed. It is the default load way in SQLAlchemy.</p>
<ul>
<li>Pro: no initial wait time. Load only what you need.</li>
<li>Con: produces a join SQL call every time there is a request for a joined asset. Bad if you do this a lot.</li>
</ul>
<p><code>lazy=True</code> (lazy loading) is the default option in <code>db.relationship</code>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">children = db.relationship(<span class="string">&#x27;ChildModel&#x27;</span>, backref=<span class="string">&#x27;some_parent&#x27;</span>, lazy=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Eager-loading"><a href="#Eager-loading" class="headerlink" title="Eager loading"></a>Eager loading</h4><p>In eager loading, we will load all needed joined data objects, all at once.</p>
<ul>
<li>Pro: reduces further queries to the database. Subsequent SQL calls read existing data</li>
<li>Con: loading the joined table has a long upfront initial load time.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">children = db.relationship(<span class="string">&#x27;ChildModel&#x27;</span>, backref=<span class="string">&#x27;some_parent&#x27;</span>, lazy=<span class="string">&#x27;joined&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>You can see the <a href="https://docs.sqlalchemy.org/en/14/orm/loading_relationships.html">SQLAlchemy Docs on Relationship Loading Techniques</a> for more loading options.</p>
<h4 id="Other-Relationship-Options"><a href="#Other-Relationship-Options" class="headerlink" title="Other Relationship Options"></a>Other Relationship Options</h4><p>Besides lazy loading and eager loading, there are also a couple of other options that you can set on relationships. The two very handy options are:</p>
<ul>
<li>collection_class</li>
<li>cascade</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">  __tablename__ = <span class="string">&#x27;parents&#x27;</span></span><br><span class="line">  <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">  name = db.Column(sb.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">  children = db.relationship(</span><br><span class="line">    <span class="string">&#x27;Chile&#x27;</span>,</span><br><span class="line">    backref=<span class="string">&#x27;parent&#x27;</span>,</span><br><span class="line">    lazy=<span class="literal">True</span>,</span><br><span class="line">    collection_class = <span class="built_in">list</span>,</span><br><span class="line">    cascade = <span class="string">&#x27;save-update&#x27;</span>  <span class="comment"># OR: all, delete-orphan</span></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; collection_class = list: whether or not we want the collection of children to be set equal to the data type list, or we want to set it to a dictionary or set in Python instead. &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>Check <a href="https://docs.sqlalchemy.org/en/13/orm/relationship_api.html#sqlalchemy.orm.relationship">SQLALchemy ORM Relationship Docs</a> for more possible ways.</p>
<p><a href="https://www.osgeo.cn/sqlalchemy/orm/cascades.html#cascade-save-update">SQLAlchemy 1.4 Doc (zh version)</a></p>
<h3 id="Foreign-Key-Constraint-Setup"><a href="#Foreign-Key-Constraint-Setup" class="headerlink" title="Foreign Key Constraint Setup"></a>Foreign Key Constraint Setup</h3><p>SQLAlchemy can configure relationship between parents and children, using <code>backref</code> to link relationships between models. However,</p>
<ul>
<li><code>db.relationship</code> does not set up foreign key constraints for us. We need to add a column, <code>some_parent_id</code>, on the child model that has a foreign key constraint.</li>
<li>Whereas we set <code>db.relationship</code> on the <strong>parent</strong> model, we set the foreign key constraint on the <strong>child</strong> model.</li>
<li>A foreign key constraint prefers <strong>referential integrity</strong> from one table to another, by ensuring that the foreign key column always maps a primary key in the foreign table.</li>
</ul>
<img src="/2021/07/15/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-V/foreign-key-constraint.JPG" class="" title="Refrence Foreign Key with Primary Key">

<p>So how this is done using SQLAlchemy?</p>
<p>In SQLAlchemy, there is an option in <code>db.Column</code> called <code>db.ForeignKey</code> that you can use to specify a foreign key constraint, referring to the primary key of the other table / model.</p>
<img src="/2021/07/15/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-V/setup-foreign-key-constraint.JPG" class="">

<hr>
<p>üêøÔ∏è Exercise: Try to map relationships between models shown in Figure 1.(driver table &amp; vehicles table)</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Solution</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Driver</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;drivers&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    state = db.Column(db.String())</span><br><span class="line">    issued = db.Column(db.Datetime)</span><br><span class="line">    vehicles = db.relationship(<span class="string">&#x27;Vehicle&#x27;</span>, backref=<span class="string">&#x27;driver&#x27;</span>, lazy=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;vehicles&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    make = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    model = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    year = db.Column(db.Integer)</span><br><span class="line">    driver_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;drivers.id&#x27;</span>), nullable=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>Resources : <a href="https://docs.sqlalchemy.org/en/14/core/constraints.html">SQLAlchemy Docs on Defining Constraints</a></p>
<h2 id="Build-Todo-App-Further"><a href="#Build-Todo-App-Further" class="headerlink" title="Build Todo App Further"></a>Build Todo App Further</h2><h3 id="One-to-Many-Relationship-Setup"><a href="#One-to-Many-Relationship-Setup" class="headerlink" title="One-to-Many Relationship Setup"></a>One-to-Many Relationship Setup</h3><p>Now that we‚Äôve learnt how to use <code>db.relationship</code> and <code>db.ForeignKey</code> to set up relationships between models. Let‚Äôs focus back on our todo app and use these concepts to model ‚Äútodo lists‚Äù in our app, and set up the relationship between our <strong>todo model</strong> and our new <strong>todo list model</strong>.</p>
<hr>
<p>Todo lists have many todos, and every todo item belongs to exactly one todo list, which indicates the existence of a ‚Äúone to many relationship‚Äù between todos and todo lists.</p>
<p>Reading: <a href="https://database.guide/the-3-types-of-relationships-in-database-design/">3 Types of Relationships in Database Design</a></p>
<hr>
<h4 id="Create-Todo-List-Model"><a href="#Create-Todo-List-Model" class="headerlink" title="Create Todo-List Model"></a>Create Todo-List Model</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    completed = db.Column(db.Boolean, nullable=<span class="literal">False</span>, default=<span class="literal">False</span>)</span><br><span class="line">    list_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;todolists.id&#x27;</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Todo <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.description&#125;</span> <span class="subst">&#123;self.completed&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todolists&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    todos = db.relationship(<span class="string">&#x27;Todo&#x27;</span>, backref=<span class="string">&#x27;list&#x27;</span>, lazy=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Migration-Upgrade-the-Schema"><a href="#Migration-Upgrade-the-Schema" class="headerlink" title="Migration: Upgrade the Schema"></a>Migration: Upgrade the Schema</h4><p>Create and run a migration,</p>
<blockquote>
<p>~$ flask db migrate -m ‚Äúcreate todolist model‚Äù</p>
</blockquote>
<p>If we run <code>flask db upgrade</code> now, it will cause error since <code>list_id</code> cannot be nullable. Like before, revise .py files,</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; aaa2f3a607b6_create_todolist_model.py &quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upgrade</span>():</span></span><br><span class="line">    <span class="comment"># ### commands auto generated by Alembic - please adjust! ###</span></span><br><span class="line">    op.create_table(<span class="string">&#x27;todolists&#x27;</span>,</span><br><span class="line">    sa.Column(<span class="string">&#x27;id&#x27;</span>, sa.Integer(), nullable=<span class="literal">False</span>),</span><br><span class="line">    sa.Column(<span class="string">&#x27;name&#x27;</span>, sa.String(), nullable=<span class="literal">False</span>),</span><br><span class="line">    sa.PrimaryKeyConstraint(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;change here&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># op.add_column(&#x27;todos&#x27;, sa.Column(&#x27;list_id&#x27;, sa.Integer(), nullable=False))</span></span><br><span class="line">    op.add_column(<span class="string">&#x27;todos&#x27;</span>, sa.Column(<span class="string">&#x27;list_id&#x27;</span>, sa.Integer(), nullable=<span class="literal">True</span>))</span><br><span class="line">    </span><br><span class="line">    op.create_foreign_key(<span class="literal">None</span>, <span class="string">&#x27;todos&#x27;</span>, <span class="string">&#x27;todolists&#x27;</span>, [<span class="string">&#x27;list_id&#x27;</span>], [<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">    <span class="comment"># ### end Alembic commands ###</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; app.py &quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line">    list_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;todolists.id&#x27;</span>), nullable=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>~$ flask db upgrade</p>
</blockquote>
<img src="/2021/07/15/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-V/after-upgrade.JPG" class="">

<blockquote>
<p>todoapp=# INSERT INTO todolists(name) VALUES(‚ÄòDefault‚Äô);<br>todoapp=# UPDATE todos SET list_id = 1 WHERE list_id IS NULL;</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; app.py &quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line">    list_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;todolists.id&#x27;</span>), nullable=<span class="literal">False</span>) <span class="comment"># set to back False</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>~$ flask db migrate<br>~$ flask db upgrade</p>
</blockquote>
<p>You‚Äôve done!</p>
<img src="/2021/07/15/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-V/final-schema.JPG" class="">

<p>By the way, you can also do the above things using migration files.</p>
<hr>
<p>üê∑ Final Check:</p>
<p>Add items with a list ‚ÄúUrgent‚Äù with ID of 2 and check if we get the expected results.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from app import db, TodoList, Todo</span><br><span class="line">&gt;&gt;&gt; list = TodoList(name=<span class="string">&#x27;urgent&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; todo = Todo(description=<span class="string">&#x27;This is a really important thing.&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; todo2 = Todo(description=<span class="string">&#x27;Urgent todo 2&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; todo3 = Todo(description=<span class="string">&#x27;Urgent todo 3&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; todo.list = list</span><br><span class="line">&gt;&gt;&gt; todo2.list = list</span><br><span class="line">&gt;&gt;&gt; todo3.list = list</span><br><span class="line">&gt;&gt;&gt; todo.completed = False</span><br><span class="line">&gt;&gt;&gt; todo2.completed = False</span><br><span class="line">&gt;&gt;&gt; todo3.completed = False</span><br><span class="line">&gt;&gt;&gt; db.session.add(list)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="CRUD-on-List-of-Todos"><a href="#CRUD-on-List-of-Todos" class="headerlink" title="CRUD on List of Todos"></a>CRUD on List of Todos</h3><p>Try yourself to complete the todo lists app,</p>
<ul>
<li>Read a List: When clicking the specific todo list, display all todos belonging to the list.</li>
<li>Create a List: Implement a ‚ÄúCreate List form‚Äù above the list of To-Do Lists to enable the user to create Lists.</li>
<li>Update a List (and all of its children items): Implement a Checkbox next to a To-Do List, and allow the user to mark an entire list as completed. When the list is marked completed, implement the controller so that all of its child items are also marked as completed.</li>
<li>Delete a List (and all of its children items): Implement an ‚Äúx‚Äù remove button next to each List, and allow a user to click it in order to remove a List. When a list is removed, all of its child items should also be removed.</li>
</ul>
<p>üê£ <strong>Solution</strong>: You can visit my <a href="https://github.com/rileywang0819/demo-todoapp/tree/master/todo-app">Github repository</a> to see the source code.</p>
<h3 id="Many-to-Many-Relationship"><a href="#Many-to-Many-Relationship" class="headerlink" title="Many-to-Many Relationship"></a>Many-to-Many Relationship</h3><p>Finally, let‚Äôs talk about the 3rd type of relationship ‚Äì&gt; many-to-many relationship.</p>
<h4 id="What-is-many-to-many-relationship"><a href="#What-is-many-to-many-relationship" class="headerlink" title="What is many-to-many relationship"></a>What is many-to-many relationship</h4><img src="/2021/07/15/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-V/relationship-type.JPG" class="">
<img src="/2021/07/15/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-V/relationship-type2.JPG" class="">
<img src="/2021/07/15/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-V/relationship-type3.JPG" class="">

<p>Takeaways</p>
<ul>
<li>In one-to-many and one-to-one, the foreign key is established on the child model.</li>
<li>In many-to-many, a special <strong>association table</strong> exists to join the two tables together, storing two foreign keys that link to the two foreign tables that have a relationship with each other.</li>
</ul>
<h4 id="Setup-many-to-many-relationships"><a href="#Setup-many-to-many-relationships" class="headerlink" title="Setup many-to-many relationships"></a>Setup many-to-many relationships</h4><p>To set up a many-to-many in SQLALchemy, we:</p>
<ul>
<li>Define an association table using Table from SQLAlchemy.</li>
<li>Set the multiple foreign keys in the association table.</li>
<li>Map the association table to a parent model using the option <code>secondary</code> in <code>db.relationship</code>.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Setting up the many-to-many relationship</span></span><br><span class="line"></span><br><span class="line">association_table = Table(<span class="string">&#x27;association&#x27;</span>, Base.metadata, </span><br><span class="line">    Column(<span class="string">&#x27;left_id&#x27;</span>, Integer, ForeignKey(<span class="string">&#x27;left.id&#x27;</span>)),</span><br><span class="line">    Column(<span class="string">&#x27;right_id&#x27;</span>, Integer, ForeignKey(<span class="string">&#x27;right.id&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    children = relationship(<span class="string">&#x27;Child&#x27;</span>, secondary=association_table)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;right&#x27;</span></span><br><span class="line">    children = Column(Integer, primary_key=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;postgres://password@localhost:5432/example&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">order_items = db.Table(<span class="string">&#x27;order_items&#x27;</span>,</span><br><span class="line">    db.Column(<span class="string">&#x27;order_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;order.id&#x27;</span>), primary_key=<span class="literal">True</span>),</span><br><span class="line">    db.Column(<span class="string">&#x27;product_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;product.id&#x27;</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">  <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">  status = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">  products = db.relationship(<span class="string">&#x27;Product&#x27;</span>, secondary=order_items,</span><br><span class="line">      backref=db.backref(<span class="string">&#x27;orders&#x27;</span>, lazy=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">  <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">  name = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>Until now, we‚Äôve learnt how to model relationship in a relational database (PostgreSQL). We also have learnt how to build a web app connected to database using a Python library, i.e. SQLAlchemy. It supports CRUD operations.</p>
<img src="/2021/07/15/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-V/congs.gif" class="">]]></content>
      <categories>
        <category>Web Development</category>
        <category>Full Stack Web Dev Program</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(2): API Dev and Doc(II)</title>
    <url>/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-II/</url>
    <content><![CDATA[<p>Until now, we‚Äôve learnt,</p>
<ul>
<li>how to organize API endpoints</li>
<li>how to handle CORS</li>
<li>how to parse the request path and body<ul>
<li>pagination</li>
</ul>
</li>
<li>how to use POST/PATCH/GET/DELETE request in Flask</li>
<li>How to handle error with <code>@app.errorhanlder()</code></li>
</ul>
<p>We need to test API to ensure its correctness. In this blog, I will talk about <strong>unit tests</strong>, which make the process of testing much more faster. Then, I will talk about API documentation.</p>
<span id="more"></span>

<h2 id="API-Testing"><a href="#API-Testing" class="headerlink" title="API Testing"></a>API Testing</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>As developers, we need to write unit tests for our APIs to verify its behavior, and besides, unit tests can ensure that when we update APIs, we can still easily test all previous functionality.</p>
<p>For APIs, test should be written:</p>
<ul>
<li>To confirm expected request handling behavior</li>
<li>To confirm success-response structure is correct</li>
<li>To confirm expected errors are handled appropriately</li>
<li>To confirm CRUD operations are correct and persistent</li>
</ul>
<p>The order of operations for application development should always be:</p>
<ul>
<li>Discovery: market research, technical documentation specification, feature map.</li>
<li>Design: sketch, wireframe, mockup.</li>
<li>Development: front-end and back-end.</li>
<li>Quality Assurance</li>
<li>Release to the store ‚Äì deployment.</li>
<li>Maintenance, technical support and further software development.</li>
</ul>
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-II/app-quality-assurance.png" class="" title="Quality Assurance">


<h3 id="Testing-in-Flask"><a href="#Testing-in-Flask" class="headerlink" title="Testing in Flask"></a>Testing in Flask</h3><p>Let‚Äôs look at an example.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import dependencies</span></span><br><span class="line"><span class="keyword">from</span> flaskr <span class="keyword">import</span> create_app</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> setup_db</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="comment"># define the test case class for app or section of app</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppNameTestCase</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; This class represents the _____ test case. &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Define test variables and initialize app. &quot;&quot;&quot;</span></span><br><span class="line">        self.app = create_app()</span><br><span class="line">        self.client = self.app.test_client</span><br><span class="line">        self.database_name = <span class="string">&quot;test_db&quot;</span></span><br><span class="line">        self.database_path = <span class="string">&quot;postgresql://&#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            <span class="string">&#x27;localhost:5432&#x27;</span>, self.database_name</span><br><span class="line">        )</span><br><span class="line">        setup_db(self.app, self.database_path)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot; Run after each test. &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">test_given_behavior</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot; Test the given behavior. &quot;&quot;&quot;</span></span><br><span class="line">            response = self.client().get(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            self.assertEqual(response.status_code, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># make the tests executable</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>


<p>üçâ External Resource: </p>
<ul>
<li><a href="http://docs.jinkan.org/docs/flask/testing.html">Flask Testing</a></li>
<li><a href="https://github.com/rileywang0819/demo-bookshelf-api/blob/master/backend/test_flaskr.py">tests of Bookshelf API</a></li>
</ul>
<h3 id="TDD"><a href="#TDD" class="headerlink" title="TDD"></a>TDD</h3><p>Test-Driven Development (or TDD) is a software development paradigm used very commonly in production. It is based on a short, rapid development cycle in which tests are written before the executable code and constantly iterated on.</p>
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-II/TDD-cycle.JPG" class="">


<h2 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h2><h3 id="Doc-Examples"><a href="#Doc-Examples" class="headerlink" title="Doc Examples"></a>Doc Examples</h3><p>Let‚Äôs look at some examples of documentaion, which can help you to form intuitive impression about documantion.</p>
<ul>
<li><a href="https://developers.google.com/maps/documentation/">Google Maps API</a> : too large </li>
<li><a href="https://restcountries.eu/">REST countries</a> : without response examples ‚òπÔ∏è</li>
<li><a href="https://stripe.com/docs/api?utm_source=zapier.com&utm_medium=referral&utm_campaign=zapier&utm_source=zapier.com&utm_medium=referral&utm_campaign=zapier">Stripe API</a> : strong and good üòÅ</li>
</ul>
<h3 id="API-Doc"><a href="#API-Doc" class="headerlink" title="API Doc"></a>API Doc</h3><p>Good API documentation allows any developer considering the API to quickly understand the purpose of the API, the data it works with, and how to send requests and parse the responses. Some documentation. particularly for large projects, even host samples which can run withing the doc.</p>
<p>You‚Äôd better includes the following components in your API doc.</p>
<ul>
<li>Introduction</li>
<li>Getting Started<ul>
<li>Base URL</li>
<li>API Keys /Authentication (if applicable)</li>
</ul>
</li>
<li>Errors<ul>
<li>Response codes</li>
<li>Messages</li>
<li>Error types</li>
</ul>
</li>
<li>Resource endpoint library<ul>
<li>Organized by resource</li>
<li>Include each endpoint</li>
<li>Sample request</li>
<li>Arguments including data types</li>
<li>Response object including status codes and data types</li>
</ul>
</li>
</ul>
<hr>
<p>Example</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># Getting started</span></span><br><span class="line"></span><br><span class="line">Now, add a Getting Started section to your documentation. </span><br><span class="line">Remember, this should include at least your base URL and an explanation of authentication.</span><br><span class="line">Feel free to provide other information that is relevant for your API.</span><br><span class="line"></span><br><span class="line"><span class="section"># Error Handling</span></span><br><span class="line">Now, add an Error Handling section to your documentation. </span><br><span class="line">It should include the format of the error responses the client can expect as well as which status codes you use.</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Response codes</span><br><span class="line"><span class="bullet">-</span> Messages</span><br><span class="line"><span class="bullet">-</span> Error types</span><br><span class="line"></span><br><span class="line"><span class="section"># Endpoint Library</span></span><br><span class="line"></span><br><span class="line">Now, add an Endpoint Library section to your documentation. </span><br><span class="line">Make sure that endpoints, methods and returned data are all clear. </span><br><span class="line">Consider including sample requests for clarity</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Organized by resource</span><br><span class="line"><span class="bullet">-</span> Include each endpoint</span><br><span class="line"><span class="bullet">-</span> Sample request</span><br><span class="line"><span class="bullet">-</span> Arguments including data types</span><br><span class="line"><span class="bullet">-</span> Response object including status codes and data types</span><br></pre></td></tr></table></figure>

<hr>
<p>üåå External Resource: <a href="https://swagger.io/">Swagger</a></p>
<h3 id="Project-Doc"><a href="#Project-Doc" class="headerlink" title="Project Doc"></a>Project Doc</h3><p>All good, well-documented projects have a README.md file that should clearly explain the project and how to get started with it to any developers who may want to use or contribute to the project.</p>
<p>Here is an example of how to constrcut the project‚Äôs doc.</p>
<ul>
<li><p>Project Title</p>
<ul>
<li>Description of project and motivation</li>
<li>Screenshots (if applicable), with captions</li>
<li>Code Style if you are following particular style guides</li>
</ul>
</li>
<li><p>Getting Started</p>
<ul>
<li>Prerequisites &amp; Installation, including code samples for how to download all pre-requisites</li>
<li>Local Development, including how to set up the local development environment and run the project locally</li>
<li>Tests and how to run them</li>
</ul>
</li>
<li><p>API Reference. If the API documentation is not very long, it can be included in the README</p>
</li>
<li><p>Deployment (if applicable)</p>
</li>
<li><p>Authors</p>
</li>
<li><p>Acknowledgements</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web Development</category>
        <category>Full Stack Web Dev Program</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(3): Identity and Access Management(I)</title>
    <url>/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-3-Identity-and-Access-Management-I/</url>
    <content><![CDATA[<p>Until now, we have learnt</p>
<ul>
<li>how to model data of a project</li>
<li>how to connect to PostgreSQL database and do operations using Flask-SQLAlchemy</li>
<li>how to design, implement and test api</li>
<li>how to write api docs</li>
</ul>
<p>Too many things but one important thing left ‚Äî‚Äî security!</p>
<p>Next, I will try to secure API endpoints by talking about topics including,</p>
<ul>
<li>Authentication systems - design, implementation, and use of third party services.</li>
<li>Common vulnerabilities while working with passwords and how to avoid these pitfalls.</li>
<li>Authorization systems - design and implementation for backend and frontend.</li>
<li>Basic security best practices and key principals to keep in mind.</li>
</ul>
<span id="more"></span>

<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-3-Identity-and-Access-Management-I/overview.JPG" class="">

<p>By the way, in this part, we don‚Äôt cover,</p>
<ul>
<li>Advanced security principals.</li>
<li>Penetration testing, red teaming, vulnerability detection.</li>
<li>‚ÄúHacking‚Äù and tools and systems to perform nefarious actions.</li>
<li>DevOps, Deployments, Scaling or maintaining these systems in the cloud</li>
</ul>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><h3 id="Recap-HTTP-status-code"><a href="#Recap-HTTP-status-code" class="headerlink" title="Recap: HTTP status code"></a>Recap: HTTP status code</h3><p>We have met several HTTP status codes, such as 200, 400, 404, 405, 422 etc. In this part, there are 2 important status codes,</p>
<ul>
<li><strong>401 Unauthorized</strong><ul>
<li>The client has failed in authentication, or not yet provide it. The server cannot validate the identity of the requested party.</li>
</ul>
</li>
<li><strong>403 Forbidden</strong><ul>
<li>The client does not have permission to access the resource. Unlike 401, the server knows who is making the request, but that requesting party has no authorization to access the resource.</li>
</ul>
</li>
</ul>
<h3 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h3><p>Previously, we always use command line tool named <code>curl</code> to help us develop and test APIs, from here, we will use another GUI tool called <code>Poostman</code>.</p>
<h3 id="Recap-SQLAlchemy"><a href="#Recap-SQLAlchemy" class="headerlink" title="Recap: SQLAlchemy"></a>Recap: SQLAlchemy</h3><p>Recap SQLAlchemy (not Flask-SQLAlchemy) with the following example,</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># Init the engine</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, String, Integer</span><br><span class="line"></span><br><span class="line">DB_NAME = <span class="string">&#x27;sqlalchemy_example&#x27;</span></span><br><span class="line">PROJECT_DIR = os.path.dirname(os.path.abspath(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">DB_HOST = os.getenv(<span class="string">&#x27;DB_HOST&#x27;</span>, <span class="string">&#x27;localhost:5432&#x27;</span>)</span><br><span class="line">DB_USER = os.getenv(<span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;postgres&#x27;</span>)</span><br><span class="line">DB_PASSWORD = os.getenv(<span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">DB_NAME = os.getenv(<span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;sqlalchemy_example&#x27;</span>)</span><br><span class="line">DB_PATH = <span class="string">&quot;postgresql://&#123;&#125;:&#123;&#125;@&#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">    DB_USER, DB_PASSWORD, DB_HOST, DB_NAME</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">engine = create_engine(DB_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># Define model</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span></span><br><span class="line">    <span class="comment"># Autoincrementing, unique primary key</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer().with_variant(Integer, <span class="string">&quot;postgresql&quot;</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = Column(String(<span class="number">80</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    password =  Column(String(<span class="number">180</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">         <span class="keyword">return</span> <span class="string">f&#x27;&lt;User <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.username&#125;</span> <span class="subst">&#123;self.password&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">already_exist = engine.dialect.has_table(engine.connect(), <span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> already_exist:</span><br><span class="line">    User.metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line">User.__table__</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># Init a session</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">Session.configure(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># Add a new record</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    new_user = User(username=<span class="string">&#x27;Abby&#x27;</span>, password=<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    session.add(new_user)</span><br><span class="line">    session.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    session.rollback()</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># Fetch</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"></span><br><span class="line">user = session.query(User).filter_by(username=<span class="string">&#x27;Abby&#x27;</span>).one_or_none()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;No such user.&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(user)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"><span class="comment"># Close session</span></span><br><span class="line"><span class="comment"># --------------------------</span></span><br><span class="line"></span><br><span class="line">session.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Identity-and-Authentication"><a href="#Identity-and-Authentication" class="headerlink" title="Identity and Authentication"></a>Identity and Authentication</h2><h3 id="Overview-1"><a href="#Overview-1" class="headerlink" title="Overview"></a>Overview</h3><p>Both identity and authentication are revolving around one question, ‚ÄúWho are you?‚Äù, or more specifically, ‚Äúwho is making request to system?‚Äù</p>
<h3 id="Common-Authentication-Methods"><a href="#Common-Authentication-Methods" class="headerlink" title="Common Authentication Methods"></a>Common Authentication Methods</h3><p>In digital authentication, a commonly used method in the age of ‚ÄúSoftware as a Service (Saas)‚Äù is using <code>username</code> and <code>password</code> pair. We use database and other forms of storage so that we can store our ground truth of what our user credentials should look like. We also use a temporary credential called <code>token</code> which is stored in client, to avoid entering password on each individual request. </p>
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-3-Identity-and-Access-Management-I/digital_authentication1.JPG" class="">

<p>Even though passwords are by far the most common way of authenticating, they come with a load of problems.</p>
<ul>
<li>Users maybe <ul>
<li>forget their passwords</li>
<li>use simple passwords</li>
<li>use common passwords</li>
<li>repeat passwords across different service</li>
<li>share passwords</li>
</ul>
</li>
<li>Passwords can be compromised(Á†¥Ëß£„ÄÅÊ≥ÑÈú≤)</li>
<li>Developers maybe incorrectly check, e.g. compare password strings</li>
<li>Developers can cut corners</li>
</ul>
<p>An important thing is <strong>we should never store plain text password in database.</strong> TODO: why?</p>
<h3 id="Alternative-Authentication-Methods"><a href="#Alternative-Authentication-Methods" class="headerlink" title="Alternative Authentication Methods"></a>Alternative Authentication Methods</h3><h4 id="Single-Sign-On-SSO"><a href="#Single-Sign-On-SSO" class="headerlink" title="Single Sign-On (SSO)"></a>Single Sign-On (SSO)</h4><p>Single Sign-On, essentially is trusting someone else can answer who you are.</p>
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-3-Identity-and-Access-Management-I/without-SSO.JPG" class="" title="World without SSO">
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-3-Identity-and-Access-Management-I/with-SSO.JPG" class="" title="World with SSO">

<h4 id="Multi-Factor-Authentication"><a href="#Multi-Factor-Authentication" class="headerlink" title="Multi-Factor Authentication"></a>Multi-Factor Authentication</h4><p>Multi-factor authentication gives us one layer of trust on top of a password.</p>
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-3-Identity-and-Access-Management-I/multi-factor-auth.JPG" class="">
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-3-Identity-and-Access-Management-I/multi-factor-auth2.JPG" class="">

<h4 id="Passwordless"><a href="#Passwordless" class="headerlink" title="Passwordless"></a>Passwordless</h4><img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-3-Identity-and-Access-Management-I/passwordless.JPG" class="">

<h4 id="Biometric-Authentication"><a href="#Biometric-Authentication" class="headerlink" title="Biometric Authentication"></a>Biometric Authentication</h4><img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-3-Identity-and-Access-Management-I/bio-auth.JPG" class="">

<h3 id="Third-Party-Auth-Systems"><a href="#Third-Party-Auth-Systems" class="headerlink" title="Third-Party Auth Systems"></a>Third-Party Auth Systems</h3><p>Monolithic architecture is great as you are starting off with small systems where you might have a few endpoints or few responsiblities. But as your system starts grow and becomes more complex, it might become overwhelming to maintain and manage. Often in a monolithic service with many  responsiblities, there might be interdependencies that make it difficult to make changes to your code. This is called <em>technical debt</em>.</p>
<p>Modern architecture is ofter referred to as <strong>microservices</strong>, where we take those individual responsibilies and split them up into smaller servers or smaller pieces of architecture deployed across different areas of stack. One server might have a single responsiblity.</p>
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-3-Identity-and-Access-Management-I/monolithic-vs-microservices.JPG" class="" title="Monolithic vs. Microservice">

<p>In the above microservice architecture, our authentication service is now embedded within each system. If we change one of these systems or fix one vulnerablity in a system, we might have to change across all different services or fix across entire stack.</p>
<p>In this case, maybe it will be better to treat out authentication service as a microservice of its own.</p>
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-3-Identity-and-Access-Management-I/micro-auth.JPG" class="">

<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-3-Identity-and-Access-Management-I/3rd-pary-authen.JPG" class="" title="Third-Party Extra Authentication Service">

<p>Now, you can either implement your own authentication microservices, or optionally use third-party authentication systems. In this blog, I will talk about how to use a third-party system called <code>Auth0</code> to perform authentication.</p>
<hr>
<p>üê∂</p>
<p>Âú®ÂàÜÂ∏ÉÂºèÁ≥ªÁªü‰∏≠ÔºåÁî±‰∫é‰∏öÂä°ÈÄªËæëÂ∞ÅË£ÖÂú®ÂêÑ‰∏™ÂæÆÊúçÂä°‰∏≠ÔºåÊØè‰∏™ÂæÆÊúçÂä°ÈÉΩÈúÄË¶ÅÂØπÁî®Êà∑ÁöÑË°å‰∏∫ËøõË°åËÆ§ËØÅÂíåËÆ∏ÂèØÔºå‰∫éÊòØÂ∞±‰∫ßÁîü‰∫Ü‰∏§ÁßçÂèØËÉΩÁöÑÊñπÂºèÔºöÁ¨¨‰∏ÄÁßçÊòØÈÄöËøá‰∏Ä‰∏™‰∏≠ÂøÉÂåñÁöÑÊùÉÈôêÁÆ°ÁêÜÁ≥ªÁªüÔºåÂØπÁî®Êà∑ÁöÑË∫´‰ªΩÂíåÊùÉÈôêËøõË°åÁªü‰∏ÄÁöÑÁÆ°ÁêÜÔºåÂèØ‰ª•ÂÅöÂà∞‰∏ÄÊ¨°ÊéàÊùÉÔºåÂ§öÊ¨°Â§öÁÇπ‰ΩøÁî®Ôºå‰ΩÜÊòØËøô‰∏™Áã¨Á´ãÁöÑÂÆâÂÖ®ÂæÆÊúçÂä°ÈúÄË¶ÅËÅöÂêàÂêÑ‰∏™ÂæÆÊúçÂä°‰∏≠ÁöÑÊùÉÈôêÊéßÂà∂ÈÄªËæëÔºåÂ§ö‰∏Ä‰∏™Âü∫‰∫é‰∏çÂêå‰∏öÂä°ÈÄªËæëÂÆûÁé∞ÁöÑÂæÆÊúçÂä°ÂèØËÉΩÈúÄË¶ÅÂú®ÂÆâÂÖ®ÂæÆÊúçÂä°‰∏≠Ê∑ªÂä†Êñ∞ÁöÑÂÆûÁé∞ÔºõÁ¨¨‰∫åÁßçÊòØÂ∞ÜÂÆâÂÖ®ÈÉ®ÂàÜÂàÜÊï£Âà∞ÂêÑ‰∏™ÂæÆÊúçÂä°‰∏≠ÔºåÁî±ÂêÑ‰∏™ÂæÆÊúçÂä°Ê†πÊçÆËá™Ë∫´ÁöÑ‰∏öÂä°ÂØπÁî®Êà∑ÁöÑËÆøÈóÆËøõË°åÁÆ°ÁêÜÂíåÊéßÂà∂ÔºåËøô‰ºöÂØºËá¥ÂÆâÂÖ®ÁÆ°ÁêÜËøá‰∫éÂàÜÊï£ÔºåÁîöËá≥ÊØè‰∏™ÂæÆÊúçÂä°ÈÉΩÊúâËá™Â∑±ÁöÑ‰∏ÄÂ•óÂÆûÁé∞ÊñπÂºèÔºå‰∏çÂà©‰∫éÁªü‰∏ÄÁÆ°ÁêÜ„ÄÇËøô‰∏§ÁßçÊñπÂºèÈÉΩÊúâÂà©ÊúâÂºäÔºåÂ¶Ç‰ΩïÈÄâÊã©ÈúÄË¶ÅÊ†πÊçÆÈ°πÁõÆÁöÑÂÖ∑‰ΩìÈúÄÊ±ÇËøõË°åÂÆèËßÇÂà§Êñ≠ÔºåÁîöËá≥Âú®‰∏ÄÂÆöÊÉÖÂÜµ‰∏ãÂèØ‰ª•ÁªìÂêà‰ΩøÁî®„ÄÇ</p>
<hr>
<p>External Resources: commonly used third-party authentication systems</p>
<ul>
<li><a href="https://auth0.com/">Auth0</a></li>
<li><a href="https://aws.amazon.com/cn/cognito/">AWS Cognito</a></li>
<li><a href="https://firebase.google.com/docs/auth">Firebase Auth</a></li>
<li><a href="https://www.okta.com/">Okta</a></li>
</ul>
<h3 id="Implement-Auth0"><a href="#Implement-Auth0" class="headerlink" title="Implement Auth0"></a>Implement Auth0</h3><p><code>Auth0</code> works a little bit differently from a normal login flow.  Instead of rendering the login screen on our client directly, we will direct our clients to a hosted page provided by Auth0.  On this page, the user can perform one of many types of authentication including a username and password, SSO and etc. </p>
<p>Auth0 is entirely responsible for the login action within their service. Once the login is complete, Auth0 will redirect our user back to our main frontend, complete with the <code>JWT</code> of that authenticated request. That JWT can be passed along to our various services which need to authenticate our user. Those servers will interact with our Auth0 account to validate that those JWTs are authentic and have not been tampered with.</p>
<p>You can setup Auth0 by visiting <a href="https://auth0.com/">Auth0 website</a> and signing up for a new account.</p>
<hr>
<p>Note: Auth0 will prompt us to request a <strong>tenant domain name</strong>. This the domain name that you will be interacting with both for API calls to validate JWTs, but also for our client to redirect to, for that hosted login screen. So it should be something that is branded or sounds nice for your end users.</p>
<hr>
]]></content>
      <categories>
        <category>Web Development</category>
        <category>Full Stack Web Dev Program</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(3): Identity and Access Management(II)</title>
    <url>/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-3-Identity-and-Access-Management-II/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Web Development</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev: A Primer</title>
    <url>/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-0-A-Primer/</url>
    <content><![CDATA[<p>This blog introduces everything about web development. You will have a better idea of what different technologies are out there and what you‚Äôll want to learn if you want to get into web development.</p>
<p>üåº Reminder: <em>Keep learning if you don‚Äôt want to be weeded out.</em></p>
<span id="more"></span>

<h2 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><p>You can get into web development as long as you knows the basics of programming.</p>
<h2 id="Networks"><a href="#Networks" class="headerlink" title="Networks"></a>Networks</h2><h3 id="What-is-the-Web"><a href="#What-is-the-Web" class="headerlink" title="What is the Web?"></a>What is the Web?</h3><p>The web is a network spread across the globe that connects a multitude of devices and allows them to communicate with one another. </p>
<p>Websites on the Internet are hosted on devices referred to as <strong>servers</strong> , the device that you‚Äôre accessing the webpage is referred to as the <strong>client</strong>. When you‚Äôre interacting with a webpage on the Internet, what you‚Äôre essentially doing is exchanging data with the server. The web enables the exchange of data between clients and servers.</p>
<hr>
<p>The <strong>World Wide Web (WWW)</strong>, commonly known as the <strong>Web</strong>, is an information system where documents and other web resources are identified by <code>Uniform Resource Locators (URLs, such as https://example.com/)</code>, which may be interlinked by hyperlinks, and are accessible over the Internet. The resources of the Web are transferred via the <code>Hypertext Transfer Protocol (HTTP)</code>, may be accessed by users by a software application called a <code>web browser</code>, and are published by a software application called a <code>web server</code>. The World Wide Web is not synonymous with the Internet, Web can be seen as one of services provided by the Internet.</p>
<hr>
<h4 id="Network-layers"><a href="#Network-layers" class="headerlink" title="Network layers"></a>Network layers</h4><img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-0-A-Primer/Internet-layer.jpg" class="" title="Network Layers">


<p>The network are typically divided into abstract layers, each of which performs a specific task that aids in the overall communication process:</p>
<p>(from the bottom layer up to the topmost layer)</p>
<ul>
<li><p><strong>Application Layer:</strong> is responsible for process-to-process communication across the Internet. The application itself is built on top of this layer. The application layer provides a communication interface and end-user services to the application for its communication with single processes.</p>
</li>
<li><p><strong>Transport Layer:</strong> is responsible for connecting applications on the Internet. It demultiplexes(Ëß£Â§çÁî®) data coming in from a single source and transmits it to the application it is intended for. The basic purpose of the transport layer in the context of the web is that it provides process-to-process communication; it allows two individual processes on either the same machine or separate machines to send messages to each other. To do so, it uses <strong>sockets(Â•óÊé•Â≠ó)</strong>, which are essentially just the gateway to a process. In other words, sockets are the means through which messages are received and sent out by a process.</p>
</li>
<li><p><strong>Network Layer:</strong> is responsible for connecting any two machines on the Internet, allows for end-systems to commnunicate with each other on a large scale</p>
</li>
<li><p><strong>Data Link Layer:</strong> is responsible for transimitting data from one device to another device that is <strong>exactly one line away</strong></p>
</li>
<li><p><strong>Physical Layer:</strong> physical wiring and circuits that makes the network works</p>
</li>
</ul>
<p>Each layer is built on top of the previous layer. And each layer has <code>protocols</code> that implement specific functionalities that are involved in the data exchange process.</p>
<h3 id="How-does-Web-work"><a href="#How-does-Web-work" class="headerlink" title="How does Web work?"></a>How does Web work?</h3><p>We have already know that clients send messages to servers requesting data, and servers respond with the required data. but how is this data transferred?</p>
<p>To answer this question, first, we will define the structure of the Internet. Then talk about how data is transported across the network.</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-0-A-Primer/internet-structure.png" class="">

<h4 id="1-Switches"><a href="#1-Switches" class="headerlink" title="1. Switches"></a>1. Switches</h4><p>The Internet is comprised of devices known as <strong>switches(‰∫§Êç¢Êú∫)</strong> that facilitate the connection of each device to every other device on the network. The devices themselves are referred to as end-systems. End-systems are connected to switches through <strong>links</strong> and all of the switches are, in turn, connected to each other. Thus ensuring that every end-system on the Internet is implicitly connected to every other end-system.</p>
<p>In addition to connecting end-systems to one another, switches facilitate the communication between any two end-systems by forwarding packets(ËΩ¨ÂèëÊï∞ÊçÆÂåÖ) along the path that they know exists between the packet source and destination. So basically, switches store pre-determined paths between end-systems and forwards packets among them.</p>
<h4 id="2-Routers"><a href="#2-Routers" class="headerlink" title="2. Routers"></a>2. Routers</h4><p><strong>Routers(Ë∑ØÁî±Âô®</strong>) have the same function as switches also connect end systems to the rest of the web. However, routers are actually very different from switches <em>since they have the additional capability of allowing lookups for destination addresses and determining the shortest or the least busy path from the source of a packet to its destination.</em></p>
<h4 id="3-Data-packets"><a href="#3-Data-packets" class="headerlink" title="3. Data packets"></a>3. Data packets</h4><p>The data that needs to be transferred will be divided into several smaller chunks of bits known as <strong>packets(Êï∞ÊçÆÂåÖ)</strong>, and then each packet will be sent to its destination independently. </p>
<p>Compared to sending large amounts of data in a single packet, sending multiple smaller packets will be more efficient and reliable.</p>
<h4 id="4-TCP"><a href="#4-TCP" class="headerlink" title="4. TCP"></a>4. TCP</h4><p>The primarily used protocol for communication between a web application and a browser is referred to as the <code>Transmission Control Protocol (TCP)</code>. TCP is a transport layer protocol that takes the responsibility of transmitting data and ensures reliable data transfer between clients and servers across the web. </p>
<p>The way TCP does is by adding additional information to data packets that allow for packet authentication(ËÆ§ËØÅ), and by allowing the exchange of acknowledgment messages between the client and server to confirm data transmissions.</p>
<p>The TCP protocol starts with a <code>3-way handshake</code>. The handshake allows both ends (server and client) to initiate and maintain several TCP connections at once.</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-0-A-Primer/3-Way-TCP-Handshake.png" class="">


<h4 id="5-HTTP-amp-HTTPS"><a href="#5-HTTP-amp-HTTPS" class="headerlink" title="5. HTTP &amp; HTTPS"></a>5. HTTP &amp; HTTPS</h4><p>After initiating TCP connections, clients and servers communicate with each other by sending messages to one another. Now, we will look into exactly how these messages are structured.</p>
<p><code>HyperText Transfer Protocol(HTTP)</code> is an application layer protocol that dictates the structure of messages exchanged between client and server. It also dictates how messages are exchanged. It is used for transmitting text and hyperlinks.</p>
<p>HTTP is built on top of TCP. Basically, when you enter a URL in your browser, what actually happens is that an HTTP command gets sent to the server hosting the application to fetch and transmit the requested web page through TCP.</p>
<hr>
<p><code>HTTPS</code> is an acronym for <strong>HyperText Transfer Protocol Secure</strong>, and it is basically just the secure version of HTTP. What this means is that communications between the browser and the hosting server are encrypted so that no third parties on the network can access information that is not intended to be shared.</p>
<hr>
<h4 id="6-Ports"><a href="#6-Ports" class="headerlink" title="6. Ports"></a>6. Ports</h4><p>HTTP and TCP ensure efficient communication between end-systems on the web, but they don‚Äôt determine destination where messages to go. Ports solve this problem.</p>
<p><code>Ports</code> are where messages from the network arrive on an end-system.</p>
<p>We briefly discussed sockets earlier and said they are the gateways to processes. Sockets are opened on ports in order to allow processes to send and receive messages. Ports are designated by numbers, and all ports below 1024 are associated with a specific protocol by default. The port number for HTTP, for instance, is 80, and what this means is that any messages you send or receive on the web come in to and leave your machine on a socket at port 80. Ports above 1024 are open ports available to programmers to use for any process they want to communicate with a network. They can build sockets on these ports, and define the structure and type of messages that this socket can cater to through socket programming. </p>
<p><em>Socket programming</em> is an aspect of Computer Networks, and it is a highly useful skill.</p>
<h3 id="How-Data-Finds-its-Way"><a href="#How-Data-Finds-its-Way" class="headerlink" title="How Data Finds its Way?"></a>How Data Finds its Way?</h3><p>In this part, we will look into how clients and servers know where they want to send their data, and what protocols exist to ensure each end-system on a network has a unique identity that allows it to be reached by other end-systems.</p>
<h4 id="Internet-protocol-amp-IP-addresses"><a href="#Internet-protocol-amp-IP-addresses" class="headerlink" title="Internet protocol &amp; IP addresses"></a>Internet protocol &amp; IP addresses</h4><p><code>Internet Protocol(IP)</code>, is a network layer protocol that is responsible for assigning addresses to devices in order to give them <strong>unique</strong> identities that make them reachable and discoverable. Each device on the Internet has a unique IP address that other devices use to connect with it.</p>
<p>Once you have your website host(ÊâòÁÆ°) on a server, users will be able to connect with it through the <code>IP address</code> of the server and receive data. </p>
<p>You can use the following command line to find your own IP address:</p>
<blockquote>
<p>$ Linux, macOS: ifconfig<br>$ Windows: ipconfig </p>
</blockquote>
<h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>You may be wondering now where the IP address comes in if you reach websites through URLs. Well, that‚Äôs where <code>DNS (Domain Name System)</code> comes in. Routers across the web do not store URLs for every single website hosted on the Internet, they only know IP addresses and forward packets towards their destinations based on them. Users, however, only know URLs, or domain names, for the websites they are visiting. To bridge this clear gap of information, the Internet makes use of <strong>DNS servers</strong>, which serve as translational intermediaries between end-systems and the routers that serve to forward data packets coming from them to their destinations. The process of making a lookup for a domain name on a DNS server and obtaining its corresponding IP address is referred to as a <strong>DNS resolution(Ëß£Êûê)</strong>.</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-0-A-Primer/DNS-work.png" class="">


<h3 id="Vedio-Life-of-a-Packet"><a href="#Vedio-Life-of-a-Packet" class="headerlink" title="Vedio: Life of a Packet"></a>Vedio: Life of a Packet</h3><p>You can watch <a href="https://www.youtube.com/watch?v=9BGWrLiT9qs">this vedio: Life of an IP Packet</a> to know exactly how data goes from a client to server. Although some terminology used in it might not exactly be up-to-date, but the underpinnings are essentially the same today. It is a nice overview for beginners.</p>
<h2 id="Databases"><a href="#Databases" class="headerlink" title="Databases"></a>Databases</h2><p>From this chapter, we will begin looking into what goes into forming a web page.</p>
<p>In this chapter, we will talk about <strong>databases</strong> and <strong>database management systems (DBMS)</strong> and the role they play in making the web applications. </p>
<h3 id="Databases-in-Web-Development"><a href="#Databases-in-Web-Development" class="headerlink" title="Databases in Web Development"></a>Databases in Web Development</h3><h4 id="Static-vs-Dynamic-Web-Pages"><a href="#Static-vs-Dynamic-Web-Pages" class="headerlink" title="Static vs. Dynamic Web Pages"></a>Static vs. Dynamic Web Pages</h4><p>Websites may be classified into one of two types:</p>
<ul>
<li>Static</li>
<li>Dynamic</li>
</ul>
<p><strong>Static websites</strong> are ones that only display information such as text or pictures on their web pages that users cannot interact with.</p>
<p><strong>Dynamic websites</strong>, on the other hand, allow for user interaction such as login or click the button, and that is where Databases come into the picture. The information that web applications are able to display or allow you to access, needs to be stored in database associated with the web application.</p>
<p>Think of any website you‚Äôve visited today. How many of them required for you to sign in or allowed you to click on a button that retrieved some information, perhaps even a new web page, for you? This information that web applications are able to display to you or process to allow you to access other information needs to be stored somewhere. That somewhere is a database associated with the web application.</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-0-A-Primer/basic-struc-dynamic-website.JPG" class="">


<h4 id="DBMS"><a href="#DBMS" class="headerlink" title="DBMS"></a>DBMS</h4><p><strong>Database Management System(DBMS)</strong> allows data to be separated from the logic of the application and stored separately. When application needs data, it then makes calls to database for any required data without having to integrate large amounts of handling code within the application code itself.</p>
<p>Therefore, DBMS are important to developers because they provide a highly efficient method for handling multiple types of data, without interfering with the application‚Äôs code.</p>
<p>DBMS can be categorized into two types: 1) <strong>SQL</strong>; 2) <strong>NoSQL</strong></p>
<ol>
<li>SQL databases, also known as <strong>relational databases</strong>, use structured query language (SQL) for defining and manipulating data. SQL is one of the most versatile and widely-used options available, making it a safe choice and especially great for complex queries. However, it can be restrictive, too, since SQL requires that you use predefined schemas to determine the structure of your data before you work with it. Moreover, in SQL databases, data is always stored as a table, which sometimes will lead to inefficient and complicated data retrievals. </li>
</ol>
<p>Some common SQL databases include MySQL, PostgreSQL and MariaDB etc. </p>
<ol start="2">
<li>NoSQL databases, also known as <strong>non-relational databases</strong>, have a dynamic schema for unstructured data, and data is stored in many ways, including <code>key-value pairs</code>, <code>documents</code> and, even <code>graphs</code>. This flexibility means that you don‚Äôt have to define the structure of your data explicitly and each data set can have its own unique structure without having to worry about writing code to process this data to match a specific predefined structure. These databases can grow dynamically, and the structure of data can vary from database to database.</li>
</ol>
<p>Popular NoSQL databases include MongoDB, Apache CouchDB, Redis etc.</p>
<h4 id="Transition-from-SQL-to-NoSQL"><a href="#Transition-from-SQL-to-NoSQL" class="headerlink" title="Transition from SQL to NoSQL"></a>Transition from SQL to NoSQL</h4><p>Speed is amongst the most important factors that affect user experience on a web application. Relying on an unnecessary number of calls to a database usually tends to slow things down for users. Therefore it is important for web developers to <strong>keep some commonly requested chunks of data in immediate storage so that they can be retrieved quickly</strong>, without creating large latencies in displaying data. To do so, web developers need to think about how to get as much data in memory as reasonably possible, and then how to get things cached at the file system level to avoid making calls to a database altogether. The reason for this is that <em>retrieving data from a database is the bottleneck of most web applications, and decreasing these operations can significantly improve responsiveness</em>. The process of selecting commonly requested data components and storing them in immediate memory to avoid extraneous database calls is referred to as <strong>caching</strong>, and NoSQL databases have gained popularity in recent times because of their ability to automatically cache data to enhance performance.</p>
<p>In addition, the database calls themselves are more inefficient in SQL databases than in NoSQL databases. This is because <em>SQL databases store data in tabular form, and queries require comprehensive iterations of the table. NoSQL databases, on the other hand, use data structures to store entries</em>, which means that lookups are always optimized and database calls are much more efficient. </p>
<p>Consequently, with modern web applications increasingly requiring fast response times to achieve intended functionality, the shift towards using NoSQL databases has been apparent in recent times.</p>
<h3 id="Web-Caching"><a href="#Web-Caching" class="headerlink" title="Web Caching"></a>Web Caching</h3><p><strong>Web caching</strong> is a design feature of the HTTP protocol that is meant to minimize the amount of traffic an application is handling at any given point in order to improve the responsiveness of the web application, as perceived by users, as a whole. In order to do this, caches are used at each level starting from the server itself all the way to users‚Äô browsers, and each of them is meant to store data that users are very likely to request.</p>
<p>Essentially, web caching works by caching HTTP responses for certain requests according to a probabilistic analysis of requests that are frequently observed on the server. Subsequent requests for cached content can then be fulfilled from a cache closer to the user instead of having to send the request all the way back to the web server, which then makes a call to the database for the required data.</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-0-A-Primer/web-cache.png" class="">

<p>There are multiple benefits of web caching, each of which has been enumerated below:</p>
<ul>
<li>Data can be cached at several different points in the path between the client and the server. When the required data is cached closer to the client, requests do not increase network traffic too much since they are resolved much earlier along the path.</li>
<li>Extending on the first point, since requests are resolved earlier along the path, responses are sent back quicker as well, thus improving the responsiveness of web applications.</li>
<li>Aggressive caching along the network can also allow the application to sustain higher loads of data since a significant chunk of the data can be stored within caches.</li>
<li>In case the server has trouble accessing the database for some reason, data that has been stored in caches can still be served to end-users.</li>
</ul>
<h2 id="The-Front-End"><a href="#The-Front-End" class="headerlink" title="The Front End"></a>The Front End</h2><p>The source code of a website can be broken down into two parts: <strong>client-side</strong> and <strong>server-side</strong>, or <strong>frontend</strong> and <strong>backend</strong>.</p>
<ol>
<li>Client-side</li>
</ol>
<p>The code on the ‚Äòclient‚Äô side runs on the client computer‚Äôs browser and handles what the website looks like, how it requests data from the server, and how it interacts with temporary and local storage on the client machine. This includes but is not limited to selecting and styling user interface components, creating layouts, navigation, form validation, and cache handling.</p>
<p>Client-side languages include <strong>HTML</strong>, <strong>CSS</strong>, and <strong>JavaScrip</strong>t.</p>
<ol start="2">
<li>Server-side</li>
</ol>
<p>Server-side is used to deliver information that is queried from websites to clients.</p>
<p>Dor exmaples, companies like Amazon use server-side programming to construct search results for products and make targeted product suggestions based on client preferences and previous buying habits. Banks use server-side programming to store account information and restrict access from unauthorized accounts. Social media sites such as Facebook, Twitter, and Instagram, use server-side programming to highlight, share, and control access to content that is relevant to each user. Server-side programming includes but is not limited to,</p>
<ul>
<li>Delivering and storing information efficiently</li>
<li>Providing a custom experience for each user</li>
<li>Controlling access to content</li>
<li>Storing session/state information</li>
<li>Notifying and communicating</li>
<li>Analyzing data</li>
</ul>
<p>Server-side languages include <strong>JavaScript</strong>, <strong>Python</strong>, <strong>PHP</strong>, <strong>Ruby</strong>, and <strong>C#</strong> etc.</p>
<h2 id="The-Back-End"><a href="#The-Back-End" class="headerlink" title="The Back End"></a>The Back End</h2><p>The back end of a website loosely consists of a <strong>server</strong>, <strong>databases</strong>, and <strong>APIs</strong>.</p>
<hr>
<p>Personal opinion on the difference of <strong>client-side</strong>, <strong>server-side</strong>, <strong>frontend</strong> and <strong>backend</strong>.</p>
<h2 id="Web-Development-Frameworks"><a href="#Web-Development-Frameworks" class="headerlink" title="Web Development Frameworks"></a>Web Development Frameworks</h2><h2 id="Version-Control-with-Git"><a href="#Version-Control-with-Git" class="headerlink" title="Version Control with Git"></a>Version Control with Git</h2><h2 id="Principles-of-Software-Engineering"><a href="#Principles-of-Software-Engineering" class="headerlink" title="Principles of Software Engineering"></a>Principles of Software Engineering</h2><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2>]]></content>
      <categories>
        <category>Web Development</category>
        <category>Full Stack Web Dev Program</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(1): SQL and Data Modelding(III)</title>
    <url>/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-III/</url>
    <content><![CDATA[<p>In this blog, I‚Äôll show the process of building a web application capable of <strong>CRUD</strong> on a connected database by using everything we‚Äôve talked so far.</p>
<span id="more"></span>

<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>CRUD ops have their corresponding SQL commands, also have their corresponding command in SQLAlchemy ORM, as follows,</p>
<table>
<thead>
<tr>
<th align="center">Operation</th>
<th align="center">SQL</th>
<th align="center">SQLAlchemy ORM</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CEATE</td>
<td align="center">INSERT</td>
<td align="center">db.session.add(users)</td>
</tr>
<tr>
<td align="center">READ</td>
<td align="center">SELECT</td>
<td align="center">db.session.query(User).all() or User.query.all()</td>
</tr>
<tr>
<td align="center">UPDATE</td>
<td align="center">UPDATE</td>
<td align="center">user1.foo = ‚Äònew value‚Äô</td>
</tr>
<tr>
<td align="center">DELETE</td>
<td align="center">DELETE</td>
<td align="center">db.session.delete(user1)</td>
</tr>
</tbody></table>
<p>In the next, we will cover the following skills by build a database-backed web application.</p>
<ul>
<li>Traversing across all layers of our backend stack, from our backend server in Flask to our database in Postgres, by understanding mappings between user operations, to the ORM, to the SQL executed on a database.</li>
<li>Developing using the MVC (Model-View-Controller) pattern, for architecting out our application</li>
<li>Handling changes to our data schema over time</li>
<li>Modeling relationships between objects in our web application</li>
<li>Implementing Search</li>
</ul>
<h2 id="Build-Todo-App"><a href="#Build-Todo-App" class="headerlink" title="Build Todo App"></a>Build Todo App</h2><h3 id="Dummy-Todo-App"><a href="#Dummy-Todo-App" class="headerlink" title="Dummy Todo App"></a>Dummy Todo App</h3><p><strong>Code 1:</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">todos = [</span><br><span class="line">    &#123;<span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Todo 1&#x27;</span>&#125;, </span><br><span class="line">    &#123;<span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Todo 2&#x27;</span>&#125;, </span><br><span class="line">    &#123;<span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Todo 3&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hp.html&#x27;</span>, todos=todos)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hp.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Todo App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Jinja for loop --&gt;</span></span><br><span class="line">            &#123;% for todo in todos %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; todo.description &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>We use a templating engine called <strong>Jinja2</strong>, which allows us to embed non-HTML inside HTML files, to process HTML templates.</p>
<h3 id="‚ÄúR‚Äù-in-CRUD"><a href="#‚ÄúR‚Äù-in-CRUD" class="headerlink" title="‚ÄúR‚Äù in CRUD"></a>‚ÄúR‚Äù in CRUD</h3><p>ü¶â Make sure you have already built a database called <code>todoapp</code> before running the following code.</p>
<p><strong>Code 2:</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db_info = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/todoapp&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = db_info</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Todo <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.description&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hp.html&#x27;</span>, todos=Todos.query.<span class="built_in">all</span>())</span><br></pre></td></tr></table></figure>

<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><ul>
<li><code>MVC</code> stands for <code>Model-View-Controller</code>, a common pattern for architecting a full stack web applications.</li>
<li>It is a way of thinking an application in terms of three layer,<ul>
<li>Models manage data structure and business logic, capturing logical relationships and properties across the web app objects.</li>
<li>Views take data and models we have, handle display and representation logic, and what the user sees (HTML, CSS, JS from the user‚Äôs perspective).</li>
<li>Models and Views don‚Äôt talk to each other directly, Controller is the bridge between them.</li>
<li>Controllers control the logic of how commands are sent to the models and views, and how models and views interact with each other.</li>
</ul>
</li>
</ul>
<p>So, based on the definition, we can find MVC layer separately in the previous code.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- View --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- hp.html --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Models</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)  </span><span class="comment"># listen to the route</span></span><br><span class="line"><span class="comment"># index method is the controller</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hp.html&#x27;</span>, todos=Todos.query.<span class="built_in">all</span>())  <span class="comment"># Todos.query.all() is also Models</span></span><br></pre></td></tr></table></figure>

<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-III/MVC.JPG" class="">


<h3 id="5-3-Handling-User-Input"><a href="#5-3-Handling-User-Input" class="headerlink" title="5.3 Handling User Input"></a>5.3 Handling User Input</h3><p>Creating, updating, and deleting information from a database requires handling user input on what is being created/updated/deleted.</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-III/MVC-with-user-input.JPG" class="">

<p>üåº üåº üåº </p>
<p>Our todo app uses MVC pattern. Use ‚ÄúC‚Äù in CRUD as example, the process of adding ‚Äúcreate todo item functionality‚Äù is as follows,</p>
<ul>
<li>On the view: implement an HTML form.</li>
<li>On the controller: retrieve the user‚Äôs input from request, and manipulate models.</li>
<li>On the models: create a record in our database, and return the newly created to-do item to the controller.</li>
<li>On the controller: take the newly created to-do item, and direct how the view should update upon.</li>
<li>On the view: update what the user sees on the client.</li>
</ul>
<h4 id="Getting-User-Data-in-Flask"><a href="#Getting-User-Data-in-Flask" class="headerlink" title="Getting User Data in Flask"></a>Getting User Data in Flask</h4><p>There are 3 methods of getting user data from a view to a controller.</p>
<ul>
<li>URL query parameters</li>
<li>Forms</li>
<li>JSON</li>
</ul>
<hr>
<p>ü¶Ü Comparison:</p>
<ol>
<li><strong>URL query parameters</strong></li>
</ol>
<p>Using URL query parameters is the quickest method. </p>
<p>URL query parameters are listed as <code>key-value</code> pairs at the end of a URL, preceding a <code>?</code> question mark.</p>
<p>E.g. <code>www.example.com/hello?my_key=my_value</code></p>
<p>In Flask, we can get the data by using <code>request.args</code>,</p>
<p>E.g. <code>my_value = request.args.get(&#39;my_key&#39;)</code></p>
<ol start="2">
<li><strong>HTML From Submission</strong></li>
</ol>
<p>Using forms to get user‚Äôs data is a traditional method. We can use <code>request.form.get(&#39;&lt;name&gt;&#39;)</code> to read the value from a form input control (text input, number input, password input, etc) by the <code>name</code> attribute on the input HTML element.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/create-todo&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>create a todo item<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;description&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Create&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Forms take an <code>action</code> (name of the route) and <code>method</code> (route method) to submit data to the server.</li>
<li>The <code>name</code> attribute on a form control element is the key used to retrieve data.</li>
<li>All forms either define a submit button, or allow the user to hit ENTER on an input to submit the form.</li>
</ul>
<p>Another thing needed to discuss is form methods.</p>
<p>The way form data traverses from the client to server differs based on whether we are using a <code>GET</code> or a <code>POST</code> method on the form.</p>
<ul>
<li>The POST submission : On submit, we send off an <strong>HTTP POST request</strong> to the route ‚Äú/create‚Äù with a request body. The request body stringifies(Â≠óÁ¨¶‰∏≤Âåñ) the key-value pairs of fields from the form (as part of the name attribute) along with their values.</li>
<li>The GET submission : Sends off a GET request with <strong>URL query parameters</strong> that appends the form data to the URL, which is ideal for smaller form submissions.</li>
</ul>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-III/post-vs-get.JPG" class="">
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-III/post-vs-get2.JPG" class="">

<p>POSTs are ideal for longer form submissions, since URL query parameters can only be so long compared to request bodies (max 64K, i.e. 2048 characters). Moreover, forms can only send POST and GET requests, and nothing else.</p>
<p><em>Click <a href="https://www.oschina.net/news/77354/http-get-post-different">here</a> to see more details about POST and GET.</em></p>
<p>Read more about <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms/Sending_and_retrieving_form_data">sending form data</a> .</p>
<ol start="3">
<li><strong>JSON</strong></li>
</ol>
<p>JSON is modern way to retrieve user data. In Flask,</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data_string = request.data  <span class="comment"># retrieve JSON as string</span></span><br><span class="line">data_dictinary = json.loads(data_string)  <span class="comment"># turn the string into list and dictionary</span></span><br></pre></td></tr></table></figure>

<hr>
<p>Let‚Äôs try to implement the ‚Äúcreate todo item functionality‚Äù in todo app.</p>
<p><strong>Code 3:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- View --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Todo App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/todos/create&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;label for=&quot;name&quot;&gt;create a todo item&lt;/label&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;description&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Create&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            &#123;% for todo in todos %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; todo.description &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db_info = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/todoapp&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = db_info</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Todo <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.description&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/create&#x27; : create a new todo &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/create&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_todo</span>():</span></span><br><span class="line">    desc = request.form.get(<span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># read data from form</span></span><br><span class="line">    new_todo = Todos(description=desc)</span><br><span class="line">    db.session.add(new_todo)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hp.html&#x27;</span>, todos=Todos.query.<span class="built_in">all</span>())</span><br></pre></td></tr></table></figure>

<h4 id="Using-AJAX-to-Send-Data-to-Flask-Asynchronously"><a href="#Using-AJAX-to-Send-Data-to-Flask-Asynchronously" class="headerlink" title="Using AJAX to Send Data to Flask Asynchronously"></a>Using AJAX to Send Data to Flask Asynchronously</h4><p>Previously, we‚Äôve talked that there are 3 ways to get user data in Flask. </p>
<p>There are 2 ways to send data request from the client to the server.</p>
<ul>
<li>send synchronously(ÂêåÊ≠•)</li>
<li>send asynchronously(ÂºÇÊ≠•)<ul>
<li>Async data requests are requests that get sent to the server and back to the client without the client needing to be refreshed.</li>
</ul>
</li>
</ul>
<hr>
<ol>
<li>‰ªÄ‰πàÊòØAJAXÔºü</li>
</ol>
<p>AJAX: Asynchronous Javascript + XML</p>
<p>Â¶ÇÊûúÁΩëÈ°µÊ≤°Êúâ‰ΩøÁî®AJAXÊäÄÊúØÔºå‰Ω†ÁÇπ‰∏Ä‰∏™ÊåâÈíÆÂ∞±Ë¶ÅÂà∑Êñ∞‰∏Ä‰∏ãÈ°µÈù¢ÔºåÂ∞ΩÁÆ°Êñ∞È°µÈù¢‰∏äÂè™Êúâ‰∏ÄË°åÂ≠óÂíåÂΩìÂâçÈ°µÈù¢‰∏ç‰∏ÄÊ†∑Ôºå‰ΩÜ‰Ω†ËøòÊòØË¶ÅÊó†ËÅäÂú∞Á≠âÂæÖÈ°µÈù¢Âà∑Êñ∞„ÄÇÁî®‰∫ÜAJAX‰πãÂêéÔºå‰Ω†ÁÇπÂáªÔºåÁÑ∂ÂêéÈ°µÈù¢‰∏äÁöÑ‰∏ÄË°åÂ≠óÂ∞±ÂèòÂåñ‰∫ÜÔºåÈ°µÈù¢Êú¨Ë∫´‰∏çÁî®Âà∑„ÄÇAJAXÂè™ÊòØ‰∏ÄÁßçÊäÄÊúØÔºå‰∏çÊòØÊüêÁßçÂÖ∑‰ΩìÁöÑ‰∏úË•ø„ÄÇ‰∏çÂêåÁöÑÊµèËßàÂô®ÊúâËá™Â∑±ÂÆûÁé∞AJAXÁöÑÁªÑ‰ª∂„ÄÇ</p>
<p>ËÄåÊâÄË∞ìÂºÇÊ≠•ÔºåÂú®ËøôÈáåÁÆÄÂçïÂú∞Ëß£ÈáäÂ∞±ÊòØÔºöÂêëÊúçÂä°Âô®ÂèëÈÄÅËØ∑Ê±ÇÁöÑÊó∂ÂÄôÔºåÊàë‰ª¨‰∏çÂøÖÁ≠âÂæÖÁªìÊûúÔºåËÄåÊòØÂèØ‰ª•ÂêåÊó∂ÂÅöÂÖ∂‰ªñÁöÑ‰∫ãÊÉÖÔºåÁ≠âÂà∞Êúâ‰∫ÜÁªìÊûúÊàë‰ª¨ÂèØ‰ª•ÂÜçÊù•Â§ÑÁêÜËøô‰∏™‰∫ã„ÄÇ</p>
<ol start="2">
<li>‰ªÄ‰πàÊòØÂêåÊ≠•ËØ∑Ê±ÇÔºü‰ªÄ‰πàÊòØÂºÇÊ≠•ËØ∑Ê±ÇÔºü</li>
</ol>
<p>ÂêåÊ≠•ËØ∑Ê±ÇÁöÑÂéüÁêÜÔºöÂΩìÊµèËßàÂô®ÂêëÊúçÂä°Âô®ÂèëÈÄÅÂêåÊ≠•ËØ∑Ê±ÇÊó∂ÔºåÊúçÂä°Âô®Â§ÑÁêÜÂêåÊ≠•ËØ∑Ê±ÇÁöÑËøáÁ®ã‰∏≠ÔºåÊµèËßàÂô®‰ºöÂ§Ñ‰∫éÁ≠âÂæÖÁöÑÁä∂ÊÄÅÔºåÊúçÂä°Âô®Â§ÑÁêÜÂÆåËØ∑Ê±ÇÊääÊï∞ÊçÆÂìçÂ∫îÁªôÊµèËßàÂô®Âπ∂Ë¶ÜÁõñÊµèËßàÂô®ÂÜÖÂ≠ò‰∏≠ÂéüÊúâÁöÑÊï∞ÊçÆÔºåÊµèËßàÂô®ÈáçÊñ∞Âä†ËΩΩÈ°µÈù¢Âπ∂Â±ïÁ§∫ÊúçÂä°Âô®ÂìçÂ∫îÁöÑÊï∞ÊçÆ„ÄÇ</p>
<p>ÂºÇÊ≠•ËØ∑Ê±ÇÁöÑÂéüÁêÜÔºöÊµèËßàÂô®ÊääËØ∑Ê±Ç‰∫§Áªô‰ª£ÁêÜÂØπË±°‚Äî&gt; XMLHttpRequestÔºàÁªùÂ§ßÂ§öÊï∞ÊµèËßàÂô®ÈÉΩÂÜÖÁΩÆ‰∫ÜËøô‰∏™ÂØπË±°ÔºâÔºåÁî±‰ª£ÁêÜÂØπË±°ÂêëÊúçÂä°Âô®ÂèëËµ∑ËØ∑Ê±ÇÔºåÊé•Êî∂„ÄÅËß£ÊûêÊúçÂä°Âô®ÂìçÂ∫îÁöÑÊï∞ÊçÆÔºåÂπ∂ÊääÊï∞ÊçÆÊõ¥Êñ∞Âà∞ÊµèËßàÂô®ÊåáÂÆöÁöÑÊéß‰ª∂‰∏ä„ÄÇ‰ªéËÄåÂÆûÁé∞‰∫ÜÈ°µÈù¢Êï∞ÊçÆÁöÑÂ±ÄÈÉ®Âà∑Êñ∞„ÄÇ</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-III/sync-async.jpg" class="">

<hr>
<p>There are various libraries candidates (such as <code>axios</code> and<code> jQuery</code>) can be used to send AJAX requests from the client. But no matter what library you use, under the hood, you are using one of two methods to send AJAX request (Async requests) :</p>
<ul>
<li><strong>XMLHttpRequest</strong></li>
<li><strong>Fetch</strong> (a more modern implementation of using XMLHttpRequest)</li>
</ul>
<h5 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** a typical client side code */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// build out request object</span></span><br><span class="line"><span class="keyword">var</span> xhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetch the data from the DOM</span></span><br><span class="line">description = <span class="built_in">document</span>.getElementById(<span class="string">&quot;description&quot;</span>).value;</span><br><span class="line"></span><br><span class="line"><span class="comment">// open a connection from client to the server</span></span><br><span class="line">xhttp.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/todos/create?description=&quot;</span> + description);</span><br><span class="line"></span><br><span class="line"><span class="comment">// send the request and close the connection</span></span><br><span class="line">xhttp.send();</span><br></pre></td></tr></table></figure>

<p>In a synchronous request, when you finish processing your requests on the server, the server dictates how the view should then update. What we have already completed at <code>Code 3</code> are sync request. </p>
<p>In a asynchronous request, it is on the client side that you react to the server and you figure out how to update the DOM that is already loaded on the client based on the request you get,</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* XMLHttpRequest on success */</span></span><br><span class="line"></span><br><span class="line">xhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.readyState === <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status === <span class="number">200</span>) &#123; </span><br><span class="line">      <span class="comment">// on successful response</span></span><br><span class="line">      <span class="built_in">console</span>.log(xhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1. this.readyState === 4: indicates that the operation on a server has already been completed;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. this.status === 200: indicates that the reponse is successful</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h5 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h5><p>Fetch is another window object that allows us to send requests and specify the parameters such as method and body etc. more easily.</p>
<p>With fetch, in order to send a request to the server, we would specify fetch and then pass the request to the URL route, followed by a request object where you can specify the method as well as the request body, followd by any possible custom header.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;/url-route&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    <span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;some description here&#x27;</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Now, let‚Äôs change the traditional HTML form we‚Äôve created, using AJAX requests which use fetch to create todo item.</p>
<h5 id="Revise-Traditional-HTML-Form"><a href="#Revise-Traditional-HTML-Form" class="headerlink" title="Revise Traditional HTML Form"></a>Revise Traditional HTML Form</h5><p>The Fetch API provides a <code>fetch()</code> method defined on the window object, which you can use to perform requests. This method returns a <strong>Promise</strong> that you can use to retrieve the response of the request.</p>
<p><strong>Code 4:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Todo App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.hidden</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&#x27;form&#x27;</span> <span class="attr">action</span>=<span class="string">&quot;/todos/create&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;label for=&quot;name&quot;&gt;create a todo item&lt;/label&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;description&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Create&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;error&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span>Something went wrong!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&#x27;todos&#x27;</span>&gt;</span></span><br><span class="line">            &#123;% for todo in todos %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; todo.description &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// e: event handler</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&#x27;form&#x27;</span>).onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// default behavior: full page refresh and submit it using the method and action attributes</span></span></span><br><span class="line"><span class="javascript">                e.preventDefault();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// use fetch method to send request async</span></span></span><br><span class="line"><span class="javascript">                fetch(<span class="string">&#x27;todos/create&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;  <span class="comment">// JSON.stringify(): stringify JSON object</span></span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;description&#x27;</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;description&#x27;</span>).value</span></span><br><span class="line"><span class="javascript">                    &#125;),</span></span><br><span class="line"><span class="javascript">                    <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)  <span class="comment">// return a promise</span></span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> response.json();</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">jsonResponse</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(jsonResponse);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> liItem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    liItem.innerHTML = jsonResponse[<span class="string">&#x27;description&#x27;</span>];</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;todos&#x27;</span>).appendChild(liItem);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// if succeed: no display error info</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;hidden&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, jsonify</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db_info = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/todoapp&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = db_info</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Todo <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.description&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">db.create_all()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/create&#x27; : create a new todo &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/create&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_todo</span>():</span></span><br><span class="line">    desc = request.get_json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">    new_todo = Todos(description=desc)</span><br><span class="line">    db.session.add(new_todo)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="comment"># jsonify:return json data to the client</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">        <span class="string">&#x27;description&#x27;</span>: new_todo.description</span><br><span class="line">    &#125;) </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hp.html&#x27;</span>, todos=Todos.query.<span class="built_in">all</span>())</span><br></pre></td></tr></table></figure>

<p>üçÑ Appendix: click to learn more <a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch">fetch</a> and <a href="https://zhuanlan.zhihu.com/p/26523836">promise</a></p>
<h4 id="Using-sessions-in-Controllers"><a href="#Using-sessions-in-Controllers" class="headerlink" title="Using sessions in Controllers"></a>Using sessions in Controllers</h4><ul>
<li>Commits can succeed or fail.</li>
<li>On fail, we want to rollback the session to avoid potential implicit commits done by the database on closing a connection.</li>
<li>Good practice is to close connections at the end of every session used in a controller, to return the connection back to the connection pool.</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/create&#x27; : create a new todo &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/create&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_todo</span>():</span></span><br><span class="line">    error = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        desc = request.get_json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">        new_todo = Todos(description=desc)</span><br><span class="line">        db.session.add(new_todo)</span><br><span class="line">        db.session.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        error = <span class="literal">True</span></span><br><span class="line">        db.session.rollback()</span><br><span class="line">        <span class="built_in">print</span>(sys.exc_info())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.session.close()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> error:</span><br><span class="line">        <span class="comment"># jsonify:return json data to the client</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&#x27;description&#x27;</span>: new_todo.description</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<p>If we do things like above, when we run the app, the terminal will show error message, and the view will show error information.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python app.py</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">sqlalchemy.orm.exc.DetachedInstanceError: Instance &lt;Todos at 0x18d2c644e48&gt; is not bound to a Session; attribute refresh operation cannot proceed</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>But check the database, the new todo record has already created. </p>
<p>Why this happened?</p>
<p>See the above code. Actually, we close the session before returning json data to the client. It‚Äôs like our new_todo object was detached from our session.</p>
<p>There is a default setting that is applied to every database session instance.</p>
<img src="/2021/07/13/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modelding-III/expire_on_commit.JPG" class="">

<p>Additionally, the route handler should always return something or raise an intentional exception, in the case of an error. To fix this with a simple solution, we can simply import abort from Flask, and we can call <code>abort(&lt;status code&gt;)</code>, e.g. with status code 500 ‚Äì&gt; <code>abort(500)</code> to rise an HTTPException for an Internal Server Error, in order to abort a request and prevent it from expecting a returned result.</p>
<p>Finally, we can get the following code,</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> abort</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/create&#x27; : create a new todo &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/create&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_todo</span>():</span></span><br><span class="line">    error = <span class="literal">False</span></span><br><span class="line">    body = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        desc = request.get_json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">        new_todo = Todos(description=desc)</span><br><span class="line">        db.session.add(new_todo)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        body[<span class="string">&#x27;description&#x27;</span>] = new_todo.description</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        error = <span class="literal">True</span></span><br><span class="line">        db.session.rollback()</span><br><span class="line">        <span class="built_in">print</span>(sys.exc_info())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.session.close()</span><br><span class="line">    <span class="keyword">if</span> error:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> error:</span><br><span class="line">        <span class="comment"># jsonify:return json data to the client</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(body)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web Development</category>
        <category>Full Stack Web Dev Program</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(1): SQL and Data Modeling(IIII)</title>
    <url>/2021/07/14/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-IIII/</url>
    <content><![CDATA[<p>Until now, we have learned how to develop app on MVC pattern, and how to add READ and CREATE functionality. We have also learned how to send request asynchronously using AJAX.</p>
<p>In this section, we will learn how to change our data models over time, and buil our todo app further.</p>
<span id="more"></span>

<h2 id="Migrations"><a href="#Migrations" class="headerlink" title="Migrations"></a>Migrations</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Requirements can change, thus sometimes we need to modify our data schema over time. <strong>Migrations</strong> deal with how we manage modifications to our data schema.</p>
<img src="/2021/07/14/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-IIII/migration-examplel.JPG" class="">

<p>So, migration is a file that keep track of changes to our database schema (structure of our database). You can think them as <code>git commits</code>, which offers version control on data schema.</p>
<ul>
<li>Migrations stack together in order to form the latest version of our database schema.</li>
<li>We can <strong>upgrade</strong> our database schema by applying migrations;</li>
<li>We can <strong>roll back</strong> our database schema to a former version by reverting migrations that we applied</li>
</ul>
<p>Migrations are applied using command line scripts. There are generally 3 migration command line scripts needed :</p>
<ul>
<li><strong>migrate</strong>: creating a migration script template to fill out; generating a migration file based on changes to be made</li>
<li><strong>upgrade</strong>: applying migrations that hadn‚Äôt been applied yet (‚Äúupgrading‚Äù our database)</li>
<li><strong>downgrade</strong>: rolling back applied migrations that were problematic (‚Äúdowngrading‚Äù our database)</li>
</ul>
<p>The migration tool that we use is going to differ based on which framework we use. For Flask, we typically use <strong>FLASK-Migrate</strong> and <strong>Flask-Script</strong>.</p>
<ul>
<li><a href="https://flask-migrate.readthedocs.io/en/latest/">Flask-Migrate</a> is our migration manager for migrating changes using SQLAlchemy. It uses a library called <a href="https://alembic.sqlalchemy.org/en/latest/index.html">Alembic</a> underneath the hood.</li>
<li><code>Flask-Script</code> lets us run migration scripts we defined, from the terminal</li>
</ul>
<p>Finally, let‚Äôs talk about why use migrations.</p>
<img src="/2021/07/14/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-IIII/manage-changes-to-the-schema.JPG" class="">

<img src="/2021/07/14/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-IIII/without-migration.JPG" class="" title="Without Migrations">
<img src="/2021/07/14/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-IIII/with-migration.JPG" class="" title="With Migrations">

<hr>
<p>ü¶ä Self Opinion on Migration</p>
<p>Migration are some physical files that manage data schema (database structure). Actually these files are abstracted SQL implemented with Python. You can run these migration script to change database structure. These files are also the part of a project.</p>
<p>Even without migration, we can also change db structure using SQL. However, writing SQL is tedious and verbose, especially in group development. Even if a small change in a table, it needs every team member to update it with SQL manually, which  is troublesome.</p>
<p>On the contrary, with migration, what he/she/it needs to do is just generating a migration file, push it to the version control system, such as git, and notify other members. Other team members can just pull the migration fileoff and run it, and change the db structure. In the future, if we want to rollback to the previous db structure, we can also rollback easily and quickly.</p>
<hr>
<h3 id="Flask-Migrations"><a href="#Flask-Migrations" class="headerlink" title="Flask Migrations"></a>Flask Migrations</h3><h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><p>Running the following command to install Flask-Migrate:</p>
<blockquote>
<p>pip3 install Flask-Migrate, or<br>pip install Flask-Migrate</p>
</blockquote>
<ul>
<li><a href="https://flask-migrate.readthedocs.io/en/latest/">Flask-Migrate documentation</a></li>
<li><a href="https://alembic.sqlalchemy.org/en/latest/">Alembic documentation</a></li>
</ul>
<h4 id="Usage-of-Migration"><a href="#Usage-of-Migration" class="headerlink" title="Usage of Migration"></a>Usage of Migration</h4><ol>
<li>Import migrate library and create instance of the migrate class</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># ....</span></span><br><span class="line"><span class="comment"># ....</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">migrate = Migrate(app, db)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Creating the migrations directory structure</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> create initial migration directory structure</span></span><br><span class="line"><span class="meta">~$</span><span class="bash"> flask db init</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Sync models</li>
</ol>
<p>ü¶Å Reminder: Since we use migration now, so we don‚Äôt use <code>db.create_all()</code> anymore. Please delete this code or comment it. Besides, if you have already a todoapp database but not intialize it, please drop it.</p>
<p>We use the following command to detect the model‚Äôs changes, and create a migration file with upgrade and downgrade logic set up, replacing use of <code>db.create_all()</code> :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> flask db migrate</span></span><br><span class="line"><span class="meta">~$</span><span class="bash"> flask db migrate -m <span class="string">&quot;Initial migration.&quot;</span>   <span class="comment"># with message</span></span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Upgrade and downgrade</li>
</ol>
<p>Runs the upgrade/downgrade command in the migration file, to apply the migration.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> flask db upgrade</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~$</span><span class="bash"> flask db downgrade</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>Add the completed column</li>
</ol>
<p>Our goal is to add a new column name ‚Äúcompleted‚Äù, it is boolean data type, so we need to change the existing model.</p>
<p>First, change our data model,</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># add a new column</span></span><br><span class="line">    completed = db.Column(db.Boolean, nullable=<span class="literal">False</span>, default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Todo <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.description&#125;</span> <span class="subst">&#123;self.completed&#125;</span>&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>then, run the command,</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">~$</span><span class="bash"> flask db migrate</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">~$</span><span class="bash"> flask db upgrade</span></span><br></pre></td></tr></table></figure>

<p>Now, the data schema has changed.</p>
<img src="/2021/07/14/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-1-SQL-and-Data-Modeling-IIII/model-change.JPG" class="">


<ol start="6">
<li>Work with existing data</li>
</ol>
<p>If we have already have some records in the todos table which has the original data schema,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> id | description</span><br><span class="line">----+-------------</span><br><span class="line">  1 | todo 1</span><br><span class="line">  2 | todo 2</span><br><span class="line">  3 | todo 3</span><br></pre></td></tr></table></figure>

<p>Then we change our data schema with running <code>flask db upgrade</code>, it will cause <code>NotNullViolation Error</code>. This is because we declared that the completed column shouldn‚Äôt be null previously. In this context, we can revise the migration file like below:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a68fdf8c772b_add_completed_column.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upgrade</span>():</span></span><br><span class="line">    <span class="comment"># ### commands auto generated by Alembic - please adjust! ###</span></span><br><span class="line">    <span class="comment"># op.add_column(&#x27;todos&#x27;, sa.Column(&#x27;completed&#x27;, sa.Boolean(), nullable=False))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Modify from False to True, so we can add a column that applies to our</span></span><br><span class="line"><span class="string">    existing data successfully. &quot;&quot;&quot;</span></span><br><span class="line">    op.add_column(<span class="string">&#x27;todos&#x27;</span>, sa.Column(<span class="string">&#x27;completed&#x27;</span>, sa.Boolean(), nullable=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot; add the following two lines &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># update the existing recoreds that don&#x27;t yet have a completed column with SQL</span></span><br><span class="line">    op.execute(<span class="string">&#x27;UPDATE todos SET completed = False WHERE completed IS NULL;&#x27;</span>)</span><br><span class="line">     <span class="comment"># update the column on todos</span></span><br><span class="line">    op.alter_column(<span class="string">&#x27;todos&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ### end Alembic commands ###</span></span><br></pre></td></tr></table></figure>

<p>Then upgrade again, you will get the following result,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> id | description | completed</span><br><span class="line">----+-------------+-----------</span><br><span class="line">  1 | todo 1      | f</span><br><span class="line">  2 | todo 2      | f</span><br><span class="line">  3 | todo 3      | f</span><br></pre></td></tr></table></figure>


<h2 id="Build-Todo-App-Further"><a href="#Build-Todo-App-Further" class="headerlink" title="Build Todo App Further"></a>Build Todo App Further</h2><p>üèÉ We have already finish ‚ÄúRead‚Äù and ‚ÄúCreate‚Äù functionality among ‚ÄúCRUD‚Äù. In this part, let‚Äôs continue build our todo app, and try to finish ‚ÄúUpdate‚Äù and ‚ÄúDelete‚Äù functionality. </p>
<h3 id="‚ÄúU‚Äù-in-CRUD"><a href="#‚ÄúU‚Äù-in-CRUD" class="headerlink" title="‚ÄúU‚Äù in CRUD"></a>‚ÄúU‚Äù in CRUD</h3><p>An update involves setting the attributes of an existing object in the database.</p>
<p>In SQL, we use SQL command to update, where in SQLAlchemy ORM, we use python code to update.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SQL</span></span><br><span class="line"></span><br><span class="line">UPDATE table_name</span><br><span class="line"><span class="keyword">SET</span> column1 <span class="operator">=</span> value1, column2 <span class="operator">=</span> value2, ...</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SQlAlchemy ORM</span></span><br><span class="line"></span><br><span class="line">some_object = User.query.get(some_id)</span><br><span class="line">some_object.attribute = <span class="string">&#x27;Some new name&#x27;</span></span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure>

<p>Now. let‚Äôs try to modify the view to add checkboxes, and having the checkboxes send off POST request. Then defining the route handler, you should get the following code.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Todo App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.hidden</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&#x27;form&#x27;</span> <span class="attr">action</span>=<span class="string">&quot;/todos/create&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;label for=&quot;name&quot;&gt;create a todo item&lt;/label&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;description&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Create&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;error&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span>Something went wrong!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&#x27;todos&#x27;</span>&gt;</span></span><br><span class="line">            &#123;% for todo in todos %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- add checkboxes --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;check-completed&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;&#123;&#123; todo.id &#125;&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> &#123;% <span class="attr">if</span> <span class="attr">todo.completed</span> %&#125; <span class="attr">checked</span> &#123;% <span class="attr">endif</span> %&#125;&gt;</span>  </span><br><span class="line">                &#123;&#123; todo.description &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/** Sets todo completed. */</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> checkboxes = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.check-completed&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; checkboxes.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> checkbox = checkboxes[i];</span></span><br><span class="line"><span class="javascript">                checkbox.onchange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(&#x27;event&#x27;, e);</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> newCompleted = e.target.checked;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> todoId = e.target.dataset[<span class="string">&#x27;id&#x27;</span>];</span></span><br><span class="line"><span class="javascript">                    fetch(<span class="string">&#x27;/todos/&#x27;</span> + todoId + <span class="string">&#x27;/set-completed&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="string">&#x27;completed&#x27;</span>: newCompleted</span></span><br><span class="line"><span class="javascript">                        &#125;),</span></span><br><span class="line"><span class="javascript">                        <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;hidden&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/** Creates new todo. */</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&#x27;form&#x27;</span>).onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;  <span class="comment">// e: event handler</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// default behavior: full page refresh and submit it using the method and action attributes</span></span></span><br><span class="line"><span class="javascript">                e.preventDefault();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// use fetch method to send request async</span></span></span><br><span class="line"><span class="javascript">                fetch(<span class="string">&#x27;todos/create&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;  <span class="comment">// JSON.stringify(): stringify JSON object</span></span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;description&#x27;</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;description&#x27;</span>).value</span></span><br><span class="line"><span class="javascript">                    &#125;),</span></span><br><span class="line"><span class="javascript">                    <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)  <span class="comment">// return a promise</span></span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> response.json();</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">jsonResponse</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(jsonResponse);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> liItem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    liItem.innerHTML = jsonResponse[<span class="string">&#x27;description&#x27;</span>];</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;todos&#x27;</span>).appendChild(liItem);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// if succeed: no display error info</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;hidden&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.location.reload(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, abort, jsonify</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db_info = <span class="string">&#x27;postgresql://postgres:password@localhost:5432/todoapp&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = db_info</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">migrate = Migrate(app, db)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    completed = db.Column(db.Boolean, nullable=<span class="literal">False</span>, default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Todo <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.description&#125;</span> <span class="subst">&#123;self.completed&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># db.create_all() since we use migration</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/create&#x27; : create a new todo &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/create&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_todo</span>():</span></span><br><span class="line">    error = <span class="literal">False</span></span><br><span class="line">    body = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        desc = request.get_json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">        new_todo = Todos(description=desc)</span><br><span class="line">        db.session.add(new_todo)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        body[<span class="string">&#x27;description&#x27;</span>] = new_todo.description</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        error = <span class="literal">True</span></span><br><span class="line">        db.session.rollback()</span><br><span class="line">        <span class="built_in">print</span>(sys.exc_info())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.session.close()</span><br><span class="line">    <span class="keyword">if</span> error:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> error:</span><br><span class="line">        <span class="comment"># jsonify:return json data to the client</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(body)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/&lt;todo_id&gt;/set-completed&#x27; : set todo completed &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/&lt;todo_id&gt;/set-completed&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_todo</span>(<span class="params">todo_id</span>):</span></span><br><span class="line">    error = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        completed = request.get_json()[<span class="string">&#x27;completed&#x27;</span>]</span><br><span class="line">        todo = Todos.query.get(todo_id)</span><br><span class="line">        todo.completed = completed</span><br><span class="line">        db.session.commit()</span><br><span class="line">    <span class="keyword">except</span>():</span><br><span class="line">        db.session.rollback()</span><br><span class="line">        error = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">print</span>(sys.exc_info())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.session.close()</span><br><span class="line">    <span class="keyword">if</span> error:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># return redirect(url_for(&#x27;index&#x27;))</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hp.html&#x27;</span>, todos=Todos.query.order_by(<span class="string">&#x27;id&#x27;</span>).<span class="built_in">all</span>())  <span class="comment"># fix the ordering</span></span><br></pre></td></tr></table></figure>

<h3 id="‚ÄúD‚Äù-in-CRUD"><a href="#‚ÄúD‚Äù-in-CRUD" class="headerlink" title="‚ÄúD‚Äù in CRUD"></a>‚ÄúD‚Äù in CRUD</h3><p>Deletes deal with removing existing objects in our database.</p>
<p>In SQL, we use SQL command to delete, where in SQLAlchemy ORM, we use python code to delete.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SQLAlchemy ORM</span></span><br><span class="line"></span><br><span class="line">todo = Todos.query.get(todo_id) </span><br><span class="line">db.session.delete(todo) <span class="comment"># or...</span></span><br><span class="line">Todo.query.filter_by(<span class="built_in">id</span>=todo_id).delete()</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure>

<p>Steps that we implement delete are as follows,</p>
<ul>
<li>Loop through every To-Do item and show a delete button</li>
<li>Pressing the delete button sends a request that includes which to-do item to delete</li>
<li>The controller takes the user input, and notifies the models to delete the To-Do object by ID</li>
<li>On successful deletion by the models, the controller should notify the view to refresh the page and redirect to our homepage, showing a fresh fetch of all To-Do items to now exclude the removed item.</li>
</ul>
<p>Try it before you look at the solution.</p>
<hr>
<p><strong>Solution:</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Todo App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.hidden</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">li</span> <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="css">                -webkit-appearance: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">                <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">                <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&#x27;form&#x27;</span> <span class="attr">action</span>=<span class="string">&quot;/todos/create&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;label for=&quot;name&quot;&gt;create a todo item&lt;/label&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;description&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Create&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;error&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span>Something went wrong!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&#x27;todos&#x27;</span>&gt;</span></span><br><span class="line">            &#123;% for todo in todos %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- add checkboxes --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;check-completed&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;&#123;&#123; todo.id &#125;&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> &#123;% <span class="attr">if</span> <span class="attr">todo.completed</span> %&#125; <span class="attr">checked</span> &#123;% <span class="attr">endif</span> %&#125;&gt;</span>  </span><br><span class="line">                &#123;&#123; todo.description &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete-btn&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;&#123;&#123; todo.id &#125;&#125;&quot;</span>&gt;</span><span class="symbol">&amp;cross;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/** Deletes todo item. */</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> deleteBtns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.delete-btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; deleteBtns.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> btn = deleteBtns[i];</span></span><br><span class="line"><span class="javascript">                btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;event&#x27;</span>, e);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> todoId = e.target.dataset[<span class="string">&#x27;id&#x27;</span>];</span></span><br><span class="line"><span class="javascript">                    fetch(<span class="string">&#x27;/todos/&#x27;</span> + todoId, &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">method</span>: <span class="string">&#x27;DELETE&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;hidden&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">const</span> item = e.target.parentElement;</span></span><br><span class="line"><span class="javascript">                        item.remove();</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .catch(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/** Sets todo completed. */</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> checkboxes = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.check-completed&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; checkboxes.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> checkbox = checkboxes[i];</span></span><br><span class="line"><span class="javascript">                checkbox.onchange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log(&#x27;event&#x27;, e);</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> newCompleted = e.target.checked;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> todoId = e.target.dataset[<span class="string">&#x27;id&#x27;</span>];</span></span><br><span class="line"><span class="javascript">                    fetch(<span class="string">&#x27;/todos/&#x27;</span> + todoId + <span class="string">&#x27;/set-completed&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="string">&#x27;completed&#x27;</span>: newCompleted</span></span><br><span class="line"><span class="javascript">                        &#125;),</span></span><br><span class="line"><span class="javascript">                        <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;hidden&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/** Creates new todo. */</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&#x27;form&#x27;</span>).onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;  <span class="comment">// e: event handler</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// default behavior: full page refresh and submit it using the method and action attributes</span></span></span><br><span class="line"><span class="javascript">                e.preventDefault();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// use fetch method to send request async</span></span></span><br><span class="line"><span class="javascript">                fetch(<span class="string">&#x27;todos/create&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;  <span class="comment">// JSON.stringify(): stringify JSON object</span></span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;description&#x27;</span>: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;description&#x27;</span>).value</span></span><br><span class="line"><span class="javascript">                    &#125;),</span></span><br><span class="line"><span class="javascript">                    <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)  <span class="comment">// return a promise</span></span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> response.json();</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">jsonResponse</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(jsonResponse);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> liItem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    liItem.innerHTML = jsonResponse[<span class="string">&#x27;description&#x27;</span>];</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;todos&#x27;</span>).appendChild(liItem);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// if succeed: no display error info</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;hidden&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.location.reload(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;error&#x27;</span>).className = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, abort, jsonify</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db_info = <span class="string">&#x27;postgresql://postgres:pupu0819@localhost:5432/todoapp&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = db_info</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line">migrate = Migrate(app, db)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;todos&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    description = db.Column(db.String(), nullable=<span class="literal">False</span>)</span><br><span class="line">    completed = db.Column(db.Boolean, nullable=<span class="literal">False</span>, default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;&lt;Todo <span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span> <span class="subst">&#123;self.description&#125;</span> <span class="subst">&#123;self.completed&#125;</span>&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># db.create_all() since we use migration</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/create&#x27; : create a new todo &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/create&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_todo</span>():</span></span><br><span class="line">    error = <span class="literal">False</span></span><br><span class="line">    body = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        desc = request.get_json()[<span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">        new_todo = Todos(description=desc)</span><br><span class="line">        db.session.add(new_todo)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        body[<span class="string">&#x27;description&#x27;</span>] = new_todo.description</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        error = <span class="literal">True</span></span><br><span class="line">        db.session.rollback()</span><br><span class="line">        <span class="built_in">print</span>(sys.exc_info())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.session.close()</span><br><span class="line">    <span class="keyword">if</span> error:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> error:</span><br><span class="line">        <span class="comment"># jsonify:return json data to the client</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(body)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/&lt;todo_id&gt;/set-completed&#x27; : set todo completed &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/&lt;todo_id&gt;/set-completed&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_todo</span>(<span class="params">todo_id</span>):</span></span><br><span class="line">    error = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        completed = request.get_json()[<span class="string">&#x27;completed&#x27;</span>]</span><br><span class="line">        todo = Todos.query.get(todo_id)</span><br><span class="line">        todo.completed = completed</span><br><span class="line">        db.session.commit()</span><br><span class="line">    <span class="keyword">except</span>():</span><br><span class="line">        db.session.rollback()</span><br><span class="line">        error = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">print</span>(sys.exc_info())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.session.close()</span><br><span class="line">    <span class="keyword">if</span> error:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># return redirect(url_for(&#x27;index&#x27;))</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; controller listens to the view &#x27;/todos/&lt;todo_id&gt;&#x27; : delete a todo item &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/todos/&lt;todo_id&gt;&#x27;</span>, methods=[<span class="string">&#x27;DELETE&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_todo</span>(<span class="params">todo_id</span>):</span></span><br><span class="line">    error = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        todo = Todos.query.get(todo_id)</span><br><span class="line">        db.session.delete(todo)</span><br><span class="line">        db.session.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        error = <span class="literal">True</span></span><br><span class="line">        db.session.rollback()</span><br><span class="line">        <span class="built_in">print</span>(sys.exc_info())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.session.close()</span><br><span class="line">    <span class="keyword">if</span> error:</span><br><span class="line">        abort(<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># return redirect(url_for(&#x27;index&#x27;))  # 405 error</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27; either is ok &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line">        <span class="comment"># return render_template(&#x27;index.html&#x27;, todos=Todo.query.order_by(&#x27;id&#x27;).all())</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;hp.html&#x27;</span>, todos=Todos.query.order_by(<span class="string">&#x27;id&#x27;</span>).<span class="built_in">all</span>())  <span class="comment"># fix the ordering</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Web Development</category>
        <category>Full Stack Web Dev Program</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Dev(2): API Dev and Doc(I)</title>
    <url>/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-I/</url>
    <content><![CDATA[<p>In this and next blog, I will talk about skills about API development including,</p>
<ol>
<li><strong>APIs</strong> : what APIs are and how do they work.</li>
<li><strong>Handling HTTP Requests</strong> : HTTP, Flask, and writing and accessing endpoints.</li>
<li><strong>Routing and API Endpoints</strong> : how to use endpoints and <code>payloads</code> (information passed along with the request) to extend the functionality of APIs, also learn to organize API endpoints, handling Cross-Origin Resource Sharing (CORS) requests, parsing different request types, and handling errors.</li>
<li><strong>Documentation</strong> - learn to write documentation„ÄÇ</li>
<li><strong>Testing</strong> - learn <code>unit testing</code> and <code>test-driven development (TDD)</code>.</li>
</ol>
<span id="more"></span>

<h2 id="Introdcution-to-APIs"><a href="#Introdcution-to-APIs" class="headerlink" title="Introdcution to APIs"></a>Introdcution to APIs</h2><h3 id="What-are-APIs"><a href="#What-are-APIs" class="headerlink" title="What are APIs?"></a>What are APIs?</h3><p><strong>API (Application Programming Interface)</strong> is an interface which has been created to help two different systems interact with one another.</p>
<p>The defined functionality of API is independent of the actual implementation. You don‚Äôt need to understand the entirety of the application implementation in order to interact with it through the API. This has multiple benefits:</p>
<ul>
<li>It doesn‚Äôt expose the implementation to those who shouldn‚Äôt have access to it.</li>
<li>The API provides a standard way of accessing the application.</li>
<li>It makes much easier to understand how to access the application‚Äôs data.</li>
</ul>
<p>ü¶Å Resources: Some frequently used APIs include:</p>
<ul>
<li><a href="https://developers.google.com/maps/documentation/">Google Maps API</a></li>
<li><a href="https://stripe.com/docs/api?utm_source=zapier.com&utm_medium=referral&utm_campaign=zapier&utm_source=zapier.com&utm_medium=referral&utm_campaign=zapier">Stripe API</a></li>
<li><a href="https://developers.facebook.com/docs">Facebook API</a></li>
<li><a href="https://developers.facebook.com/docs">Instagram API</a></li>
<li><a href="https://developer.spotify.com/documentation/web-api/">Spotify API</a></li>
</ul>
<p>External Resource: <a href="https://blog.postman.com/intro-to-apis-what-is-an-api/">Postman blog - What is an API?</a></p>
<h3 id="How-APIs-work"><a href="#How-APIs-work" class="headerlink" title="How APIs work?"></a>How APIs work?</h3><img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-I/api-workflow.JPG" class="">


<h3 id="RESTful-APIs"><a href="#RESTful-APIs" class="headerlink" title="RESTful APIs"></a>RESTful APIs</h3><p><code>REST</code> stands for <strong>Representational State Transfer</strong>, which is an architectural style(Êû∂ÊûÑÈ£éÊ†º) introduced by Roy Fielding in 2000.</p>
<p>Here‚Äôs a short summary of the REST principles:</p>
<ul>
<li><strong>Uniform Interface :</strong> Every REST architecture must have a standardized way of accessing and processing data resources. This includes unique resource identifiers (i.e., unique URLs) and self-descriptive messages in the server response that describe how to process the representation (for instance JSON vs XML) of the data resource.</li>
<li><strong>Stateless(Êó†Áä∂ÊÄÅ) :</strong> Every client request is self-contained in, that the server doesn‚Äôt need to store any application data in order to respond to subsequent requests.</li>
<li><strong>Client-Server :</strong> There must be both a client and server in the architecture.</li>
<li><strong>Cacheable &amp; Layered System :</strong> Caching and layering increases networking efficiency.</li>
</ul>
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-I/client-proxy-api.png" class="" title="Using the RESTful APIs">

<p><strong>Why RESTful are stateless?</strong></p>
<p>It might appear easier to design a server that isn‚Äôt stateless. There is a reason why RESTful web servers are not allowed to remember anything about the previous requests that the user has sent. In short, <strong>stateless servers make your applications scalable</strong>.</p>
<p>External Resource:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/671118/what-exactly-is-restful-programming">What exactly is RESTful programming?</a></li>
<li>An article from StackOverflow blogs- <a href="https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/">Best practices for REST API design</a></li>
<li>blog: <a href="https://cloud.tencent.com/developer/article/1590279">‰ªÄ‰πàÊòØRESTfulÈ£éÊ†ºÁöÑAPIËÆæËÆ°</a></li>
</ul>
<h2 id="HTTP-and-Flask-Basics"><a href="#HTTP-and-Flask-Basics" class="headerlink" title="HTTP and Flask Basics"></a>HTTP and Flask Basics</h2><h3 id="Introduction-to-HTTP"><a href="#Introduction-to-HTTP" class="headerlink" title="Introduction to HTTP"></a>Introduction to HTTP</h3><p>HTTP has been the foundation of Internet communication since 1990.</p>
<p>HTTP Features:</p>
<ul>
<li><strong>Connectionless:</strong> When a request is sent, the client opens the connection; once a response is received, the client closes the connection. The client and server only maintain a connection during the response and request. Future responses are made on a new connection. (When a connection has been opened, it means that the port on the client/server is occupied)</li>
<li><strong>Stateless :</strong> There is no dependency between successive requests.</li>
<li><strong>Not Sessionless :</strong> Utilizing headers, cookies and caching, sessions can be created to allow each HTTP request to share the same context. (img you visit Facebook and send various request with the same account)</li>
<li><strong>Media Independent :</strong> Any type of data can be sent over HTTP as long as both the client and server know how to handle the data format. In our case, we‚Äôll use <code>JSON</code>.</li>
</ul>
<hr>
<p>ü¶Ñ <strong>Notes on Cookie</strong></p>
<ol>
<li>Áî®ÈÄîÔºö</li>
</ol>
<p>Âõ†‰∏∫ HTTP ÂçèËÆÆÊòØÊó†Áä∂ÊÄÅÁöÑÔºåÂç≥ÊúçÂä°Âô®‰∏çÁü•ÈÅìÁî®Êà∑‰∏ä‰∏ÄÊ¨°ÂÅö‰∫Ü‰ªÄ‰πàÔºåËøô‰∏•ÈáçÈòªÁ¢ç‰∫Ü‰∫§‰∫íÂºè Web Â∫îÁî®Á®ãÂ∫èÁöÑÂÆûÁé∞„ÄÇÂú®ÂÖ∏ÂûãÁöÑÁΩë‰∏äË¥≠Áâ©Âú∫ÊôØ‰∏≠ÔºåÁî®Êà∑ÊµèËßà‰∫ÜÂá†‰∏™È°µÈù¢Ôºå‰π∞‰∫Ü‰∏ÄÁõíÈ•ºÂπ≤Âíå‰∏§Áì∂È•ÆÊñô„ÄÇÊúÄÂêéÁªìÂ∏êÊó∂ÔºåÁî±‰∫é HTTP ÁöÑÊó†Áä∂ÊÄÅÊÄßÔºå‰∏çÈÄöËøáÈ¢ùÂ§ñÁöÑÊâãÊÆµÔºåÊúçÂä°Âô®Âπ∂‰∏çÁü•ÈÅìÁî®Êà∑Âà∞Â∫ï‰π∞‰∫Ü‰ªÄ‰πàÔºåÊâÄ‰ª• Cookie Â∞±ÊòØÁî®Êù•ÁªïÂºÄ HTTP ÁöÑÊó†Áä∂ÊÄÅÊÄßÁöÑ‚ÄúÈ¢ùÂ§ñÊâãÊÆµ‚Äù‰πã‰∏Ä„ÄÇÊúçÂä°Âô®ÂèØ‰ª•ËÆæÁΩÆÊàñËØªÂèñ Cookies ‰∏≠ÂåÖÂê´ÁöÑ‰ø°ÊÅØÔºåÂÄüÊ≠§Áª¥Êä§Áî®Êà∑Ë∑üÊúçÂä°Âô®‰ºöËØù‰∏≠ÁöÑÁä∂ÊÄÅ„ÄÇ</p>
<p>Âú®ÂàöÊâçÁöÑË¥≠Áâ©Âú∫ÊôØ‰∏≠ÔºåÂΩìÁî®Êà∑ÈÄâË¥≠‰∫ÜÁ¨¨‰∏ÄÈ°πÂïÜÂìÅÔºåÊúçÂä°Âô®Âú®ÂêëÁî®Êà∑ÂèëÈÄÅÁΩëÈ°µÁöÑÂêåÊó∂ÔºåËøòÂèëÈÄÅ‰∫Ü‰∏ÄÊÆµ CookieÔºåËÆ∞ÂΩïÁùÄÈÇ£È°πÂïÜÂìÅÁöÑ‰ø°ÊÅØ„ÄÇÂΩìÁî®Êà∑ËÆøÈóÆÂè¶‰∏Ä‰∏™È°µÈù¢ÔºåÊµèËßàÂô®‰ºöÊää Cookie ÂèëÈÄÅÁªôÊúçÂä°Âô®Ôºå‰∫éÊòØÊúçÂä°Âô®Áü•ÈÅì‰ªñ‰πãÂâçÈÄâË¥≠‰∫Ü‰ªÄ‰πà„ÄÇÁî®Êà∑ÁªßÁª≠ÈÄâË¥≠È•ÆÊñôÔºåÊúçÂä°Âô®Â∞±Âú®ÂéüÊù•ÈÇ£ÊÆµ Cookie Ë£°ËøΩÂä†Êñ∞ÁöÑÂïÜÂìÅ‰ø°ÊÅØ„ÄÇÁªìÂ∏êÊó∂ÔºåÊúçÂä°Âô®ËØªÂèñÂèëÈÄÅÊù•ÁöÑ Cookie Âç≥ÂèØ„ÄÇ</p>
<p>Cookie Âè¶‰∏Ä‰∏™ÂÖ∏ÂûãÁöÑÂ∫îÁî®ÊòØÂΩìÁôªÂΩï‰∏Ä‰∏™ÁΩëÁ´ôÊó∂ÔºåÁΩëÁ´ôÂæÄÂæÄ‰ºöËØ∑Ê±ÇÁî®Êà∑ËæìÂÖ•Áî®Êà∑ÂêçÂíåÂØÜÁ†ÅÔºåÂπ∂‰∏îÁî®Êà∑ÂèØ‰ª•ÂãæÈÄâ‚Äú‰∏ãÊ¨°Ëá™Âä®ÁôªÂΩï‚Äù„ÄÇÂ¶ÇÊûúÂãæÈÄâ‰∫ÜÔºåÈÇ£‰πà‰∏ãÊ¨°ËÆøÈóÆÂêå‰∏ÄÁΩëÁ´ôÊó∂ÔºåÁî®Êà∑‰ºöÂèëÁé∞Ê≤°ËæìÂÖ•Áî®Êà∑ÂêçÂíåÂØÜÁ†ÅÂ∞±Â∑≤ÁªèÁôªÂΩï‰∫Ü„ÄÇËøôÊ≠£ÊòØÂõ†‰∏∫Ââç‰∏ÄÊ¨°ÁôªÂΩïÊó∂ÔºåÊúçÂä°Âô®ÂèëÈÄÅ‰∫ÜÂåÖÂê´ÁôªÂΩïÂá≠ÊçÆÔºàÁî®Êà∑ÂêçÂä†ÂØÜÁ†ÅÁöÑÊüêÁßçÂä†ÂØÜÂΩ¢ÂºèÔºâÁöÑ Cookie Âà∞Áî®Êà∑ÁöÑÁ°¨Áõò‰∏ä„ÄÇÁ¨¨‰∫åÊ¨°ÁôªÂΩïÊó∂ÔºåÂ¶ÇÊûúËØ• Cookie Â∞öÊú™Âà∞ÊúüÔºåÊµèËßàÂô®‰ºöÂèëÈÄÅËØ• CookieÔºåÊúçÂä°Âô®È™åËØÅÂá≠ÊçÆÔºå‰∫éÊòØ‰∏çÂøÖËæìÂÖ•Áî®Êà∑ÂêçÂíåÂØÜÁ†ÅÂ∞±ËÆ©Áî®Êà∑ÁôªÂΩï‰∫Ü„ÄÇ</p>
<ol start="2">
<li>ÂàÜÁ±ª</li>
</ol>
<p>Cookie ‰øùÂ≠òÂú®ÂÆ¢Êà∑Á´Ø‰∏≠ÔºåÊåâÂú®ÂÆ¢Êà∑Á´Ø‰∏≠ÁöÑÂ≠òÂÇ®‰ΩçÁΩÆÔºåÂèØÂàÜ‰∏∫ÂÜÖÂ≠ò Cookie ÂíåÁ°¨Áõò Cookie„ÄÇ</p>
<p>ÂÜÖÂ≠ò Cookie Áî±ÊµèËßàÂô®Áª¥Êä§Ôºå‰øùÂ≠òÂú®ÂÜÖÂ≠ò‰∏≠ÔºåÊµèËßàÂô®ÂÖ≥Èó≠Âç≥Ê∂àÂ§±ÔºåÂ≠òÂú®Êó∂Èó¥Áü≠ÊöÇ„ÄÇÁ°¨Áõò Cookie ‰øùÂ≠òÂú®Á°¨ÁõòË£°ÔºåÊúâËøáÊúüÊó∂Èó¥ÔºåÈô§ÈùûÁî®Êà∑ÊâãÂä®Ê∏ÖÁêÜÊàñÂà∞‰∫ÜËøáÊúüÊó∂Èó¥ÔºåÁ°¨Áõò Cookie ‰∏ç‰ºöÊ∏ÖÈô§ÔºåÂ≠òÂú®Êó∂Èó¥ËæÉÈïø„ÄÇÊâÄ‰ª•ÔºåÊåâÂ≠òÂú®Êó∂Èó¥ÔºåÂèØÂàÜ‰∏∫ÈùûÊåÅ‰πÖ Cookie ÂíåÊåÅ‰πÖ Cookie„ÄÇ</p>
<ol start="3">
<li>Áº∫Èô∑</li>
</ol>
<ul>
<li>Cookie ‰ºöË¢´ÈôÑÂä†Âú®ÊØè‰∏™ HTTP ËØ∑Ê±Ç‰∏≠ÔºåÊâÄ‰ª•Êó†ÂΩ¢‰∏≠Â¢ûÂä†‰∫ÜÊµÅÈáè„ÄÇ</li>
<li>Áî±‰∫é HTTP ËØ∑Ê±Ç‰∏≠ÁöÑ Cookie ÊòØÊòéÊñá‰º†ÈÄíÁöÑÔºåÊâÄ‰ª•ÂÆâÂÖ®ÊÄßÊàêÈóÆÈ¢òÔºåÈô§Èùû‰ΩøÁî® <em>Ë∂ÖÊñáÊú¨‰º†ËæìÂÆâÂÖ®ÂçèÂÆö(HTTPs)</em> „ÄÇ</li>
<li>Cookie ÁöÑÂ§ßÂ∞èÈôêÂà∂Âú® 4 KB Â∑¶Âè≥ÔºåÂØπ‰∫éÂ§çÊùÇÁöÑÂ≠òÂÇ®ÈúÄÊ±ÇÊù•ËØ¥ÊòØ‰∏çÂ§üÁî®ÁöÑ„ÄÇ</li>
</ul>
<hr>
<p>HTTP Elements:</p>
<ul>
<li><p><strong>Universal Resource Identifiers (URIs, Áªü‰∏ÄËµÑÊ∫êÊ†áËØÜÁ¨¶) :</strong> URIs are basically URLs or address which point to specific resources. An example URI is like: <code>http://www.example.com/tasks/term=homework</code> . It has certain components:</p>
<ul>
<li><strong>Scheme:</strong> specifies the protocol used to access the resource, HTTP or HTTPS. In our example <code>http</code> .</li>
<li><strong>Host:</strong> specifies the host that holds the resources. In our example <code>www.example.com</code> .</li>
<li><strong>Path:</strong> specifies the specific resource being requested. In our example, <code>/tasks</code> .</li>
<li><strong>Query:</strong> an optional component, the query string provides information the resource can use for some purpose such as a search parameter. In our example it is <code>/term=homework</code> .</li>
</ul>
</li>
<li><p><strong>Messages :</strong> Requests and Responses.</p>
</li>
<li><p><strong>Status Code :</strong> e.g. 404 NOT FOUND </p>
</li>
</ul>
<hr>
<p>ü¶ì Supplement: <code>URI</code> vs. <code>URL</code></p>
<p>You may be unsure what the difference is between a <strong>URI (Universal Resource Identifier)</strong> and a <strong>URL (Universal Resource Locator)</strong> . These terms tend to get confused a lot, and are even frequently used interchangeably‚Äîbut there is a distinction.</p>
<p>The term URI can refer to any identifier for a resource‚Äîfor example, it could be either the name of a resource or the address of a resource (since both the name and address are identifiers of that resource). In contrast, URL only refers to the location of a resource‚Äîin other words, it only ever refers to an address.</p>
<p>So, ‚ÄúURI‚Äù could refer to a name or an address, while ‚ÄúURL‚Äù only refers to an address. Thus, URLs are a specific type of URI that is used to locate a resource on the internet when a client makes a request to a server.</p>
<hr>
<p>üêë <strong>Resource</strong> : <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview">MDN Web Docs - An overview of HTTP</a></p>
<h3 id="HTTP-Requests-and-Responses"><a href="#HTTP-Requests-and-Responses" class="headerlink" title="HTTP Requests and Responses"></a>HTTP Requests and Responses</h3><h4 id="Requests"><a href="#Requests" class="headerlink" title="Requests"></a>Requests</h4><p>HTTP requests are sent from the client to the server to initiate some operation. it has some elements to specify the requested resource.</p>
<ul>
<li>Method: Defines the operation to be performed.</li>
<li>Path: The URL of the resource to be fetched, excluding the scheme and host.</li>
<li>HTTP Version</li>
<li>Headers: optional information, success as Accept-Language.</li>
<li>Body: optional information, usually for methods such as <code>POST</code> and <code>PATCH</code>, which contain the resource being sent to the server</li>
</ul>
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-I/http-request1.JPG" class="">
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-I/http-request2.JPG" class="">

<p>Let‚Äôs take a look at some common used HTTP request methods.</p>
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-I/http-request-methods.JPG" class="">

<h4 id="Responses"><a href="#Responses" class="headerlink" title="Responses"></a>Responses</h4><p>After the request has been received by the server and processed, the server returns an HTTP response message to the client.</p>
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-I/http-response.JPG" class="">

<p>As an API developer, it‚Äôs important to send the correct status code. As a developer using an API, the status codes, particularly the error codes, are important for understanding what caused an error and how to proceed.</p>
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-I/http-status-code.JPG" class="">

<hr>
<p>ü¶î Resource: </p>
<p><a href="https://httpstatusdogs.com/">1. HTTP Dogs</a></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status">2. MDN Web Docs - HTTP response status codes</a></p>
<h3 id="Flasks"><a href="#Flasks" class="headerlink" title="Flasks"></a>Flasks</h3><h4 id="Basic-Flask-App"><a href="#Basic-Flask-App" class="headerlink" title="Basic Flask App"></a>Basic Flask App</h4><p>Next, I will use Flask to create API server.</p>
<p>Flask is a ‚Äúmicro‚Äù framework, which means that its core functionality is kept simple, but that there are numerous extensions to allow developers to add other functionality (such as authentication and database support).</p>
<p>Let‚Äôs creat a basic Flask application,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~$ mkdir flask-example</span><br><span class="line">~$ <span class="built_in">cd</span> flask-example</span><br><span class="line">~$ mkdir flaskr</span><br><span class="line">~$ <span class="built_in">cd</span> flaskr</span><br><span class="line">~$ touch __init__.py</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>(<span class="params">test_config=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># create and configure the app</span></span><br><span class="line">    app = Flask(__name__, instance_relative_config=<span class="literal">True</span>)</span><br><span class="line">    app.config.from_mapping(</span><br><span class="line">        SECRET_KEY=<span class="string">&#x27;dev&#x27;</span>,</span><br><span class="line">        DATABASE=os.path.join(app.instance_path, <span class="string">&#x27;flaskr.sqlite&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> test_config <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># load the instance config, if it exists, when not testing</span></span><br><span class="line">        app.config.from_pyfile(<span class="string">&#x27;config.py&#x27;</span>, silent=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># load the test config if passed in</span></span><br><span class="line">        app.config.from_mapping(test_config)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># endpoint: a simple page that says hello</span></span><br><span class="line">    <span class="comment"># By default, Flask `@app.route` decorators only respond to GET requests.</span></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">        <span class="comment"># jsonify:return json data to the client</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure>

<p>And run the above Flask app using commands,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">~$ <span class="built_in">cd</span> ..</span><br><span class="line">~$ <span class="built_in">pwd</span></span><br><span class="line">flask-example</span><br><span class="line">~$ <span class="built_in">cd</span> flask-example</span><br><span class="line">~$ <span class="built_in">export</span> FLASK_APP=flaskr</span><br><span class="line">~$ <span class="built_in">export</span> FLASK_ENV=development</span><br><span class="line">~$ flask run</span><br></pre></td></tr></table></figure>

<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-I/project-structure.JPG" class="" title="Flask project structure">

<hr>
<p>üçÑ <strong>Â∫îÁî®Â∑•ÂéÇ</strong></p>
<p>‰∏Ä‰∏™FlaskÂ∫îÁî®Â∫îËØ•ÊòØ‰∏Ä‰∏™ <code>Flask</code> Á±ªÁöÑÂÆû‰æãÔºåÂ∫îÁî®ÁöÑÊâÄÊúâ‰∏úË•øÔºåÂ¶ÇÈÖçÁΩÆÂíåURLÔºåÈÉΩ‰ºöÂíåËøô‰∏™ÂÆû‰æã‰∏ÄËµ∑Ê≥®ÂÜå„ÄÇ</p>
<p>ÂàõÂª∫‰∏Ä‰∏™FlaskÂ∫îÁî®ÊúÄÁÆÄÂçïÁöÑÊñπÊ≥ïÂ∞±ÊòØÂú®‰ª£Á†Å‰∏ÄÂºÄÂàõÂª∫‰∏Ä‰∏™ÂÖ®Â±ÄÁöÑFlaskÂÆû‰æãÔºåÂ∞±ÂÉèÊàë‰ª¨‰πãÂâçËÆ≤ÁöÑÈÇ£Ê†∑Ôºå</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flask_hello_app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure>

<p>ÂΩìÈ°πÁõÆË∂äÊù•Ë∂äÂ§ßÁöÑÊó∂ÂÄôÔºåËøôÁßçÊñπÊ≥ïÂ∞±‰∏çÂ§™Â•ΩÁöÑ„ÄÇÂèñËÄå‰ª£‰πãÁöÑÊòØÔºåÊàë‰ª¨ÂèØ‰ª•Âú®‰∏Ä‰∏™ÂáΩÊï∞ÂÜÖÈÉ®ÂàõÂª∫FlaskÂÆû‰æãÊù•‰ª£ÊõøÂàõÂª∫ÂÖ®Â±ÄÂÆû‰æã„ÄÇËøô‰∏™ÂáΩÊï∞Ë¢´Áß∞‰∏∫<strong>Â∫îÁî®Â∑•ÂéÇ</strong>ÔºåÊâÄÊúâÂ∫îÁî®Áõ∏ÂÖ≥ÁöÑÈÖçÁΩÆ„ÄÅÊ≥®ÂÜåÂíåÂÖ∂‰ªñËÆæÁΩÆÈÉΩ‰ºöÂú®ÂáΩÊï∞ÂÜÖÈÉ®ÂÆåÊàêÔºå ÁÑ∂ÂêéËøîÂõûËøô‰∏™Â∫îÁî®„ÄÇ</p>
<p>‰∏äÈù¢ÁöÑ ‚Äú__init.py__‚Äù Êñá‰ª∂Êúâ‰∏§‰∏™‰ΩúÁî®Ôºö1ÔºâÂåÖÂê´Â∫îÁî®Â∑•ÂéÇÔºõ2ÔºâÂëäËØâPythonÂ∫îÂΩìËßÜ‚Äúflaskr‚ÄùÊñá‰ª∂Â§π‰∏∫‰∏Ä‰∏™package„ÄÇ</p>
<p>‰∏∫‰∫ÜÂêØÂä®ÂàõÂª∫ÁöÑFlaskÂ∫îÁî®ÔºåÊàë‰ª¨Âú®terminal‰ΩøÁî®‰∏ãÈù¢‰∏âË°åÂëΩ‰ª§Ôºå</p>
<blockquote>
<p>export FLASK_APP=flaskr  # tell the terminal where to find the app<br>export FLASK_ENV=development   # run the app in development mode<br>flask run   # actually start the app</p>
</blockquote>
<p>üçí External Resource: </p>
<ul>
<li><a href="https://dormousehole.readthedocs.io/en/latest/tutorial/factory.html">Â∫îÁî®ËÆæÁΩÆ</a></li>
<li><a href="https://github.com/rileywang0819/demo-bookshelf-api/blob/master/Flask_Doc_v1.1.4.pdf">Flask Doc: 1.5 Tutorial</a></li>
</ul>
<hr>
<h3 id="Curl"><a href="#Curl" class="headerlink" title="Curl"></a>Curl</h3><p><strong>Curl</strong> is a library and command-line tool that completes IP transfers of data using URLs.</p>
<p>Curl syntax:</p>
<blockquote>
<p>curl -X POST URL<br>curl ‚Äìhelp</p>
</blockquote>
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-I/curl-command-ex.JPG" class="">

<p>Some Examples:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get books</span></span><br><span class="line">~$ curl http://127.0.0.1:5000/books</span><br><span class="line"></span><br><span class="line"><span class="comment"># update a single book&#x27;s rating</span></span><br><span class="line">~$ curl http://127.0.0.1:5000/books/8 -X PATCH -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&#x27;&#123;&quot;rating&quot;:&quot;1&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete a single book</span></span><br><span class="line">~$ curl -X DELETE http://127.0.0.1:5000/books/8 </span><br><span class="line"></span><br><span class="line"><span class="comment"># create a new book</span></span><br><span class="line">~$ curl -X POST -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&#x27;&#123;&quot;title&quot;:&quot;Neverwhere&quot;, &quot;author&quot;:&quot;Neil Gaiman&quot;, &quot;rating&quot;:&quot;5&quot;&#125;&#x27;</span> http://127.0.0.1:5000/books   </span><br></pre></td></tr></table></figure>

<p>By default curl performs a <code>get</code> request, so you don‚Äôt need to use the options flag and specify GET.</p>
<p>Typing the following command to check if you already have the curl locally,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~$ curl --version</span><br></pre></td></tr></table></figure>

<p>And you can refer this <a href="https://everything.curl.dev/get">e-book</a> to install curl.</p>
<p>Tip: you can also download a command-line JSON processor call <a href="https://stedolan.github.io/jq/">jp</a> to make the output more clearly.</p>
<h2 id="Endpoints-and-Payloads"><a href="#Endpoints-and-Payloads" class="headerlink" title="Endpoints and Payloads"></a>Endpoints and Payloads</h2><p>In this section, we‚Äôll learn how to use endpoints and payloads to extend the functionality of the API.</p>
<h3 id="Organize-API-endpoints"><a href="#Organize-API-endpoints" class="headerlink" title="Organize API endpoints"></a>Organize API endpoints</h3><p>When organizing API endpoints, you should follow some principles,</p>
<ul>
<li>Should be intuitive</li>
<li>Organize by resources instead of by actions<ul>
<li>Use nouns in the path, not verbs</li>
<li>The method used will determine the operation taken</li>
<li>Example:<ul>
<li>GOOD: <a href="https://example.com/posts">https://example.com/posts</a></li>
<li>BAD: <a href="https://example.com/create-posts">https://example.com/create-posts</a></li>
</ul>
</li>
</ul>
</li>
<li>Keep a consistent scheme<ul>
<li>Plural nouns for collections</li>
<li>Use parameters to specify a specific item</li>
<li>Example:<ul>
<li>GOOD: <a href="https://example.com/entrees/5">https://example.com/entrees/5</a></li>
<li>BAD: <a href="https://example.com/entree_five">https://example.com/entree_five</a></li>
</ul>
</li>
</ul>
</li>
<li>Don‚Äôt make them too complex or lengthy<ul>
<li>No longer than <code>collection/item/collection</code></li>
<li>Example:<ul>
<li>GOOD: <a href="https://example.com/entrees/5/reviews">https://example.com/entrees/5/reviews</a></li>
<li>BAD: <a href="https://example.com/entrees/5/customers/4/reviews">https://example.com/entrees/5/customers/4/reviews</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>The request mothod used will determine the operation performed for the given resource URI. Though your API documentation should explain exactly what operation is performed and data returned via the response, it should be intuitive for anyone using your API,</p>
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-I/method-reviews.JPG" class="">


<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>If you‚Äôve had a little experience as a web developer, you may have seen an error in the browser:</p>
<blockquote>
<p>No ‚ÄòAccess-Control-Allow-Origin‚Äô header is present on the requested resource</p>
</blockquote>
<p>This error is all about <strong>Cross-Origin Resource Sharing(Ë∑®ÂüüËµÑÊ∫êÂÖ±‰∫´)</strong> or <strong>CORS</strong>.</p>
<h4 id="CORS-1"><a href="#CORS-1" class="headerlink" title="CORS"></a>CORS</h4><p>Before talking about <strong>Cross-Origin Resource Sharing</strong>, let‚Äôs look at <strong>the same-origin policy</strong> firstly.</p>
<p>The same-origin policy is a concept of web security. It allows scripts in Webpage 1 to access data from Webpage 2 <em>only if</em> they share the same domain. This policy is very important because it protects you. Imagine you have 2 pages in your browser, one page contains an advertisement which is embedded with malicious script, and another page is your bank website. The same-origin policy can prevent those malicious scripts from successfully making requests to your bank‚Äôs website as you access the website hosting the advertisement.</p>
<p>So, if we try to make requests from: </p>
<ul>
<li>Different domains</li>
<li>Different subdomains (<code>example.com</code> and <code>api.example.com</code>)</li>
<li>Different ports (<code>example.com</code> and <code>example.com:1234</code>)</li>
<li>Different protocols (<code>http://example.com</code> and <code>https://example.com</code>)</li>
</ul>
<p>it will trigger CORS.</p>
<p>As a developer, if you‚Äôre sending any requests beyond very simple <code>GET</code> or <code>POST</code> requests, then before your actual request is sent, the browser sends a <em>preflight OPTIONS request</em> to the server. If CORS is not enabled, then the browser will not respond properly and the actual request will not be sent, and the above error will be raised.</p>
<p>In order for the requests to be processed properly, CORS utilizes HTTP response headers to specify what the server will allow:</p>
<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-I/CORS.JPG" class="">

<p>CORS strategy is needed to make the frontend communicate properly since a different host serves it than your Python‚Äôs backend. However, you should be careful while working with it since it can expose risk for your application if not handled safely.</p>
<p>üçß External Resource: <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">MDN Web Docs - CORS</a></p>
<h4 id="Flask-CORS"><a href="#Flask-CORS" class="headerlink" title="Flask-CORS"></a>Flask-CORS</h4><p><strong>Flask-CORS</strong> is an extension library of Flask for handling CORS.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install the flask_cors dependency</span></span><br><span class="line">~$ pip install -U flask-cors</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check the specific version</span></span><br><span class="line">~$ pip show flask-cors</span><br></pre></td></tr></table></figure>

<p>Now, let‚Äôs try to use Flask-CORS library to enable CORS on a simple application.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS, cross_origin</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> setup_db, Bookshelf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>(<span class="params">test_config=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># create and configure the app</span></span><br><span class="line">    app = Flask(__name__, instance_relative_config=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># resources=&#123;&#125;</span></span><br><span class="line">    <span class="comment"># 1st element: specify what resources we&#x27;re talking about</span></span><br><span class="line">    <span class="comment"># 2nd element: specify what origins from the client can access those resources</span></span><br><span class="line">    <span class="comment"># cors = CORS(app, resources=&#123;r&quot;*/api/*&quot;: &#123;&quot;origins&quot;: &quot;*&quot;&#125;&#125;)</span></span><br><span class="line">    cors = CORS(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.after_request</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">after_request</span>(<span class="params">response</span>):</span></span><br><span class="line">        response.headers.add(</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Type, Authorization&#x27;</span></span><br><span class="line">        )</span><br><span class="line">        response.headers.add(</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;GET, POST, PATCH, DELETE, OPTION&#x27;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">    @cross_origin()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">        <span class="comment"># jsonify:return json data to the client</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure>

<p>üçß External Resource: <a href="https://flask-cors.readthedocs.io/en/latest/#">Flask-CORS Doc</a></p>
<h3 id="Flask-Pagination"><a href="#Flask-Pagination" class="headerlink" title="Flask Pagination"></a>Flask Pagination</h3><p>When using <code>GET</code> request, you can retrieve data of the the given URI. However, sending huge sets of data all to the frontend at once is bad for speed, and will reduce the quality of users‚Äô experience. So when handling large collections of data, what we want to do is <strong>paginate</strong> the data using query parameters and request arguments, and send it in chunks.</p>
<h5 id="Query-Parameters"><a href="#Query-Parameters" class="headerlink" title="Query Parameters"></a>Query Parameters</h5><p>Query parameters convention dictates that,</p>
<ul>
<li>A question mark precedes the query parameters.</li>
<li>Parameters are in key=value pairs with an equal sign in between the key and value.</li>
<li>Sets of parameters are separated by an ampersand.</li>
</ul>
<p>For example,</p>
<blockquote>
<p><a href="http://www.example.com/entrees?page=1">www.example.com/entrees?page=1</a><br><a href="http://www.example.com/entrees?page=1&amp;allergens=peanut">www.example.com/entrees?page=1&amp;allergens=peanut</a></p>
</blockquote>
<h5 id="Request-Arguments"><a href="#Request-Arguments" class="headerlink" title="Request Arguments"></a>Request Arguments</h5><p><code>request.args</code> is a Python dictionary.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/entrees&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_entrees</span>():</span></span><br><span class="line">    page = request.args.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>


<img src="/2021/07/17/Web%20Development/Full%20Stack%20Web%20Dev%20Program/Web-Dev-2-API-Dev-and-Doc-I/request-properties.png" class="" title="Request Properties Examples">

<h4 id="Pagination-Example"><a href="#Pagination-Example" class="headerlink" title="Pagination Example"></a>Pagination Example</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paginate_books</span>(<span class="params">request, books</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Paginate the books. &quot;&quot;&quot;</span></span><br><span class="line">    page = request.args.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">    start = (page - <span class="number">1</span>) * BOOKS_PER_SHELF</span><br><span class="line">    end = start + BOOKS_PER_SHELF</span><br><span class="line">    formatted_books = [book.<span class="built_in">format</span>() <span class="keyword">for</span> book <span class="keyword">in</span> books]</span><br><span class="line">    current_books = formatted_books[start: end]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> current_books</span><br></pre></td></tr></table></figure>

<p>This implementation is straightforward, but can cause problems in the long run: If the dataset becomes too large, it can introduce a lack of memory and application unresponsiveness which is terrible for the end-users.</p>
<p>So, it is recommended that we should implement pagination by leveraging controls to the database operations rather than manipulating the output to shape pagination.</p>
<p>Let‚Äôs look at an example.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">books_limit = request.args.get(<span class="string">&#x27;limit&#x27;</span>, <span class="number">10</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">selected_page = request.args.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">start_index = (selected_page - <span class="number">1</span>) * books_limit</span><br><span class="line"></span><br><span class="line">books = Book.query.order_by(Book.<span class="built_in">id</span>).limit(</span><br><span class="line">    books_limit</span><br><span class="line">    ).offset(start_index).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>





<h3 id="Flask-Error-Handling"><a href="#Flask-Error-Handling" class="headerlink" title="Flask Error Handling"></a>Flask Error Handling</h3><p>Until now, the only way that we know how to handle errors is by using <code>abort</code>, but those are not insufficient. </p>
<p><code>abort()</code> will return an HTML which is hard to read. We should also send JSON back when request fails, since the cilent needs clearer information about the exact error. And that‚Äôs where something call <strong>@app.errorhandler decorator</strong> comes in.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)  </span><span class="comment"># pass the status code or Python error</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_found</span>(<span class="params">error</span>):</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">        <span class="string">&quot;success&quot;</span>: <span class="literal">False</span>, </span><br><span class="line">        <span class="string">&quot;error&quot;</span>: <span class="number">404</span>,</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Not found&quot;</span></span><br><span class="line">        &#125;), <span class="number">404</span></span><br></pre></td></tr></table></figure>

<h3 id="Synthesis"><a href="#Synthesis" class="headerlink" title="Synthesis"></a>Synthesis</h3><p>Let‚Äôs synthesize the knowledge we‚Äôve learnt so far, and make an implementation of bookshelf api.</p>
<p>You can check the frontend code in <a href="https://github.com/rileywang0819/demo-bookshelf-api/tree/master/frontend">Github</a></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort, jsonify</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy  <span class="comment"># , or_</span></span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> setup_db, Book</span><br><span class="line"></span><br><span class="line">BOOKS_PER_SHELF = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paginate_books</span>(<span class="params">request, books</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Paginate the books. &quot;&quot;&quot;</span></span><br><span class="line">    page = request.args.get(<span class="string">&#x27;page&#x27;</span>, <span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">    start = (page - <span class="number">1</span>) * BOOKS_PER_SHELF</span><br><span class="line">    end = start + BOOKS_PER_SHELF</span><br><span class="line">    formatted_books = [book.<span class="built_in">format</span>() <span class="keyword">for</span> book <span class="keyword">in</span> books]</span><br><span class="line">    current_books = formatted_books[start: end]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> current_books</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>(<span class="params">test_config=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="comment"># create and configure the app</span></span><br><span class="line">    app = Flask(__name__, instance_relative_config=<span class="literal">True</span>)</span><br><span class="line">    setup_db(app)</span><br><span class="line">    <span class="comment"># resources=&#123;...&#125;</span></span><br><span class="line">    <span class="comment"># 1st element: specify what resources we&#x27;re talking about</span></span><br><span class="line">    <span class="comment"># 2nd element: specify what origins from the client can access those resources</span></span><br><span class="line">    <span class="comment"># cors = CORS(app, resources=&#123;r&quot;*/api/*&quot;: &#123;&quot;origins&quot;: &quot;*&quot;&#125;&#125;)</span></span><br><span class="line">    CORS(app)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># CORS Headers</span></span><br><span class="line"><span class="meta">    @app.after_request</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">after_request</span>(<span class="params">response</span>):</span></span><br><span class="line">        response.headers.add(</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Type,Authorization,true&#x27;</span></span><br><span class="line">        )</span><br><span class="line">        response.headers.add(</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;GET,PUT,POST,DELETE,OPTIONS&#x27;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/books&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_books</span>():</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Retrieves all books, paginated. &quot;&quot;&quot;</span></span><br><span class="line">        books = Book.query.order_by(Book.<span class="built_in">id</span>).<span class="built_in">all</span>()</span><br><span class="line">        current_books = paginate_books(request, books)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(current_books) == <span class="number">0</span>:</span><br><span class="line">            abort(<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&#x27;books&#x27;</span>: current_books,</span><br><span class="line">            <span class="string">&#x27;total_books&#x27;</span>: <span class="built_in">len</span>(books)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/books/&lt;int:book_id&gt;&#x27;</span>, methods=[<span class="string">&#x27;PATCH&#x27;</span>]</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_rating</span>(<span class="params">book_id</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Update a specific book&#x27;s rating. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            book = Book.query.filter_by(<span class="built_in">id</span>=book_id).one_or_none()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> book <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                abort(<span class="number">404</span>)</span><br><span class="line">            new_rating = request.get_json().get(<span class="string">&#x27;rating&#x27;</span>)</span><br><span class="line">            book.rating = new_rating</span><br><span class="line">            book.update()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">                <span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: book.<span class="built_in">id</span></span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            abort(<span class="number">400</span>)  <span class="comment"># bad request</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/books/&lt;int:book_id&gt;&#x27;</span>, methods=[<span class="string">&#x27;DELETE&#x27;</span>]</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_book</span>(<span class="params">book_id</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; Deletes a specific book. &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            book = Book.query.filter_by(<span class="built_in">id</span>=book_id).one_or_none()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> book <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                abort(<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">            book.delete()</span><br><span class="line">            books = Book.query.order_by(Book.<span class="built_in">id</span>).<span class="built_in">all</span>()</span><br><span class="line">            current_books = paginate_books(request, books)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">                <span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">&#x27;deleted&#x27;</span>: book_id,</span><br><span class="line">                <span class="string">&#x27;books&#x27;</span>: current_books,</span><br><span class="line">                <span class="string">&#x27;total_books&#x27;</span>: <span class="built_in">len</span>(books)</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            abort(<span class="number">422</span>)  <span class="comment"># unprocessable entity</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/books&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_book</span>():</span></span><br><span class="line">        body = request.get_json()</span><br><span class="line">        new_title = body.get(<span class="string">&#x27;title&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        new_author = body.get(<span class="string">&#x27;author&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        new_rating = body.get(<span class="string">&#x27;rating&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            book = Book(title=new_title, author=new_author, rating=new_rating)</span><br><span class="line">            book.insert()</span><br><span class="line">            books = Book.query.order_by(Book.<span class="built_in">id</span>).<span class="built_in">all</span>()</span><br><span class="line">            current_books = paginate_books(request, books)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">                <span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">&#x27;created&#x27;</span>: book.<span class="built_in">id</span>,</span><br><span class="line">                <span class="string">&#x27;books&#x27;</span>: current_books,</span><br><span class="line">                <span class="string">&#x27;total_books&#x27;</span>: <span class="built_in">len</span>(books)</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            abort(<span class="number">422</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">not_found</span>(<span class="params">error</span>):</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;success&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="number">404</span>,</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Not found&quot;</span></span><br><span class="line">        &#125;), <span class="number">404</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @app.errorhandler(<span class="params"><span class="number">400</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bad_request</span>(<span class="params">error</span>):</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;success&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="number">400</span>,</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Bad Request&quot;</span></span><br><span class="line">        &#125;), <span class="number">400</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">    @app.errorhandler(<span class="params"><span class="number">422</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unprocessable</span>(<span class="params">error</span>):</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;success&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="number">422</span>,</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Unprocessable&quot;</span></span><br><span class="line">        &#125;), <span class="number">422</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">    @app.errorhandler(<span class="params"><span class="number">405</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">not_allowed</span>(<span class="params">error</span>):</span></span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;success&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="number">405</span>,</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Not Allowed Method&quot;</span></span><br><span class="line">        &#125;), <span class="number">405</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web Development</category>
        <category>Full Stack Web Dev Program</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
</search>
